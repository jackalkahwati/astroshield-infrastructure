# Force Nixpacks to use Python only
[build]
builder = "nixpacks"

# Core environment configuration
[build.env]
# Tells Nixpacks to ignore Node completely
NIXPACKS_IGNORE_STACKS = "node"

# Forces detection as Python
NIXPACKS_LANG = "python"

# Specifies that Python code is in the "backend" folder
NIXPACKS_SUBPATH = "backend"

# Python version
PYTHON_VERSION = "3.11"

# Ensure pip and other Python packages are installed
NIXPACKS_PKGS = "python311Packages.python python311Packages.pip python311Packages.setuptools python311Packages.wheel python311Packages.uvicorn"

# Build command from within NIXPACKS_SUBPATH
NIXPACKS_BUILD_CMD = "pip install -r requirements.txt"

# Port for the running application
PORT = "8000"

# Define all build phases explicitly
[build.phases.setup]
nixPkgs = [
    "python311",
    "postgresql_16",
    "gcc",
    "python311Packages.pip",
    "python311Packages.setuptools",
    "python311Packages.wheel",
    "python311Packages.uvicorn"
]
cmds = [
    # Ensure we're in the correct directory
    "cd backend",
    # Create and activate a virtual environment
    "python -m venv /opt/venv",
    # Update pip and core tools
    "/opt/venv/bin/pip install --upgrade pip setuptools wheel"
]

[build.phases.install]
cmds = [
    # Ensure we're in the backend directory
    "cd backend",
    # Install requirements using the virtualenv pip
    "/opt/venv/bin/pip install -r requirements.txt"
]

[build.phases.start]
# Use a shell script to ensure proper environment setup
cmd = """
#!/bin/bash
cd backend
source /opt/venv/bin/activate
export PYTHONPATH=/app/backend:$PYTHONPATH
exec uvicorn app.main:app --host 0.0.0.0 --port $PORT --workers 4
"""

# Health check and deployment configuration
[deploy]
healthcheckPath = "/api/v1/health"
healthcheckTimeout = 100
healthcheckInterval = 15
restartPolicyType = "on_failure"
restartPolicyMaxRetries = 5

# Environment variables for the running application
[deploy.env]
ENVIRONMENT = "production"
PYTHONPATH = "/app/backend"
PYTHONUNBUFFERED = "1"
TZ = "UTC" 