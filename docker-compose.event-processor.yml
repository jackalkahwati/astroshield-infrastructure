version: '3.8'

services:
  # Event Processor Service
  event-processor:
    build:
      context: .
      dockerfile: Dockerfile.event-processor
    ports:
      - "5005:5005"
    volumes:
      - ./app:/app/app
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC_PREFIXES=dmd-od-update,weather-data
      - KAFKA_CONSUMER_GROUP=astroshield-event-processor
      - KAFKA_PRODUCER_CLIENT_ID=astroshield-producer
      - KAFKA_MAX_RETRIES=3
      - KAFKA_RETRY_BACKOFF_MS=100
      - KAFKA_MAX_BACKOFF_MS=5000
      - LOG_LEVEL=INFO
    depends_on:
      - kafka
    networks:
      - astroshield-network
    restart: always

  # Kafka Messaging System
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - astroshield-network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - astroshield-network

  # Kafka UI for monitoring and debugging
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - astroshield-network

  # Demo Simulation Service
  demo-simulator:
    build:
      context: .
      dockerfile: Dockerfile.event-processor
    command: ["python", "simple_demo.py", "10", "5"]
    environment:
      - LOG_LEVEL=INFO
    depends_on:
      - event-processor
      - kafka
    networks:
      - astroshield-network

networks:
  astroshield-network:
    driver: bridge 