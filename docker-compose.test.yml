version: '3.8'

services:
  # Test Nginx with our updated configuration
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./astroshield_landing.html:/usr/share/nginx/html/index.html
      - ./nginx/test-nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - grafana
      - prometheus
    restart: always
    networks:
      - astroshield-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    restart: always
    networks:
      - astroshield-network
    environment:
      - PORT=3001
      - ENVIRONMENT=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana dashboard
  grafana:
    image: grafana/grafana:10.0.3
    networks:
      - astroshield-network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    networks:
      - astroshield-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - astroshield-network
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=astroshield_secure_password_2024
      - POSTGRES_DB=astroshield
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - astroshield-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["redis-server", "--appendonly", "yes"]

volumes:
  postgres_data:
  redis_data:

networks:
  astroshield-network:
    driver: bridge 