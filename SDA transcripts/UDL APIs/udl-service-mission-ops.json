{
  "openapi": "3.0.3",
  "info": {
    "title": "Unified Data Library Services API",
    "version": "1.30.0 Daiquiri",
    "description": "Unified Data Library Services OpenAPI v3 documentation.",
    "termsOfService": "storefront/storefront/appConfig/useragreement.html",
    "contact": {
      "name": "Sage Andorka, Deputy, Cross-Mission Ground",
      "email": "unifieddatalibrary@bluestaq.com"
    }
  },
  "tags": [
    {
      "name": "Mission Ops",
      "description": "These services provide operations for manipulation and querying of Mission Ops information."
    }
  ],
  "externalDocs": {
    "url": "udl/openapi.json"
  },
  "servers": [
    {
      "url": "https://unifieddatalibrary.com"
    }
  ],
  "paths": {
    "/filedrop/udl-effectrequest": {
      "post": {
        "tags": [
          "Mission Ops"
        ],
        "description": "Service operation to take multiple EffectRequests as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_effectrequest_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EffectRequest_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-effectresponse": {
      "post": {
        "tags": [
          "Mission Ops"
        ],
        "description": "Service operation to take multiple EffectResponses as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_effectresponse_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EffectResponse_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-evac": {
      "post": {
        "tags": [
          "Mission Ops"
        ],
        "description": "Service operation to take a list of Evac events as a POST body and ingest into the database. Requires a specific role, please contact the UDL team to gain access. This operation is intended to be used for automated feeds into UDL.\n",
        "operationId": "filedrop_udl_evac_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Evac_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-personnelrecovery": {
      "post": {
        "tags": [
          "Mission Ops"
        ],
        "description": "Service operation to take a list of Personnel Recovery records as a POST body and ingest into the database. Requires a specific role, please contact the UDL team to gain access. This operation is intended to be used for automated feeds into UDL.\n",
        "operationId": "filedrop_udl_personnelrecovery_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonnelRecovery_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/effectrequest": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EffectRequest_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single EffectRequest as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Mission Ops"
        ],
        "requestBody": {
          "description": "JSON UDL representation of the EffectRequest to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EffectRequest_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/effectrequest/{id}": {
      "get": {
        "description": "Service operation to get a single EffectRequest by its unique ID passed as a path parameter.",
        "tags": [
          "Mission Ops"
        ],
        "parameters": [
          {
            "description": "The ID of the EffectRequest to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EffectRequest_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/effectrequest/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/effectrequest/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of EffectRequest records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Mission Ops"
        ],
        "requestBody": {
          "description": "JSON representation of multiple UDL EffectRequest.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EffectRequest_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/effectrequest/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EffectRequest_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/effectrequest/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/effectrequest/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/effectrequest/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/effectrequest/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Mission Ops"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EffectRequest_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/effectresponse": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EffectResponse_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single EffectResponse as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Mission Ops"
        ],
        "requestBody": {
          "description": "JSON UDL representation of the EffectResponse to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EffectResponse_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/effectresponse/{id}": {
      "get": {
        "description": "Service operation to get a single EffectResponse by its unique ID passed as a path parameter.",
        "tags": [
          "Mission Ops"
        ],
        "parameters": [
          {
            "description": "The ID of the EffectResponse to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EffectResponse_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/effectresponse/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/effectresponse/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of EffectResponse records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Mission Ops"
        ],
        "requestBody": {
          "description": "JSON representation of multiple UDL EffectResponses.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EffectResponse_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/effectresponse/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EffectResponse_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/effectresponse/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/effectresponse/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/effectresponse/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/effectresponse/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Mission Ops"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EffectResponse_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/evac": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Evac_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "reqTime",
            "description": "The request time, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single evac as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Mission Ops"
        ],
        "requestBody": {
          "description": "JSON representation of one Evac record.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Evac_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/evac/{id}": {
      "get": {
        "description": "Service operation to get a single Evac by its unique ID passed as a path parameter.",
        "tags": [
          "Mission Ops"
        ],
        "parameters": [
          {
            "description": "The ID of the Evac to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evac_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/evac/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "reqTime",
            "description": "The request time, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/evac/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of Evac records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Mission Ops"
        ],
        "requestBody": {
          "description": "JSON representation of list of a Evac records.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Evac_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/evac/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reqTime",
            "description": "The request time, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Evac_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/evac/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "reqTime",
            "description": "The request time, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/evac/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/evac/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Mission Ops"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reqTime",
            "description": "The request time, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Evac_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/personnelrecovery": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonnelRecovery_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "msgTime",
            "description": "Time stamp of the original personnel recovery message, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single Personnel Recovery object as a POST body and ingest into the database. Requires a specific role, please contact the UDL team to gain access.",
        "tags": [
          "Mission Ops"
        ],
        "requestBody": {
          "description": "JSON representation of one personnel recovery object.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonnelRecovery_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/personnelrecovery/{id}": {
      "get": {
        "description": "Service operation to get a single PersonnelRecovery by its unique ID passed as a path parameter.",
        "tags": [
          "Mission Ops"
        ],
        "parameters": [
          {
            "description": "The ID of the PersonnelRecovery to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonnelRecovery_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/personnelrecovery/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "msgTime",
            "description": "Time stamp of the original personnel recovery message, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/personnelrecovery/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of Personnel Recovery records as a POST body and ingest into the database. Requires specific roles, please contact the UDL team to gain access. This operation is not intended to be used for automated feeds into UDL...data providers should contact the UDL team for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Mission Ops"
        ],
        "requestBody": {
          "description": "JSON representation of list of Personnel Recovery records.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonnelRecovery_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/personnelrecovery/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msgTime",
            "description": "Time stamp of the original personnel recovery message, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonnelRecovery_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/personnelrecovery/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "msgTime",
            "description": "Time stamp of the original personnel recovery message, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/personnelrecovery/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Mission Ops"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/personnelrecovery/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Mission Ops"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msgTime",
            "description": "Time stamp of the original personnel recovery message, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonnelRecovery_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EffectRequest_Abridged": {
        "description": "A request for various effects on a target.",
        "required": [
          "classificationMarking",
          "effectList",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EFFECTREQUEST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "externalRequestId": {
            "description": "The extenal system identifier of this request. A human readable unique id.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNALREQUEST-ID"
          },
          "effectList": {
            "description": "List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "COVER",
              "DECEIVE"
            ]
          },
          "state": {
            "description": "State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).",
            "maxLength": 24,
            "type": "string",
            "example": "CREATED"
          },
          "context": {
            "description": "Specific descriptive instantiation of the effect, e.g., playbook to be used.",
            "maxLength": 256,
            "type": "string",
            "example": "Example Notes"
          },
          "startTime": {
            "format": "date-time",
            "description": "The time the effect should start, in ISO8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The time the effect should end, in ISO8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "deadlineType": {
            "description": "The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):\nBETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late\nIMMEDIATE:&nbsp;Start as soon as possible, earlier is always better\nNOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later\nNOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.",
            "maxLength": 24,
            "type": "string",
            "example": "NoLaterThan"
          },
          "targetSrcType": {
            "description": "The source type of the targetId identifier (POI, TRACK).",
            "maxLength": 24,
            "type": "string",
            "example": "POI"
          },
          "targetSrcId": {
            "description": "The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.",
            "maxLength": 36,
            "type": "string",
            "example": "TARGETSRC-ID"
          },
          "priority": {
            "description": "The priority (LOW, MEDIUM, HIGH) of this request.",
            "maxLength": 24,
            "type": "string",
            "example": "LOW"
          },
          "modelClass": {
            "description": "The type or class of the preference model used to evaluate this offer.",
            "maxLength": 256,
            "type": "string",
            "example": "Preference model"
          },
          "metricTypes": {
            "description": "Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "COST",
              "RISK"
            ]
          },
          "metricWeights": {
            "description": "Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.5,
              0.6
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "EffectRequest_Full": {
        "description": "A request for various effects on a target.",
        "required": [
          "classificationMarking",
          "effectList",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EFFECTREQUEST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "externalRequestId": {
            "description": "The extenal system identifier of this request. A human readable unique id.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNALREQUEST-ID"
          },
          "effectList": {
            "description": "List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "COVER",
              "DECEIVE"
            ]
          },
          "state": {
            "description": "State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).",
            "maxLength": 24,
            "type": "string",
            "example": "CREATED"
          },
          "context": {
            "description": "Specific descriptive instantiation of the effect, e.g., playbook to be used.",
            "maxLength": 256,
            "type": "string",
            "example": "Example Notes"
          },
          "startTime": {
            "format": "date-time",
            "description": "The time the effect should start, in ISO8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The time the effect should end, in ISO8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "deadlineType": {
            "description": "The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):\nBETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late\nIMMEDIATE:&nbsp;Start as soon as possible, earlier is always better\nNOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later\nNOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.",
            "maxLength": 24,
            "type": "string",
            "example": "NoLaterThan"
          },
          "targetSrcType": {
            "description": "The source type of the targetId identifier (POI, TRACK).",
            "maxLength": 24,
            "type": "string",
            "example": "POI"
          },
          "targetSrcId": {
            "description": "The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.",
            "maxLength": 36,
            "type": "string",
            "example": "TARGETSRC-ID"
          },
          "priority": {
            "description": "The priority (LOW, MEDIUM, HIGH) of this request.",
            "maxLength": 24,
            "type": "string",
            "example": "LOW"
          },
          "modelClass": {
            "description": "The type or class of the preference model used to evaluate this offer.",
            "maxLength": 256,
            "type": "string",
            "example": "Preference model"
          },
          "metricTypes": {
            "description": "Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "COST",
              "RISK"
            ]
          },
          "metricWeights": {
            "description": "Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.5,
              0.6
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "EffectRequest_Ingest": {
        "description": "A request for various effects on a target.",
        "required": [
          "classificationMarking",
          "effectList",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EFFECTREQUEST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "externalRequestId": {
            "description": "The extenal system identifier of this request. A human readable unique id.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNALREQUEST-ID"
          },
          "effectList": {
            "description": "List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "COVER",
              "DECEIVE"
            ]
          },
          "state": {
            "description": "State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).",
            "maxLength": 24,
            "type": "string",
            "example": "CREATED"
          },
          "context": {
            "description": "Specific descriptive instantiation of the effect, e.g., playbook to be used.",
            "maxLength": 256,
            "type": "string",
            "example": "Example Notes"
          },
          "startTime": {
            "format": "date-time",
            "description": "The time the effect should start, in ISO8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The time the effect should end, in ISO8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "deadlineType": {
            "description": "The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):\nBETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late\nIMMEDIATE:&nbsp;Start as soon as possible, earlier is always better\nNOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later\nNOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.",
            "maxLength": 24,
            "type": "string",
            "example": "NoLaterThan"
          },
          "targetSrcType": {
            "description": "The source type of the targetId identifier (POI, TRACK).",
            "maxLength": 24,
            "type": "string",
            "example": "POI"
          },
          "targetSrcId": {
            "description": "The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.",
            "maxLength": 36,
            "type": "string",
            "example": "TARGETSRC-ID"
          },
          "priority": {
            "description": "The priority (LOW, MEDIUM, HIGH) of this request.",
            "maxLength": 24,
            "type": "string",
            "example": "LOW"
          },
          "modelClass": {
            "description": "The type or class of the preference model used to evaluate this offer.",
            "maxLength": 256,
            "type": "string",
            "example": "Preference model"
          },
          "metricTypes": {
            "description": "Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "COST",
              "RISK"
            ]
          },
          "metricWeights": {
            "description": "Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.5,
              0.6
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "EffectResponse_Abridged": {
        "description": "A response for various effects on a target.",
        "required": [
          "classificationMarking",
          "type",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EFFECTRESPONSE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idEffectRequest": {
            "description": "Unique identifier of the EffectRequest associated with this response.",
            "maxLength": 36,
            "type": "string",
            "example": "EFFECTREQUEST-ID"
          },
          "externalRequestId": {
            "description": "The external system identifier of the associated effect request. A human readable unique id.",
            "maxLength": 64,
            "type": "string",
            "example": "EXTERNALREQUEST-ID"
          },
          "type": {
            "description": "The type of response in this record (e.g. COA, SCORECARD, etc.).",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "COA"
          },
          "actorSrcType": {
            "description": "The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).",
            "maxLength": 64,
            "type": "string",
            "example": "AIRCRAFT"
          },
          "actorSrcId": {
            "description": "The record ID, depending on the type identified in actorSrcType, of the requested asset.",
            "maxLength": 64,
            "type": "string",
            "example": "RC-ID"
          },
          "munitionType": {
            "description": "The type of munition being fired.",
            "maxLength": 1024,
            "type": "string",
            "example": "Dummy"
          },
          "munitionId": {
            "description": "Unique identifier of the munition.",
            "maxLength": 64,
            "type": "string",
            "example": "MUNITION-ID"
          },
          "shotsRequired": {
            "format": "int32",
            "description": "The number of shots required to destroy target.",
            "type": "integer",
            "example": 10
          },
          "probabilityOfKill": {
            "format": "double",
            "description": "The probability of kill (0-1) of the target being destroyed.",
            "type": "number",
            "example": 0.7
          },
          "collateralDamageEst": {
            "format": "double",
            "description": "The collateral damage estimate (CDE) of the munition being fired.",
            "type": "number",
            "example": 0.5
          },
          "actionsList": {
            "description": "List of actions associated with this effect response.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EffectResponseActionsList_Abridged"
            }
          },
          "externalActions": {
            "description": "List of external actions to be executed as part of this task.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ACTION1",
              "ACTION2"
            ]
          },
          "coaMetrics": {
            "description": "List of COA metrics associated with this effect response.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EffectResponseMetrics_Abridged"
            }
          },
          "redTimeToOverhead": {
            "format": "date-time",
            "description": "The time to overhead for the red force to be over their target, in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "decisionDeadline": {
            "format": "date-time",
            "description": "The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "redTargetSrcType": {
            "description": "The source type of the targetId identifier (POI, SITE, TRACK).",
            "maxLength": 64,
            "type": "string",
            "example": "POI"
          },
          "redTargetSrcId": {
            "description": "The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.",
            "maxLength": 64,
            "type": "string",
            "example": "REDTARGETSRC-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2021-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "EffectResponse_Full": {
        "description": "A response for various effects on a target.",
        "required": [
          "classificationMarking",
          "type",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EFFECTRESPONSE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idEffectRequest": {
            "description": "Unique identifier of the EffectRequest associated with this response.",
            "maxLength": 36,
            "type": "string",
            "example": "EFFECTREQUEST-ID"
          },
          "externalRequestId": {
            "description": "The external system identifier of the associated effect request. A human readable unique id.",
            "maxLength": 64,
            "type": "string",
            "example": "EXTERNALREQUEST-ID"
          },
          "type": {
            "description": "The type of response in this record (e.g. COA, SCORECARD, etc.).",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "COA"
          },
          "actorSrcType": {
            "description": "The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).",
            "maxLength": 64,
            "type": "string",
            "example": "AIRCRAFT"
          },
          "actorSrcId": {
            "description": "The record ID, depending on the type identified in actorSrcType, of the requested asset.",
            "maxLength": 64,
            "type": "string",
            "example": "RC-ID"
          },
          "munitionType": {
            "description": "The type of munition being fired.",
            "maxLength": 1024,
            "type": "string",
            "example": "Dummy"
          },
          "munitionId": {
            "description": "Unique identifier of the munition.",
            "maxLength": 64,
            "type": "string",
            "example": "MUNITION-ID"
          },
          "shotsRequired": {
            "format": "int32",
            "description": "The number of shots required to destroy target.",
            "type": "integer",
            "example": 10
          },
          "probabilityOfKill": {
            "format": "double",
            "description": "The probability of kill (0-1) of the target being destroyed.",
            "type": "number",
            "example": 0.7
          },
          "collateralDamageEst": {
            "format": "double",
            "description": "The collateral damage estimate (CDE) of the munition being fired.",
            "type": "number",
            "example": 0.5
          },
          "actionsList": {
            "description": "List of actions associated with this effect response.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EffectResponseActionsList_Full"
            }
          },
          "externalActions": {
            "description": "List of external actions to be executed as part of this task.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ACTION1",
              "ACTION2"
            ]
          },
          "coaMetrics": {
            "description": "List of COA metrics associated with this effect response.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EffectResponseMetrics_Full"
            }
          },
          "redTimeToOverhead": {
            "format": "date-time",
            "description": "The time to overhead for the red force to be over their target, in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "decisionDeadline": {
            "format": "date-time",
            "description": "The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "redTargetSrcType": {
            "description": "The source type of the targetId identifier (POI, SITE, TRACK).",
            "maxLength": 64,
            "type": "string",
            "example": "POI"
          },
          "redTargetSrcId": {
            "description": "The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.",
            "maxLength": 64,
            "type": "string",
            "example": "REDTARGETSRC-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2021-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "EffectResponse_Ingest": {
        "description": "A response for various effects on a target.",
        "required": [
          "classificationMarking",
          "type",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EFFECTRESPONSE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idEffectRequest": {
            "description": "Unique identifier of the EffectRequest associated with this response.",
            "maxLength": 36,
            "type": "string",
            "example": "EFFECTREQUEST-ID"
          },
          "externalRequestId": {
            "description": "The external system identifier of the associated effect request. A human readable unique id.",
            "maxLength": 64,
            "type": "string",
            "example": "EXTERNALREQUEST-ID"
          },
          "type": {
            "description": "The type of response in this record (e.g. COA, SCORECARD, etc.).",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "COA"
          },
          "actorSrcType": {
            "description": "The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).",
            "maxLength": 64,
            "type": "string",
            "example": "AIRCRAFT"
          },
          "actorSrcId": {
            "description": "The record ID, depending on the type identified in actorSrcType, of the requested asset.",
            "maxLength": 64,
            "type": "string",
            "example": "RC-ID"
          },
          "munitionType": {
            "description": "The type of munition being fired.",
            "maxLength": 1024,
            "type": "string",
            "example": "Dummy"
          },
          "munitionId": {
            "description": "Unique identifier of the munition.",
            "maxLength": 64,
            "type": "string",
            "example": "MUNITION-ID"
          },
          "shotsRequired": {
            "format": "int32",
            "description": "The number of shots required to destroy target.",
            "type": "integer",
            "example": 10
          },
          "probabilityOfKill": {
            "format": "double",
            "description": "The probability of kill (0-1) of the target being destroyed.",
            "type": "number",
            "example": 0.7
          },
          "collateralDamageEst": {
            "format": "double",
            "description": "The collateral damage estimate (CDE) of the munition being fired.",
            "type": "number",
            "example": 0.5
          },
          "actionsList": {
            "description": "List of actions associated with this effect response.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EffectResponseActionsList_Ingest"
            }
          },
          "externalActions": {
            "description": "List of external actions to be executed as part of this task.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ACTION1",
              "ACTION2"
            ]
          },
          "coaMetrics": {
            "description": "List of COA metrics associated with this effect response.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EffectResponseMetrics_Ingest"
            }
          },
          "redTimeToOverhead": {
            "format": "date-time",
            "description": "The time to overhead for the red force to be over their target, in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "decisionDeadline": {
            "format": "date-time",
            "description": "The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "redTargetSrcType": {
            "description": "The source type of the targetId identifier (POI, SITE, TRACK).",
            "maxLength": 64,
            "type": "string",
            "example": "POI"
          },
          "redTargetSrcId": {
            "description": "The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.",
            "maxLength": 64,
            "type": "string",
            "example": "REDTARGETSRC-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2021-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "EffectResponseActionsList_Abridged": {
        "type": "object",
        "properties": {
          "summary": {
            "description": "A summary string describing different aspects of the action.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example summary"
          },
          "actionId": {
            "description": "Identifier of this action.",
            "maxLength": 64,
            "type": "string",
            "example": "ACTION-ID"
          },
          "actionStartTime": {
            "format": "date-time",
            "description": "The desired start time of this task, in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "actionEndTime": {
            "format": "date-time",
            "description": "The desired end time of this task, in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "totStartTime": {
            "format": "date-time",
            "description": "The start time of the asset TOT (time over target), in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "totEndTime": {
            "format": "date-time",
            "description": "The end time of the asset TOT (time over target), in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "actionActorSrcType": {
            "description": "The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).",
            "maxLength": 64,
            "type": "string",
            "example": "AIRCRAFT"
          },
          "actionActorSrcId": {
            "description": "The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.",
            "maxLength": 64,
            "type": "string",
            "example": "ACTIONACTORSRC-ID"
          },
          "effector": {
            "description": "The type of munition or sensor used by this asset/actor.",
            "maxLength": 1024,
            "type": "string",
            "example": "SENSOR1"
          },
          "targetSrcType": {
            "description": "The source type of the targetId identifier (POI, TRACK).",
            "maxLength": 64,
            "type": "string",
            "example": "POI"
          },
          "targetSrcId": {
            "description": "The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.",
            "maxLength": 64,
            "type": "string",
            "example": "TARGETSRC-ID"
          },
          "actorInterceptLat": {
            "format": "double",
            "description": "The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "actorInterceptLon": {
            "format": "double",
            "description": "The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 180.1
          },
          "actorInterceptAlt": {
            "format": "double",
            "description": "The WGS-84 altitude of the asset/actor location at weapon launch, in meters.",
            "type": "number",
            "example": 1.1
          },
          "weaponInterceptLat": {
            "format": "double",
            "description": "The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "weaponInterceptLon": {
            "format": "double",
            "description": "The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 180.1
          },
          "weaponInterceptAlt": {
            "format": "double",
            "description": "The WGS-84 altitude of the weapon destination location, in meters.",
            "type": "number",
            "example": 1.1
          },
          "actionMetrics": {
            "description": "List of metrics associated with this action.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EffectResponseMetrics_Abridged"
            }
          }
        }
      },
      "EffectResponseActionsList_Full": {
        "type": "object",
        "properties": {
          "summary": {
            "description": "A summary string describing different aspects of the action.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example summary"
          },
          "actionId": {
            "description": "Identifier of this action.",
            "maxLength": 64,
            "type": "string",
            "example": "ACTION-ID"
          },
          "actionStartTime": {
            "format": "date-time",
            "description": "The desired start time of this task, in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "actionEndTime": {
            "format": "date-time",
            "description": "The desired end time of this task, in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "totStartTime": {
            "format": "date-time",
            "description": "The start time of the asset TOT (time over target), in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "totEndTime": {
            "format": "date-time",
            "description": "The end time of the asset TOT (time over target), in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "actionActorSrcType": {
            "description": "The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).",
            "maxLength": 64,
            "type": "string",
            "example": "AIRCRAFT"
          },
          "actionActorSrcId": {
            "description": "The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.",
            "maxLength": 64,
            "type": "string",
            "example": "ACTIONACTORSRC-ID"
          },
          "effector": {
            "description": "The type of munition or sensor used by this asset/actor.",
            "maxLength": 1024,
            "type": "string",
            "example": "SENSOR1"
          },
          "targetSrcType": {
            "description": "The source type of the targetId identifier (POI, TRACK).",
            "maxLength": 64,
            "type": "string",
            "example": "POI"
          },
          "targetSrcId": {
            "description": "The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.",
            "maxLength": 64,
            "type": "string",
            "example": "TARGETSRC-ID"
          },
          "actorInterceptLat": {
            "format": "double",
            "description": "The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "actorInterceptLon": {
            "format": "double",
            "description": "The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 180.1
          },
          "actorInterceptAlt": {
            "format": "double",
            "description": "The WGS-84 altitude of the asset/actor location at weapon launch, in meters.",
            "type": "number",
            "example": 1.1
          },
          "weaponInterceptLat": {
            "format": "double",
            "description": "The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "weaponInterceptLon": {
            "format": "double",
            "description": "The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 180.1
          },
          "weaponInterceptAlt": {
            "format": "double",
            "description": "The WGS-84 altitude of the weapon destination location, in meters.",
            "type": "number",
            "example": 1.1
          },
          "actionMetrics": {
            "description": "List of metrics associated with this action.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EffectResponseMetrics_Full"
            }
          }
        }
      },
      "EffectResponseActionsList_Ingest": {
        "type": "object",
        "properties": {
          "summary": {
            "description": "A summary string describing different aspects of the action.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example summary"
          },
          "actionId": {
            "description": "Identifier of this action.",
            "maxLength": 64,
            "type": "string",
            "example": "ACTION-ID"
          },
          "actionStartTime": {
            "format": "date-time",
            "description": "The desired start time of this task, in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "actionEndTime": {
            "format": "date-time",
            "description": "The desired end time of this task, in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "totStartTime": {
            "format": "date-time",
            "description": "The start time of the asset TOT (time over target), in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "totEndTime": {
            "format": "date-time",
            "description": "The end time of the asset TOT (time over target), in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T00:00:00.123456Z"
          },
          "actionActorSrcType": {
            "description": "The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).",
            "maxLength": 64,
            "type": "string",
            "example": "AIRCRAFT"
          },
          "actionActorSrcId": {
            "description": "The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.",
            "maxLength": 64,
            "type": "string",
            "example": "ACTIONACTORSRC-ID"
          },
          "effector": {
            "description": "The type of munition or sensor used by this asset/actor.",
            "maxLength": 1024,
            "type": "string",
            "example": "SENSOR1"
          },
          "targetSrcType": {
            "description": "The source type of the targetId identifier (POI, TRACK).",
            "maxLength": 64,
            "type": "string",
            "example": "POI"
          },
          "targetSrcId": {
            "description": "The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.",
            "maxLength": 64,
            "type": "string",
            "example": "TARGETSRC-ID"
          },
          "actorInterceptLat": {
            "format": "double",
            "description": "The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "actorInterceptLon": {
            "format": "double",
            "description": "The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 180.1
          },
          "actorInterceptAlt": {
            "format": "double",
            "description": "The WGS-84 altitude of the asset/actor location at weapon launch, in meters.",
            "type": "number",
            "example": 1.1
          },
          "weaponInterceptLat": {
            "format": "double",
            "description": "The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "weaponInterceptLon": {
            "format": "double",
            "description": "The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 180.1
          },
          "weaponInterceptAlt": {
            "format": "double",
            "description": "The WGS-84 altitude of the weapon destination location, in meters.",
            "type": "number",
            "example": 1.1
          },
          "actionMetrics": {
            "description": "List of metrics associated with this action.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EffectResponseMetrics_Ingest"
            }
          }
        }
      },
      "EffectResponseMetrics_Abridged": {
        "type": "object",
        "properties": {
          "metricType": {
            "description": "The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost, Timeliness, Unavailable, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "GoalAchievement"
          },
          "domainValue": {
            "format": "double",
            "description": "The metric score specific to its domain.",
            "type": "number",
            "example": 10.1
          },
          "relativeValue": {
            "format": "double",
            "description": "The metric score adjusted to be relative and comparable to other domains.",
            "type": "number",
            "example": 10.1
          },
          "provenance": {
            "description": "The metric that was used to score this task.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example metric"
          }
        }
      },
      "EffectResponseMetrics_Full": {
        "type": "object",
        "properties": {
          "metricType": {
            "description": "The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost, Timeliness, Unavailable, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "GoalAchievement"
          },
          "domainValue": {
            "format": "double",
            "description": "The metric score specific to its domain.",
            "type": "number",
            "example": 10.1
          },
          "relativeValue": {
            "format": "double",
            "description": "The metric score adjusted to be relative and comparable to other domains.",
            "type": "number",
            "example": 10.1
          },
          "provenance": {
            "description": "The metric that was used to score this task.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example metric"
          }
        }
      },
      "EffectResponseMetrics_Ingest": {
        "type": "object",
        "properties": {
          "metricType": {
            "description": "The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost, Timeliness, Unavailable, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "GoalAchievement"
          },
          "domainValue": {
            "format": "double",
            "description": "The metric score specific to its domain.",
            "type": "number",
            "example": 10.1
          },
          "relativeValue": {
            "format": "double",
            "description": "The metric score adjusted to be relative and comparable to other domains.",
            "type": "number",
            "example": 10.1
          },
          "provenance": {
            "description": "The metric that was used to score this task.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example metric"
          }
        }
      },
      "Evac_Abridged": {
        "description": "Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.",
        "required": [
          "classificationMarking",
          "type",
          "reqTime",
          "pickupLat",
          "pickupLon",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "MEDEVACEVENT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "medevacId": {
            "description": "UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.",
            "maxLength": 36,
            "type": "string",
            "example": "MedEvac-ID"
          },
          "type": {
            "description": "The type of this medevac record (REQUEST, RESPONSE).",
            "maxLength": 8,
            "minLength": 1,
            "enum": [
              "REQUEST",
              "RESPONSE"
            ],
            "type": "string",
            "example": "REQUEST"
          },
          "missionType": {
            "description": "The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).",
            "maxLength": 8,
            "type": "string",
            "example": "GROUND"
          },
          "idWeatherReport": {
            "description": "Unique identifier of a weather report associated with this evacuation.",
            "maxLength": 36,
            "type": "string",
            "example": "WeatherReport-ID"
          },
          "numKIA": {
            "format": "int32",
            "description": "Number of people Killed In Action.",
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "numWIA": {
            "format": "int32",
            "description": "Number of people Wounded In Action.",
            "minimum": 0,
            "type": "integer",
            "example": 3
          },
          "numLitter": {
            "format": "int32",
            "description": "Number of littered personnel requiring evacuation.",
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "numAmbulatory": {
            "format": "int32",
            "description": "Number of ambulatory personnel requiring evacuation.",
            "minimum": 0,
            "type": "integer",
            "example": 5
          },
          "medicReq": {
            "description": "Flag indicating whether the mission requires medical personnel.",
            "type": "boolean",
            "example": true
          },
          "reqNum": {
            "description": "Externally provided Medevac request number (e.g. MED.1.223908).",
            "maxLength": 36,
            "type": "string",
            "example": "MED.1.234567"
          },
          "reqTime": {
            "format": "date-time",
            "description": "The request time, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "reqCallSign": {
            "description": "The call sign of this medevac requestor.",
            "maxLength": 36,
            "type": "string",
            "example": "Bravo"
          },
          "pickupTime": {
            "format": "date-time",
            "description": "The expected pickup time, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-20T16:00:00.123Z"
          },
          "pickupLat": {
            "format": "double",
            "description": "WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 75.1234
          },
          "pickupLon": {
            "format": "double",
            "description": "WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 175.1234
          },
          "pickupAlt": {
            "format": "double",
            "description": "Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.",
            "type": "number",
            "example": 30.1234
          },
          "ce": {
            "format": "double",
            "description": "Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).",
            "type": "number",
            "example": 10.1234
          },
          "le": {
            "format": "double",
            "description": "Height above lat/lon point, in meters (1-sigma, if representing linear error).",
            "type": "number",
            "example": 5.1234
          },
          "terrain": {
            "description": "Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).",
            "maxLength": 32,
            "type": "string",
            "example": "ROCKY"
          },
          "obstaclesRemarks": {
            "description": "Amplifying data for the terrain describing important obstacles in or around the zone.",
            "maxLength": 64,
            "type": "string",
            "example": "N/A"
          },
          "terrainRemarks": {
            "description": "Amplifying data for the terrain describing any notable additional terrain features.",
            "maxLength": 64,
            "type": "string",
            "example": "N/A"
          },
          "zoneName": {
            "description": "The name of the zone.",
            "maxLength": 128,
            "type": "string",
            "example": "example-zone"
          },
          "zoneMarking": {
            "description": "The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).",
            "maxLength": 64,
            "type": "string",
            "example": "ILLUMINATION"
          },
          "zoneSecurity": {
            "description": "The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).",
            "maxLength": 64,
            "type": "string",
            "example": "NO ENEMY"
          },
          "zoneMarkingColor": {
            "description": "Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).",
            "maxLength": 32,
            "type": "string",
            "example": "RED"
          },
          "zoneHot": {
            "description": "Flag indicating that the pickup site is hot and hostiles are in the area.",
            "type": "boolean",
            "example": false
          },
          "cntctFreq": {
            "format": "double",
            "description": "The contact frequency, in Hz, of the agency or zone controller.",
            "type": "number",
            "example": 3.11
          },
          "zoneContrCallSign": {
            "description": "The call sign of the zone controller.",
            "maxLength": 128,
            "type": "string",
            "example": "Tango"
          },
          "numCasualties": {
            "format": "int32",
            "description": "The count of people requiring medevac.",
            "minimum": 0,
            "type": "integer",
            "example": 5
          },
          "comments": {
            "description": "Additional comments for the medevac mission.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments concerning mission"
          },
          "casualtyInfo": {
            "description": "Identity and medical information on the patient to be evacuated.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacCasualtyInfo_Abridged"
            }
          },
          "enemyData": {
            "description": "Data defining any enemy intelligence reported by the requestor.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacEnemyData_Abridged"
            }
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Evac_Full": {
        "description": "Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.",
        "required": [
          "classificationMarking",
          "type",
          "reqTime",
          "pickupLat",
          "pickupLon",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "MEDEVACEVENT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "medevacId": {
            "description": "UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.",
            "maxLength": 36,
            "type": "string",
            "example": "MedEvac-ID"
          },
          "type": {
            "description": "The type of this medevac record (REQUEST, RESPONSE).",
            "maxLength": 8,
            "minLength": 1,
            "enum": [
              "REQUEST",
              "RESPONSE"
            ],
            "type": "string",
            "example": "REQUEST"
          },
          "missionType": {
            "description": "The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).",
            "maxLength": 8,
            "type": "string",
            "example": "GROUND"
          },
          "idWeatherReport": {
            "description": "Unique identifier of a weather report associated with this evacuation.",
            "maxLength": 36,
            "type": "string",
            "example": "WeatherReport-ID"
          },
          "numKIA": {
            "format": "int32",
            "description": "Number of people Killed In Action.",
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "numWIA": {
            "format": "int32",
            "description": "Number of people Wounded In Action.",
            "minimum": 0,
            "type": "integer",
            "example": 3
          },
          "numLitter": {
            "format": "int32",
            "description": "Number of littered personnel requiring evacuation.",
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "numAmbulatory": {
            "format": "int32",
            "description": "Number of ambulatory personnel requiring evacuation.",
            "minimum": 0,
            "type": "integer",
            "example": 5
          },
          "medicReq": {
            "description": "Flag indicating whether the mission requires medical personnel.",
            "type": "boolean",
            "example": true
          },
          "reqNum": {
            "description": "Externally provided Medevac request number (e.g. MED.1.223908).",
            "maxLength": 36,
            "type": "string",
            "example": "MED.1.234567"
          },
          "reqTime": {
            "format": "date-time",
            "description": "The request time, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "reqCallSign": {
            "description": "The call sign of this medevac requestor.",
            "maxLength": 36,
            "type": "string",
            "example": "Bravo"
          },
          "pickupTime": {
            "format": "date-time",
            "description": "The expected pickup time, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-20T16:00:00.123Z"
          },
          "pickupLat": {
            "format": "double",
            "description": "WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 75.1234
          },
          "pickupLon": {
            "format": "double",
            "description": "WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 175.1234
          },
          "pickupAlt": {
            "format": "double",
            "description": "Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.",
            "type": "number",
            "example": 30.1234
          },
          "ce": {
            "format": "double",
            "description": "Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).",
            "type": "number",
            "example": 10.1234
          },
          "le": {
            "format": "double",
            "description": "Height above lat/lon point, in meters (1-sigma, if representing linear error).",
            "type": "number",
            "example": 5.1234
          },
          "terrain": {
            "description": "Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).",
            "maxLength": 32,
            "type": "string",
            "example": "ROCKY"
          },
          "obstaclesRemarks": {
            "description": "Amplifying data for the terrain describing important obstacles in or around the zone.",
            "maxLength": 64,
            "type": "string",
            "example": "N/A"
          },
          "terrainRemarks": {
            "description": "Amplifying data for the terrain describing any notable additional terrain features.",
            "maxLength": 64,
            "type": "string",
            "example": "N/A"
          },
          "zoneName": {
            "description": "The name of the zone.",
            "maxLength": 128,
            "type": "string",
            "example": "example-zone"
          },
          "zoneMarking": {
            "description": "The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).",
            "maxLength": 64,
            "type": "string",
            "example": "ILLUMINATION"
          },
          "zoneSecurity": {
            "description": "The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).",
            "maxLength": 64,
            "type": "string",
            "example": "NO ENEMY"
          },
          "zoneMarkingColor": {
            "description": "Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).",
            "maxLength": 32,
            "type": "string",
            "example": "RED"
          },
          "zoneHot": {
            "description": "Flag indicating that the pickup site is hot and hostiles are in the area.",
            "type": "boolean",
            "example": false
          },
          "cntctFreq": {
            "format": "double",
            "description": "The contact frequency, in Hz, of the agency or zone controller.",
            "type": "number",
            "example": 3.11
          },
          "zoneContrCallSign": {
            "description": "The call sign of the zone controller.",
            "maxLength": 128,
            "type": "string",
            "example": "Tango"
          },
          "numCasualties": {
            "format": "int32",
            "description": "The count of people requiring medevac.",
            "minimum": 0,
            "type": "integer",
            "example": 5
          },
          "comments": {
            "description": "Additional comments for the medevac mission.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments concerning mission"
          },
          "casualtyInfo": {
            "description": "Identity and medical information on the patient to be evacuated.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacCasualtyInfo_Full"
            }
          },
          "enemyData": {
            "description": "Data defining any enemy intelligence reported by the requestor.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacEnemyData_Full"
            }
          },
          "relatedDocs": {
            "description": "Related document ids.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedDocument_Full"
            }
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Evac_Ingest": {
        "description": "Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.",
        "required": [
          "classificationMarking",
          "type",
          "reqTime",
          "pickupLat",
          "pickupLon",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "MEDEVACEVENT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "medevacId": {
            "description": "UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.",
            "maxLength": 36,
            "type": "string",
            "example": "MedEvac-ID"
          },
          "type": {
            "description": "The type of this medevac record (REQUEST, RESPONSE).",
            "maxLength": 8,
            "minLength": 1,
            "enum": [
              "REQUEST",
              "RESPONSE"
            ],
            "type": "string",
            "example": "REQUEST"
          },
          "missionType": {
            "description": "The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).",
            "maxLength": 8,
            "type": "string",
            "example": "GROUND"
          },
          "idWeatherReport": {
            "description": "Unique identifier of a weather report associated with this evacuation.",
            "maxLength": 36,
            "type": "string",
            "example": "WeatherReport-ID"
          },
          "numKIA": {
            "format": "int32",
            "description": "Number of people Killed In Action.",
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "numWIA": {
            "format": "int32",
            "description": "Number of people Wounded In Action.",
            "minimum": 0,
            "type": "integer",
            "example": 3
          },
          "numLitter": {
            "format": "int32",
            "description": "Number of littered personnel requiring evacuation.",
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "numAmbulatory": {
            "format": "int32",
            "description": "Number of ambulatory personnel requiring evacuation.",
            "minimum": 0,
            "type": "integer",
            "example": 5
          },
          "medicReq": {
            "description": "Flag indicating whether the mission requires medical personnel.",
            "type": "boolean",
            "example": true
          },
          "reqNum": {
            "description": "Externally provided Medevac request number (e.g. MED.1.223908).",
            "maxLength": 36,
            "type": "string",
            "example": "MED.1.234567"
          },
          "reqTime": {
            "format": "date-time",
            "description": "The request time, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "reqCallSign": {
            "description": "The call sign of this medevac requestor.",
            "maxLength": 36,
            "type": "string",
            "example": "Bravo"
          },
          "pickupTime": {
            "format": "date-time",
            "description": "The expected pickup time, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-20T16:00:00.123Z"
          },
          "pickupLat": {
            "format": "double",
            "description": "WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 75.1234
          },
          "pickupLon": {
            "format": "double",
            "description": "WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 175.1234
          },
          "pickupAlt": {
            "format": "double",
            "description": "Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.",
            "type": "number",
            "example": 30.1234
          },
          "ce": {
            "format": "double",
            "description": "Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).",
            "type": "number",
            "example": 10.1234
          },
          "le": {
            "format": "double",
            "description": "Height above lat/lon point, in meters (1-sigma, if representing linear error).",
            "type": "number",
            "example": 5.1234
          },
          "terrain": {
            "description": "Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).",
            "maxLength": 32,
            "type": "string",
            "example": "ROCKY"
          },
          "obstaclesRemarks": {
            "description": "Amplifying data for the terrain describing important obstacles in or around the zone.",
            "maxLength": 64,
            "type": "string",
            "example": "N/A"
          },
          "terrainRemarks": {
            "description": "Amplifying data for the terrain describing any notable additional terrain features.",
            "maxLength": 64,
            "type": "string",
            "example": "N/A"
          },
          "zoneName": {
            "description": "The name of the zone.",
            "maxLength": 128,
            "type": "string",
            "example": "example-zone"
          },
          "zoneMarking": {
            "description": "The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).",
            "maxLength": 64,
            "type": "string",
            "example": "ILLUMINATION"
          },
          "zoneSecurity": {
            "description": "The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).",
            "maxLength": 64,
            "type": "string",
            "example": "NO ENEMY"
          },
          "zoneMarkingColor": {
            "description": "Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).",
            "maxLength": 32,
            "type": "string",
            "example": "RED"
          },
          "zoneHot": {
            "description": "Flag indicating that the pickup site is hot and hostiles are in the area.",
            "type": "boolean",
            "example": false
          },
          "cntctFreq": {
            "format": "double",
            "description": "The contact frequency, in Hz, of the agency or zone controller.",
            "type": "number",
            "example": 3.11
          },
          "zoneContrCallSign": {
            "description": "The call sign of the zone controller.",
            "maxLength": 128,
            "type": "string",
            "example": "Tango"
          },
          "numCasualties": {
            "format": "int32",
            "description": "The count of people requiring medevac.",
            "minimum": 0,
            "type": "integer",
            "example": 5
          },
          "comments": {
            "description": "Additional comments for the medevac mission.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments concerning mission"
          },
          "casualtyInfo": {
            "description": "Identity and medical information on the patient to be evacuated.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacCasualtyInfo_Ingest"
            }
          },
          "enemyData": {
            "description": "Data defining any enemy intelligence reported by the requestor.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacEnemyData_Ingest"
            }
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "EvacAllergy_Abridged": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Type of patient allergy (e.g.  PENICILLIN, SULFA, OTHER).",
            "maxLength": 64,
            "type": "string",
            "example": "PENICILLIN"
          },
          "comments": {
            "description": "Additional comments on the  patient's allergy information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the patient's allergies."
          }
        }
      },
      "EvacAllergy_Full": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Type of patient allergy (e.g.  PENICILLIN, SULFA, OTHER).",
            "maxLength": 64,
            "type": "string",
            "example": "PENICILLIN"
          },
          "comments": {
            "description": "Additional comments on the  patient's allergy information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the patient's allergies."
          }
        }
      },
      "EvacAllergy_Ingest": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Type of patient allergy (e.g.  PENICILLIN, SULFA, OTHER).",
            "maxLength": 64,
            "type": "string",
            "example": "PENICILLIN"
          },
          "comments": {
            "description": "Additional comments on the  patient's allergy information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the patient's allergies."
          }
        }
      },
      "EvacCasualtyInfo_Abridged": {
        "type": "object",
        "properties": {
          "priority": {
            "description": "The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).",
            "maxLength": 32,
            "type": "string",
            "example": "ROUTINE"
          },
          "evacType": {
            "description": "The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).",
            "maxLength": 64,
            "type": "string",
            "example": "GROUND"
          },
          "casualtyType": {
            "description": "The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).",
            "maxLength": 32,
            "type": "string",
            "example": "DENTAL"
          },
          "bodyPart": {
            "description": "The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).",
            "maxLength": 32,
            "type": "string",
            "example": "FACE"
          },
          "contamType": {
            "description": "The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).",
            "maxLength": 32,
            "type": "string",
            "example": "NONE"
          },
          "specMedEquip": {
            "description": "Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "OXYGEN",
              "HOIST"
            ]
          },
          "casualtyKey": {
            "description": "Optional casualty key.",
            "maxLength": 36,
            "type": "string",
            "example": "casualty-007"
          },
          "patientStatus": {
            "description": "The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).",
            "maxLength": 32,
            "type": "string",
            "example": "US CIVILIAN"
          },
          "patientIdentity": {
            "description": "The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).",
            "maxLength": 32,
            "type": "string",
            "example": "FRIEND CIVILIAN"
          },
          "nationality": {
            "description": "The country code indicating the citizenship of the patient.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "payGrade": {
            "description": "The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).",
            "maxLength": 16,
            "type": "string",
            "example": "CIVILIAN"
          },
          "name": {
            "description": "The patient common or legal name.",
            "maxLength": 64,
            "type": "string",
            "example": "John Smith"
          },
          "age": {
            "format": "int32",
            "description": "The patient age, in years.",
            "minimum": 0,
            "type": "integer",
            "example": 35
          },
          "gender": {
            "description": "The patient sex (MALE, FEMALE).",
            "maxLength": 8,
            "type": "string",
            "example": "MALE"
          },
          "last4SSN": {
            "description": "Last 4 characters of the patient social security code, or equivalent.",
            "maxLength": 4,
            "type": "string",
            "example": "1234"
          },
          "bloodType": {
            "description": "The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).",
            "maxLength": 6,
            "type": "string",
            "example": "O NEG"
          },
          "service": {
            "description": "The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).",
            "maxLength": 32,
            "type": "string",
            "example": "CIV"
          },
          "callSign": {
            "description": "The call sign of this patient.",
            "maxLength": 128,
            "type": "string",
            "example": "SHARK"
          },
          "occSpeciality": {
            "description": "The career field of this patient.",
            "maxLength": 128,
            "type": "string",
            "example": "Healthcare"
          },
          "burialLocation": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -33.123,
              150.33,
              0.24
            ]
          },
          "collectionPoint": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              12.44,
              122.55,
              0.98
            ]
          },
          "careProviderUrn": {
            "description": "Unique identifier for the patient care provider.",
            "maxLength": 64,
            "type": "string",
            "example": "CARE_PROVIDER-1"
          },
          "dispositionType": {
            "description": "The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).",
            "maxLength": 64,
            "type": "string",
            "example": "EVACUATE"
          },
          "disposition": {
            "description": "The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).",
            "maxLength": 32,
            "type": "string",
            "example": "EVACUATE WOUNDED"
          },
          "reportGen": {
            "description": "The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).",
            "maxLength": 64,
            "type": "string",
            "example": "DEVICE"
          },
          "reportTime": {
            "format": "date-time",
            "description": "Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the  patient's casualty information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments relating to this casualty info."
          },
          "etiology": {
            "description": "Medical condition causation information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacEtiology_Abridged"
            }
          },
          "treatment": {
            "description": "Treatment information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacTreatment_Abridged"
            }
          },
          "vitalSignData": {
            "description": "Information obtained for vital signs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacVitalSignData_Abridged"
            }
          },
          "healthState": {
            "description": "Health state information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacHealthState_Abridged"
            }
          },
          "condition": {
            "description": "Health condition information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacCondition_Abridged"
            }
          },
          "medication": {
            "description": "Medication specifics.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacMedication_Abridged"
            }
          },
          "injury": {
            "description": "Injury specifics.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacInjury_Abridged"
            }
          },
          "allergy": {
            "description": "Allergy information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacAllergy_Abridged"
            }
          }
        }
      },
      "EvacCasualtyInfo_Full": {
        "type": "object",
        "properties": {
          "priority": {
            "description": "The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).",
            "maxLength": 32,
            "type": "string",
            "example": "ROUTINE"
          },
          "evacType": {
            "description": "The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).",
            "maxLength": 64,
            "type": "string",
            "example": "GROUND"
          },
          "casualtyType": {
            "description": "The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).",
            "maxLength": 32,
            "type": "string",
            "example": "DENTAL"
          },
          "bodyPart": {
            "description": "The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).",
            "maxLength": 32,
            "type": "string",
            "example": "FACE"
          },
          "contamType": {
            "description": "The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).",
            "maxLength": 32,
            "type": "string",
            "example": "NONE"
          },
          "specMedEquip": {
            "description": "Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "OXYGEN",
              "HOIST"
            ]
          },
          "casualtyKey": {
            "description": "Optional casualty key.",
            "maxLength": 36,
            "type": "string",
            "example": "casualty-007"
          },
          "patientStatus": {
            "description": "The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).",
            "maxLength": 32,
            "type": "string",
            "example": "US CIVILIAN"
          },
          "patientIdentity": {
            "description": "The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).",
            "maxLength": 32,
            "type": "string",
            "example": "FRIEND CIVILIAN"
          },
          "nationality": {
            "description": "The country code indicating the citizenship of the patient.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "payGrade": {
            "description": "The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).",
            "maxLength": 16,
            "type": "string",
            "example": "CIVILIAN"
          },
          "name": {
            "description": "The patient common or legal name.",
            "maxLength": 64,
            "type": "string",
            "example": "John Smith"
          },
          "age": {
            "format": "int32",
            "description": "The patient age, in years.",
            "minimum": 0,
            "type": "integer",
            "example": 35
          },
          "gender": {
            "description": "The patient sex (MALE, FEMALE).",
            "maxLength": 8,
            "type": "string",
            "example": "MALE"
          },
          "last4SSN": {
            "description": "Last 4 characters of the patient social security code, or equivalent.",
            "maxLength": 4,
            "type": "string",
            "example": "1234"
          },
          "bloodType": {
            "description": "The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).",
            "maxLength": 6,
            "type": "string",
            "example": "O NEG"
          },
          "service": {
            "description": "The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).",
            "maxLength": 32,
            "type": "string",
            "example": "CIV"
          },
          "callSign": {
            "description": "The call sign of this patient.",
            "maxLength": 128,
            "type": "string",
            "example": "SHARK"
          },
          "occSpeciality": {
            "description": "The career field of this patient.",
            "maxLength": 128,
            "type": "string",
            "example": "Healthcare"
          },
          "burialLocation": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -33.123,
              150.33,
              0.24
            ]
          },
          "collectionPoint": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              12.44,
              122.55,
              0.98
            ]
          },
          "careProviderUrn": {
            "description": "Unique identifier for the patient care provider.",
            "maxLength": 64,
            "type": "string",
            "example": "CARE_PROVIDER-1"
          },
          "dispositionType": {
            "description": "The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).",
            "maxLength": 64,
            "type": "string",
            "example": "EVACUATE"
          },
          "disposition": {
            "description": "The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).",
            "maxLength": 32,
            "type": "string",
            "example": "EVACUATE WOUNDED"
          },
          "reportGen": {
            "description": "The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).",
            "maxLength": 64,
            "type": "string",
            "example": "DEVICE"
          },
          "reportTime": {
            "format": "date-time",
            "description": "Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the  patient's casualty information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments relating to this casualty info."
          },
          "etiology": {
            "description": "Medical condition causation information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacEtiology_Full"
            }
          },
          "treatment": {
            "description": "Treatment information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacTreatment_Full"
            }
          },
          "vitalSignData": {
            "description": "Information obtained for vital signs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacVitalSignData_Full"
            }
          },
          "healthState": {
            "description": "Health state information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacHealthState_Full"
            }
          },
          "condition": {
            "description": "Health condition information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacCondition_Full"
            }
          },
          "medication": {
            "description": "Medication specifics.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacMedication_Full"
            }
          },
          "injury": {
            "description": "Injury specifics.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacInjury_Full"
            }
          },
          "allergy": {
            "description": "Allergy information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacAllergy_Full"
            }
          }
        }
      },
      "EvacCasualtyInfo_Ingest": {
        "type": "object",
        "properties": {
          "priority": {
            "description": "The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).",
            "maxLength": 32,
            "type": "string",
            "example": "ROUTINE"
          },
          "evacType": {
            "description": "The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).",
            "maxLength": 64,
            "type": "string",
            "example": "GROUND"
          },
          "casualtyType": {
            "description": "The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).",
            "maxLength": 32,
            "type": "string",
            "example": "DENTAL"
          },
          "bodyPart": {
            "description": "The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).",
            "maxLength": 32,
            "type": "string",
            "example": "FACE"
          },
          "contamType": {
            "description": "The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).",
            "maxLength": 32,
            "type": "string",
            "example": "NONE"
          },
          "specMedEquip": {
            "description": "Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "OXYGEN",
              "HOIST"
            ]
          },
          "casualtyKey": {
            "description": "Optional casualty key.",
            "maxLength": 36,
            "type": "string",
            "example": "casualty-007"
          },
          "patientStatus": {
            "description": "The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).",
            "maxLength": 32,
            "type": "string",
            "example": "US CIVILIAN"
          },
          "patientIdentity": {
            "description": "The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).",
            "maxLength": 32,
            "type": "string",
            "example": "FRIEND CIVILIAN"
          },
          "nationality": {
            "description": "The country code indicating the citizenship of the patient.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "payGrade": {
            "description": "The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).",
            "maxLength": 16,
            "type": "string",
            "example": "CIVILIAN"
          },
          "name": {
            "description": "The patient common or legal name.",
            "maxLength": 64,
            "type": "string",
            "example": "John Smith"
          },
          "age": {
            "format": "int32",
            "description": "The patient age, in years.",
            "minimum": 0,
            "type": "integer",
            "example": 35
          },
          "gender": {
            "description": "The patient sex (MALE, FEMALE).",
            "maxLength": 8,
            "type": "string",
            "example": "MALE"
          },
          "last4SSN": {
            "description": "Last 4 characters of the patient social security code, or equivalent.",
            "maxLength": 4,
            "type": "string",
            "example": "1234"
          },
          "bloodType": {
            "description": "The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).",
            "maxLength": 6,
            "type": "string",
            "example": "O NEG"
          },
          "service": {
            "description": "The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).",
            "maxLength": 32,
            "type": "string",
            "example": "CIV"
          },
          "callSign": {
            "description": "The call sign of this patient.",
            "maxLength": 128,
            "type": "string",
            "example": "SHARK"
          },
          "occSpeciality": {
            "description": "The career field of this patient.",
            "maxLength": 128,
            "type": "string",
            "example": "Healthcare"
          },
          "burialLocation": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -33.123,
              150.33,
              0.24
            ]
          },
          "collectionPoint": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              12.44,
              122.55,
              0.98
            ]
          },
          "careProviderUrn": {
            "description": "Unique identifier for the patient care provider.",
            "maxLength": 64,
            "type": "string",
            "example": "CARE_PROVIDER-1"
          },
          "dispositionType": {
            "description": "The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).",
            "maxLength": 64,
            "type": "string",
            "example": "EVACUATE"
          },
          "disposition": {
            "description": "The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).",
            "maxLength": 32,
            "type": "string",
            "example": "EVACUATE WOUNDED"
          },
          "reportGen": {
            "description": "The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).",
            "maxLength": 64,
            "type": "string",
            "example": "DEVICE"
          },
          "reportTime": {
            "format": "date-time",
            "description": "Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the  patient's casualty information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments relating to this casualty info."
          },
          "etiology": {
            "description": "Medical condition causation information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacEtiology_Ingest"
            }
          },
          "treatment": {
            "description": "Treatment information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacTreatment_Ingest"
            }
          },
          "vitalSignData": {
            "description": "Information obtained for vital signs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacVitalSignData_Ingest"
            }
          },
          "healthState": {
            "description": "Health state information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacHealthState_Ingest"
            }
          },
          "condition": {
            "description": "Health condition information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacCondition_Ingest"
            }
          },
          "medication": {
            "description": "Medication specifics.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacMedication_Ingest"
            }
          },
          "injury": {
            "description": "Injury specifics.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacInjury_Ingest"
            }
          },
          "allergy": {
            "description": "Allergy information.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvacAllergy_Ingest"
            }
          }
        }
      },
      "EvacCondition_Abridged": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Health condition assessment.  Intended as, but not constrained to, K07.1 Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM, ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU UNRESPONSIVE, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "ACTIVITY LOW"
          },
          "bodyPart": {
            "description": "Body part location or body part referenced in condition.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ANKLE LEFT FRONT"
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the condition diagnosis in ISO 8601 UTC datetime format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's condition.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the patient's condition."
          }
        }
      },
      "EvacCondition_Full": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Health condition assessment.  Intended as, but not constrained to, K07.1 Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM, ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU UNRESPONSIVE, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "ACTIVITY LOW"
          },
          "bodyPart": {
            "description": "Body part location or body part referenced in condition.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ANKLE LEFT FRONT"
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the condition diagnosis in ISO 8601 UTC datetime format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's condition.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the patient's condition."
          }
        }
      },
      "EvacCondition_Ingest": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Health condition assessment.  Intended as, but not constrained to, K07.1 Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM, ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU UNRESPONSIVE, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "ACTIVITY LOW"
          },
          "bodyPart": {
            "description": "Body part location or body part referenced in condition.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ANKLE LEFT FRONT"
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the condition diagnosis in ISO 8601 UTC datetime format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's condition.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the patient's condition."
          }
        }
      },
      "EvacEnemyData_Abridged": {
        "type": "object",
        "properties": {
          "dirToEnemy": {
            "description": "Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).",
            "maxLength": 32,
            "type": "string",
            "example": "NORTH"
          },
          "hostileFireType": {
            "description": "The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).",
            "maxLength": 32,
            "type": "string",
            "example": "SMALL ARMS"
          },
          "friendliesRemarks": {
            "description": "Comments provided by friendlies about the evac zone.",
            "maxLength": 128,
            "type": "string",
            "example": "Comments from friendlies."
          },
          "hlzRemarks": {
            "description": "Hot Landing Zone remarks.",
            "maxLength": 128,
            "type": "string",
            "example": "Remarks about hot landing zone."
          }
        }
      },
      "EvacEnemyData_Full": {
        "type": "object",
        "properties": {
          "dirToEnemy": {
            "description": "Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).",
            "maxLength": 32,
            "type": "string",
            "example": "NORTH"
          },
          "hostileFireType": {
            "description": "The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).",
            "maxLength": 32,
            "type": "string",
            "example": "SMALL ARMS"
          },
          "friendliesRemarks": {
            "description": "Comments provided by friendlies about the evac zone.",
            "maxLength": 128,
            "type": "string",
            "example": "Comments from friendlies."
          },
          "hlzRemarks": {
            "description": "Hot Landing Zone remarks.",
            "maxLength": 128,
            "type": "string",
            "example": "Remarks about hot landing zone."
          }
        }
      },
      "EvacEnemyData_Ingest": {
        "type": "object",
        "properties": {
          "dirToEnemy": {
            "description": "Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).",
            "maxLength": 32,
            "type": "string",
            "example": "NORTH"
          },
          "hostileFireType": {
            "description": "The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).",
            "maxLength": 32,
            "type": "string",
            "example": "SMALL ARMS"
          },
          "friendliesRemarks": {
            "description": "Comments provided by friendlies about the evac zone.",
            "maxLength": 128,
            "type": "string",
            "example": "Comments from friendlies."
          },
          "hlzRemarks": {
            "description": "Hot Landing Zone remarks.",
            "maxLength": 128,
            "type": "string",
            "example": "Remarks about hot landing zone."
          }
        }
      },
      "EvacEtiology_Abridged": {
        "type": "object",
        "properties": {
          "type": {
            "description": "The cause or manner of causation of the medical condition.  Intended as, but not constrained to, K07.1 EtiologyType Enumeration (e.g. ASSAULT, BUILDING COLLAPSE, BURN CHEMICAL, BURN ELECTRICAL, BURN, BURN HOT LIQUID, BURN RADIATION, BURN THERMAL, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "BURN"
          },
          "bodyPart": {
            "description": "The body part or location affected from the etiology.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ARM LEFT FRONT"
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the discovery of the etiology state in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-16T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's etiology information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the etiology info."
          }
        }
      },
      "EvacEtiology_Full": {
        "type": "object",
        "properties": {
          "type": {
            "description": "The cause or manner of causation of the medical condition.  Intended as, but not constrained to, K07.1 EtiologyType Enumeration (e.g. ASSAULT, BUILDING COLLAPSE, BURN CHEMICAL, BURN ELECTRICAL, BURN, BURN HOT LIQUID, BURN RADIATION, BURN THERMAL, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "BURN"
          },
          "bodyPart": {
            "description": "The body part or location affected from the etiology.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ARM LEFT FRONT"
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the discovery of the etiology state in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-16T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's etiology information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the etiology info."
          }
        }
      },
      "EvacEtiology_Ingest": {
        "type": "object",
        "properties": {
          "type": {
            "description": "The cause or manner of causation of the medical condition.  Intended as, but not constrained to, K07.1 EtiologyType Enumeration (e.g. ASSAULT, BUILDING COLLAPSE, BURN CHEMICAL, BURN ELECTRICAL, BURN, BURN HOT LIQUID, BURN RADIATION, BURN THERMAL, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "BURN"
          },
          "bodyPart": {
            "description": "The body part or location affected from the etiology.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ARM LEFT FRONT"
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the discovery of the etiology state in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-16T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's etiology information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the etiology info."
          }
        }
      },
      "EvacHealthState_Abridged": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION, LIFE SIGN, RADIATION, SHOCK, THERMAL).",
            "maxLength": 32,
            "type": "string",
            "example": "COGNITIVE"
          },
          "healthStateCode": {
            "description": "Medical color code used to quickly identify various medical state (e.g. AMBER, BLACK, BLUE, GRAY, NORMAL, RED).",
            "maxLength": 32,
            "type": "string",
            "example": "BLUE"
          },
          "medConfFactor": {
            "format": "int32",
            "description": "Medical confidence factor.",
            "type": "integer",
            "example": 1
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the health state diagnosis in ISO 8601 UTC datetime format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          }
        }
      },
      "EvacHealthState_Full": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION, LIFE SIGN, RADIATION, SHOCK, THERMAL).",
            "maxLength": 32,
            "type": "string",
            "example": "COGNITIVE"
          },
          "healthStateCode": {
            "description": "Medical color code used to quickly identify various medical state (e.g. AMBER, BLACK, BLUE, GRAY, NORMAL, RED).",
            "maxLength": 32,
            "type": "string",
            "example": "BLUE"
          },
          "medConfFactor": {
            "format": "int32",
            "description": "Medical confidence factor.",
            "type": "integer",
            "example": 1
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the health state diagnosis in ISO 8601 UTC datetime format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          }
        }
      },
      "EvacHealthState_Ingest": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION, LIFE SIGN, RADIATION, SHOCK, THERMAL).",
            "maxLength": 32,
            "type": "string",
            "example": "COGNITIVE"
          },
          "healthStateCode": {
            "description": "Medical color code used to quickly identify various medical state (e.g. AMBER, BLACK, BLUE, GRAY, NORMAL, RED).",
            "maxLength": 32,
            "type": "string",
            "example": "BLUE"
          },
          "medConfFactor": {
            "format": "int32",
            "description": "Medical confidence factor.",
            "type": "integer",
            "example": 1
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the health state diagnosis in ISO 8601 UTC datetime format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          }
        }
      },
      "EvacInjury_Abridged": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Classification of the injury type (ABRASION, AMPUTATION IT, AVULATION, BALLISTIC, BLAST WAVE, BURN 1ST DEGREE, BURN 2ND DEGREE, BURN 3RD DEGREE, BURN INHALATION, BURN LOWER AIRWAY, CHEST FLAIL, CHEST OPEN, DEGLOVING, ECCHYMOSIS, FRACTURE CLOSED, FRACTURE CREPITUS, FRACTURE IT, FRACTURE OPEN, HEMATOMA, IRREGULAR CONSISTENCY, IRREGULAR CONSISTENCY RIDGED, IRREGULAR CONSISTENCY SWOLLEN, IRREGULAR CONSISTENCY SWOLLEN DISTENDED, IRREGULAR CONSISTENCY TENDER, IRREGULAR POSITION, IRREGULAR SHAPE, IRREGULAR SHAPE MISSHAPED, IRREGULAR SHAPE NON SYMMETRICAL, LACERATION, NEUROVASCULAR COMPROMISE, NEUROVASCULAR INTACT, PUNCTURE, SEAT BELT SIGN, STAB, TIC TIM).",
            "maxLength": 64,
            "type": "string",
            "example": "ABRASION"
          },
          "bodyPart": {
            "description": "Body part location of the injury.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ARM LEFT FRONT"
          },
          "time": {
            "format": "date-time",
            "description": "The time of the injury, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's injury information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the patient's injury."
          }
        }
      },
      "EvacInjury_Full": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Classification of the injury type (ABRASION, AMPUTATION IT, AVULATION, BALLISTIC, BLAST WAVE, BURN 1ST DEGREE, BURN 2ND DEGREE, BURN 3RD DEGREE, BURN INHALATION, BURN LOWER AIRWAY, CHEST FLAIL, CHEST OPEN, DEGLOVING, ECCHYMOSIS, FRACTURE CLOSED, FRACTURE CREPITUS, FRACTURE IT, FRACTURE OPEN, HEMATOMA, IRREGULAR CONSISTENCY, IRREGULAR CONSISTENCY RIDGED, IRREGULAR CONSISTENCY SWOLLEN, IRREGULAR CONSISTENCY SWOLLEN DISTENDED, IRREGULAR CONSISTENCY TENDER, IRREGULAR POSITION, IRREGULAR SHAPE, IRREGULAR SHAPE MISSHAPED, IRREGULAR SHAPE NON SYMMETRICAL, LACERATION, NEUROVASCULAR COMPROMISE, NEUROVASCULAR INTACT, PUNCTURE, SEAT BELT SIGN, STAB, TIC TIM).",
            "maxLength": 64,
            "type": "string",
            "example": "ABRASION"
          },
          "bodyPart": {
            "description": "Body part location of the injury.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ARM LEFT FRONT"
          },
          "time": {
            "format": "date-time",
            "description": "The time of the injury, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's injury information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the patient's injury."
          }
        }
      },
      "EvacInjury_Ingest": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Classification of the injury type (ABRASION, AMPUTATION IT, AVULATION, BALLISTIC, BLAST WAVE, BURN 1ST DEGREE, BURN 2ND DEGREE, BURN 3RD DEGREE, BURN INHALATION, BURN LOWER AIRWAY, CHEST FLAIL, CHEST OPEN, DEGLOVING, ECCHYMOSIS, FRACTURE CLOSED, FRACTURE CREPITUS, FRACTURE IT, FRACTURE OPEN, HEMATOMA, IRREGULAR CONSISTENCY, IRREGULAR CONSISTENCY RIDGED, IRREGULAR CONSISTENCY SWOLLEN, IRREGULAR CONSISTENCY SWOLLEN DISTENDED, IRREGULAR CONSISTENCY TENDER, IRREGULAR POSITION, IRREGULAR SHAPE, IRREGULAR SHAPE MISSHAPED, IRREGULAR SHAPE NON SYMMETRICAL, LACERATION, NEUROVASCULAR COMPROMISE, NEUROVASCULAR INTACT, PUNCTURE, SEAT BELT SIGN, STAB, TIC TIM).",
            "maxLength": 64,
            "type": "string",
            "example": "ABRASION"
          },
          "bodyPart": {
            "description": "Body part location of the injury.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ARM LEFT FRONT"
          },
          "time": {
            "format": "date-time",
            "description": "The time of the injury, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's injury information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the patient's injury."
          }
        }
      },
      "EvacMedication_Abridged": {
        "type": "object",
        "properties": {
          "type": {
            "description": "The type of medication administered.   Intended as, but not constrained to, K07.1 Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC, COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL, HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA, PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).",
            "maxLength": 64,
            "type": "string",
            "example": "TYLENOL"
          },
          "bodyPart": {
            "description": "Body part location or body part referenced for medication. Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ARM LEFT BACK"
          },
          "dose": {
            "description": "Quantity of medicine or drug administered or recommended to be taken at a particular time.",
            "maxLength": 32,
            "type": "string",
            "example": "800mg"
          },
          "adminRoute": {
            "description": "Route of medication delivery (e.g. INJECTION, ORAL, etc.).",
            "maxLength": 16,
            "type": "string",
            "example": "ORAL"
          },
          "time": {
            "format": "date-time",
            "description": "The time that the medication was administered in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's medication information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the patient's medication information."
          }
        }
      },
      "EvacMedication_Full": {
        "type": "object",
        "properties": {
          "type": {
            "description": "The type of medication administered.   Intended as, but not constrained to, K07.1 Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC, COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL, HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA, PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).",
            "maxLength": 64,
            "type": "string",
            "example": "TYLENOL"
          },
          "bodyPart": {
            "description": "Body part location or body part referenced for medication. Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ARM LEFT BACK"
          },
          "dose": {
            "description": "Quantity of medicine or drug administered or recommended to be taken at a particular time.",
            "maxLength": 32,
            "type": "string",
            "example": "800mg"
          },
          "adminRoute": {
            "description": "Route of medication delivery (e.g. INJECTION, ORAL, etc.).",
            "maxLength": 16,
            "type": "string",
            "example": "ORAL"
          },
          "time": {
            "format": "date-time",
            "description": "The time that the medication was administered in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's medication information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the patient's medication information."
          }
        }
      },
      "EvacMedication_Ingest": {
        "type": "object",
        "properties": {
          "type": {
            "description": "The type of medication administered.   Intended as, but not constrained to, K07.1 Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC, COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL, HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA, PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).",
            "maxLength": 64,
            "type": "string",
            "example": "TYLENOL"
          },
          "bodyPart": {
            "description": "Body part location or body part referenced for medication. Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ARM LEFT BACK"
          },
          "dose": {
            "description": "Quantity of medicine or drug administered or recommended to be taken at a particular time.",
            "maxLength": 32,
            "type": "string",
            "example": "800mg"
          },
          "adminRoute": {
            "description": "Route of medication delivery (e.g. INJECTION, ORAL, etc.).",
            "maxLength": 16,
            "type": "string",
            "example": "ORAL"
          },
          "time": {
            "format": "date-time",
            "description": "The time that the medication was administered in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's medication information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the patient's medication information."
          }
        }
      },
      "EvacTreatment_Abridged": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Type of treatment administered or to be administered.  Intended as, but not constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED, AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC, BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "BREATHING CHEST TUBE"
          },
          "bodyPart": {
            "description": "Body part location or body part treated or to be treated.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "CHEST"
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the treatment in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's treatment information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the treatment info."
          }
        }
      },
      "EvacTreatment_Full": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Type of treatment administered or to be administered.  Intended as, but not constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED, AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC, BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "BREATHING CHEST TUBE"
          },
          "bodyPart": {
            "description": "Body part location or body part treated or to be treated.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "CHEST"
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the treatment in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's treatment information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the treatment info."
          }
        }
      },
      "EvacTreatment_Ingest": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Type of treatment administered or to be administered.  Intended as, but not constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED, AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC, BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "BREATHING CHEST TUBE"
          },
          "bodyPart": {
            "description": "Body part location or body part treated or to be treated.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "CHEST"
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the treatment in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "comments": {
            "description": "Additional comments on the patient's treatment information.",
            "maxLength": 1024,
            "type": "string",
            "example": "Comments on the treatment info."
          }
        }
      },
      "EvacVitalSignData_Abridged": {
        "type": "object",
        "properties": {
          "vitalSign": {
            "description": "Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "HEART RATE"
          },
          "vitalSign1": {
            "format": "double",
            "description": "Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).",
            "type": "number",
            "example": 120
          },
          "vitalSign2": {
            "format": "double",
            "description": "Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).",
            "type": "number",
            "example": 80
          },
          "medConfFactor": {
            "format": "int32",
            "description": "Medical confidence factor.",
            "type": "integer",
            "example": 1
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the vital sign measurement in ISO 8601 UTC datetime format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          }
        }
      },
      "EvacVitalSignData_Full": {
        "type": "object",
        "properties": {
          "vitalSign": {
            "description": "Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "HEART RATE"
          },
          "vitalSign1": {
            "format": "double",
            "description": "Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).",
            "type": "number",
            "example": 120
          },
          "vitalSign2": {
            "format": "double",
            "description": "Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).",
            "type": "number",
            "example": 80
          },
          "medConfFactor": {
            "format": "int32",
            "description": "Medical confidence factor.",
            "type": "integer",
            "example": 1
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the vital sign measurement in ISO 8601 UTC datetime format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          }
        }
      },
      "EvacVitalSignData_Ingest": {
        "type": "object",
        "properties": {
          "vitalSign": {
            "description": "Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "HEART RATE"
          },
          "vitalSign1": {
            "format": "double",
            "description": "Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).",
            "type": "number",
            "example": 120
          },
          "vitalSign2": {
            "format": "double",
            "description": "Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).",
            "type": "number",
            "example": 80
          },
          "medConfFactor": {
            "format": "int32",
            "description": "Medical confidence factor.",
            "type": "integer",
            "example": 1
          },
          "time": {
            "format": "date-time",
            "description": "Datetime of the vital sign measurement in ISO 8601 UTC datetime format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          }
        }
      },
      "PersonnelRecovery_Abridged": {
        "description": "Provides information concerning search and rescue operations and other situations involving personnel recovery.",
        "required": [
          "classificationMarking",
          "type",
          "msgTime",
          "pickupLat",
          "pickupLon",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "PERSONNEL_RECOVERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Specifies the type of incident resulting in a recovery or evacuation mission.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Emergency Type (e.g. NO STATEMENT, DOWN AIRCRAFT, MAN IN WATER, DITCHING, BAILOUT, DISTRESSED VEHICLE, GROUND INCIDENT, MEDICAL, ISOLATED PERSONS, etc.).",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "MEDICAL"
          },
          "msgTime": {
            "format": "date-time",
            "description": "Time stamp of the original personnel recovery message, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "recovId": {
            "description": "UUID identifying the Personnel Recovery  mission, which should remain the same on subsequent posts related to the same recovery mission.",
            "maxLength": 36,
            "type": "string",
            "example": "RECOV-ID"
          },
          "idWeatherReport": {
            "description": "Unique identifier of a weather report associated with this recovery.",
            "maxLength": 36,
            "type": "string",
            "example": "WEATHER_REPORT-ID"
          },
          "pickupLat": {
            "format": "double",
            "description": "WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 75.1234
          },
          "pickupLon": {
            "format": "double",
            "description": "WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 175.1234
          },
          "pickupAlt": {
            "format": "double",
            "description": "Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point eight below ellipsoid.",
            "type": "number",
            "example": 30.1234
          },
          "termInd": {
            "description": "Flag indicating the cancellation of this recovery.",
            "type": "boolean",
            "example": true
          },
          "authStatus": {
            "description": "The confirmation status of the isolated personnel identity. Intended as, but not constrained to, MIL-STD-6016 J6.1 Authentication Status, Isolated Personnel (NO STATEMENT, AUTHENTICATED, NOT AUTHENTICATED, AUTHENTICATED UNDER DURESS, NOT APPLICABLE):\n\nAUTHENTICATED:  Confirmed Friend\n\nNOT AUTHENTICATED: Unconfirmed status\n\nAUTHENTICATED UNDER DURESS:  Authentication comprised by hostiles.\n\nNOT APPLICABLE:  Authentication not required.",
            "maxLength": 36,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "numPersons": {
            "format": "int32",
            "description": "The count of persons requiring recovery.",
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "milClass": {
            "description": "The military classification of the personnel to be recovered. Intended as, but not constrained to, MIL-STD-6016 J6.1 Isolated Personnel Classification (NO STATEMENT, MILITARY, GOVERNMENT CIVILIAN, GOVERNMENT CONTRACTOR, CIVILIAN, MULTIPLE CLASSIFICATIONS).",
            "maxLength": 36,
            "type": "string",
            "example": "CIVILIAN"
          },
          "natAlliance": {
            "format": "int32",
            "description": "The country of origin or political entity of an isolated person subject to rescue or evacuation. If natAlliance is set to 126, then natAlliance1 must be non 0. If natAlliance is any number other than 126, then natAlliance1 will be set to 0 regardless. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s).",
            "maximum": 127,
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "natAlliance1": {
            "format": "int32",
            "description": "Extended country of origin or political entity of an isolated person subject to rescue or evacuation. Specify an entry here only if natAlliance is 126. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s), 1.",
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "identity": {
            "description": "The survivor service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVIILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).",
            "maxLength": 32,
            "type": "string",
            "example": "NEUTRAL CIVILIAN"
          },
          "commEq1": {
            "description": "Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).",
            "maxLength": 64,
            "type": "string",
            "example": "LL PHONE"
          },
          "commEq2": {
            "description": "Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).",
            "maxLength": 64,
            "type": "string",
            "example": "LL PHONE"
          },
          "commEq3": {
            "description": "Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).",
            "maxLength": 64,
            "type": "string",
            "example": "LL PHONE"
          },
          "txFreq": {
            "format": "double",
            "description": "Transmit voice frequency in 5Hz increments.",
            "type": "number",
            "example": 5.5
          },
          "rxFreq": {
            "format": "double",
            "description": "Receive voice frequency in 5Hz increments. This field will auto populate with the txFreq value if the post element is null.",
            "type": "number",
            "example": 5.5
          },
          "numNonAmbulatory": {
            "format": "int32",
            "description": "Number of littered personnel requiring recovery.",
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "numAmbulatory": {
            "format": "int32",
            "description": "Number of ambulatory personnel requiring recovery.",
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "numAmbulatoryInjured": {
            "format": "int32",
            "description": "Number of injured, but ambulatory, personnel requiring recovery.",
            "minimum": 0,
            "type": "integer",
            "example": 2
          },
          "survivorRadio": {
            "description": "Survivor radio equipment. Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Type (NO STATEMENT, PRQ7SEL, PRC90, PRC112, PRC112B B1, PRC112C, PRC112D, PRC148 MBITR, PRC148 JEM, PRC149, PRC152, ACRPLB, OTHER).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "survivorMessages": {
            "description": "Preloaded message conveying the situation confronting the isolated person(s). Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Messages (e.g. INJURED CANT MOVE NO KNOWN HOSTILES, INJURED CANT MOVE HOSTILES NEARBY, UNINJURED CANT MOVE HOSTILES NEARBY, UNINJURED NO KNOWN HOSTILES, INJURED LIMITED MOBILITY).",
            "maxLength": 64,
            "type": "string",
            "example": "UNINJURED CANT MOVE HOSTILES NEARBY"
          },
          "beaconInd": {
            "description": "Flag indicating whether a radio identifier is reported.",
            "type": "boolean",
            "example": false
          },
          "callSign": {
            "description": "The call sign of the personnel to be recovered.",
            "maxLength": 128,
            "type": "string",
            "example": "BADGER"
          },
          "textMsg": {
            "description": "Additional specific messages received from survivor.",
            "maxLength": 1024,
            "type": "string",
            "example": "Additional message from survivor."
          },
          "authMethod": {
            "description": "Mechanism used to verify the survivors identity.",
            "maxLength": 64,
            "type": "string",
            "example": "PASSPORT"
          },
          "objectiveAreaInfo": {
            "$ref": "#/components/schemas/PersonnelRecoveryObjectiveAreaInfo_Abridged"
          },
          "executionInfo": {
            "$ref": "#/components/schemas/PersonnelRecoveryExecutionInfo_Abridged"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "PersonnelRecovery_Full": {
        "description": "Provides information concerning search and rescue operations and other situations involving personnel recovery.",
        "required": [
          "classificationMarking",
          "type",
          "msgTime",
          "pickupLat",
          "pickupLon",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "PERSONNEL_RECOVERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Specifies the type of incident resulting in a recovery or evacuation mission.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Emergency Type (e.g. NO STATEMENT, DOWN AIRCRAFT, MAN IN WATER, DITCHING, BAILOUT, DISTRESSED VEHICLE, GROUND INCIDENT, MEDICAL, ISOLATED PERSONS, etc.).",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "MEDICAL"
          },
          "msgTime": {
            "format": "date-time",
            "description": "Time stamp of the original personnel recovery message, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "recovId": {
            "description": "UUID identifying the Personnel Recovery  mission, which should remain the same on subsequent posts related to the same recovery mission.",
            "maxLength": 36,
            "type": "string",
            "example": "RECOV-ID"
          },
          "idWeatherReport": {
            "description": "Unique identifier of a weather report associated with this recovery.",
            "maxLength": 36,
            "type": "string",
            "example": "WEATHER_REPORT-ID"
          },
          "pickupLat": {
            "format": "double",
            "description": "WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 75.1234
          },
          "pickupLon": {
            "format": "double",
            "description": "WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 175.1234
          },
          "pickupAlt": {
            "format": "double",
            "description": "Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point eight below ellipsoid.",
            "type": "number",
            "example": 30.1234
          },
          "termInd": {
            "description": "Flag indicating the cancellation of this recovery.",
            "type": "boolean",
            "example": true
          },
          "authStatus": {
            "description": "The confirmation status of the isolated personnel identity. Intended as, but not constrained to, MIL-STD-6016 J6.1 Authentication Status, Isolated Personnel (NO STATEMENT, AUTHENTICATED, NOT AUTHENTICATED, AUTHENTICATED UNDER DURESS, NOT APPLICABLE):\n\nAUTHENTICATED:  Confirmed Friend\n\nNOT AUTHENTICATED: Unconfirmed status\n\nAUTHENTICATED UNDER DURESS:  Authentication comprised by hostiles.\n\nNOT APPLICABLE:  Authentication not required.",
            "maxLength": 36,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "numPersons": {
            "format": "int32",
            "description": "The count of persons requiring recovery.",
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "milClass": {
            "description": "The military classification of the personnel to be recovered. Intended as, but not constrained to, MIL-STD-6016 J6.1 Isolated Personnel Classification (NO STATEMENT, MILITARY, GOVERNMENT CIVILIAN, GOVERNMENT CONTRACTOR, CIVILIAN, MULTIPLE CLASSIFICATIONS).",
            "maxLength": 36,
            "type": "string",
            "example": "CIVILIAN"
          },
          "natAlliance": {
            "format": "int32",
            "description": "The country of origin or political entity of an isolated person subject to rescue or evacuation. If natAlliance is set to 126, then natAlliance1 must be non 0. If natAlliance is any number other than 126, then natAlliance1 will be set to 0 regardless. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s).",
            "maximum": 127,
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "natAlliance1": {
            "format": "int32",
            "description": "Extended country of origin or political entity of an isolated person subject to rescue or evacuation. Specify an entry here only if natAlliance is 126. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s), 1.",
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "identity": {
            "description": "The survivor service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVIILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).",
            "maxLength": 32,
            "type": "string",
            "example": "NEUTRAL CIVILIAN"
          },
          "commEq1": {
            "description": "Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).",
            "maxLength": 64,
            "type": "string",
            "example": "LL PHONE"
          },
          "commEq2": {
            "description": "Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).",
            "maxLength": 64,
            "type": "string",
            "example": "LL PHONE"
          },
          "commEq3": {
            "description": "Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).",
            "maxLength": 64,
            "type": "string",
            "example": "LL PHONE"
          },
          "txFreq": {
            "format": "double",
            "description": "Transmit voice frequency in 5Hz increments.",
            "type": "number",
            "example": 5.5
          },
          "rxFreq": {
            "format": "double",
            "description": "Receive voice frequency in 5Hz increments. This field will auto populate with the txFreq value if the post element is null.",
            "type": "number",
            "example": 5.5
          },
          "numNonAmbulatory": {
            "format": "int32",
            "description": "Number of littered personnel requiring recovery.",
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "numAmbulatory": {
            "format": "int32",
            "description": "Number of ambulatory personnel requiring recovery.",
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "numAmbulatoryInjured": {
            "format": "int32",
            "description": "Number of injured, but ambulatory, personnel requiring recovery.",
            "minimum": 0,
            "type": "integer",
            "example": 2
          },
          "survivorRadio": {
            "description": "Survivor radio equipment. Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Type (NO STATEMENT, PRQ7SEL, PRC90, PRC112, PRC112B B1, PRC112C, PRC112D, PRC148 MBITR, PRC148 JEM, PRC149, PRC152, ACRPLB, OTHER).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "survivorMessages": {
            "description": "Preloaded message conveying the situation confronting the isolated person(s). Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Messages (e.g. INJURED CANT MOVE NO KNOWN HOSTILES, INJURED CANT MOVE HOSTILES NEARBY, UNINJURED CANT MOVE HOSTILES NEARBY, UNINJURED NO KNOWN HOSTILES, INJURED LIMITED MOBILITY).",
            "maxLength": 64,
            "type": "string",
            "example": "UNINJURED CANT MOVE HOSTILES NEARBY"
          },
          "beaconInd": {
            "description": "Flag indicating whether a radio identifier is reported.",
            "type": "boolean",
            "example": false
          },
          "callSign": {
            "description": "The call sign of the personnel to be recovered.",
            "maxLength": 128,
            "type": "string",
            "example": "BADGER"
          },
          "textMsg": {
            "description": "Additional specific messages received from survivor.",
            "maxLength": 1024,
            "type": "string",
            "example": "Additional message from survivor."
          },
          "authMethod": {
            "description": "Mechanism used to verify the survivors identity.",
            "maxLength": 64,
            "type": "string",
            "example": "PASSPORT"
          },
          "objectiveAreaInfo": {
            "$ref": "#/components/schemas/PersonnelRecoveryObjectiveAreaInfo_Full"
          },
          "executionInfo": {
            "$ref": "#/components/schemas/PersonnelRecoveryExecutionInfo_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "PersonnelRecovery_Ingest": {
        "description": "Provides information concerning search and rescue operations and other situations involving personnel recovery.",
        "required": [
          "classificationMarking",
          "type",
          "msgTime",
          "pickupLat",
          "pickupLon",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "PERSONNEL_RECOVERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Specifies the type of incident resulting in a recovery or evacuation mission.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Emergency Type (e.g. NO STATEMENT, DOWN AIRCRAFT, MAN IN WATER, DITCHING, BAILOUT, DISTRESSED VEHICLE, GROUND INCIDENT, MEDICAL, ISOLATED PERSONS, etc.).",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "MEDICAL"
          },
          "msgTime": {
            "format": "date-time",
            "description": "Time stamp of the original personnel recovery message, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-10-15T16:00:00.123Z"
          },
          "recovId": {
            "description": "UUID identifying the Personnel Recovery  mission, which should remain the same on subsequent posts related to the same recovery mission.",
            "maxLength": 36,
            "type": "string",
            "example": "RECOV-ID"
          },
          "idWeatherReport": {
            "description": "Unique identifier of a weather report associated with this recovery.",
            "maxLength": 36,
            "type": "string",
            "example": "WEATHER_REPORT-ID"
          },
          "pickupLat": {
            "format": "double",
            "description": "WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 75.1234
          },
          "pickupLon": {
            "format": "double",
            "description": "WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 175.1234
          },
          "pickupAlt": {
            "format": "double",
            "description": "Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point eight below ellipsoid.",
            "type": "number",
            "example": 30.1234
          },
          "termInd": {
            "description": "Flag indicating the cancellation of this recovery.",
            "type": "boolean",
            "example": true
          },
          "authStatus": {
            "description": "The confirmation status of the isolated personnel identity. Intended as, but not constrained to, MIL-STD-6016 J6.1 Authentication Status, Isolated Personnel (NO STATEMENT, AUTHENTICATED, NOT AUTHENTICATED, AUTHENTICATED UNDER DURESS, NOT APPLICABLE):\n\nAUTHENTICATED:  Confirmed Friend\n\nNOT AUTHENTICATED: Unconfirmed status\n\nAUTHENTICATED UNDER DURESS:  Authentication comprised by hostiles.\n\nNOT APPLICABLE:  Authentication not required.",
            "maxLength": 36,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "numPersons": {
            "format": "int32",
            "description": "The count of persons requiring recovery.",
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "milClass": {
            "description": "The military classification of the personnel to be recovered. Intended as, but not constrained to, MIL-STD-6016 J6.1 Isolated Personnel Classification (NO STATEMENT, MILITARY, GOVERNMENT CIVILIAN, GOVERNMENT CONTRACTOR, CIVILIAN, MULTIPLE CLASSIFICATIONS).",
            "maxLength": 36,
            "type": "string",
            "example": "CIVILIAN"
          },
          "natAlliance": {
            "format": "int32",
            "description": "The country of origin or political entity of an isolated person subject to rescue or evacuation. If natAlliance is set to 126, then natAlliance1 must be non 0. If natAlliance is any number other than 126, then natAlliance1 will be set to 0 regardless. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s).",
            "maximum": 127,
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "natAlliance1": {
            "format": "int32",
            "description": "Extended country of origin or political entity of an isolated person subject to rescue or evacuation. Specify an entry here only if natAlliance is 126. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s), 1.",
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "identity": {
            "description": "The survivor service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVIILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).",
            "maxLength": 32,
            "type": "string",
            "example": "NEUTRAL CIVILIAN"
          },
          "commEq1": {
            "description": "Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).",
            "maxLength": 64,
            "type": "string",
            "example": "LL PHONE"
          },
          "commEq2": {
            "description": "Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).",
            "maxLength": 64,
            "type": "string",
            "example": "LL PHONE"
          },
          "commEq3": {
            "description": "Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).",
            "maxLength": 64,
            "type": "string",
            "example": "LL PHONE"
          },
          "txFreq": {
            "format": "double",
            "description": "Transmit voice frequency in 5Hz increments.",
            "type": "number",
            "example": 5.5
          },
          "rxFreq": {
            "format": "double",
            "description": "Receive voice frequency in 5Hz increments. This field will auto populate with the txFreq value if the post element is null.",
            "type": "number",
            "example": 5.5
          },
          "numNonAmbulatory": {
            "format": "int32",
            "description": "Number of littered personnel requiring recovery.",
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "numAmbulatory": {
            "format": "int32",
            "description": "Number of ambulatory personnel requiring recovery.",
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "numAmbulatoryInjured": {
            "format": "int32",
            "description": "Number of injured, but ambulatory, personnel requiring recovery.",
            "minimum": 0,
            "type": "integer",
            "example": 2
          },
          "survivorRadio": {
            "description": "Survivor radio equipment. Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Type (NO STATEMENT, PRQ7SEL, PRC90, PRC112, PRC112B B1, PRC112C, PRC112D, PRC148 MBITR, PRC148 JEM, PRC149, PRC152, ACRPLB, OTHER).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "survivorMessages": {
            "description": "Preloaded message conveying the situation confronting the isolated person(s). Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Messages (e.g. INJURED CANT MOVE NO KNOWN HOSTILES, INJURED CANT MOVE HOSTILES NEARBY, UNINJURED CANT MOVE HOSTILES NEARBY, UNINJURED NO KNOWN HOSTILES, INJURED LIMITED MOBILITY).",
            "maxLength": 64,
            "type": "string",
            "example": "UNINJURED CANT MOVE HOSTILES NEARBY"
          },
          "beaconInd": {
            "description": "Flag indicating whether a radio identifier is reported.",
            "type": "boolean",
            "example": false
          },
          "callSign": {
            "description": "The call sign of the personnel to be recovered.",
            "maxLength": 128,
            "type": "string",
            "example": "BADGER"
          },
          "textMsg": {
            "description": "Additional specific messages received from survivor.",
            "maxLength": 1024,
            "type": "string",
            "example": "Additional message from survivor."
          },
          "authMethod": {
            "description": "Mechanism used to verify the survivors identity.",
            "maxLength": 64,
            "type": "string",
            "example": "PASSPORT"
          },
          "objectiveAreaInfo": {
            "$ref": "#/components/schemas/PersonnelRecoveryObjectiveAreaInfo_Ingest"
          },
          "executionInfo": {
            "$ref": "#/components/schemas/PersonnelRecoveryExecutionInfo_Ingest"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "PersonnelRecoveryEnemyData_Abridged": {
        "type": "object",
        "properties": {
          "dirToEnemy": {
            "description": "Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).",
            "maxLength": 32,
            "type": "string",
            "example": "NORTHWEST"
          },
          "hostileFireType": {
            "description": "The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).",
            "maxLength": 32,
            "type": "string",
            "example": "SMALL ARMS"
          },
          "friendliesRemarks": {
            "description": "Comments provided by friendlies about the evac zone.",
            "maxLength": 128,
            "type": "string",
            "example": "Comments from friendlies."
          },
          "hlzRemarks": {
            "description": "Hot Landing Zone remarks.",
            "maxLength": 128,
            "type": "string",
            "example": "Hot Landing Zone remarks."
          }
        }
      },
      "PersonnelRecoveryEnemyData_Full": {
        "type": "object",
        "properties": {
          "dirToEnemy": {
            "description": "Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).",
            "maxLength": 32,
            "type": "string",
            "example": "NORTHWEST"
          },
          "hostileFireType": {
            "description": "The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).",
            "maxLength": 32,
            "type": "string",
            "example": "SMALL ARMS"
          },
          "friendliesRemarks": {
            "description": "Comments provided by friendlies about the evac zone.",
            "maxLength": 128,
            "type": "string",
            "example": "Comments from friendlies."
          },
          "hlzRemarks": {
            "description": "Hot Landing Zone remarks.",
            "maxLength": 128,
            "type": "string",
            "example": "Hot Landing Zone remarks."
          }
        }
      },
      "PersonnelRecoveryEnemyData_Ingest": {
        "type": "object",
        "properties": {
          "dirToEnemy": {
            "description": "Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).",
            "maxLength": 32,
            "type": "string",
            "example": "NORTHWEST"
          },
          "hostileFireType": {
            "description": "The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).",
            "maxLength": 32,
            "type": "string",
            "example": "SMALL ARMS"
          },
          "friendliesRemarks": {
            "description": "Comments provided by friendlies about the evac zone.",
            "maxLength": 128,
            "type": "string",
            "example": "Comments from friendlies."
          },
          "hlzRemarks": {
            "description": "Hot Landing Zone remarks.",
            "maxLength": 128,
            "type": "string",
            "example": "Hot Landing Zone remarks."
          }
        }
      },
      "PersonnelRecoveryExecutionInfo_Abridged": {
        "type": "object",
        "properties": {
          "initialPoint": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the initial location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              103.23,
              30.445
            ]
          },
          "ingress": {
            "format": "double",
            "description": "The heading, in degrees clockwise from North, of entering the recovery zone.",
            "type": "number",
            "example": 35.66
          },
          "objStrategy": {
            "description": "Description of the objective strategy plan.",
            "maxLength": 1024,
            "type": "string",
            "example": "Description of strategy plan."
          },
          "egressPoint": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the egress location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              107.23,
              30.455
            ]
          },
          "egress": {
            "format": "double",
            "description": "The heading, in degrees, of leaving the recovery zone.",
            "type": "number",
            "example": 66.53
          },
          "recoveryVehicle": {
            "$ref": "#/components/schemas/PersonnelRecoveryVehicle_Abridged"
          },
          "escortVehicle": {
            "$ref": "#/components/schemas/PersonnelRecoveryVehicle_Abridged"
          }
        }
      },
      "PersonnelRecoveryExecutionInfo_Full": {
        "type": "object",
        "properties": {
          "initialPoint": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the initial location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              103.23,
              30.445
            ]
          },
          "ingress": {
            "format": "double",
            "description": "The heading, in degrees clockwise from North, of entering the recovery zone.",
            "type": "number",
            "example": 35.66
          },
          "objStrategy": {
            "description": "Description of the objective strategy plan.",
            "maxLength": 1024,
            "type": "string",
            "example": "Description of strategy plan."
          },
          "egressPoint": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the egress location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              107.23,
              30.455
            ]
          },
          "egress": {
            "format": "double",
            "description": "The heading, in degrees, of leaving the recovery zone.",
            "type": "number",
            "example": 66.53
          },
          "recoveryVehicle": {
            "$ref": "#/components/schemas/PersonnelRecoveryVehicle_Full"
          },
          "escortVehicle": {
            "$ref": "#/components/schemas/PersonnelRecoveryVehicle_Full"
          }
        }
      },
      "PersonnelRecoveryExecutionInfo_Ingest": {
        "type": "object",
        "properties": {
          "initialPoint": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the initial location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              103.23,
              30.445
            ]
          },
          "ingress": {
            "format": "double",
            "description": "The heading, in degrees clockwise from North, of entering the recovery zone.",
            "type": "number",
            "example": 35.66
          },
          "objStrategy": {
            "description": "Description of the objective strategy plan.",
            "maxLength": 1024,
            "type": "string",
            "example": "Description of strategy plan."
          },
          "egressPoint": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the egress location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              107.23,
              30.455
            ]
          },
          "egress": {
            "format": "double",
            "description": "The heading, in degrees, of leaving the recovery zone.",
            "type": "number",
            "example": 66.53
          },
          "recoveryVehicle": {
            "$ref": "#/components/schemas/PersonnelRecoveryVehicle_Ingest"
          },
          "escortVehicle": {
            "$ref": "#/components/schemas/PersonnelRecoveryVehicle_Ingest"
          }
        }
      },
      "PersonnelRecoveryObjectiveAreaInfo_Abridged": {
        "type": "object",
        "properties": {
          "pzLocation": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the pz location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              103.23,
              30.445
            ]
          },
          "pzDesc": {
            "description": "Description of the pickup zone location.",
            "maxLength": 1024,
            "type": "string",
            "example": "Near the lake."
          },
          "oscCallSign": {
            "description": "The call sign of the on-scene commander.",
            "maxLength": 128,
            "type": "string",
            "example": "STARFOX"
          },
          "oscFreq": {
            "format": "double",
            "description": "The radio frequency of the on-scene commander.",
            "type": "number",
            "example": 12.55
          },
          "enemyData": {
            "description": "Information detailing knowledge of enemies in the area.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonnelRecoveryEnemyData_Abridged"
            }
          }
        }
      },
      "PersonnelRecoveryObjectiveAreaInfo_Full": {
        "type": "object",
        "properties": {
          "pzLocation": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the pz location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              103.23,
              30.445
            ]
          },
          "pzDesc": {
            "description": "Description of the pickup zone location.",
            "maxLength": 1024,
            "type": "string",
            "example": "Near the lake."
          },
          "oscCallSign": {
            "description": "The call sign of the on-scene commander.",
            "maxLength": 128,
            "type": "string",
            "example": "STARFOX"
          },
          "oscFreq": {
            "format": "double",
            "description": "The radio frequency of the on-scene commander.",
            "type": "number",
            "example": 12.55
          },
          "enemyData": {
            "description": "Information detailing knowledge of enemies in the area.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonnelRecoveryEnemyData_Full"
            }
          }
        }
      },
      "PersonnelRecoveryObjectiveAreaInfo_Ingest": {
        "type": "object",
        "properties": {
          "pzLocation": {
            "description": "Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the pz location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).",
            "maxItems": 3,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              103.23,
              30.445
            ]
          },
          "pzDesc": {
            "description": "Description of the pickup zone location.",
            "maxLength": 1024,
            "type": "string",
            "example": "Near the lake."
          },
          "oscCallSign": {
            "description": "The call sign of the on-scene commander.",
            "maxLength": 128,
            "type": "string",
            "example": "STARFOX"
          },
          "oscFreq": {
            "format": "double",
            "description": "The radio frequency of the on-scene commander.",
            "type": "number",
            "example": 12.55
          },
          "enemyData": {
            "description": "Information detailing knowledge of enemies in the area.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonnelRecoveryEnemyData_Ingest"
            }
          }
        }
      },
      "PersonnelRecoveryVehicle_Abridged": {
        "type": "object",
        "properties": {
          "callSign": {
            "description": "The call sign of the recovery vehicle.",
            "maxLength": 128,
            "type": "string",
            "example": "FALCO"
          },
          "type": {
            "description": "The particular type of recovery vehicle to be used.",
            "maxLength": 64,
            "type": "string",
            "example": "C17"
          },
          "primaryFreq": {
            "format": "double",
            "description": "Primary contact frequency of the recovery vehicle.",
            "type": "number",
            "example": 34.55
          },
          "strength": {
            "format": "int32",
            "description": "The number of objects or units moving as a group and represented as a single entity in this recovery vehicle message. If null, the strength is assumed to represent a single object.  Note that if this recovery derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.",
            "type": "integer",
            "example": 5
          }
        }
      },
      "PersonnelRecoveryVehicle_Full": {
        "type": "object",
        "properties": {
          "callSign": {
            "description": "The call sign of the recovery vehicle.",
            "maxLength": 128,
            "type": "string",
            "example": "FALCO"
          },
          "type": {
            "description": "The particular type of recovery vehicle to be used.",
            "maxLength": 64,
            "type": "string",
            "example": "C17"
          },
          "primaryFreq": {
            "format": "double",
            "description": "Primary contact frequency of the recovery vehicle.",
            "type": "number",
            "example": 34.55
          },
          "strength": {
            "format": "int32",
            "description": "The number of objects or units moving as a group and represented as a single entity in this recovery vehicle message. If null, the strength is assumed to represent a single object.  Note that if this recovery derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.",
            "type": "integer",
            "example": 5
          }
        }
      },
      "PersonnelRecoveryVehicle_Ingest": {
        "type": "object",
        "properties": {
          "callSign": {
            "description": "The call sign of the recovery vehicle.",
            "maxLength": 128,
            "type": "string",
            "example": "FALCO"
          },
          "type": {
            "description": "The particular type of recovery vehicle to be used.",
            "maxLength": 64,
            "type": "string",
            "example": "C17"
          },
          "primaryFreq": {
            "format": "double",
            "description": "Primary contact frequency of the recovery vehicle.",
            "type": "number",
            "example": 34.55
          },
          "strength": {
            "format": "int32",
            "description": "The number of objects or units moving as a group and represented as a single entity in this recovery vehicle message. If null, the strength is assumed to represent a single object.  Note that if this recovery derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.",
            "type": "integer",
            "example": 5
          }
        }
      },
      "RelatedDocument_Full": {
        "type": "object",
        "properties": {
          "documentId": {
            "description": "The document id of the related document.",
            "type": "string"
          },
          "dataSourceRefs": {
            "description": "List of data sources related to this document.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SofDataSourceRef_Full"
            }
          }
        }
      },
      "SofDataSourceRef_Full": {
        "type": "object",
        "properties": {
          "dataSourceId": {
            "description": "Data source id.",
            "type": "string"
          },
          "startPosition": {
            "description": "start position.",
            "type": "string"
          },
          "endPosition": {
            "description": "end position.",
            "type": "string"
          },
          "paragraphNumber": {
            "description": "paragraph number.",
            "type": "string"
          },
          "sentenceNumber": {
            "description": "sentence number.",
            "type": "string"
          }
        }
      }
    }
  }
}