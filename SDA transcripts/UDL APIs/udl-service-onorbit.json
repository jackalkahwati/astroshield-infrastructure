{
  "openapi": "3.0.3",
  "info": {
    "title": "Unified Data Library Services API",
    "version": "1.30.0 Daiquiri",
    "description": "Unified Data Library Services OpenAPI v3 documentation.",
    "termsOfService": "storefront/storefront/appConfig/useragreement.html",
    "contact": {
      "name": "Sage Andorka, Deputy, Cross-Mission Ground",
      "email": "unifieddatalibrary@bluestaq.com"
    }
  },
  "tags": [
    {
      "name": "Onorbit",
      "description": "These services provide operations for manipulation and querying of on-orbit objects of interest, their components, and various lists and status of those objects."
    }
  ],
  "externalDocs": {
    "url": "udl/openapi.json"
  },
  "servers": [
    {
      "url": "https://unifieddatalibrary.com"
    }
  ],
  "paths": {
    "/udl/antenna": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Antenna_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single Antenna as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one Antenna.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Antenna_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/antenna/{id}": {
      "delete": {
        "description": "Service operation to delete a Antenna object specified by the passed ID path parameter. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the Antenna to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single Antenna record by its unique ID passed as a path parameter.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the Antenna to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Antenna_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single Antenna. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the Antenna to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one Antenna.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Antenna_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/antenna/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/antenna/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/antenna/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Antenna_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/antennadetails": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AntennaDetails_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single AntennaDetails as a POST body and ingest into the database. An antenna may have multiple details records compiled by various sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one AntennaDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AntennaDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/antennadetails/{id}": {
      "delete": {
        "description": "Service operation to delete a AntennaDetails object specified by the passed ID path parameter. An antenna may have multiple details records compiled by various sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the AntennaDetails to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single AntennaDetails record by its unique ID passed as a path parameter. An antenna may have multiple details records compiled by various sources.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the AntennaDetails to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AntennaDetails_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single AntennaDetails. An antenna may have multiple details records compiled by various sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the AntennaDetails to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one AntennaDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AntennaDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/battery": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Battery_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single Battery as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one battery.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Battery_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/battery/{id}": {
      "delete": {
        "description": "Service operation to delete a Battery object specified by the passed ID path parameter. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the Battery to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single Battery record by its unique ID passed as a path parameter.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the Battery to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Battery_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single Battery. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the Battery to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one Battery.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Battery_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/battery/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/battery/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/battery/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Battery_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/batterydetails": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatteryDetails_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single BatteryDetails as a POST body and ingest into the database. A Battery record may have multiple details records from several sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one BatteryDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatteryDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/batterydetails/{id}": {
      "delete": {
        "description": "Service operation to delete a BatteryDetails object specified by the passed ID path parameter. A Battery record may have multiple details records from several sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the BatteryDetails to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single BatteryDetails record by its unique ID passed as a path parameter. A Battery record may have multiple details records from several sources.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the BatteryDetails to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatteryDetails_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single BatteryDetails. A Battery record may have multiple details records from several sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the BatteryDetails to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one BatteryDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatteryDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/drifthistory": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DriftHistory_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/drifthistory/{id}": {
      "get": {
        "description": "Service operation to get a single DriftHistory record by its unique ID passed as a path parameter. DriftHistory represents historical drift rates for GEO Onorbit objects resulting from updates to OnorbitDetails driftRate values.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the DriftHistory to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DriftHistory_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/drifthistory/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/drifthistory/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/drifthistory/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DriftHistory_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/geostatus": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GEOStatus_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single GEOStatus record as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GEOStatus_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/geostatus/{id}": {
      "get": {
        "description": "Service operation to get a single GEOStatus record by its unique ID passed as a path parameter.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the GEOStatus to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GEOStatus_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/geostatus/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/geostatus/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of GEOStatus records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON array of Maneuvers.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GEOStatus_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/geostatus/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GEOStatus_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/geostatus/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/geostatus/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/geostatus/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/geostatus/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GEOStatus_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/manifold": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Manifold_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single Manifold as a POST body and ingest into the database. A manifold represents a set of possible/theoretical orbits for an object of interest based on a delta V and delta T. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one Manifold.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Manifold_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/manifold/{id}": {
      "delete": {
        "description": "Service operation to delete a Manifold object specified by the passed ID path parameter. A manifold represents a set of possible/theoretical orbits for an object of interest based on a delta V and delta T. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the Manifold to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single Manifold record by its unique ID passed as a path parameter.  A manifold represents a set of possible/theoretical orbits for an object of interest based on a delta V and delta T.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the Manifold to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Manifold_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single Manifold. A manifold represents a set of possible/theoretical orbits for an object of interest based on a delta V and delta T. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the Manifold to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one Manifold.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Manifold_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/manifold/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/manifold/createBulk": {
      "post": {
        "description": "Service operation to take multiple Manifolds as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Manifold_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/manifold/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/manifold/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Manifold_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/manifoldelset": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManifoldElset_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "epoch",
            "description": "Elset epoch time in ISO 8601 UTC format, with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single ManifoldElset as a POST body and ingest into the database. A ManifoldElset represents theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one ManifoldElset.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManifoldElset_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/manifoldelset/{id}": {
      "delete": {
        "description": "Service operation to delete a ManifoldElset object specified by the passed ID path parameter. A ManifoldElset represents theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the ManifoldElset to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single ManifoldElset record by its unique ID passed as a path parameter. A ManifoldElset represents theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the ManifoldElset to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManifoldElset_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single ManifoldElset. A ManifoldElset represents theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the ManifoldElset to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one ManifoldElset.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManifoldElset_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/manifoldelset/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "epoch",
            "description": "Elset epoch time in ISO 8601 UTC format, with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/manifoldelset/createBulk": {
      "post": {
        "description": "Service operation to take multiple ManifoldElsets as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManifoldElset_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/manifoldelset/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/manifoldelset/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "epoch",
            "description": "Elset epoch time in ISO 8601 UTC format, with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManifoldElset_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/objectofinterest": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ObjectOfInterest_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single ObjectOfInterest as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one ObjectOfInterest.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObjectOfInterest_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/objectofinterest/{id}": {
      "delete": {
        "description": "Service operation to delete a ObjectOfInterest object specified by the passed ID path parameter. A ObjectOfInterest is an on-orbit ObjectOfInterestunications payload, including supporting data such as transponders and channels, etc. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the ObjectOfInterest to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single ObjectOfInterest record by its unique ID passed as a path parameter.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the ObjectOfInterest to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectOfInterest_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single ObjectOfInterest. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the ObjectOfInterest to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one ObjectOfInterest.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObjectOfInterest_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/objectofinterest/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/objectofinterest/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/objectofinterest/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ObjectOfInterest_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbit": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Onorbit_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single onorbit object as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Onorbit_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbit/{id}": {
      "delete": {
        "description": "Service operation to delete an OnOrbit object specified by the passed ID path parameter. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnOrbit object to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single OnOrbit object by its unique ID passed as a path parameter.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnOrbit object to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Onorbit_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single OnOrbit object. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnOrbit object to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Onorbit_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbit/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/onorbit/getSignature": {
      "get": {
        "description": "This service queries common information across Radar, EO, and RF observations.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "ID of the Onorbit object.",
            "required": true,
            "name": "idOnOrbit",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnorbitSignature_Abridged"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbit/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbit/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Onorbit_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitantenna": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnorbitAntenna_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single OnorbitAntenna as a POST body and ingest into the database. An OnorbitAntenna is the association between on-orbit spacecraft antennas and a particular on-orbit spacecraft. An antenna type may be associated with many different on-orbit spacecraft. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitAntenna.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitAntenna_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitantenna/{id}": {
      "delete": {
        "description": "Service operation to delete a OnorbitAntenna object specified by the passed ID path parameter. An OnorbitAntenna is the association between on-orbit spacecraft antennas and a particular on-orbit spacecraft. An antenna type may be associated with many different on-orbit spacecraft. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitAntenna to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single OnorbitAntenna record by its unique ID passed as a path parameter. An OnorbitAntenna is the association between on-orbit spacecraft antennas and a particular on-orbit spacecraft. An antenna type may be associated with many different on-orbit spacecraft.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitAntenna to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnorbitAntenna_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single OnorbitAntenna. An OnorbitAntenna is the association between on-orbit spacecraft antennas and a particular on-orbit spacecraft. An antenna type may be associated with many different on-orbit spacecraft. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitAntenna to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitAntenna.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitAntenna_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitbattery": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnorbitBattery_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single OnorbitBattery as a POST body and ingest into the database. OnorbitBattery is the association between on-orbit spacecraft batteries and a particular on-orbit spacecraft. A Battery may be associated with many different on-orbit spacecraft. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitBattery.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitBattery_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitbattery/{id}": {
      "delete": {
        "description": "Service operation to delete a OnorbitBattery object specified by the passed ID path parameter. OnorbitBattery is the association between on-orbit spacecraft batteries and a particular on-orbit spacecraft. A Battery may be associated with many different on-orbit spacecraft. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitBattery to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single OnorbitBattery record by its unique ID passed as a path parameter. OnorbitBattery is the association between on-orbit spacecraft batteries and a particular on-orbit spacecraft. A Battery may be associated with many different on-orbit spacecraft.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitBattery to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnorbitBattery_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single OnorbitBattery. OnorbitBattery is the association between on-orbit spacecraft batteries and a particular on-orbit spacecraft. A Battery may be associated with many different on-orbit spacecraft. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitBattery to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitBattery.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitBattery_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitdetails": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnorbitDetails_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single OnorbitDetails as a POST body and ingest into the database. An OnorbitDetails is a collection of additional characteristics on an on-orbit object. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitdetails/{id}": {
      "delete": {
        "description": "Service operation to delete a OnorbitDetails object specified by the passed ID path parameter. An OnorbitDetails is a collection of additional characteristics on an on-orbit object. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitDetails to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single OnorbitDetails record by its unique ID passed as a path parameter. An OnorbitDetails is a collection of additional characteristics on an on-orbit object.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitDetails to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnorbitDetails_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single OnorbitDetails. An OnorbitDetails is a collection of additional characteristics on an on-orbit object. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitDetails to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitevent": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnorbitEvent_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single OnorbitEvent as a POST body and ingest into the database. An OnorbitEvent is an event associated with a particular on-orbit spacecraft including insurance related losses, anomalies and incidents. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitEvent.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitEvent_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitevent/{id}": {
      "delete": {
        "description": "Service operation to delete a OnorbitEvent object specified by the passed ID path parameter. An OnorbitEvent is an event associated with a particular on-orbit spacecraft including insurance related losses, anomalies and incidents. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitEvent to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single OnorbitEvent record by its unique ID passed as a path parameter. An OnorbitEvent is an event associated with a particular on-orbit spacecraft including insurance related losses, anomalies and incidents.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitEvent to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnorbitEvent_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single OnorbitEvent. An OnorbitEvent is an event associated with a particular on-orbit spacecraft including insurance related losses, anomalies and incidents. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitEvent to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitEvent.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitEvent_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitevent/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/onorbitevent/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitevent/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnorbitEvent_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitlist": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnorbitList_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single OnorbitList as a POST body and ingest into the database. An OnorbitList is just a generic named list of on-orbit IDs. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitList.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitList_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitlist/{id}": {
      "delete": {
        "description": "Service operation to delete a OnorbitList object specified by the passed ID path parameter. An OnorbitList is just a generic named list of on-orbit IDs. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitList to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single OnorbitList record by its unique ID passed as a path parameter. An OnorbitList is just a generic named list of on-orbit IDs.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitList to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnorbitList_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single OnorbitList. An OnorbitList is just a generic named list of on-orbit IDs. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitList to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitList.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitList_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitlist/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/onorbitlist/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitlist/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnorbitList_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitsolararray": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnorbitSolarArray_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single OnorbitSolarArray as a POST body and ingest into the database. An OnorbitSolarArray is the association between on-orbit spacecraft SolarArrays and a particular on-orbit spacecraft. A SolarArray type may be associated with many different on-orbit spacecraft. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitSolarArray.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitSolarArray_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitsolararray/{id}": {
      "delete": {
        "description": "Service operation to delete a OnorbitSolarArray object specified by the passed ID path parameter. An OnorbitSolarArray is the association between on-orbit spacecraft SolarArrays and a particular on-orbit spacecraft. A SolarArray type may be associated with many different on-orbit spacecraft. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitSolarArray to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single OnorbitSolarArray record by its unique ID passed as a path parameter. An OnorbitSolarArray is the association between on-orbit spacecraft SolarArrays and a particular on-orbit spacecraft. A SolarArray type may be associated with many different on-orbit spacecraft.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitSolarArray to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnorbitSolarArray_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single OnorbitSolarArray. An OnorbitSolarArray is the association between on-orbit spacecraft SolarArrays and a particular on-orbit spacecraft. A SolarArray type may be associated with many different on-orbit spacecraft. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitSolarArray to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitSolarArray.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitSolarArray_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitthruster": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnorbitThruster_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single OnorbitThruster as a POST body and ingest into the database. An OnorbitThruster is the association between an on-orbit spacecraft's engine and a particular on-orbit spacecraft. An Engine type may be associated with many different on-orbit spacecraft. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitThruster.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitThruster_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitthruster/{id}": {
      "delete": {
        "description": "Service operation to delete a OnorbitThruster object specified by the passed ID path parameter. An OnorbitThruster is the association between an on-orbit spacecraft's engine and a particular on-orbit spacecraft. An Engine type may be associated with many different on-orbit spacecraft. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitThruster to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single OnorbitThruster record by its unique ID passed as a path parameter. An OnorbitThruster is the association between an on-orbit spacecraft's engine and a particular on-orbit spacecraft. An Engine type may be associated with many different on-orbit spacecraft.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitThruster to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnorbitThruster_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single OnorbitThruster. An OnorbitThruster is the association between an on-orbit spacecraft's engine and a particular on-orbit spacecraft. An Engine type may be associated with many different on-orbit spacecraft. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitThruster to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitThruster.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitThruster_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitthrusterstatus": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnorbitThrusterStatus_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "idOnorbitThruster",
            "description": "(One or more of fields 'idOnorbitThruster, statusTime' are required.) ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "statusTime",
            "description": "(One or more of fields 'idOnorbitThruster, statusTime' are required.) Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single OnorbitThrusterStatus record as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one OnorbitThrusterStatus.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnorbitThrusterStatus_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitthrusterstatus/{id}": {
      "delete": {
        "description": "Service operation to delete a OnorbitThrusterStatus record specified by the passed ID path parameter. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitDetails to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single OnorbitThrusterStatus record by its unique ID passed as a path parameter. OnorbitThrusterStatus records are information for OnorbitThruster objects.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the OnorbitThrusterStatus to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnorbitThrusterStatus_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitthrusterstatus/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "idOnorbitThruster",
            "description": "(One or more of fields 'idOnorbitThruster, statusTime' are required.) ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "statusTime",
            "description": "(One or more of fields 'idOnorbitThruster, statusTime' are required.) Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/onorbitthrusterstatus/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of onorbitthrusterstatus records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OnorbitThrusterStatus_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitthrusterstatus/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idOnorbitThruster",
            "description": "(One or more of fields 'idOnorbitThruster, statusTime' are required.) ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "statusTime",
            "description": "(One or more of fields 'idOnorbitThruster, statusTime' are required.) Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnorbitThrusterStatus_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitthrusterstatus/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "idOnorbitThruster",
            "description": "(One or more of fields 'idOnorbitThruster, statusTime' are required.) ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "statusTime",
            "description": "(One or more of fields 'idOnorbitThruster, statusTime' are required.) Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/onorbitthrusterstatus/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onorbitthrusterstatus/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idOnorbitThruster",
            "description": "(One or more of fields 'idOnorbitThruster, statusTime' are required.) ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "statusTime",
            "description": "(One or more of fields 'idOnorbitThruster, statusTime' are required.) Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnorbitThrusterStatus_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/seradataspacecraftdetails": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SeradataSpacecraftDetails_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single SeradataSpacecraftDetails as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one SeradataSpacecraftDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SeradataSpacecraftDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/seradataspacecraftdetails/{id}": {
      "delete": {
        "description": "Service operation to delete an SeradataSpacecraftDetails specified by the passed ID path parameter. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the SeradataSpacecraftDetails to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single SeradataSpacecraftDetails by its unique ID passed as a path parameter.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the SeradataSpacecraftDetails to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeradataSpacecraftDetails_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update an SeradataSpacecraftDetails. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the SeradataSpacecraftDetails to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one SeradataSpacecraftDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SeradataSpacecraftDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/seradataspacecraftdetails/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/seradataspacecraftdetails/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/seradataspacecraftdetails/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SeradataSpacecraftDetails_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/solararray": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SolarArray_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single SolarArray as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one SolarArray.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SolarArray_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/solararray/{id}": {
      "delete": {
        "description": "Service operation to delete a SolarArray object specified by the passed ID path parameter. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the SolarArray to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single SolarArray record by its unique ID passed as a path parameter.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the SolarArray to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolarArray_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single SolarArray. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the SolarArray to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one SolarArray.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SolarArray_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/solararray/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/solararray/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/solararray/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SolarArray_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/solararraydetails": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Onorbit"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SolarArrayDetails_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "classificationMarking",
            "description": "(One or more of fields 'classificationMarking, dataMode, source' are required.) Classification marking of the data in IC/CAPCO Portion-marked format.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "dataMode",
            "description": "(One or more of fields 'classificationMarking, dataMode, source' are required.) Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data. (REAL, TEST, SIMULATED, or EXERCISE)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "source",
            "description": "(One or more of fields 'classificationMarking, dataMode, source' are required.) Source of the data.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single SolarArrayDetails as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance. A SolarArray may have multiple details records compiled by various sources.",
        "tags": [
          "Onorbit"
        ],
        "requestBody": {
          "description": "JSON representation of one SolarArrayDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SolarArrayDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/solararraydetails/{id}": {
      "delete": {
        "description": "Service operation to delete a SolarArrayDetails object specified by the passed ID path parameter. A specific role is required to perform this service operation. Please contact the UDL team for assistance. A SolarArray may have multiple details records compiled by various sources.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the SolarArrayDetails to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single SolarArrayDetails record by its unique ID passed as a path parameter. A SolarArray may have multiple details records compiled by various sources.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the SolarArrayDetails to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolarArrayDetails_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single SolarArrayDetails. A specific role is required to perform this service operation. Please contact the UDL team for assistance. A SolarArray may have multiple details records compiled by various sources.",
        "tags": [
          "Onorbit"
        ],
        "parameters": [
          {
            "description": "The ID of the SolarArrayDetails to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one SolarArrayDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SolarArrayDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Antenna_Abridged": {
        "description": "Model representation of information on on-orbit/spacecraft communication antennas. A spacecraft may have multiple antennas and each antenna can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "name": {
            "description": "Antenna name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "IRIDIUM NEXT 121-ANTENNA-10075"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Antenna_Full": {
        "description": "Model representation of information on on-orbit/spacecraft communication antennas. A spacecraft may have multiple antennas and each antenna can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "name": {
            "description": "Antenna name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "IRIDIUM NEXT 121-ANTENNA-10075"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "antennaDetails": {
            "description": "Read-only collection of additional AntennaDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/antennadetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AntennaDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "Antenna_Ingest": {
        "description": "Model representation of information on on-orbit/spacecraft communication antennas. A spacecraft may have multiple antennas and each antenna can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "name": {
            "description": "Antenna name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "IRIDIUM NEXT 121-ANTENNA-10075"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "AntennaDetails_Abridged": {
        "description": "Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.",
        "required": [
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNADETAILS-ID"
          },
          "idAntenna": {
            "description": "Unique identifier of the parent Antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Reflector"
          },
          "position": {
            "description": "Antenna position (e.g. Top, Nadir, Side).",
            "maxLength": 128,
            "type": "string",
            "example": "Top"
          },
          "mode": {
            "description": "Antenna mode (e.g. TX,RX).",
            "maxLength": 4,
            "enum": [
              "TX",
              "RX"
            ],
            "type": "string",
            "example": "TX"
          },
          "steerable": {
            "description": "Boolean indicating if this antenna is steerable.",
            "type": "boolean",
            "example": false
          },
          "beamForming": {
            "description": "Boolean indicating if this is a beam forming antenna.",
            "type": "boolean",
            "example": false
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the antenna.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTUREORG-ID"
          },
          "diameter": {
            "format": "double",
            "description": "Antenna diameter in meters.",
            "type": "number",
            "example": 0.01
          },
          "size": {
            "description": "Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.05
            ]
          },
          "startFrequency": {
            "format": "double",
            "description": "Antenna start of frequency range in Mhz.",
            "type": "number",
            "example": 2.1
          },
          "endFrequency": {
            "format": "double",
            "description": "Antenna end of frequency range in Mhz.",
            "type": "number",
            "example": 3.3
          },
          "beamwidth": {
            "format": "double",
            "description": "Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.",
            "type": "number",
            "example": 14.1
          },
          "gain": {
            "format": "double",
            "description": "Antenna maximum gain in dBi.",
            "type": "number",
            "example": 20.1
          },
          "gainTolerance": {
            "format": "double",
            "description": "Antenna gain tolerance in dB.",
            "type": "number",
            "example": 5.1
          },
          "polarization": {
            "format": "double",
            "description": "Antenna polarization in degrees.",
            "type": "number",
            "example": 45.1
          },
          "description": {
            "description": "Antenna description.",
            "maxLength": 512,
            "type": "string",
            "example": "Description of antenna A"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "AntennaDetails_Full": {
        "description": "Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.",
        "required": [
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNADETAILS-ID"
          },
          "idAntenna": {
            "description": "Unique identifier of the parent Antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Reflector"
          },
          "position": {
            "description": "Antenna position (e.g. Top, Nadir, Side).",
            "maxLength": 128,
            "type": "string",
            "example": "Top"
          },
          "mode": {
            "description": "Antenna mode (e.g. TX,RX).",
            "maxLength": 4,
            "enum": [
              "TX",
              "RX"
            ],
            "type": "string",
            "example": "TX"
          },
          "steerable": {
            "description": "Boolean indicating if this antenna is steerable.",
            "type": "boolean",
            "example": false
          },
          "beamForming": {
            "description": "Boolean indicating if this is a beam forming antenna.",
            "type": "boolean",
            "example": false
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the antenna.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTUREORG-ID"
          },
          "diameter": {
            "format": "double",
            "description": "Antenna diameter in meters.",
            "type": "number",
            "example": 0.01
          },
          "size": {
            "description": "Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.05
            ]
          },
          "startFrequency": {
            "format": "double",
            "description": "Antenna start of frequency range in Mhz.",
            "type": "number",
            "example": 2.1
          },
          "endFrequency": {
            "format": "double",
            "description": "Antenna end of frequency range in Mhz.",
            "type": "number",
            "example": 3.3
          },
          "beamwidth": {
            "format": "double",
            "description": "Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.",
            "type": "number",
            "example": 14.1
          },
          "gain": {
            "format": "double",
            "description": "Antenna maximum gain in dBi.",
            "type": "number",
            "example": 20.1
          },
          "gainTolerance": {
            "format": "double",
            "description": "Antenna gain tolerance in dB.",
            "type": "number",
            "example": 5.1
          },
          "polarization": {
            "format": "double",
            "description": "Antenna polarization in degrees.",
            "type": "number",
            "example": 45.1
          },
          "description": {
            "description": "Antenna description.",
            "maxLength": 512,
            "type": "string",
            "example": "Description of antenna A"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "AntennaDetails_Ingest": {
        "description": "Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.",
        "required": [
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNADETAILS-ID"
          },
          "idAntenna": {
            "description": "Unique identifier of the parent Antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Reflector"
          },
          "position": {
            "description": "Antenna position (e.g. Top, Nadir, Side).",
            "maxLength": 128,
            "type": "string",
            "example": "Top"
          },
          "mode": {
            "description": "Antenna mode (e.g. TX,RX).",
            "maxLength": 4,
            "enum": [
              "TX",
              "RX"
            ],
            "type": "string",
            "example": "TX"
          },
          "steerable": {
            "description": "Boolean indicating if this antenna is steerable.",
            "type": "boolean",
            "example": false
          },
          "beamForming": {
            "description": "Boolean indicating if this is a beam forming antenna.",
            "type": "boolean",
            "example": false
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the antenna.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTUREORG-ID"
          },
          "diameter": {
            "format": "double",
            "description": "Antenna diameter in meters.",
            "type": "number",
            "example": 0.01
          },
          "size": {
            "description": "Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.05
            ]
          },
          "startFrequency": {
            "format": "double",
            "description": "Antenna start of frequency range in Mhz.",
            "type": "number",
            "example": 2.1
          },
          "endFrequency": {
            "format": "double",
            "description": "Antenna end of frequency range in Mhz.",
            "type": "number",
            "example": 3.3
          },
          "beamwidth": {
            "format": "double",
            "description": "Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.",
            "type": "number",
            "example": 14.1
          },
          "gain": {
            "format": "double",
            "description": "Antenna maximum gain in dBi.",
            "type": "number",
            "example": 20.1
          },
          "gainTolerance": {
            "format": "double",
            "description": "Antenna gain tolerance in dB.",
            "type": "number",
            "example": 5.1
          },
          "polarization": {
            "format": "double",
            "description": "Antenna polarization in degrees.",
            "type": "number",
            "example": 45.1
          },
          "description": {
            "description": "Antenna description.",
            "maxLength": 512,
            "type": "string",
            "example": "Description of antenna A"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "Battery_Abridged": {
        "description": "Model representation of specific spacecraft battery types.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "name": {
            "description": "Battery name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "JAK-BATTERY-1479"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Battery_Full": {
        "description": "Model representation of specific spacecraft battery types.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "name": {
            "description": "Battery name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "JAK-BATTERY-1479"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "batteryDetails": {
            "description": "Read-only collection of additional BatteryDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/batterydetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatteryDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "Battery_Ingest": {
        "description": "Model representation of specific spacecraft battery types.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "name": {
            "description": "Battery name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "JAK-BATTERY-1479"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "BatteryDetails_Abridged": {
        "description": "Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.",
        "required": [
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERYDETAILS-ID"
          },
          "idBattery": {
            "description": "Identifier of the parent battery type record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "technology": {
            "description": "Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Ni-Cd"
          },
          "capacity": {
            "format": "double",
            "description": "Battery capacity in Ah.",
            "type": "number",
            "example": 10.1
          },
          "dischargeDepth": {
            "format": "double",
            "description": "Depth of discharge as a percentage/fraction.",
            "type": "number",
            "example": 0.2
          },
          "model": {
            "description": "Battery model number or name.",
            "maxLength": 128,
            "type": "string",
            "example": "11212"
          },
          "description": {
            "description": "Battery description/notes.",
            "maxLength": 1024,
            "type": "string",
            "example": "example notes"
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the battery.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "BatteryDetails_Full": {
        "description": "Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.",
        "required": [
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERYDETAILS-ID"
          },
          "idBattery": {
            "description": "Identifier of the parent battery type record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "technology": {
            "description": "Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Ni-Cd"
          },
          "capacity": {
            "format": "double",
            "description": "Battery capacity in Ah.",
            "type": "number",
            "example": 10.1
          },
          "dischargeDepth": {
            "format": "double",
            "description": "Depth of discharge as a percentage/fraction.",
            "type": "number",
            "example": 0.2
          },
          "model": {
            "description": "Battery model number or name.",
            "maxLength": 128,
            "type": "string",
            "example": "11212"
          },
          "description": {
            "description": "Battery description/notes.",
            "maxLength": 1024,
            "type": "string",
            "example": "example notes"
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the battery.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "BatteryDetails_Ingest": {
        "description": "Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.",
        "required": [
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERYDETAILS-ID"
          },
          "idBattery": {
            "description": "Identifier of the parent battery type record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "technology": {
            "description": "Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Ni-Cd"
          },
          "capacity": {
            "format": "double",
            "description": "Battery capacity in Ah.",
            "type": "number",
            "example": 10.1
          },
          "dischargeDepth": {
            "format": "double",
            "description": "Depth of discharge as a percentage/fraction.",
            "type": "number",
            "example": 0.2
          },
          "model": {
            "description": "Battery model number or name.",
            "maxLength": 128,
            "type": "string",
            "example": "11212"
          },
          "description": {
            "description": "Battery description/notes.",
            "maxLength": 1024,
            "type": "string",
            "example": "example notes"
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the battery.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "DriftHistory_Abridged": {
        "description": "Historical drift rates for GEO Onorbit objects resulting from updates to OnorbitDetails driftRate values.",
        "required": [
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "DRIFTHISTORY-ID"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record.",
            "maxLength": 36,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "effectiveUntil": {
            "format": "date-time",
            "description": "Time the drift rate was replaced with another value and no longer the current value.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "driftRate": {
            "format": "double",
            "description": "GEO drift rate, if applicable in degrees per day.",
            "type": "number",
            "example": 1.1
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "DriftHistory_Full": {
        "description": "Historical drift rates for GEO Onorbit objects resulting from updates to OnorbitDetails driftRate values.",
        "required": [
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "DRIFTHISTORY-ID"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record.",
            "maxLength": 36,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "effectiveUntil": {
            "format": "date-time",
            "description": "Time the drift rate was replaced with another value and no longer the current value.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "driftRate": {
            "format": "double",
            "description": "GEO drift rate, if applicable in degrees per day.",
            "type": "number",
            "example": 1.1
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Engine_Abridged": {
        "description": "Known launch vehicle engines and their performance characteristics and limits.  A launch vehicle has 1 to many engines per stage.",
        "required": [
          "name",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "name": {
            "description": "Engine name/variant.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE_VARIANT1"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Engine_Full": {
        "description": "Known launch vehicle engines and their performance characteristics and limits.  A launch vehicle has 1 to many engines per stage.",
        "required": [
          "name",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "name": {
            "description": "Engine name/variant.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE_VARIANT1"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engineDetails": {
            "description": "Read-only collection of additional EngineDetails by various sources for this engine, ignored on create/update. These details must be created separately via the /udl/enginedetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EngineDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "Engine_Ingest": {
        "description": "Known launch vehicle engines and their performance characteristics and limits.  A launch vehicle has 1 to many engines per stage.",
        "required": [
          "name",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "name": {
            "description": "Engine name/variant.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE_VARIANT1"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "EngineDetails_Full": {
        "description": "Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.",
        "required": [
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINEDETAILS-ID"
          },
          "idEngine": {
            "description": "Identifier of the parent engine record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "family": {
            "description": "Engine type or family.",
            "maxLength": 64,
            "type": "string",
            "example": "ENGINE_TYPE1"
          },
          "cycleType": {
            "description": "Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Pressure Fed"
          },
          "characteristicType": {
            "description": "Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Electric"
          },
          "manufacturerOrgId": {
            "description": "Organization ID of the engine manufacturer.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "specificImpulse": {
            "format": "double",
            "description": "Launch engine specific impulse in seconds.",
            "type": "number",
            "example": 1.1
          },
          "burnTime": {
            "format": "double",
            "description": "Launch engine maximum burn time in seconds.",
            "type": "number",
            "example": 1.1
          },
          "seaLevelThrust": {
            "format": "double",
            "description": "Engine maximum thrust at sea level in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "vacuumThrust": {
            "format": "double",
            "description": "Engine maximum thrust in a vacuum in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "chamberPressure": {
            "format": "double",
            "description": "Engine chamber pressure in bars.",
            "type": "number",
            "example": 1.1
          },
          "nozzleExpansionRatio": {
            "format": "double",
            "description": "Engine nozzle expansion ratio.",
            "type": "number",
            "example": 1.1
          },
          "maxFirings": {
            "format": "int32",
            "description": "Engine maximum number of firings.",
            "type": "integer",
            "example": 5
          },
          "propellant": {
            "description": "Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid"
          },
          "oxidizer": {
            "description": "Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid Oxygen"
          },
          "notes": {
            "description": "Notes/Description of the engine.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "Entity_Full": {
        "description": "An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.",
        "required": [
          "name",
          "classificationMarking",
          "type",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idEntity": {
            "description": "Unique identifier of the record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENTITY-ID"
          },
          "name": {
            "description": "Unique entity name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Example name"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).",
            "maxLength": 45,
            "minLength": 1,
            "enum": [
              "AIRCRAFT",
              "BUS",
              "COMM",
              "IR",
              "NAVIGATION",
              "ONORBIT",
              "RFEMITTER",
              "SCIENTIFIC",
              "SENSOR",
              "SITE",
              "VESSEL"
            ],
            "type": "string",
            "example": "ONORBIT"
          },
          "idLocation": {
            "description": "Unique identifier of the entity location, if terrestrial/fixed.",
            "maxLength": 36,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "ownerType": {
            "description": "Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).",
            "maxLength": 32,
            "enum": [
              "Commercial",
              "Government",
              "Academic",
              "Consortium",
              "Other"
            ],
            "type": "string",
            "example": "Commercial"
          },
          "taskable": {
            "description": "Boolean indicating if this entity is taskable.",
            "type": "boolean",
            "example": false
          },
          "urls": {
            "description": "List of URLs to additional details/documents for this entity.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "URL1",
              "URL2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "location": {
            "$ref": "#/components/schemas/Location_Full"
          },
          "onOrbit": {
            "description": "Model object representing on-orbit objects or satellites in the system.",
            "required": [
              "classificationMarking",
              "satNo",
              "source",
              "dataMode"
            ],
            "type": "object",
            "properties": {
              "idOnOrbit": {
                "description": "For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.",
                "maxLength": 36,
                "minLength": 1,
                "type": "string",
                "example": "ONORBIT-ID"
              },
              "classificationMarking": {
                "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                "maxLength": 128,
                "minLength": 1,
                "type": "string",
                "example": "U"
              },
              "satNo": {
                "format": "int32",
                "description": "Satellite/Catalog number of the target on-orbit object.",
                "minimum": 0,
                "type": "integer",
                "example": 1
              },
              "commonName": {
                "description": "Common name of the on-orbit object.",
                "maxLength": 128,
                "type": "string",
                "example": "Example common name"
              },
              "constellation": {
                "description": "Constellation to which this satellite belongs.",
                "maxLength": 128,
                "type": "string",
                "example": "Big Dipper"
              },
              "intlDes": {
                "description": "International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.",
                "maxLength": 45,
                "type": "string",
                "example": "2021123ABC"
              },
              "launchDate": {
                "format": "date",
                "description": "Date of launch.",
                "type": "string",
                "example": "2018-01-01"
              },
              "decayDate": {
                "format": "date-time",
                "description": "Date of decay.",
                "type": "string",
                "example": "2018-01-01T16:00:00.123Z"
              },
              "objectType": {
                "description": "Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.",
                "maxLength": 32,
                "enum": [
                  "ROCKET BODY",
                  "DEBRIS",
                  "PAYLOAD",
                  "PLATFORM",
                  "MANNED",
                  "UNKNOWN"
                ],
                "type": "string",
                "example": "PAYLOAD"
              },
              "origin": {
                "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                "maxLength": 64,
                "type": "string",
                "example": "THIRD_PARTY_DATASOURCE"
              },
              "missionNumber": {
                "description": "Mission number of the on-orbit object.",
                "maxLength": 128,
                "type": "string",
                "example": "Expedition 1"
              },
              "category": {
                "description": "Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).",
                "maxLength": 45,
                "enum": [
                  "Unknown",
                  "On-Orbit",
                  "Decayed",
                  "Cataloged Without State",
                  "Launch Nominal",
                  "Analyst Satellite",
                  "Cislunar",
                  "Lunar",
                  "Hyperbolic",
                  "Heliocentric",
                  "Interplanetary",
                  "Lagrangian",
                  "Docked"
                ],
                "type": "string",
                "example": "Lunar"
              },
              "lifetimeYears": {
                "format": "int32",
                "description": "Estimated lifetime of the on-orbit payload, if known.",
                "type": "integer",
                "example": 10
              },
              "altName": {
                "description": "Alternate name of the on-orbit object.",
                "maxLength": 64,
                "type": "string",
                "example": "Alternate Name"
              },
              "createdAt": {
                "format": "date-time",
                "description": "Time the row was created in the database, auto-populated by the system.",
                "type": "string",
                "readOnly": true,
                "example": "2018-01-01T16:00:00.123Z"
              },
              "createdBy": {
                "description": "Application user who created the row in the database, auto-populated by the system.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "some.user"
              },
              "updatedAt": {
                "format": "date-time",
                "description": "Time the row was last updated in the database, auto-populated by the system.",
                "type": "string",
                "readOnly": true,
                "example": "2018-01-01T16:00:00.123Z"
              },
              "updatedBy": {
                "description": "Application user who updated the row in the database, auto-populated by the system.",
                "maxLength": 64,
                "type": "string",
                "readOnly": true,
                "example": "some.user"
              },
              "source": {
                "description": "Source of the data.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "example": "Bluestaq"
              },
              "dataMode": {
                "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                "maxLength": 32,
                "minLength": 1,
                "enum": [
                  "REAL",
                  "TEST",
                  "SIMULATED",
                  "EXERCISE"
                ],
                "type": "string",
                "example": "TEST"
              },
              "launchSiteId": {
                "description": "Id of the associated launchSite entity.",
                "maxLength": 36,
                "type": "string",
                "example": "LAUNCHSITE-ID"
              },
              "antennas": {
                "description": "Read-only collection of antennas on this on-orbit object.",
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OnorbitAntenna_Full"
                },
                "readOnly": true
              },
              "batteries": {
                "description": "Read-only collection of batteries on this on-orbit object.",
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OnorbitBattery_Full"
                },
                "readOnly": true
              },
              "solarArrays": {
                "description": "Read-only collection of solar arrays on this on-orbit object.",
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OnorbitSolarArray_Full"
                },
                "readOnly": true
              },
              "thrusters": {
                "description": "Read-only collection of thrusters (engines) on this on-orbit object.",
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OnorbitThruster_Full"
                },
                "readOnly": true
              },
              "onorbitDetails": {
                "description": "Read-only collection of details for this on-orbit object.",
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OnorbitDetails_Full"
                },
                "readOnly": true
              },
              "countryCode": {
                "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
                "maxLength": 4,
                "type": "string",
                "example": "US"
              },
              "origNetwork": {
                "description": "The originating source network on which this record was created, auto-populated by the system.",
                "maxLength": 32,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "OPS1"
              }
            }
          },
          "idOnOrbit": {
            "description": "Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
            "maxLength": 36,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "operatingUnit": {
            "$ref": "#/components/schemas/Operatingunit_Full"
          },
          "idOperatingUnit": {
            "description": "Unique identifier of the associated operating unit object.",
            "maxLength": 36,
            "type": "string",
            "example": "OPERATINGUNIT-ID"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "statusCollection": {
            "description": "Read-only collection of statuses which can be collected by multiple sources.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Status_Full"
            },
            "readOnly": true
          },
          "rfBands": {
            "description": "Read-only collection of RF bands utilized by this entity for communication and/or operation.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RFBand_Full"
            },
            "readOnly": true
          }
        }
      },
      "EOObservation_Abridged": {
        "description": "Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EOOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should contact the provider for details on their obTime specifications.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "corrQuality": {
            "format": "double",
            "description": "Object Correlation Quality score of the observation when compared to a known orbit state, (non-standardized). Users should consult data providers regarding the expected range of values.",
            "type": "number",
            "example": 1.1
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "idSkyImagery": {
            "description": "Unique identifier of the Sky Imagery.",
            "maxLength": 36,
            "type": "string",
            "example": "SKYIMAGERY-ID"
          },
          "collectMethod": {
            "description": "Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).",
            "maxLength": 24,
            "type": "string",
            "example": "AUTOTRACK"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 5
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "obPosition": {
            "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
            "maxLength": 8,
            "type": "string",
            "example": "FIRST"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": false
          },
          "azimuth": {
            "format": "double",
            "description": "Line of sight azimuth angle in degrees and topocentric frame.  Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight azimuth angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "azimuthBias": {
            "format": "double",
            "description": "Sensor line of sight azimuth angle bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the line of sight azimuth in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "elevation": {
            "format": "double",
            "description": "Line of sight elevation in degrees and topocentric frame. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight elevation angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "elevationBias": {
            "format": "double",
            "description": "Sensor line of sight elevation bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the line of sight elevation in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "range": {
            "format": "double",
            "description": "Line of sight range in km. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight range, in kilometers.",
            "type": "number",
            "example": 1.1
          },
          "rangeBias": {
            "format": "double",
            "description": "Sensor line of sight range bias in km.",
            "type": "number",
            "example": 1.1
          },
          "rangeRate": {
            "format": "double",
            "description": "Range rate in km/s. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight range rate, in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "ra": {
            "format": "double",
            "description": "Line of sight right ascension, in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "raMeasured": {
            "description": "Optional flag indicating whether the ra value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "raRate": {
            "format": "double",
            "description": "Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "raUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight right ascension angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "raBias": {
            "format": "double",
            "description": "Sensor line of sight right ascension bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "declination": {
            "format": "double",
            "description": "Line of sight declination, in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "declinationMeasured": {
            "description": "Optional flag indicating whether the declination value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "declinationRate": {
            "format": "double",
            "description": "Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "declinationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight declination angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "declinationBias": {
            "format": "double",
            "description": "Sensor line of sight declination angle bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "losx": {
            "format": "double",
            "description": "Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losy": {
            "format": "double",
            "description": "Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losz": {
            "format": "double",
            "description": "Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight pointing in micro-radians.",
            "type": "number",
            "example": 1.1
          },
          "losxvel": {
            "format": "double",
            "description": "Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losyvel": {
            "format": "double",
            "description": "Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "loszvel": {
            "format": "double",
            "description": "Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 179.1
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at obTime (if mobile/onorbit) in km.",
            "type": "number",
            "example": 1.1
          },
          "senx": {
            "format": "double",
            "description": "Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "seny": {
            "format": "double",
            "description": "Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senz": {
            "format": "double",
            "description": "Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelx": {
            "format": "double",
            "description": "Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvely": {
            "format": "double",
            "description": "Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelz": {
            "format": "double",
            "description": "Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senQuat": {
            "description": "The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.4492,
              0.02,
              0.8765,
              0.2213
            ]
          },
          "fovCount": {
            "format": "int32",
            "description": "The number of RSOs detected in the sensor field of view.",
            "type": "integer",
            "example": 1
          },
          "fovCountUCT": {
            "format": "int32",
            "description": "The number of uncorrelated tracks in the field of view.",
            "type": "integer",
            "example": 2
          },
          "expDuration": {
            "format": "double",
            "description": "Image exposure duration in seconds. For observations performed using frame stacking or synthetic tracking methods, the exposure duration should be the total integration time. This field is highly recommended / required if the observations are going to be used for photometric processing.",
            "type": "number",
            "example": 1.1
          },
          "zeroptd": {
            "format": "double",
            "description": "Formula: 2.5 * log_10 (zero_mag_counts / expDuration).",
            "type": "number",
            "example": 1.1
          },
          "netObjSig": {
            "format": "double",
            "description": "Net object signature = counts / expDuration.",
            "type": "number",
            "example": 1.1
          },
          "netObjSigUnc": {
            "format": "double",
            "description": "Net object signature uncertainty = counts uncertainty / expDuration.",
            "type": "number",
            "example": 1.1
          },
          "mag": {
            "format": "double",
            "description": "Measure of observed brightness calibrated against the Gaia G-band in units of magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "magUnc": {
            "format": "double",
            "description": "Uncertainty of the observed brightness in units of magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "magNormRange": {
            "format": "double",
            "description": "Formula: mag - 5.0 * log_10(geo_range / 1000000.0).",
            "type": "number",
            "example": 1.1
          },
          "geolat": {
            "format": "double",
            "description": "For GEO detections, the latitude in degrees north.",
            "type": "number",
            "example": 1.1
          },
          "geolon": {
            "format": "double",
            "description": "For GEO detections, the longitude in degrees east.",
            "type": "number",
            "example": 1.1
          },
          "geoalt": {
            "format": "double",
            "description": "For GEO detections, the altitude in km.",
            "type": "number",
            "example": 1.1
          },
          "georange": {
            "format": "double",
            "description": "For GEO detections, the range in km.",
            "type": "number",
            "example": 1.1
          },
          "skyBkgrnd": {
            "format": "double",
            "description": "Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.",
            "type": "number",
            "example": 1.1
          },
          "primaryExtinction": {
            "format": "double",
            "description": "Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.",
            "type": "number",
            "example": 1.1
          },
          "primaryExtinctionUnc": {
            "format": "double",
            "description": "Primary Extinction Coefficient Uncertainty, in Magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "solarPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.",
            "type": "number",
            "example": 1.1
          },
          "solarEqPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing (i.e. before the opposition) and positive when opening (after the opposition).",
            "type": "number",
            "example": 1.1
          },
          "solarDecAngle": {
            "format": "double",
            "description": "Angle from the sun to the equatorial plane.",
            "type": "number",
            "example": 1.1
          },
          "shutterDelay": {
            "format": "double",
            "description": "Shutter delay in seconds.",
            "type": "number",
            "example": 1.1
          },
          "timingBias": {
            "format": "double",
            "description": "Sensor timing bias in seconds.",
            "type": "number",
            "example": 1.1
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URI"
          },
          "intensity": {
            "format": "double",
            "description": "Intensity of the target for IR observations, in kw/sr/um.",
            "type": "number",
            "example": 1.1
          },
          "bgIntensity": {
            "format": "double",
            "description": "Background intensity for IR observations, in kw/sr/um.",
            "type": "number",
            "example": 1.1
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "PROVIDED_DATA1"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "referenceFrame": {
            "description": "The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "GCRF",
              "ITRF",
              "TEME"
            ],
            "type": "string",
            "example": "J2000"
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "umbra": {
            "description": "Boolean indicating that the target object was in umbral eclipse at the time of this observation.",
            "type": "boolean",
            "example": false
          },
          "penumbra": {
            "description": "Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.",
            "type": "boolean",
            "example": false
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "type": {
            "description": "Read only field specifying the type of observation (e.g. OPTICAL, OPTICAL_IR, LASER_RANGING, etc).",
            "type": "string",
            "readOnly": true,
            "example": "OPTICAL"
          }
        }
      },
      "GEOStatus_Abridged": {
        "description": "Information for the specified on-orbit GEO spacecraft, including status, expected longitude limits, and drift rates.",
        "required": [
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "GEOSTATUS-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the object on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "REF-ONORBIT-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "ss": {
            "format": "double",
            "description": "Sine of inclination times the sine of right ascension.",
            "type": "number",
            "example": 1.1
          },
          "sc": {
            "format": "double",
            "description": "Sine of inclination times the cosine of right ascension.",
            "type": "number",
            "example": 1.1
          },
          "relativeEnergy": {
            "format": "double",
            "description": "Objects displacement from geostationary orbit in deg^2/day^2.",
            "type": "number",
            "example": 1.1
          },
          "longitudeRate": {
            "format": "double",
            "description": "Corrective or overriding long term trend for longitudinal change in degrees/day.",
            "type": "number",
            "example": 1.1
          },
          "longitudeMin": {
            "format": "double",
            "description": "Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.",
            "maximum": 360,
            "minimum": 0,
            "type": "number",
            "example": 180.1
          },
          "longitudeMax": {
            "format": "double",
            "description": "Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.",
            "maximum": 360,
            "minimum": 0,
            "type": "number",
            "example": 1.01
          },
          "confidenceLevel": {
            "description": "Indicates the confidence level in the entry.  (Low, Medium, High).",
            "maxLength": 8,
            "type": "string",
            "example": "Low"
          },
          "planeChangeStatus": {
            "description": "Geosynchronous plane changing status.  (Current, Never, Former, Future).",
            "maxLength": 8,
            "type": "string",
            "example": "Current"
          },
          "troughType": {
            "description": "Indicates the trough (gravity well) or drift direction of a space object:\n\n255 - Influenced by 255° longitude trough. \n\n75 - Influenced by 75° longitude trough. \n\nBoth - Oscillating between both 255 and 75 troughs. \n\nEast - Drifting eastward; large relative energy and a period less than 1436.1 minutes. \n\nWest - Drifting westward; large relative energy and a period greater than 1436.2 minutes.",
            "maxLength": 8,
            "type": "string",
            "example": "West"
          },
          "lostFlag": {
            "description": "Lost space object indicator.  (True or False).",
            "type": "boolean",
            "example": false
          },
          "semiAnnualCorrFlag": {
            "description": "Semi-annual correction.  (True or False).",
            "type": "boolean",
            "example": false
          },
          "objectStatus": {
            "description": "Space object status.  (Active, Dead, Unknown).",
            "maxLength": 32,
            "type": "string",
            "example": "Active"
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URI"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 21
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "GEOStatus_Full": {
        "description": "Information for the specified on-orbit GEO spacecraft, including status, expected longitude limits, and drift rates.",
        "required": [
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "GEOSTATUS-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the object on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "REF-ONORBIT-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "ss": {
            "format": "double",
            "description": "Sine of inclination times the sine of right ascension.",
            "type": "number",
            "example": 1.1
          },
          "sc": {
            "format": "double",
            "description": "Sine of inclination times the cosine of right ascension.",
            "type": "number",
            "example": 1.1
          },
          "relativeEnergy": {
            "format": "double",
            "description": "Objects displacement from geostationary orbit in deg^2/day^2.",
            "type": "number",
            "example": 1.1
          },
          "longitudeRate": {
            "format": "double",
            "description": "Corrective or overriding long term trend for longitudinal change in degrees/day.",
            "type": "number",
            "example": 1.1
          },
          "longitudeMin": {
            "format": "double",
            "description": "Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.",
            "maximum": 360,
            "minimum": 0,
            "type": "number",
            "example": 180.1
          },
          "longitudeMax": {
            "format": "double",
            "description": "Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.",
            "maximum": 360,
            "minimum": 0,
            "type": "number",
            "example": 1.01
          },
          "confidenceLevel": {
            "description": "Indicates the confidence level in the entry.  (Low, Medium, High).",
            "maxLength": 8,
            "type": "string",
            "example": "Low"
          },
          "planeChangeStatus": {
            "description": "Geosynchronous plane changing status.  (Current, Never, Former, Future).",
            "maxLength": 8,
            "type": "string",
            "example": "Current"
          },
          "troughType": {
            "description": "Indicates the trough (gravity well) or drift direction of a space object:\n\n255 - Influenced by 255° longitude trough. \n\n75 - Influenced by 75° longitude trough. \n\nBoth - Oscillating between both 255 and 75 troughs. \n\nEast - Drifting eastward; large relative energy and a period less than 1436.1 minutes. \n\nWest - Drifting westward; large relative energy and a period greater than 1436.2 minutes.",
            "maxLength": 8,
            "type": "string",
            "example": "West"
          },
          "lostFlag": {
            "description": "Lost space object indicator.  (True or False).",
            "type": "boolean",
            "example": false
          },
          "semiAnnualCorrFlag": {
            "description": "Semi-annual correction.  (True or False).",
            "type": "boolean",
            "example": false
          },
          "objectStatus": {
            "description": "Space object status.  (Active, Dead, Unknown).",
            "maxLength": 32,
            "type": "string",
            "example": "Active"
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URI"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 21
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "GEOStatus_Ingest": {
        "description": "Information for the specified on-orbit GEO spacecraft, including status, expected longitude limits, and drift rates.",
        "required": [
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "GEOSTATUS-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the object on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "REF-ONORBIT-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "ss": {
            "format": "double",
            "description": "Sine of inclination times the sine of right ascension.",
            "type": "number",
            "example": 1.1
          },
          "sc": {
            "format": "double",
            "description": "Sine of inclination times the cosine of right ascension.",
            "type": "number",
            "example": 1.1
          },
          "relativeEnergy": {
            "format": "double",
            "description": "Objects displacement from geostationary orbit in deg^2/day^2.",
            "type": "number",
            "example": 1.1
          },
          "longitudeRate": {
            "format": "double",
            "description": "Corrective or overriding long term trend for longitudinal change in degrees/day.",
            "type": "number",
            "example": 1.1
          },
          "longitudeMin": {
            "format": "double",
            "description": "Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.",
            "maximum": 360,
            "minimum": 0,
            "type": "number",
            "example": 180.1
          },
          "longitudeMax": {
            "format": "double",
            "description": "Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.",
            "maximum": 360,
            "minimum": 0,
            "type": "number",
            "example": 1.01
          },
          "confidenceLevel": {
            "description": "Indicates the confidence level in the entry.  (Low, Medium, High).",
            "maxLength": 8,
            "type": "string",
            "example": "Low"
          },
          "planeChangeStatus": {
            "description": "Geosynchronous plane changing status.  (Current, Never, Former, Future).",
            "maxLength": 8,
            "type": "string",
            "example": "Current"
          },
          "troughType": {
            "description": "Indicates the trough (gravity well) or drift direction of a space object:\n\n255 - Influenced by 255° longitude trough. \n\n75 - Influenced by 75° longitude trough. \n\nBoth - Oscillating between both 255 and 75 troughs. \n\nEast - Drifting eastward; large relative energy and a period less than 1436.1 minutes. \n\nWest - Drifting westward; large relative energy and a period greater than 1436.2 minutes.",
            "maxLength": 8,
            "type": "string",
            "example": "West"
          },
          "lostFlag": {
            "description": "Lost space object indicator.  (True or False).",
            "type": "boolean",
            "example": false
          },
          "semiAnnualCorrFlag": {
            "description": "Semi-annual correction.  (True or False).",
            "type": "boolean",
            "example": false
          },
          "objectStatus": {
            "description": "Space object status.  (Active, Dead, Unknown).",
            "maxLength": 32,
            "type": "string",
            "example": "Active"
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URI"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 21
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "Location_Full": {
        "description": "Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idLocation": {
            "description": "Unique identifier of the location, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Location name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Example location"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 16,
            "type": "string",
            "example": "US"
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "altitude": {
            "format": "double",
            "description": "Altitude of the location, in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Manifold_Abridged": {
        "description": "A manifold represents a set of possible/theoretical orbits for an object of interest based on a delta V and delta T.",
        "required": [
          "idObjectOfInterest",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "MANIFOLD-ID"
          },
          "idObjectOfInterest": {
            "description": "ID of the parent object of interest.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OBJECTOFINTEREST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "status": {
            "description": "Status of the manifold and its associated ManifoldElsets (e.g. PENDING, COMPLETE). PENDING status means element set generation is in progress and COMPLETE indicates all ManifoldElsets have been generated.",
            "maxLength": 64,
            "type": "string",
            "example": "PENDING"
          },
          "weight": {
            "format": "double",
            "description": "Weight or probability of this manifold for prioritization purposes, between 0 and 1.",
            "type": "number",
            "example": 0.3
          },
          "deltaV": {
            "format": "double",
            "description": "Applied delta V for this manifold's calculations, in km/sec.",
            "type": "number",
            "example": 10.23
          },
          "deltaT": {
            "format": "double",
            "description": "Applied delta V duration for this manifold's calculations in seconds.",
            "type": "number",
            "example": 10.23
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "Manifold_Full": {
        "description": "A manifold represents a set of possible/theoretical orbits for an object of interest based on a delta V and delta T.",
        "required": [
          "idObjectOfInterest",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "MANIFOLD-ID"
          },
          "idObjectOfInterest": {
            "description": "ID of the parent object of interest.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OBJECTOFINTEREST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "status": {
            "description": "Status of the manifold and its associated ManifoldElsets (e.g. PENDING, COMPLETE). PENDING status means element set generation is in progress and COMPLETE indicates all ManifoldElsets have been generated.",
            "maxLength": 64,
            "type": "string",
            "example": "PENDING"
          },
          "weight": {
            "format": "double",
            "description": "Weight or probability of this manifold for prioritization purposes, between 0 and 1.",
            "type": "number",
            "example": 0.3
          },
          "deltaV": {
            "format": "double",
            "description": "Applied delta V for this manifold's calculations, in km/sec.",
            "type": "number",
            "example": 10.23
          },
          "deltaT": {
            "format": "double",
            "description": "Applied delta V duration for this manifold's calculations in seconds.",
            "type": "number",
            "example": 10.23
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Read-only time the row was updated in the database, set automatically by the system on update.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "Manifold_Ingest": {
        "description": "A manifold represents a set of possible/theoretical orbits for an object of interest based on a delta V and delta T.",
        "required": [
          "idObjectOfInterest",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "MANIFOLD-ID"
          },
          "idObjectOfInterest": {
            "description": "ID of the parent object of interest.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OBJECTOFINTEREST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "status": {
            "description": "Status of the manifold and its associated ManifoldElsets (e.g. PENDING, COMPLETE). PENDING status means element set generation is in progress and COMPLETE indicates all ManifoldElsets have been generated.",
            "maxLength": 64,
            "type": "string",
            "example": "PENDING"
          },
          "weight": {
            "format": "double",
            "description": "Weight or probability of this manifold for prioritization purposes, between 0 and 1.",
            "type": "number",
            "example": 0.3
          },
          "deltaV": {
            "format": "double",
            "description": "Applied delta V for this manifold's calculations, in km/sec.",
            "type": "number",
            "example": 10.23
          },
          "deltaT": {
            "format": "double",
            "description": "Applied delta V duration for this manifold's calculations in seconds.",
            "type": "number",
            "example": 10.23
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "ManifoldElset_Abridged": {
        "description": "Theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.",
        "required": [
          "idManifold",
          "classificationMarking",
          "tmpSatNo",
          "epoch",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "MANIFOLDELSET-ID"
          },
          "idManifold": {
            "description": "Identifier of the parent Manifold record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-MANIFOLD-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "tmpSatNo": {
            "format": "int32",
            "description": "A placeholder satellite number and not a true NORAD catalog number.",
            "type": "integer",
            "example": 10
          },
          "epoch": {
            "format": "date-time",
            "description": "Elset epoch time in ISO 8601 UTC format, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "meanMotion": {
            "format": "double",
            "description": "The constant angular speed required for the body to complete one circular orbit in the same amount of time as the actual elliptical orbit with variable speed. Measured in revolutions per day.",
            "type": "number",
            "example": 10.23
          },
          "eccentricity": {
            "format": "double",
            "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.",
            "type": "number",
            "example": 0.5
          },
          "inclination": {
            "format": "double",
            "description": "The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.",
            "type": "number",
            "example": 90.23
          },
          "raan": {
            "format": "double",
            "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.",
            "type": "number",
            "example": 10.23
          },
          "argOfPerigee": {
            "format": "double",
            "description": "The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.",
            "type": "number",
            "example": 10.23
          },
          "meanAnomaly": {
            "format": "double",
            "description": "Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.",
            "type": "number",
            "example": 10.23
          },
          "revNo": {
            "format": "int32",
            "description": "The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.",
            "type": "integer",
            "example": 123
          },
          "bStar": {
            "format": "double",
            "description": "The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.",
            "type": "number",
            "example": 10.23
          },
          "meanMotionDot": {
            "format": "double",
            "description": "1st derivative of the mean motion with respect to time. Units are revolutions per day squared.",
            "type": "number",
            "example": 10.23
          },
          "meanMotionDDot": {
            "format": "double",
            "description": "2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.",
            "type": "number",
            "example": 10.23
          },
          "semiMajorAxis": {
            "format": "double",
            "description": "The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.",
            "type": "number",
            "example": 10.23
          },
          "period": {
            "format": "double",
            "description": "Period of the orbit equal to inverse of mean motion.",
            "type": "number",
            "example": 10.23
          },
          "apogee": {
            "format": "double",
            "description": "The Orbit point furthest from the center of the earth in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "perigee": {
            "format": "double",
            "description": "The orbit point nearest to the center of the earth in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "line1": {
            "description": "Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
            "maxLength": 69,
            "type": "string",
            "readOnly": true
          },
          "line2": {
            "description": "Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
            "maxLength": 69,
            "type": "string",
            "readOnly": true
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "ManifoldElset_Full": {
        "description": "Theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.",
        "required": [
          "idManifold",
          "classificationMarking",
          "tmpSatNo",
          "epoch",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "MANIFOLDELSET-ID"
          },
          "idManifold": {
            "description": "Identifier of the parent Manifold record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-MANIFOLD-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "tmpSatNo": {
            "format": "int32",
            "description": "A placeholder satellite number and not a true NORAD catalog number.",
            "type": "integer",
            "example": 10
          },
          "epoch": {
            "format": "date-time",
            "description": "Elset epoch time in ISO 8601 UTC format, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "meanMotion": {
            "format": "double",
            "description": "The constant angular speed required for the body to complete one circular orbit in the same amount of time as the actual elliptical orbit with variable speed. Measured in revolutions per day.",
            "type": "number",
            "example": 10.23
          },
          "eccentricity": {
            "format": "double",
            "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.",
            "type": "number",
            "example": 0.5
          },
          "inclination": {
            "format": "double",
            "description": "The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.",
            "type": "number",
            "example": 90.23
          },
          "raan": {
            "format": "double",
            "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.",
            "type": "number",
            "example": 10.23
          },
          "argOfPerigee": {
            "format": "double",
            "description": "The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.",
            "type": "number",
            "example": 10.23
          },
          "meanAnomaly": {
            "format": "double",
            "description": "Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.",
            "type": "number",
            "example": 10.23
          },
          "revNo": {
            "format": "int32",
            "description": "The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.",
            "type": "integer",
            "example": 123
          },
          "bStar": {
            "format": "double",
            "description": "The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.",
            "type": "number",
            "example": 10.23
          },
          "meanMotionDot": {
            "format": "double",
            "description": "1st derivative of the mean motion with respect to time. Units are revolutions per day squared.",
            "type": "number",
            "example": 10.23
          },
          "meanMotionDDot": {
            "format": "double",
            "description": "2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.",
            "type": "number",
            "example": 10.23
          },
          "semiMajorAxis": {
            "format": "double",
            "description": "The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.",
            "type": "number",
            "example": 10.23
          },
          "period": {
            "format": "double",
            "description": "Period of the orbit equal to inverse of mean motion.",
            "type": "number",
            "example": 10.23
          },
          "apogee": {
            "format": "double",
            "description": "The Orbit point furthest from the center of the earth in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "perigee": {
            "format": "double",
            "description": "The orbit point nearest to the center of the earth in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "line1": {
            "description": "Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
            "maxLength": 69,
            "type": "string",
            "readOnly": true
          },
          "line2": {
            "description": "Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
            "maxLength": 69,
            "type": "string",
            "readOnly": true
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Read-only time the row was updated in the database, set automatically by the system on update.",
            "type": "string",
            "readOnly": true,
            "example": "2022-03-10"
          },
          "updatedBy": {
            "description": "Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "ManifoldElset_Ingest": {
        "description": "Theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.",
        "required": [
          "idManifold",
          "classificationMarking",
          "tmpSatNo",
          "epoch",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "MANIFOLDELSET-ID"
          },
          "idManifold": {
            "description": "Identifier of the parent Manifold record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-MANIFOLD-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "tmpSatNo": {
            "format": "int32",
            "description": "A placeholder satellite number and not a true NORAD catalog number.",
            "type": "integer",
            "example": 10
          },
          "epoch": {
            "format": "date-time",
            "description": "Elset epoch time in ISO 8601 UTC format, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "meanMotion": {
            "format": "double",
            "description": "The constant angular speed required for the body to complete one circular orbit in the same amount of time as the actual elliptical orbit with variable speed. Measured in revolutions per day.",
            "type": "number",
            "example": 10.23
          },
          "eccentricity": {
            "format": "double",
            "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.",
            "type": "number",
            "example": 0.5
          },
          "inclination": {
            "format": "double",
            "description": "The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.",
            "type": "number",
            "example": 90.23
          },
          "raan": {
            "format": "double",
            "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.",
            "type": "number",
            "example": 10.23
          },
          "argOfPerigee": {
            "format": "double",
            "description": "The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.",
            "type": "number",
            "example": 10.23
          },
          "meanAnomaly": {
            "format": "double",
            "description": "Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.",
            "type": "number",
            "example": 10.23
          },
          "revNo": {
            "format": "int32",
            "description": "The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.",
            "type": "integer",
            "example": 123
          },
          "bStar": {
            "format": "double",
            "description": "The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.",
            "type": "number",
            "example": 10.23
          },
          "meanMotionDot": {
            "format": "double",
            "description": "1st derivative of the mean motion with respect to time. Units are revolutions per day squared.",
            "type": "number",
            "example": 10.23
          },
          "meanMotionDDot": {
            "format": "double",
            "description": "2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.",
            "type": "number",
            "example": 10.23
          },
          "semiMajorAxis": {
            "format": "double",
            "description": "The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.",
            "type": "number",
            "example": 10.23
          },
          "period": {
            "format": "double",
            "description": "Period of the orbit equal to inverse of mean motion.",
            "type": "number",
            "example": 10.23
          },
          "apogee": {
            "format": "double",
            "description": "The Orbit point furthest from the center of the earth in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "perigee": {
            "format": "double",
            "description": "The orbit point nearest to the center of the earth in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "line1": {
            "description": "Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
            "maxLength": 69,
            "type": "string",
            "readOnly": true
          },
          "line2": {
            "description": "Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
            "maxLength": 69,
            "type": "string",
            "readOnly": true
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "ObjectOfInterest_Abridged": {
        "description": "OnOrbit objects of interest, which include information about the last known state of the object.",
        "required": [
          "classificationMarking",
          "idOnOrbit",
          "sensorTaskingStartTime",
          "statusDate",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OBJECTOFINTEREST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 12
          },
          "name": {
            "description": "Unique name of the object of interest event.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_name"
          },
          "sensorTaskingStartTime": {
            "format": "date-time",
            "description": "Sensor tasking start time for object of interest.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "sensorTaskingStopTime": {
            "format": "date-time",
            "description": "Sensor tasking stop time for object of interest.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "priority": {
            "format": "int32",
            "description": "Priority of the object of interest as an integer (1=highest priority).",
            "type": "integer",
            "example": 7
          },
          "status": {
            "description": "Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).",
            "maxLength": 16,
            "type": "string",
            "example": "OPEN"
          },
          "statusDate": {
            "format": "date-time",
            "description": "Time of last status change of the object of interest event.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "description": {
            "description": "Description of the object of interest event.",
            "maxLength": 256,
            "type": "string",
            "example": "Example description"
          },
          "lastObTime": {
            "format": "date-time",
            "description": "Last reported observation time in ISO 8601 UTC time, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "missedObTime": {
            "format": "date-time",
            "description": "The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "deltaVs": {
            "description": "Possible delta V applications for the object of interest, in km/sec.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2,
              3.3
            ]
          },
          "deltaTs": {
            "description": "Possible delta time applications for the object of interest, in seconds.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2,
              3.3
            ]
          },
          "svEpoch": {
            "format": "date-time",
            "description": "Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "x": {
            "format": "double",
            "description": "Last reported x position of the object in km, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "y": {
            "format": "double",
            "description": "Last reported y position of the object in km, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "z": {
            "format": "double",
            "description": "Last reported z position of the object in km, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "xvel": {
            "format": "double",
            "description": "Last reported x velocity of the object in km/sec, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "yvel": {
            "format": "double",
            "description": "Last reported y velocity of the object in km/sec, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "zvel": {
            "format": "double",
            "description": "Last reported z velocity of the object in km/sec, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "elsetEpoch": {
            "format": "date-time",
            "description": "Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "meanMotion": {
            "format": "double",
            "description": "Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.",
            "type": "number",
            "example": 123.4
          },
          "eccentricity": {
            "format": "double",
            "description": "Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.",
            "type": "number",
            "example": 123.4
          },
          "inclination": {
            "format": "double",
            "description": "Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.",
            "type": "number",
            "example": 123.4
          },
          "raan": {
            "format": "double",
            "description": "Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.",
            "type": "number",
            "example": 123.4
          },
          "argOfPerigee": {
            "format": "double",
            "description": "Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.",
            "type": "number",
            "example": 123.4
          },
          "meanAnomaly": {
            "format": "double",
            "description": "Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.",
            "type": "number",
            "example": 123.4
          },
          "revNo": {
            "format": "int32",
            "description": "The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.",
            "type": "integer",
            "example": 123
          },
          "bStar": {
            "format": "double",
            "description": "Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.",
            "type": "number",
            "example": 123.4
          },
          "meanMotionDot": {
            "format": "double",
            "description": "Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.",
            "type": "number",
            "example": 123.4
          },
          "meanMotionDDot": {
            "format": "double",
            "description": "Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.",
            "type": "number",
            "example": 123.4
          },
          "semiMajorAxis": {
            "format": "double",
            "description": "Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.",
            "type": "number",
            "example": 123.4
          },
          "period": {
            "format": "double",
            "description": "Last reported orbit period. Period of the orbit is equal to inverse of mean motion.",
            "type": "number",
            "example": 123.4
          },
          "apogee": {
            "format": "double",
            "description": "Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.",
            "type": "number",
            "example": 123.4
          },
          "perigee": {
            "format": "double",
            "description": "Last reported perigee. The orbit point nearest to the center of the earth in kilometers.",
            "type": "number",
            "example": 123.4
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "ObjectOfInterest_Full": {
        "description": "OnOrbit objects of interest, which include information about the last known state of the object.",
        "required": [
          "classificationMarking",
          "idOnOrbit",
          "sensorTaskingStartTime",
          "statusDate",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OBJECTOFINTEREST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 12
          },
          "name": {
            "description": "Unique name of the object of interest event.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_name"
          },
          "sensorTaskingStartTime": {
            "format": "date-time",
            "description": "Sensor tasking start time for object of interest.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "sensorTaskingStopTime": {
            "format": "date-time",
            "description": "Sensor tasking stop time for object of interest.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "priority": {
            "format": "int32",
            "description": "Priority of the object of interest as an integer (1=highest priority).",
            "type": "integer",
            "example": 7
          },
          "status": {
            "description": "Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).",
            "maxLength": 16,
            "type": "string",
            "example": "OPEN"
          },
          "statusDate": {
            "format": "date-time",
            "description": "Time of last status change of the object of interest event.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "description": {
            "description": "Description of the object of interest event.",
            "maxLength": 256,
            "type": "string",
            "example": "Example description"
          },
          "lastObTime": {
            "format": "date-time",
            "description": "Last reported observation time in ISO 8601 UTC time, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "missedObTime": {
            "format": "date-time",
            "description": "The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "deltaVs": {
            "description": "Possible delta V applications for the object of interest, in km/sec.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2,
              3.3
            ]
          },
          "deltaTs": {
            "description": "Possible delta time applications for the object of interest, in seconds.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2,
              3.3
            ]
          },
          "svEpoch": {
            "format": "date-time",
            "description": "Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "x": {
            "format": "double",
            "description": "Last reported x position of the object in km, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "y": {
            "format": "double",
            "description": "Last reported y position of the object in km, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "z": {
            "format": "double",
            "description": "Last reported z position of the object in km, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "xvel": {
            "format": "double",
            "description": "Last reported x velocity of the object in km/sec, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "yvel": {
            "format": "double",
            "description": "Last reported y velocity of the object in km/sec, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "zvel": {
            "format": "double",
            "description": "Last reported z velocity of the object in km/sec, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "elsetEpoch": {
            "format": "date-time",
            "description": "Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "meanMotion": {
            "format": "double",
            "description": "Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.",
            "type": "number",
            "example": 123.4
          },
          "eccentricity": {
            "format": "double",
            "description": "Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.",
            "type": "number",
            "example": 123.4
          },
          "inclination": {
            "format": "double",
            "description": "Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.",
            "type": "number",
            "example": 123.4
          },
          "raan": {
            "format": "double",
            "description": "Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.",
            "type": "number",
            "example": 123.4
          },
          "argOfPerigee": {
            "format": "double",
            "description": "Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.",
            "type": "number",
            "example": 123.4
          },
          "meanAnomaly": {
            "format": "double",
            "description": "Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.",
            "type": "number",
            "example": 123.4
          },
          "revNo": {
            "format": "int32",
            "description": "The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.",
            "type": "integer",
            "example": 123
          },
          "bStar": {
            "format": "double",
            "description": "Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.",
            "type": "number",
            "example": 123.4
          },
          "meanMotionDot": {
            "format": "double",
            "description": "Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.",
            "type": "number",
            "example": 123.4
          },
          "meanMotionDDot": {
            "format": "double",
            "description": "Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.",
            "type": "number",
            "example": 123.4
          },
          "semiMajorAxis": {
            "format": "double",
            "description": "Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.",
            "type": "number",
            "example": 123.4
          },
          "period": {
            "format": "double",
            "description": "Last reported orbit period. Period of the orbit is equal to inverse of mean motion.",
            "type": "number",
            "example": 123.4
          },
          "apogee": {
            "format": "double",
            "description": "Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.",
            "type": "number",
            "example": 123.4
          },
          "perigee": {
            "format": "double",
            "description": "Last reported perigee. The orbit point nearest to the center of the earth in kilometers.",
            "type": "number",
            "example": 123.4
          },
          "affectedObjects": {
            "description": "Optional array of Onorbit IDs (idOnOrbit) representing satellites potentially affected by this object of interest.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "AFFECTEDOBJECT1-ID",
              "AFFECTEDOBJECT2-ID"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "manifolds": {
            "description": "Manifolds associated with this object of interest.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Manifold_Full"
            }
          }
        }
      },
      "ObjectOfInterest_Ingest": {
        "description": "OnOrbit objects of interest, which include information about the last known state of the object.",
        "required": [
          "classificationMarking",
          "idOnOrbit",
          "sensorTaskingStartTime",
          "statusDate",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OBJECTOFINTEREST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 12
          },
          "name": {
            "description": "Unique name of the object of interest event.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_name"
          },
          "sensorTaskingStartTime": {
            "format": "date-time",
            "description": "Sensor tasking start time for object of interest.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "sensorTaskingStopTime": {
            "format": "date-time",
            "description": "Sensor tasking stop time for object of interest.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "priority": {
            "format": "int32",
            "description": "Priority of the object of interest as an integer (1=highest priority).",
            "type": "integer",
            "example": 7
          },
          "status": {
            "description": "Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).",
            "maxLength": 16,
            "type": "string",
            "example": "OPEN"
          },
          "statusDate": {
            "format": "date-time",
            "description": "Time of last status change of the object of interest event.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "description": {
            "description": "Description of the object of interest event.",
            "maxLength": 256,
            "type": "string",
            "example": "Example description"
          },
          "lastObTime": {
            "format": "date-time",
            "description": "Last reported observation time in ISO 8601 UTC time, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "missedObTime": {
            "format": "date-time",
            "description": "The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "deltaVs": {
            "description": "Possible delta V applications for the object of interest, in km/sec.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2,
              3.3
            ]
          },
          "deltaTs": {
            "description": "Possible delta time applications for the object of interest, in seconds.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2,
              3.3
            ]
          },
          "svEpoch": {
            "format": "date-time",
            "description": "Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "x": {
            "format": "double",
            "description": "Last reported x position of the object in km, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "y": {
            "format": "double",
            "description": "Last reported y position of the object in km, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "z": {
            "format": "double",
            "description": "Last reported z position of the object in km, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "xvel": {
            "format": "double",
            "description": "Last reported x velocity of the object in km/sec, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "yvel": {
            "format": "double",
            "description": "Last reported y velocity of the object in km/sec, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "zvel": {
            "format": "double",
            "description": "Last reported z velocity of the object in km/sec, in J2000 coordinates.",
            "type": "number",
            "example": 123.4
          },
          "elsetEpoch": {
            "format": "date-time",
            "description": "Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "meanMotion": {
            "format": "double",
            "description": "Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.",
            "type": "number",
            "example": 123.4
          },
          "eccentricity": {
            "format": "double",
            "description": "Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.",
            "type": "number",
            "example": 123.4
          },
          "inclination": {
            "format": "double",
            "description": "Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.",
            "type": "number",
            "example": 123.4
          },
          "raan": {
            "format": "double",
            "description": "Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.",
            "type": "number",
            "example": 123.4
          },
          "argOfPerigee": {
            "format": "double",
            "description": "Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.",
            "type": "number",
            "example": 123.4
          },
          "meanAnomaly": {
            "format": "double",
            "description": "Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.",
            "type": "number",
            "example": 123.4
          },
          "revNo": {
            "format": "int32",
            "description": "The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.",
            "type": "integer",
            "example": 123
          },
          "bStar": {
            "format": "double",
            "description": "Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.",
            "type": "number",
            "example": 123.4
          },
          "meanMotionDot": {
            "format": "double",
            "description": "Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.",
            "type": "number",
            "example": 123.4
          },
          "meanMotionDDot": {
            "format": "double",
            "description": "Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.",
            "type": "number",
            "example": 123.4
          },
          "semiMajorAxis": {
            "format": "double",
            "description": "Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.",
            "type": "number",
            "example": 123.4
          },
          "period": {
            "format": "double",
            "description": "Last reported orbit period. Period of the orbit is equal to inverse of mean motion.",
            "type": "number",
            "example": 123.4
          },
          "apogee": {
            "format": "double",
            "description": "Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.",
            "type": "number",
            "example": 123.4
          },
          "perigee": {
            "format": "double",
            "description": "Last reported perigee. The orbit point nearest to the center of the earth in kilometers.",
            "type": "number",
            "example": 123.4
          },
          "affectedObjects": {
            "description": "Optional array of Onorbit IDs (idOnOrbit) representing satellites potentially affected by this object of interest.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "AFFECTEDOBJECT1-ID",
              "AFFECTEDOBJECT2-ID"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Onorbit_Abridged": {
        "description": "Model object representing on-orbit objects or satellites in the system.",
        "required": [
          "classificationMarking",
          "satNo",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idOnOrbit": {
            "description": "For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "commonName": {
            "description": "Common name of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Example common name"
          },
          "constellation": {
            "description": "Constellation to which this satellite belongs.",
            "maxLength": 128,
            "type": "string",
            "example": "Big Dipper"
          },
          "intlDes": {
            "description": "International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.",
            "maxLength": 45,
            "type": "string",
            "example": "2021123ABC"
          },
          "launchDate": {
            "format": "date",
            "description": "Date of launch.",
            "type": "string",
            "example": "2018-01-01"
          },
          "decayDate": {
            "format": "date-time",
            "description": "Date of decay.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "objectType": {
            "description": "Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.",
            "maxLength": 32,
            "enum": [
              "ROCKET BODY",
              "DEBRIS",
              "PAYLOAD",
              "PLATFORM",
              "MANNED",
              "UNKNOWN"
            ],
            "type": "string",
            "example": "PAYLOAD"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "missionNumber": {
            "description": "Mission number of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Expedition 1"
          },
          "category": {
            "description": "Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).",
            "maxLength": 45,
            "enum": [
              "Unknown",
              "On-Orbit",
              "Decayed",
              "Cataloged Without State",
              "Launch Nominal",
              "Analyst Satellite",
              "Cislunar",
              "Lunar",
              "Hyperbolic",
              "Heliocentric",
              "Interplanetary",
              "Lagrangian",
              "Docked"
            ],
            "type": "string",
            "example": "Lunar"
          },
          "lifetimeYears": {
            "format": "int32",
            "description": "Estimated lifetime of the on-orbit payload, if known.",
            "type": "integer",
            "example": 10
          },
          "altName": {
            "description": "Alternate name of the on-orbit object.",
            "maxLength": 64,
            "type": "string",
            "example": "Alternate Name"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "launchSiteId": {
            "description": "Id of the associated launchSite entity.",
            "maxLength": 36,
            "type": "string",
            "example": "LAUNCHSITE-ID"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Onorbit_Full": {
        "description": "Model object representing on-orbit objects or satellites in the system.",
        "required": [
          "classificationMarking",
          "satNo",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idOnOrbit": {
            "description": "For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "commonName": {
            "description": "Common name of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Example common name"
          },
          "constellation": {
            "description": "Constellation to which this satellite belongs.",
            "maxLength": 128,
            "type": "string",
            "example": "Big Dipper"
          },
          "intlDes": {
            "description": "International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.",
            "maxLength": 45,
            "type": "string",
            "example": "2021123ABC"
          },
          "launchDate": {
            "format": "date",
            "description": "Date of launch.",
            "type": "string",
            "example": "2018-01-01"
          },
          "decayDate": {
            "format": "date-time",
            "description": "Date of decay.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "objectType": {
            "description": "Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.",
            "maxLength": 32,
            "enum": [
              "ROCKET BODY",
              "DEBRIS",
              "PAYLOAD",
              "PLATFORM",
              "MANNED",
              "UNKNOWN"
            ],
            "type": "string",
            "example": "PAYLOAD"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "missionNumber": {
            "description": "Mission number of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Expedition 1"
          },
          "category": {
            "description": "Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).",
            "maxLength": 45,
            "enum": [
              "Unknown",
              "On-Orbit",
              "Decayed",
              "Cataloged Without State",
              "Launch Nominal",
              "Analyst Satellite",
              "Cislunar",
              "Lunar",
              "Hyperbolic",
              "Heliocentric",
              "Interplanetary",
              "Lagrangian",
              "Docked"
            ],
            "type": "string",
            "example": "Lunar"
          },
          "lifetimeYears": {
            "format": "int32",
            "description": "Estimated lifetime of the on-orbit payload, if known.",
            "type": "integer",
            "example": 10
          },
          "altName": {
            "description": "Alternate name of the on-orbit object.",
            "maxLength": 64,
            "type": "string",
            "example": "Alternate Name"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "launchSiteId": {
            "description": "Id of the associated launchSite entity.",
            "maxLength": 36,
            "type": "string",
            "example": "LAUNCHSITE-ID"
          },
          "entityCollection": {
            "description": "Read-only entity details (only returned/used on detail queries).",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "description": "An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.",
              "required": [
                "name",
                "classificationMarking",
                "type",
                "source",
                "dataMode"
              ],
              "type": "object",
              "properties": {
                "idEntity": {
                  "description": "Unique identifier of the record.",
                  "maxLength": 36,
                  "minLength": 1,
                  "type": "string",
                  "example": "ENTITY-ID"
                },
                "name": {
                  "description": "Unique entity name.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "example": "Example name"
                },
                "classificationMarking": {
                  "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "example": "U"
                },
                "terrestrialId": {
                  "description": "Terrestrial identifier of this entity, if applicable.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "TERRESTRIAL-ID"
                },
                "type": {
                  "description": "The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).",
                  "maxLength": 45,
                  "minLength": 1,
                  "enum": [
                    "AIRCRAFT",
                    "BUS",
                    "COMM",
                    "IR",
                    "NAVIGATION",
                    "ONORBIT",
                    "RFEMITTER",
                    "SCIENTIFIC",
                    "SENSOR",
                    "SITE",
                    "VESSEL"
                  ],
                  "type": "string",
                  "example": "ONORBIT"
                },
                "idLocation": {
                  "description": "Unique identifier of the entity location, if terrestrial/fixed.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "LOCATION-ID"
                },
                "countryCode": {
                  "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
                  "maxLength": 4,
                  "type": "string",
                  "example": "US"
                },
                "ownerType": {
                  "description": "Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).",
                  "maxLength": 32,
                  "enum": [
                    "Commercial",
                    "Government",
                    "Academic",
                    "Consortium",
                    "Other"
                  ],
                  "type": "string",
                  "example": "Commercial"
                },
                "taskable": {
                  "description": "Boolean indicating if this entity is taskable.",
                  "type": "boolean",
                  "example": false
                },
                "urls": {
                  "description": "List of URLs to additional details/documents for this entity.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "URL1",
                    "URL2"
                  ]
                },
                "createdAt": {
                  "format": "date-time",
                  "description": "Time the row was created in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "createdBy": {
                  "description": "Application user who created the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "updatedAt": {
                  "format": "date-time",
                  "description": "Time the row was last updated in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "updatedBy": {
                  "description": "Application user who updated the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "source": {
                  "description": "Source of the data.",
                  "maxLength": 64,
                  "minLength": 1,
                  "type": "string",
                  "example": "Bluestaq"
                },
                "origin": {
                  "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                  "maxLength": 64,
                  "type": "string",
                  "example": "THIRD_PARTY_DATASOURCE"
                },
                "dataMode": {
                  "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                  "maxLength": 32,
                  "minLength": 1,
                  "enum": [
                    "REAL",
                    "TEST",
                    "SIMULATED",
                    "EXERCISE"
                  ],
                  "type": "string",
                  "example": "TEST"
                },
                "location": {
                  "$ref": "#/components/schemas/Location_Full"
                },
                "idOnOrbit": {
                  "description": "Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "ONORBIT-ID"
                },
                "operatingUnit": {
                  "$ref": "#/components/schemas/Operatingunit_Full"
                },
                "idOperatingUnit": {
                  "description": "Unique identifier of the associated operating unit object.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "OPERATINGUNIT-ID"
                },
                "origNetwork": {
                  "description": "The originating source network on which this record was created, auto-populated by the system.",
                  "maxLength": 32,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "OPS1"
                },
                "statusCollection": {
                  "description": "Read-only collection of statuses which can be collected by multiple sources.",
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Status_Full"
                  },
                  "readOnly": true
                },
                "rfBands": {
                  "description": "Read-only collection of RF bands utilized by this entity for communication and/or operation.",
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFBand_Full"
                  },
                  "readOnly": true
                }
              }
            },
            "readOnly": true
          },
          "antennas": {
            "description": "Read-only collection of antennas on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitAntenna_Full"
            },
            "readOnly": true
          },
          "batteries": {
            "description": "Read-only collection of batteries on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitBattery_Full"
            },
            "readOnly": true
          },
          "solarArrays": {
            "description": "Read-only collection of solar arrays on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitSolarArray_Full"
            },
            "readOnly": true
          },
          "thrusters": {
            "description": "Read-only collection of thrusters (engines) on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitThruster_Full"
            },
            "readOnly": true
          },
          "onorbitDetails": {
            "description": "Read-only collection of details for this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitDetails_Full"
            },
            "readOnly": true
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Onorbit_Ingest": {
        "description": "Model object representing on-orbit objects or satellites in the system.",
        "required": [
          "classificationMarking",
          "satNo",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idOnOrbit": {
            "description": "For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "commonName": {
            "description": "Common name of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Example common name"
          },
          "constellation": {
            "description": "Constellation to which this satellite belongs.",
            "maxLength": 128,
            "type": "string",
            "example": "Big Dipper"
          },
          "intlDes": {
            "description": "International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.",
            "maxLength": 45,
            "type": "string",
            "example": "2021123ABC"
          },
          "launchDate": {
            "format": "date",
            "description": "Date of launch.",
            "type": "string",
            "example": "2018-01-01"
          },
          "decayDate": {
            "format": "date-time",
            "description": "Date of decay.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "objectType": {
            "description": "Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.",
            "maxLength": 32,
            "enum": [
              "ROCKET BODY",
              "DEBRIS",
              "PAYLOAD",
              "PLATFORM",
              "MANNED",
              "UNKNOWN"
            ],
            "type": "string",
            "example": "PAYLOAD"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "missionNumber": {
            "description": "Mission number of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Expedition 1"
          },
          "category": {
            "description": "Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).",
            "maxLength": 45,
            "enum": [
              "Unknown",
              "On-Orbit",
              "Decayed",
              "Cataloged Without State",
              "Launch Nominal",
              "Analyst Satellite",
              "Cislunar",
              "Lunar",
              "Hyperbolic",
              "Heliocentric",
              "Interplanetary",
              "Lagrangian",
              "Docked"
            ],
            "type": "string",
            "example": "Lunar"
          },
          "lifetimeYears": {
            "format": "int32",
            "description": "Estimated lifetime of the on-orbit payload, if known.",
            "type": "integer",
            "example": 10
          },
          "altName": {
            "description": "Alternate name of the on-orbit object.",
            "maxLength": 64,
            "type": "string",
            "example": "Alternate Name"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "launchSiteId": {
            "description": "Id of the associated launchSite entity.",
            "maxLength": 36,
            "type": "string",
            "example": "LAUNCHSITE-ID"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitAntenna_Abridged": {
        "required": [
          "idOnOrbit",
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITANTENNA-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idAntenna": {
            "description": "ID of the antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "antenna": {
            "$ref": "#/components/schemas/Antenna_Abridged"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitAntenna_Full": {
        "required": [
          "idOnOrbit",
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITANTENNA-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idAntenna": {
            "description": "ID of the antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "antenna": {
            "$ref": "#/components/schemas/Antenna_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitAntenna_Ingest": {
        "required": [
          "idOnOrbit",
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITANTENNA-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idAntenna": {
            "description": "ID of the antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "antenna": {
            "$ref": "#/components/schemas/Antenna_Ingest"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitBattery_Abridged": {
        "required": [
          "idOnOrbit",
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITBATTERY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idBattery": {
            "description": "ID of the battery.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of batteries on the spacecraft of the type identified by idBattery.",
            "type": "integer",
            "example": 5
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "battery": {
            "$ref": "#/components/schemas/Battery_Abridged"
          }
        }
      },
      "OnorbitBattery_Full": {
        "required": [
          "idOnOrbit",
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITBATTERY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idBattery": {
            "description": "ID of the battery.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of batteries on the spacecraft of the type identified by idBattery.",
            "type": "integer",
            "example": 5
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "battery": {
            "$ref": "#/components/schemas/Battery_Full"
          }
        }
      },
      "OnorbitBattery_Ingest": {
        "required": [
          "idOnOrbit",
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITBATTERY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idBattery": {
            "description": "ID of the battery.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of batteries on the spacecraft of the type identified by idBattery.",
            "type": "integer",
            "example": 5
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "battery": {
            "$ref": "#/components/schemas/Battery_Ingest"
          }
        }
      },
      "OnorbitDetails_Abridged": {
        "description": "Contains details of the OnOrbit object.",
        "required": [
          "idOnOrbit",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITDETAILS-ID"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "lastObTime": {
            "format": "date-time",
            "description": "Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "vismag": {
            "format": "double",
            "description": "Current/latest visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "vismagMin": {
            "format": "double",
            "description": "Minimum visual magnitude in M.",
            "type": "number",
            "example": 5.23
          },
          "vismagMax": {
            "format": "double",
            "description": "Maximum visual magnitude in M.",
            "type": "number",
            "example": 15.23
          },
          "vismagMean": {
            "format": "double",
            "description": "Mean visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "rcs": {
            "format": "double",
            "description": "Current/latest radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "rcsMin": {
            "format": "double",
            "description": "Minimum radar cross section in meters squared.",
            "type": "number",
            "example": 5.23
          },
          "rcsMax": {
            "format": "double",
            "description": "Maximum radar cross section in meters squared.",
            "type": "number",
            "example": 15.23
          },
          "rcsMean": {
            "format": "double",
            "description": "Mean radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "bolDeltaV": {
            "format": "double",
            "description": "The total beginning of life delta V of the spacecraft, in meters per second.",
            "type": "number",
            "example": 1000.1
          },
          "maxDeltaV": {
            "format": "double",
            "description": "Maximum delta V available for this on-orbit spacecraft, in meters per second.",
            "type": "number",
            "example": 10.23
          },
          "deltaVUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.",
            "type": "number",
            "example": 50.1
          },
          "estDeltaVDuration": {
            "format": "double",
            "description": "Estimated maximum burn duration for the object, in seconds.",
            "type": "number",
            "example": 10.23
          },
          "numMission": {
            "format": "int32",
            "description": "The number of distinct missions the spacecraft performs.",
            "type": "integer",
            "example": 2
          },
          "missionTypes": {
            "description": "Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Weather",
              "Space Weather"
            ]
          },
          "busType": {
            "description": "Type of the bus on the spacecraft.",
            "maxLength": 32,
            "type": "string",
            "example": "A2100"
          },
          "geoSlot": {
            "format": "double",
            "description": "GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 90.23
          },
          "driftRate": {
            "format": "double",
            "description": "GEO drift rate, if applicable in degrees per day.",
            "type": "number",
            "example": 1.23
          },
          "dryMass": {
            "format": "double",
            "description": "Spacecraft dry mass (without fuel or disposables) in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "additionalMass": {
            "format": "double",
            "description": "Mass of fuel and disposables at launch time in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMin": {
            "format": "double",
            "description": "Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 5.23
          },
          "launchMass": {
            "format": "double",
            "description": "Nominal mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMax": {
            "format": "double",
            "description": "Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 15.23
          },
          "bolFuelMass": {
            "format": "double",
            "description": "Spacecraft beginning of life fuel mass, in orbit, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "currentMass": {
            "format": "double",
            "description": "The estimated total current mass of the spacecraft, in kilograms.",
            "type": "number",
            "example": 500
          },
          "totalMassUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft mass, in kilograms.",
            "type": "number",
            "example": 50.1
          },
          "solarArrayArea": {
            "format": "double",
            "description": "Spacecraft deployed area of solar array in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maneuverable": {
            "description": "Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.",
            "type": "boolean",
            "example": false
          },
          "fuelRemaining": {
            "format": "double",
            "description": "Estimated remaining fuel for the object in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "crossSection": {
            "format": "double",
            "description": "Average cross sectional area in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "busCrossSection": {
            "format": "double",
            "description": "Average cross sectional area of the bus in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maxRadius": {
            "format": "double",
            "description": "Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.",
            "type": "number",
            "example": 10.23
          },
          "colaRadius": {
            "format": "double",
            "description": "Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.",
            "type": "number",
            "example": 10.23
          },
          "adeptRadius": {
            "format": "double",
            "description": "The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.",
            "type": "number",
            "example": 10.23
          },
          "numDeployable": {
            "format": "int32",
            "description": "The number of sub-satellites or deployable objects on the spacecraft.",
            "type": "integer",
            "example": 2
          },
          "depNames": {
            "description": "Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GOES-18A",
              "GOES-18B"
            ]
          },
          "depEstMasses": {
            "description": "Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              20,
              21
            ]
          },
          "depMassUncs": {
            "description": "Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              10,
              5
            ]
          },
          "refSource": {
            "description": "The reference source, sources, or URL from which the data in this record was obtained.",
            "maxLength": 256,
            "type": "string",
            "example": "Wikipedia"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "lastObSource": {
            "description": "The name of the source who last provided an observation for this idOnOrbit.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitDetails_Full": {
        "description": "Contains details of the OnOrbit object.",
        "required": [
          "idOnOrbit",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITDETAILS-ID"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "lastObTime": {
            "format": "date-time",
            "description": "Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "vismag": {
            "format": "double",
            "description": "Current/latest visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "vismagMin": {
            "format": "double",
            "description": "Minimum visual magnitude in M.",
            "type": "number",
            "example": 5.23
          },
          "vismagMax": {
            "format": "double",
            "description": "Maximum visual magnitude in M.",
            "type": "number",
            "example": 15.23
          },
          "vismagMean": {
            "format": "double",
            "description": "Mean visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "rcs": {
            "format": "double",
            "description": "Current/latest radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "rcsMin": {
            "format": "double",
            "description": "Minimum radar cross section in meters squared.",
            "type": "number",
            "example": 5.23
          },
          "rcsMax": {
            "format": "double",
            "description": "Maximum radar cross section in meters squared.",
            "type": "number",
            "example": 15.23
          },
          "rcsMean": {
            "format": "double",
            "description": "Mean radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "bolDeltaV": {
            "format": "double",
            "description": "The total beginning of life delta V of the spacecraft, in meters per second.",
            "type": "number",
            "example": 1000.1
          },
          "maxDeltaV": {
            "format": "double",
            "description": "Maximum delta V available for this on-orbit spacecraft, in meters per second.",
            "type": "number",
            "example": 10.23
          },
          "deltaVUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.",
            "type": "number",
            "example": 50.1
          },
          "estDeltaVDuration": {
            "format": "double",
            "description": "Estimated maximum burn duration for the object, in seconds.",
            "type": "number",
            "example": 10.23
          },
          "numMission": {
            "format": "int32",
            "description": "The number of distinct missions the spacecraft performs.",
            "type": "integer",
            "example": 2
          },
          "missionTypes": {
            "description": "Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Weather",
              "Space Weather"
            ]
          },
          "busType": {
            "description": "Type of the bus on the spacecraft.",
            "maxLength": 32,
            "type": "string",
            "example": "A2100"
          },
          "geoSlot": {
            "format": "double",
            "description": "GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 90.23
          },
          "driftRate": {
            "format": "double",
            "description": "GEO drift rate, if applicable in degrees per day.",
            "type": "number",
            "example": 1.23
          },
          "dryMass": {
            "format": "double",
            "description": "Spacecraft dry mass (without fuel or disposables) in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "additionalMass": {
            "format": "double",
            "description": "Mass of fuel and disposables at launch time in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMin": {
            "format": "double",
            "description": "Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 5.23
          },
          "launchMass": {
            "format": "double",
            "description": "Nominal mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMax": {
            "format": "double",
            "description": "Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 15.23
          },
          "bolFuelMass": {
            "format": "double",
            "description": "Spacecraft beginning of life fuel mass, in orbit, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "currentMass": {
            "format": "double",
            "description": "The estimated total current mass of the spacecraft, in kilograms.",
            "type": "number",
            "example": 500
          },
          "totalMassUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft mass, in kilograms.",
            "type": "number",
            "example": 50.1
          },
          "solarArrayArea": {
            "format": "double",
            "description": "Spacecraft deployed area of solar array in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maneuverable": {
            "description": "Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.",
            "type": "boolean",
            "example": false
          },
          "fuelRemaining": {
            "format": "double",
            "description": "Estimated remaining fuel for the object in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "crossSection": {
            "format": "double",
            "description": "Average cross sectional area in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "busCrossSection": {
            "format": "double",
            "description": "Average cross sectional area of the bus in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maxRadius": {
            "format": "double",
            "description": "Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.",
            "type": "number",
            "example": 10.23
          },
          "colaRadius": {
            "format": "double",
            "description": "Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.",
            "type": "number",
            "example": 10.23
          },
          "adeptRadius": {
            "format": "double",
            "description": "The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.",
            "type": "number",
            "example": 10.23
          },
          "numDeployable": {
            "format": "int32",
            "description": "The number of sub-satellites or deployable objects on the spacecraft.",
            "type": "integer",
            "example": 2
          },
          "depNames": {
            "description": "Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GOES-18A",
              "GOES-18B"
            ]
          },
          "depEstMasses": {
            "description": "Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              20,
              21
            ]
          },
          "depMassUncs": {
            "description": "Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              10,
              5
            ]
          },
          "refSource": {
            "description": "The reference source, sources, or URL from which the data in this record was obtained.",
            "maxLength": 256,
            "type": "string",
            "example": "Wikipedia"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "lastObSource": {
            "description": "The name of the source who last provided an observation for this idOnOrbit.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitDetails_Ingest": {
        "description": "Contains details of the OnOrbit object.",
        "required": [
          "idOnOrbit",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITDETAILS-ID"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "lastObTime": {
            "format": "date-time",
            "description": "Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "vismag": {
            "format": "double",
            "description": "Current/latest visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "vismagMin": {
            "format": "double",
            "description": "Minimum visual magnitude in M.",
            "type": "number",
            "example": 5.23
          },
          "vismagMax": {
            "format": "double",
            "description": "Maximum visual magnitude in M.",
            "type": "number",
            "example": 15.23
          },
          "vismagMean": {
            "format": "double",
            "description": "Mean visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "rcs": {
            "format": "double",
            "description": "Current/latest radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "rcsMin": {
            "format": "double",
            "description": "Minimum radar cross section in meters squared.",
            "type": "number",
            "example": 5.23
          },
          "rcsMax": {
            "format": "double",
            "description": "Maximum radar cross section in meters squared.",
            "type": "number",
            "example": 15.23
          },
          "rcsMean": {
            "format": "double",
            "description": "Mean radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "bolDeltaV": {
            "format": "double",
            "description": "The total beginning of life delta V of the spacecraft, in meters per second.",
            "type": "number",
            "example": 1000.1
          },
          "maxDeltaV": {
            "format": "double",
            "description": "Maximum delta V available for this on-orbit spacecraft, in meters per second.",
            "type": "number",
            "example": 10.23
          },
          "deltaVUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.",
            "type": "number",
            "example": 50.1
          },
          "estDeltaVDuration": {
            "format": "double",
            "description": "Estimated maximum burn duration for the object, in seconds.",
            "type": "number",
            "example": 10.23
          },
          "numMission": {
            "format": "int32",
            "description": "The number of distinct missions the spacecraft performs.",
            "type": "integer",
            "example": 2
          },
          "missionTypes": {
            "description": "Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Weather",
              "Space Weather"
            ]
          },
          "busType": {
            "description": "Type of the bus on the spacecraft.",
            "maxLength": 32,
            "type": "string",
            "example": "A2100"
          },
          "geoSlot": {
            "format": "double",
            "description": "GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 90.23
          },
          "driftRate": {
            "format": "double",
            "description": "GEO drift rate, if applicable in degrees per day.",
            "type": "number",
            "example": 1.23
          },
          "dryMass": {
            "format": "double",
            "description": "Spacecraft dry mass (without fuel or disposables) in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "additionalMass": {
            "format": "double",
            "description": "Mass of fuel and disposables at launch time in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMin": {
            "format": "double",
            "description": "Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 5.23
          },
          "launchMass": {
            "format": "double",
            "description": "Nominal mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMax": {
            "format": "double",
            "description": "Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 15.23
          },
          "bolFuelMass": {
            "format": "double",
            "description": "Spacecraft beginning of life fuel mass, in orbit, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "currentMass": {
            "format": "double",
            "description": "The estimated total current mass of the spacecraft, in kilograms.",
            "type": "number",
            "example": 500
          },
          "totalMassUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft mass, in kilograms.",
            "type": "number",
            "example": 50.1
          },
          "solarArrayArea": {
            "format": "double",
            "description": "Spacecraft deployed area of solar array in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maneuverable": {
            "description": "Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.",
            "type": "boolean",
            "example": false
          },
          "fuelRemaining": {
            "format": "double",
            "description": "Estimated remaining fuel for the object in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "crossSection": {
            "format": "double",
            "description": "Average cross sectional area in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "busCrossSection": {
            "format": "double",
            "description": "Average cross sectional area of the bus in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maxRadius": {
            "format": "double",
            "description": "Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.",
            "type": "number",
            "example": 10.23
          },
          "colaRadius": {
            "format": "double",
            "description": "Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.",
            "type": "number",
            "example": 10.23
          },
          "adeptRadius": {
            "format": "double",
            "description": "The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.",
            "type": "number",
            "example": 10.23
          },
          "numDeployable": {
            "format": "int32",
            "description": "The number of sub-satellites or deployable objects on the spacecraft.",
            "type": "integer",
            "example": 2
          },
          "depNames": {
            "description": "Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GOES-18A",
              "GOES-18B"
            ]
          },
          "depEstMasses": {
            "description": "Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              20,
              21
            ]
          },
          "depMassUncs": {
            "description": "Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              10,
              5
            ]
          },
          "refSource": {
            "description": "The reference source, sources, or URL from which the data in this record was obtained.",
            "maxLength": 256,
            "type": "string",
            "example": "Wikipedia"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "lastObSource": {
            "description": "The name of the source who last provided an observation for this idOnOrbit.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitEvent_Abridged": {
        "required": [
          "classificationMarking",
          "eventTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITEVENT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "derivedFrom": {
            "description": "The sources or SCG references from which the classification of this data is derived.",
            "maxLength": 128,
            "type": "string",
            "example": "DERIVED_SOURCE"
          },
          "declassificationDate": {
            "format": "date-time",
            "description": "The declassification date of this data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:02.123Z"
          },
          "declassificationString": {
            "description": "Declassification string of this data.",
            "maxLength": 256,
            "type": "string",
            "example": "DECLASS_STRING"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit object for this event.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 1
          },
          "origObjectId": {
            "description": "Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "eventTime": {
            "format": "date-time",
            "description": "Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "eventTimeNotes": {
            "description": "Notes/remarks on the validity/accuracy of the eventTime.",
            "maxLength": 128,
            "type": "string",
            "example": "Notes on validity"
          },
          "operatorOrgId": {
            "description": "Organization ID of the operator of the on-orbit spacecraft at the time of the event.",
            "maxLength": 36,
            "type": "string",
            "example": "OPERATORORG-ID"
          },
          "ownerOrgId": {
            "description": "Organization ID of the owner of the on-orbit spacecraft at the time of the event.",
            "maxLength": 36,
            "type": "string",
            "example": "OWNERORG-ID"
          },
          "lesseeOrgId": {
            "description": "Unique identifier of the organization which leases this on-orbit spacecraft.",
            "maxLength": 36,
            "type": "string",
            "example": "LESSEEORG-ID"
          },
          "operatedOnBehalfOfOrgId": {
            "description": "Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.",
            "maxLength": 36,
            "type": "string",
            "example": "OPERATEDONBEHALFOFORG-ID"
          },
          "geoPosition": {
            "format": "double",
            "description": "GEO position longitude at event time if applicable. Negative values are west.",
            "type": "number",
            "example": 45.23
          },
          "planeSlot": {
            "description": "GEO plane slot of the spacecraft at event time.",
            "maxLength": 16,
            "type": "string",
            "example": "example_slot"
          },
          "planeNumber": {
            "description": "GEO slot plane number/designator of the spacecraft at event time.",
            "maxLength": 4,
            "type": "string",
            "example": "PL_1"
          },
          "positionStatus": {
            "description": "Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).",
            "maxLength": 128,
            "type": "string",
            "example": "Stable"
          },
          "untilTime": {
            "format": "date-time",
            "description": "Maximum validity time of the event.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "officialLossDate": {
            "format": "date-time",
            "description": "Date time of official loss of the spacecraft.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "netAmount": {
            "format": "double",
            "description": "Net amount of the insurance claim for the event, in USD.",
            "type": "number",
            "example": 10000.23
          },
          "underlyingCause": {
            "description": "Underlying cause of the event.",
            "maxLength": 128,
            "type": "string",
            "example": "CAUSE_EXAMPLE"
          },
          "capabilityLoss": {
            "format": "double",
            "description": "Spacecraft capability loss incurred, as a fraction of 1.",
            "type": "number",
            "example": 0.5
          },
          "capacityLoss": {
            "format": "double",
            "description": "Spacecraft capacity loss incurred, as a fraction of 1.",
            "type": "number",
            "example": 0.5
          },
          "insuranceLoss": {
            "format": "double",
            "description": "Insurance loss incurred, as a fraction of 1.",
            "type": "number",
            "example": 0.5
          },
          "thirdPartyInsuranceLoss": {
            "format": "double",
            "description": "Insurance loss incurred by 3rd party insurance, in USD.",
            "type": "number",
            "example": 10000.23
          },
          "injured": {
            "format": "int32",
            "description": "Number of humans injured in the event.",
            "type": "integer",
            "example": 1
          },
          "killed": {
            "format": "int32",
            "description": "Number of humans killed in the event.",
            "type": "integer",
            "example": 23
          },
          "lifeLost": {
            "format": "double",
            "description": "Spacecraft life lost due to the event as a percent/fraction of 1.",
            "type": "number",
            "example": 0.5
          },
          "ageAtEvent": {
            "format": "double",
            "description": "Spacecraft age at the event in years.",
            "type": "number",
            "example": 5.23
          },
          "achievedFlightPhase": {
            "description": "Achieved phase of flight prior to the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Phase 2"
          },
          "occurrenceFlightPhase": {
            "description": "Phase of flight during which the event occurred.",
            "maxLength": 64,
            "type": "string",
            "example": "Phase 2"
          },
          "stageAtFault": {
            "description": "Faulty stage of flight for the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Phase 2"
          },
          "equipmentAtFault": {
            "description": "Equipment on the spacecraft which caused the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Equipment"
          },
          "equipmentTypeAtFault": {
            "description": "Type of the equipment on the spacecraft which caused the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Equipment"
          },
          "equipmentPartAtFault": {
            "description": "Specific part of the equipment on the spacecraft which caused the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Equipment"
          },
          "consequentialEquipmentFailure": {
            "description": "Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Equipment"
          },
          "inclined": {
            "description": "Boolean indicating if the spacecraft is inclined.",
            "type": "boolean",
            "example": false
          },
          "description": {
            "description": "Notes/description of the event.",
            "maxLength": 256,
            "type": "string",
            "example": "Example notes"
          },
          "remarks": {
            "description": "Additional remarks on the event description.",
            "maxLength": 512,
            "type": "string",
            "example": "Example remarks"
          },
          "insuranceLossNotes": {
            "description": "Additional insurance notes if the event is an official loss.",
            "maxLength": 512,
            "type": "string",
            "example": "Insurance notes"
          },
          "capabilityLossNotes": {
            "description": "Notes on capability loss at the time of event.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "insuranceCarriedNotes": {
            "description": "Additional insurance notes on coverages at the time of event.",
            "maxLength": 512,
            "type": "string",
            "example": "Insurance notes"
          },
          "equipmentCausingLossNotes": {
            "description": "Additional notes on the equipment causing the event/loss.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "eventType": {
            "description": "The type of on-orbit event being reported.",
            "maxLength": 128,
            "type": "string",
            "example": "Type1"
          },
          "eventResult": {
            "description": "The result of the reported event.",
            "maxLength": 128,
            "type": "string",
            "example": "Example results"
          },
          "objectStatus": {
            "description": "The status of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Status1"
          },
          "satellitePosition": {
            "description": "Description of the satellite orbital position or regime.",
            "maxLength": 128,
            "type": "string",
            "example": "Example description"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitEvent_Full": {
        "required": [
          "classificationMarking",
          "eventTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITEVENT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "derivedFrom": {
            "description": "The sources or SCG references from which the classification of this data is derived.",
            "maxLength": 128,
            "type": "string",
            "example": "DERIVED_SOURCE"
          },
          "declassificationDate": {
            "format": "date-time",
            "description": "The declassification date of this data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:02.123Z"
          },
          "declassificationString": {
            "description": "Declassification string of this data.",
            "maxLength": 256,
            "type": "string",
            "example": "DECLASS_STRING"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit object for this event.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 1
          },
          "origObjectId": {
            "description": "Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "eventTime": {
            "format": "date-time",
            "description": "Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "eventTimeNotes": {
            "description": "Notes/remarks on the validity/accuracy of the eventTime.",
            "maxLength": 128,
            "type": "string",
            "example": "Notes on validity"
          },
          "operatorOrgId": {
            "description": "Organization ID of the operator of the on-orbit spacecraft at the time of the event.",
            "maxLength": 36,
            "type": "string",
            "example": "OPERATORORG-ID"
          },
          "ownerOrgId": {
            "description": "Organization ID of the owner of the on-orbit spacecraft at the time of the event.",
            "maxLength": 36,
            "type": "string",
            "example": "OWNERORG-ID"
          },
          "lesseeOrgId": {
            "description": "Unique identifier of the organization which leases this on-orbit spacecraft.",
            "maxLength": 36,
            "type": "string",
            "example": "LESSEEORG-ID"
          },
          "operatedOnBehalfOfOrgId": {
            "description": "Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.",
            "maxLength": 36,
            "type": "string",
            "example": "OPERATEDONBEHALFOFORG-ID"
          },
          "geoPosition": {
            "format": "double",
            "description": "GEO position longitude at event time if applicable. Negative values are west.",
            "type": "number",
            "example": 45.23
          },
          "planeSlot": {
            "description": "GEO plane slot of the spacecraft at event time.",
            "maxLength": 16,
            "type": "string",
            "example": "example_slot"
          },
          "planeNumber": {
            "description": "GEO slot plane number/designator of the spacecraft at event time.",
            "maxLength": 4,
            "type": "string",
            "example": "PL_1"
          },
          "positionStatus": {
            "description": "Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).",
            "maxLength": 128,
            "type": "string",
            "example": "Stable"
          },
          "untilTime": {
            "format": "date-time",
            "description": "Maximum validity time of the event.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "officialLossDate": {
            "format": "date-time",
            "description": "Date time of official loss of the spacecraft.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "netAmount": {
            "format": "double",
            "description": "Net amount of the insurance claim for the event, in USD.",
            "type": "number",
            "example": 10000.23
          },
          "underlyingCause": {
            "description": "Underlying cause of the event.",
            "maxLength": 128,
            "type": "string",
            "example": "CAUSE_EXAMPLE"
          },
          "capabilityLoss": {
            "format": "double",
            "description": "Spacecraft capability loss incurred, as a fraction of 1.",
            "type": "number",
            "example": 0.5
          },
          "capacityLoss": {
            "format": "double",
            "description": "Spacecraft capacity loss incurred, as a fraction of 1.",
            "type": "number",
            "example": 0.5
          },
          "insuranceLoss": {
            "format": "double",
            "description": "Insurance loss incurred, as a fraction of 1.",
            "type": "number",
            "example": 0.5
          },
          "thirdPartyInsuranceLoss": {
            "format": "double",
            "description": "Insurance loss incurred by 3rd party insurance, in USD.",
            "type": "number",
            "example": 10000.23
          },
          "injured": {
            "format": "int32",
            "description": "Number of humans injured in the event.",
            "type": "integer",
            "example": 1
          },
          "killed": {
            "format": "int32",
            "description": "Number of humans killed in the event.",
            "type": "integer",
            "example": 23
          },
          "lifeLost": {
            "format": "double",
            "description": "Spacecraft life lost due to the event as a percent/fraction of 1.",
            "type": "number",
            "example": 0.5
          },
          "ageAtEvent": {
            "format": "double",
            "description": "Spacecraft age at the event in years.",
            "type": "number",
            "example": 5.23
          },
          "achievedFlightPhase": {
            "description": "Achieved phase of flight prior to the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Phase 2"
          },
          "occurrenceFlightPhase": {
            "description": "Phase of flight during which the event occurred.",
            "maxLength": 64,
            "type": "string",
            "example": "Phase 2"
          },
          "stageAtFault": {
            "description": "Faulty stage of flight for the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Phase 2"
          },
          "equipmentAtFault": {
            "description": "Equipment on the spacecraft which caused the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Equipment"
          },
          "equipmentTypeAtFault": {
            "description": "Type of the equipment on the spacecraft which caused the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Equipment"
          },
          "equipmentPartAtFault": {
            "description": "Specific part of the equipment on the spacecraft which caused the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Equipment"
          },
          "consequentialEquipmentFailure": {
            "description": "Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Equipment"
          },
          "inclined": {
            "description": "Boolean indicating if the spacecraft is inclined.",
            "type": "boolean",
            "example": false
          },
          "description": {
            "description": "Notes/description of the event.",
            "maxLength": 256,
            "type": "string",
            "example": "Example notes"
          },
          "remarks": {
            "description": "Additional remarks on the event description.",
            "maxLength": 512,
            "type": "string",
            "example": "Example remarks"
          },
          "insuranceLossNotes": {
            "description": "Additional insurance notes if the event is an official loss.",
            "maxLength": 512,
            "type": "string",
            "example": "Insurance notes"
          },
          "capabilityLossNotes": {
            "description": "Notes on capability loss at the time of event.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "insuranceCarriedNotes": {
            "description": "Additional insurance notes on coverages at the time of event.",
            "maxLength": 512,
            "type": "string",
            "example": "Insurance notes"
          },
          "equipmentCausingLossNotes": {
            "description": "Additional notes on the equipment causing the event/loss.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "eventType": {
            "description": "The type of on-orbit event being reported.",
            "maxLength": 128,
            "type": "string",
            "example": "Type1"
          },
          "eventResult": {
            "description": "The result of the reported event.",
            "maxLength": 128,
            "type": "string",
            "example": "Example results"
          },
          "objectStatus": {
            "description": "The status of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Status1"
          },
          "satellitePosition": {
            "description": "Description of the satellite orbital position or regime.",
            "maxLength": 128,
            "type": "string",
            "example": "Example description"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitEvent_Ingest": {
        "required": [
          "classificationMarking",
          "eventTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITEVENT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "derivedFrom": {
            "description": "The sources or SCG references from which the classification of this data is derived.",
            "maxLength": 128,
            "type": "string",
            "example": "DERIVED_SOURCE"
          },
          "declassificationDate": {
            "format": "date-time",
            "description": "The declassification date of this data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:02.123Z"
          },
          "declassificationString": {
            "description": "Declassification string of this data.",
            "maxLength": 256,
            "type": "string",
            "example": "DECLASS_STRING"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit object for this event.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 1
          },
          "origObjectId": {
            "description": "Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "eventTime": {
            "format": "date-time",
            "description": "Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "eventTimeNotes": {
            "description": "Notes/remarks on the validity/accuracy of the eventTime.",
            "maxLength": 128,
            "type": "string",
            "example": "Notes on validity"
          },
          "operatorOrgId": {
            "description": "Organization ID of the operator of the on-orbit spacecraft at the time of the event.",
            "maxLength": 36,
            "type": "string",
            "example": "OPERATORORG-ID"
          },
          "ownerOrgId": {
            "description": "Organization ID of the owner of the on-orbit spacecraft at the time of the event.",
            "maxLength": 36,
            "type": "string",
            "example": "OWNERORG-ID"
          },
          "lesseeOrgId": {
            "description": "Unique identifier of the organization which leases this on-orbit spacecraft.",
            "maxLength": 36,
            "type": "string",
            "example": "LESSEEORG-ID"
          },
          "operatedOnBehalfOfOrgId": {
            "description": "Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.",
            "maxLength": 36,
            "type": "string",
            "example": "OPERATEDONBEHALFOFORG-ID"
          },
          "geoPosition": {
            "format": "double",
            "description": "GEO position longitude at event time if applicable. Negative values are west.",
            "type": "number",
            "example": 45.23
          },
          "planeSlot": {
            "description": "GEO plane slot of the spacecraft at event time.",
            "maxLength": 16,
            "type": "string",
            "example": "example_slot"
          },
          "planeNumber": {
            "description": "GEO slot plane number/designator of the spacecraft at event time.",
            "maxLength": 4,
            "type": "string",
            "example": "PL_1"
          },
          "positionStatus": {
            "description": "Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).",
            "maxLength": 128,
            "type": "string",
            "example": "Stable"
          },
          "untilTime": {
            "format": "date-time",
            "description": "Maximum validity time of the event.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "officialLossDate": {
            "format": "date-time",
            "description": "Date time of official loss of the spacecraft.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "netAmount": {
            "format": "double",
            "description": "Net amount of the insurance claim for the event, in USD.",
            "type": "number",
            "example": 10000.23
          },
          "underlyingCause": {
            "description": "Underlying cause of the event.",
            "maxLength": 128,
            "type": "string",
            "example": "CAUSE_EXAMPLE"
          },
          "capabilityLoss": {
            "format": "double",
            "description": "Spacecraft capability loss incurred, as a fraction of 1.",
            "type": "number",
            "example": 0.5
          },
          "capacityLoss": {
            "format": "double",
            "description": "Spacecraft capacity loss incurred, as a fraction of 1.",
            "type": "number",
            "example": 0.5
          },
          "insuranceLoss": {
            "format": "double",
            "description": "Insurance loss incurred, as a fraction of 1.",
            "type": "number",
            "example": 0.5
          },
          "thirdPartyInsuranceLoss": {
            "format": "double",
            "description": "Insurance loss incurred by 3rd party insurance, in USD.",
            "type": "number",
            "example": 10000.23
          },
          "injured": {
            "format": "int32",
            "description": "Number of humans injured in the event.",
            "type": "integer",
            "example": 1
          },
          "killed": {
            "format": "int32",
            "description": "Number of humans killed in the event.",
            "type": "integer",
            "example": 23
          },
          "lifeLost": {
            "format": "double",
            "description": "Spacecraft life lost due to the event as a percent/fraction of 1.",
            "type": "number",
            "example": 0.5
          },
          "ageAtEvent": {
            "format": "double",
            "description": "Spacecraft age at the event in years.",
            "type": "number",
            "example": 5.23
          },
          "achievedFlightPhase": {
            "description": "Achieved phase of flight prior to the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Phase 2"
          },
          "occurrenceFlightPhase": {
            "description": "Phase of flight during which the event occurred.",
            "maxLength": 64,
            "type": "string",
            "example": "Phase 2"
          },
          "stageAtFault": {
            "description": "Faulty stage of flight for the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Phase 2"
          },
          "equipmentAtFault": {
            "description": "Equipment on the spacecraft which caused the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Equipment"
          },
          "equipmentTypeAtFault": {
            "description": "Type of the equipment on the spacecraft which caused the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Equipment"
          },
          "equipmentPartAtFault": {
            "description": "Specific part of the equipment on the spacecraft which caused the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Equipment"
          },
          "consequentialEquipmentFailure": {
            "description": "Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Equipment"
          },
          "inclined": {
            "description": "Boolean indicating if the spacecraft is inclined.",
            "type": "boolean",
            "example": false
          },
          "description": {
            "description": "Notes/description of the event.",
            "maxLength": 256,
            "type": "string",
            "example": "Example notes"
          },
          "remarks": {
            "description": "Additional remarks on the event description.",
            "maxLength": 512,
            "type": "string",
            "example": "Example remarks"
          },
          "insuranceLossNotes": {
            "description": "Additional insurance notes if the event is an official loss.",
            "maxLength": 512,
            "type": "string",
            "example": "Insurance notes"
          },
          "capabilityLossNotes": {
            "description": "Notes on capability loss at the time of event.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "insuranceCarriedNotes": {
            "description": "Additional insurance notes on coverages at the time of event.",
            "maxLength": 512,
            "type": "string",
            "example": "Insurance notes"
          },
          "equipmentCausingLossNotes": {
            "description": "Additional notes on the equipment causing the event/loss.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "eventType": {
            "description": "The type of on-orbit event being reported.",
            "maxLength": 128,
            "type": "string",
            "example": "Type1"
          },
          "eventResult": {
            "description": "The result of the reported event.",
            "maxLength": 128,
            "type": "string",
            "example": "Example results"
          },
          "objectStatus": {
            "description": "The status of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Status1"
          },
          "satellitePosition": {
            "description": "Description of the satellite orbital position or regime.",
            "maxLength": 128,
            "type": "string",
            "example": "Example description"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitList_Abridged": {
        "description": "Table for maintaining generic lists of OnOrbit objects (e.g.  Favorites, HIO, SHIO, HVA, etc).",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITLIST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Unique name of the list.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "People"
          },
          "description": {
            "description": "Description of the list.",
            "maxLength": 512,
            "type": "string",
            "example": "DESCRIPTION_OF_LIST"
          },
          "onorbits": {
            "description": "Ordered array of Onorbit IDs belonging to this list.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ID1",
              "ID2"
            ]
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "OnorbitList_Full": {
        "description": "Table for maintaining generic lists of OnOrbit objects (e.g.  Favorites, HIO, SHIO, HVA, etc).",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITLIST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Unique name of the list.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "People"
          },
          "description": {
            "description": "Description of the list.",
            "maxLength": 512,
            "type": "string",
            "example": "DESCRIPTION_OF_LIST"
          },
          "onorbits": {
            "description": "Ordered array of Onorbit IDs belonging to this list.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ID1",
              "ID2"
            ]
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "OnorbitList_Ingest": {
        "description": "Table for maintaining generic lists of OnOrbit objects (e.g.  Favorites, HIO, SHIO, HVA, etc).",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITLIST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Unique name of the list.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "People"
          },
          "description": {
            "description": "Description of the list.",
            "maxLength": 512,
            "type": "string",
            "example": "DESCRIPTION_OF_LIST"
          },
          "onorbits": {
            "description": "Ordered array of Onorbit IDs belonging to this list.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ID1",
              "ID2"
            ]
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "OnorbitSignature_Abridged": {
        "description": "Contains a list of common information across both Radar and EO observations.",
        "type": "object",
        "properties": {
          "eoObservation": {
            "$ref": "#/components/schemas/EOObservation_Abridged"
          },
          "radarObservation": {
            "$ref": "#/components/schemas/RadarObservation_Abridged"
          },
          "rfObservation": {
            "$ref": "#/components/schemas/RFObservation_Abridged"
          }
        }
      },
      "OnorbitSolarArray_Abridged": {
        "required": [
          "idOnOrbit",
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITSOLARARRAY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idSolarArray": {
            "description": "ID of the SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of solar arrays on the spacecraft of the type identified by idSolarArray.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "solarArray": {
            "$ref": "#/components/schemas/SolarArray_Abridged"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitSolarArray_Full": {
        "required": [
          "idOnOrbit",
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITSOLARARRAY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idSolarArray": {
            "description": "ID of the SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of solar arrays on the spacecraft of the type identified by idSolarArray.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "solarArray": {
            "$ref": "#/components/schemas/SolarArray_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitSolarArray_Ingest": {
        "required": [
          "idOnOrbit",
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITSOLARARRAY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idSolarArray": {
            "description": "ID of the SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of solar arrays on the spacecraft of the type identified by idSolarArray.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "solarArray": {
            "$ref": "#/components/schemas/SolarArray_Ingest"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitThruster_Abridged": {
        "required": [
          "idOnOrbit",
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITTHRUSTER-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idEngine": {
            "description": "ID of the Engine.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "The type of thruster associated with this record (e.g. LAE, Hydrazine REA, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Hydrazine REA"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of engines/thrusters on the spacecraft of the type identified by idEngine.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engine": {
            "$ref": "#/components/schemas/Engine_Abridged"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitThruster_Full": {
        "required": [
          "idOnOrbit",
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITTHRUSTER-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idEngine": {
            "description": "ID of the Engine.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "The type of thruster associated with this record (e.g. LAE, Hydrazine REA, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Hydrazine REA"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of engines/thrusters on the spacecraft of the type identified by idEngine.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engine": {
            "$ref": "#/components/schemas/Engine_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitThruster_Ingest": {
        "required": [
          "idOnOrbit",
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITTHRUSTER-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idEngine": {
            "description": "ID of the Engine.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "The type of thruster associated with this record (e.g. LAE, Hydrazine REA, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Hydrazine REA"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of engines/thrusters on the spacecraft of the type identified by idEngine.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engine": {
            "$ref": "#/components/schemas/Engine_Ingest"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitThrusterStatus_Abridged": {
        "description": "Status information for OnorbitThruster objects.",
        "required": [
          "classificationMarking",
          "idOnorbitThruster",
          "statusTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "af103c-1f917dc-002c1bd"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnorbitThruster": {
            "description": "ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ff7dc909-e8b4-4a54-8529-1963d4e9b353"
          },
          "name": {
            "description": "Identifier of this thruster.",
            "maxLength": 32,
            "type": "string",
            "example": "REA1"
          },
          "statusTime": {
            "format": "date-time",
            "description": "Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.",
            "type": "string",
            "example": "2024-01-01T16:00:00.123Z"
          },
          "propMassMin": {
            "format": "double",
            "description": "Minimum available propellant mass for this thruster's type, in kilograms.",
            "type": "number",
            "example": 0.1
          },
          "propMassAvg": {
            "format": "double",
            "description": "Average available propellant mass for this thruster's type, in kilograms.",
            "type": "number",
            "example": 907.6
          },
          "propMassMedian": {
            "format": "double",
            "description": "Median available propellant mass for this thruster's type, in kilograms.",
            "type": "number",
            "example": 200.1
          },
          "propMassMax": {
            "format": "double",
            "description": "Maximum available propellant mass for this thruster's type, in kilograms.",
            "type": "number",
            "example": 2333.3
          },
          "fuelMass": {
            "format": "double",
            "description": "Total fuel mass available for this thruster's type, in kilograms.",
            "type": "number",
            "example": 100.1
          },
          "fuelMassUnc": {
            "format": "double",
            "description": "1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.",
            "type": "number",
            "example": 10.1
          },
          "totalDeltaV": {
            "format": "double",
            "description": "Total delta-velocity available for this thruster's type, in meters per second.",
            "type": "number",
            "example": 100.1
          },
          "minDeltaV": {
            "format": "double",
            "description": "Minimum available delta-velocity for this thruster, in meters per second.",
            "type": "number",
            "example": 0.1
          },
          "estDeltaV": {
            "format": "double",
            "description": "Estimated available delta-velocity for this thruster, in meters per second.",
            "type": "number",
            "example": 10.1
          },
          "maxDeltaV": {
            "format": "double",
            "description": "Maximum available delta-velocity for this thruster, in meters per second.",
            "type": "number",
            "example": 100.1
          },
          "thrustMax": {
            "format": "double",
            "description": "Maximum available thrust for this thruster, in newtons.",
            "type": "number",
            "example": 22.1
          },
          "isp": {
            "format": "double",
            "description": "Specific impulse for this thruster, in seconds.",
            "type": "number",
            "example": 300.1
          },
          "operational": {
            "description": "Flag indicating if this thruster is operational.",
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "OnorbitThrusterStatus_Full": {
        "description": "Status information for OnorbitThruster objects.",
        "required": [
          "classificationMarking",
          "idOnorbitThruster",
          "statusTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "af103c-1f917dc-002c1bd"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnorbitThruster": {
            "description": "ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ff7dc909-e8b4-4a54-8529-1963d4e9b353"
          },
          "name": {
            "description": "Identifier of this thruster.",
            "maxLength": 32,
            "type": "string",
            "example": "REA1"
          },
          "statusTime": {
            "format": "date-time",
            "description": "Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.",
            "type": "string",
            "example": "2024-01-01T16:00:00.123Z"
          },
          "propMassMin": {
            "format": "double",
            "description": "Minimum available propellant mass for this thruster's type, in kilograms.",
            "type": "number",
            "example": 0.1
          },
          "propMassAvg": {
            "format": "double",
            "description": "Average available propellant mass for this thruster's type, in kilograms.",
            "type": "number",
            "example": 907.6
          },
          "propMassMedian": {
            "format": "double",
            "description": "Median available propellant mass for this thruster's type, in kilograms.",
            "type": "number",
            "example": 200.1
          },
          "propMassMax": {
            "format": "double",
            "description": "Maximum available propellant mass for this thruster's type, in kilograms.",
            "type": "number",
            "example": 2333.3
          },
          "fuelMass": {
            "format": "double",
            "description": "Total fuel mass available for this thruster's type, in kilograms.",
            "type": "number",
            "example": 100.1
          },
          "fuelMassUnc": {
            "format": "double",
            "description": "1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.",
            "type": "number",
            "example": 10.1
          },
          "totalDeltaV": {
            "format": "double",
            "description": "Total delta-velocity available for this thruster's type, in meters per second.",
            "type": "number",
            "example": 100.1
          },
          "minDeltaV": {
            "format": "double",
            "description": "Minimum available delta-velocity for this thruster, in meters per second.",
            "type": "number",
            "example": 0.1
          },
          "estDeltaV": {
            "format": "double",
            "description": "Estimated available delta-velocity for this thruster, in meters per second.",
            "type": "number",
            "example": 10.1
          },
          "maxDeltaV": {
            "format": "double",
            "description": "Maximum available delta-velocity for this thruster, in meters per second.",
            "type": "number",
            "example": 100.1
          },
          "thrustMax": {
            "format": "double",
            "description": "Maximum available thrust for this thruster, in newtons.",
            "type": "number",
            "example": 22.1
          },
          "isp": {
            "format": "double",
            "description": "Specific impulse for this thruster, in seconds.",
            "type": "number",
            "example": 300.1
          },
          "operational": {
            "description": "Flag indicating if this thruster is operational.",
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "OnorbitThrusterStatus_Ingest": {
        "description": "Status information for OnorbitThruster objects.",
        "required": [
          "classificationMarking",
          "idOnorbitThruster",
          "statusTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "af103c-1f917dc-002c1bd"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnorbitThruster": {
            "description": "ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ff7dc909-e8b4-4a54-8529-1963d4e9b353"
          },
          "name": {
            "description": "Identifier of this thruster.",
            "maxLength": 32,
            "type": "string",
            "example": "REA1"
          },
          "statusTime": {
            "format": "date-time",
            "description": "Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.",
            "type": "string",
            "example": "2024-01-01T16:00:00.123Z"
          },
          "propMassMin": {
            "format": "double",
            "description": "Minimum available propellant mass for this thruster's type, in kilograms.",
            "type": "number",
            "example": 0.1
          },
          "propMassAvg": {
            "format": "double",
            "description": "Average available propellant mass for this thruster's type, in kilograms.",
            "type": "number",
            "example": 907.6
          },
          "propMassMedian": {
            "format": "double",
            "description": "Median available propellant mass for this thruster's type, in kilograms.",
            "type": "number",
            "example": 200.1
          },
          "propMassMax": {
            "format": "double",
            "description": "Maximum available propellant mass for this thruster's type, in kilograms.",
            "type": "number",
            "example": 2333.3
          },
          "fuelMass": {
            "format": "double",
            "description": "Total fuel mass available for this thruster's type, in kilograms.",
            "type": "number",
            "example": 100.1
          },
          "fuelMassUnc": {
            "format": "double",
            "description": "1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.",
            "type": "number",
            "example": 10.1
          },
          "totalDeltaV": {
            "format": "double",
            "description": "Total delta-velocity available for this thruster's type, in meters per second.",
            "type": "number",
            "example": 100.1
          },
          "minDeltaV": {
            "format": "double",
            "description": "Minimum available delta-velocity for this thruster, in meters per second.",
            "type": "number",
            "example": 0.1
          },
          "estDeltaV": {
            "format": "double",
            "description": "Estimated available delta-velocity for this thruster, in meters per second.",
            "type": "number",
            "example": 10.1
          },
          "maxDeltaV": {
            "format": "double",
            "description": "Maximum available delta-velocity for this thruster, in meters per second.",
            "type": "number",
            "example": 100.1
          },
          "thrustMax": {
            "format": "double",
            "description": "Maximum available thrust for this thruster, in newtons.",
            "type": "number",
            "example": 22.1
          },
          "isp": {
            "format": "double",
            "description": "Specific impulse for this thruster, in seconds.",
            "type": "number",
            "example": 300.1
          },
          "operational": {
            "description": "Flag indicating if this thruster is operational.",
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Operatingunit_Full": {
        "description": "Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idOperatingUnit": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OPERATINGUNIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "altOperatingUnitId": {
            "description": "Unique identifier of the operating unit record from the originating system.",
            "maxLength": 36,
            "type": "string",
            "example": "32100000000021"
          },
          "name": {
            "description": "Name of the operating unit.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "SOME_NAME"
          },
          "description": {
            "description": "Description of the operating unit.",
            "maxLength": 256,
            "type": "string",
            "example": "Description of unit"
          },
          "idLocation": {
            "description": "Unique identifier of the location record for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "idContact": {
            "description": "Unique identifier of the contact for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "CONTACT-ID"
          },
          "idOrganization": {
            "description": "Unique identifier of the organization record for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "unitIdentifier": {
            "description": "An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.",
            "maxLength": 10,
            "type": "string",
            "example": "AZXAZ12345"
          },
          "countryCode": {
            "description": "The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to \"OTHR\" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).",
            "maxLength": 4,
            "type": "string",
            "example": "IQ"
          },
          "altCountryCode": {
            "description": "Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.",
            "maxLength": 4,
            "type": "string",
            "example": "IZ"
          },
          "wac": {
            "description": "World Aeronautical Chart identifier for the area in which a designated operating unit is located.",
            "maxLength": 4,
            "type": "string",
            "example": "0427"
          },
          "operStatus": {
            "description": "The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 3,
            "type": "string",
            "example": "OPR"
          },
          "condition": {
            "description": "The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "RDY"
          },
          "conditionAvail": {
            "description": "Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "A"
          },
          "eval": {
            "format": "int32",
            "description": "The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.",
            "type": "integer",
            "example": 7
          },
          "fpa": {
            "description": "Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 5,
            "type": "string",
            "example": "EOB"
          },
          "ident": {
            "description": "Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): \n\nASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.\n\nFRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.\n\nHOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.\n\nFAKER: Friendly track, object, or entity acting as an exercise hostile.\n\nJOKER: Friendly track, object, or entity acting as an exercise suspect.\n\nNEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.\n\nPENDING: Track object which has not been evaluated.\n\nSUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.\n\nUNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.",
            "maxLength": 32,
            "type": "string",
            "example": "FRIEND"
          },
          "allegiance": {
            "description": "The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to \"OTHR\" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).",
            "maxLength": 4,
            "type": "string",
            "example": "OTHR"
          },
          "altAllegiance": {
            "description": "Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.",
            "maxLength": 4,
            "type": "string",
            "example": "HL"
          },
          "locName": {
            "description": "Location name for the coordinates.",
            "maxLength": 54,
            "type": "string",
            "example": "LOCATION_NAME"
          },
          "locReason": {
            "description": "Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 9,
            "type": "string",
            "example": "GR"
          },
          "force": {
            "description": "An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "NV"
          },
          "forceName": {
            "description": "The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.",
            "maxLength": 54,
            "type": "string",
            "example": "FORCE-NAME"
          },
          "functRole": {
            "description": "Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 3,
            "type": "string",
            "example": "MIL"
          },
          "msnPrimary": {
            "description": "Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "W6"
          },
          "msnPrimarySpecialty": {
            "description": "Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "QK"
          },
          "masterUnit": {
            "description": "This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.",
            "type": "boolean",
            "example": true
          },
          "stylizedUnit": {
            "description": "This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.",
            "type": "boolean",
            "example": true
          },
          "divCat": {
            "description": "Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 1,
            "type": "string",
            "example": "5"
          },
          "echelon": {
            "description": "Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "SHIP"
          },
          "echelonTier": {
            "description": "Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 2,
            "type": "string",
            "example": "68"
          },
          "fleetId": {
            "description": "Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 1,
            "type": "string",
            "example": "A"
          },
          "deployStatus": {
            "description": "A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 2,
            "type": "string",
            "example": "ND"
          },
          "flagFlown": {
            "description": "The country code of the observed flag flown.",
            "maxLength": 4,
            "type": "string",
            "example": "IZ"
          },
          "coordDatum": {
            "description": "A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 16,
            "type": "string",
            "example": "WGS"
          },
          "coord": {
            "description": "\"Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.\nPos. 1-2.  Latitude Degrees     [00-90]\nPos. 3-4.  Latitude Minutes     [00-59]\nPos. 5-6.  Latitude Seconds     [00-59]\nPos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  \nPos. 10. Latitude Hemisphere       [NS] \nPos. 11-13. Longitude Degrees     [00-180] \nPos. 14-15. Longitude Minutes     [00-59] \nPos. 16-17. Longitude Seconds     [00-59] \nPos. 18-20. Longitude Thousandths Of Seconds      [000-999]\nPos. 21. Longitude Hemisphere     [EW]\nPos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]\".\n",
            "maxLength": 21,
            "type": "string",
            "example": "340000000N0430000000E"
          },
          "coordDerivAcc": {
            "format": "double",
            "description": "Indicates the plus or minus error assessed against the method used to derive the coordinate.",
            "type": "number",
            "example": 12.345
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 179.1
          },
          "elevMsl": {
            "format": "double",
            "description": "Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.",
            "type": "number",
            "example": 123.45
          },
          "elevMslConfLvl": {
            "format": "int32",
            "description": "Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.",
            "type": "integer",
            "example": 50
          },
          "elevMslDerivAcc": {
            "format": "double",
            "description": "Indicates the plus or minus error assessed against the method used to derive the elevation.",
            "type": "number",
            "example": 12.34
          },
          "geoidalMslSep": {
            "format": "double",
            "description": "The distance between Mean Sea Level and a referenced ellipsoid.",
            "type": "number",
            "example": 12.34
          },
          "milGridSys": {
            "description": "\"Indicates the grid system used in the development of the milGrid coordinates. Values are:\nUPS - Universal Polar System\nUTM - Universal Transverse Mercator\".",
            "maxLength": 3,
            "type": "string",
            "example": "UTM"
          },
          "milGrid": {
            "description": "The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:\n4Q (grid zone designator, GZD)\nFJ (the 100,000-meter square identifier)\n12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).",
            "maxLength": 15,
            "type": "string",
            "example": "4QFJ12345678"
          },
          "utm": {
            "description": "Universal Transverse Mercator (UTM) grid coordinates.\nPos. 1-2, UTM Zone Column   [01-60\nPos. 3, UTM Zone Row   [C-HJ-NP-X]\nPos. 4, UTM False Easting   [0-9]\nPos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]\nPos. 10-11, UTM False Northing    [0-9][0-9]\nPos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].",
            "maxLength": 16,
            "type": "string",
            "example": "19P4390691376966"
          },
          "airDefArea": {
            "description": "Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.",
            "maxLength": 5,
            "type": "string",
            "example": "AL006"
          },
          "polSubdiv": {
            "description": "Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 7,
            "type": "string",
            "example": "IZ07"
          },
          "symCode": {
            "description": "A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.",
            "maxLength": 15,
            "type": "string",
            "example": "SOGPU----------"
          },
          "classRating": {
            "description": "Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:\n0 - Does not meet criteria above\n1 - Primary importance to system\n2 - Secondary importance to system\n3 - Tertiary importance to system\nO - Other. Explain in Remarks.",
            "maxLength": 1,
            "type": "string",
            "example": "1"
          },
          "recStatus": {
            "description": "Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:\nA - Active\nI - Inactive\nK - Acknowledged\nL - Local\nQ - A nominated (NOM) or Data Change Request (DCR) record\nR - Production reduced by CMD decision\nW - Working Record.",
            "maxLength": 1,
            "type": "string",
            "example": "A"
          },
          "reviewDate": {
            "format": "date",
            "description": "Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.",
            "type": "string",
            "example": "2008-06-10"
          },
          "resProd": {
            "description": "Responsible Producer - Organization that is responsible for the maintenance of the record.",
            "maxLength": 4,
            "type": "string",
            "example": "RT"
          },
          "referenceDoc": {
            "description": "The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 128,
            "type": "string",
            "example": "Provider Reference Documentation"
          },
          "operatingUnitRemarks": {
            "description": "Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperatingUnitRemark_Full"
            },
            "readOnly": true
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization_Full"
          },
          "location": {
            "$ref": "#/components/schemas/Location_Full"
          }
        }
      },
      "OperatingUnitRemark_Full": {
        "description": "Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.",
        "required": [
          "classificationMarking",
          "idOperatingUnit",
          "text",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "0167f577-e06c-358e-85aa-0a07a730bdd0"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOperatingUnit": {
            "description": "The ID of the operating unit to which this remark applies.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OperatingUnit-ID"
          },
          "altRmkId": {
            "description": "Unique identifier of the unit remark record from the originating system.",
            "maxLength": 36,
            "type": "string",
            "example": "123456ABC"
          },
          "name": {
            "description": "The name of the remark.",
            "maxLength": 64,
            "type": "string",
            "example": "Remark name"
          },
          "type": {
            "description": "The remark type (e.g. Caution, Information, Misc, Restriction, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Restriction"
          },
          "text": {
            "description": "The text of the remark.",
            "maxLength": 16384,
            "minLength": 1,
            "type": "string",
            "example": "This is a remark"
          },
          "code": {
            "description": "The remark type identifier. For example, the Mobility Air Forces (MAF) remark code, defined in the Airfield Suitability and Restriction Report (ASRR).",
            "maxLength": 16,
            "type": "string",
            "example": "M"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Organization_Full": {
        "description": "An organization such as a corporation, manufacturer, consortium, government, etc. An organization may have parent and child organizations as well as link to a former organization if this org previously existed as another organization.",
        "required": [
          "classificationMarking",
          "name",
          "type",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Organization name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "type": {
            "description": "Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "GOVERNMENT"
          },
          "category": {
            "description": "Subtype or category of the organization (e.g. Private company, stock market quoted company, subsidiary, goverment department/agency, etc).",
            "maxLength": 128,
            "type": "string",
            "example": "Private company"
          },
          "externalId": {
            "description": "Optional externally provided identifier for this row.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "description": {
            "description": "Organization description.",
            "maxLength": 256,
            "type": "string",
            "example": "Example description"
          },
          "countryCode": {
            "description": "Country of the physical location of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code. However, it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "nationality": {
            "description": "Country of registration or ownership of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "active": {
            "description": "Boolean indicating if this organization is currently active.",
            "type": "boolean",
            "example": false
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "some.user"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "organizationDetails": {
            "description": "Read-only collection of additional OrganizationDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/organizationdetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationDetails_Full"
            },
            "readOnly": true
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OrganizationDetails_Full": {
        "description": "Model representation of additional detailed organization data as collected by a particular source.",
        "required": [
          "idOrganization",
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATIONDETAILS-ID"
          },
          "idOrganization": {
            "description": "Unique identifier of the parent organization.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Organization details name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "email": {
            "description": "Listed contact email address for the organization.",
            "maxLength": 320,
            "type": "string",
            "example": "some_organization@organization.com"
          },
          "address1": {
            "description": "Street number of the organization.",
            "maxLength": 120,
            "type": "string",
            "example": "123 Main Street"
          },
          "address2": {
            "description": "Field for additional organization address information such as PO Box and unit number.",
            "maxLength": 120,
            "type": "string",
            "example": "Apt 4B"
          },
          "address3": {
            "description": "Contains the third line of address information for an organization.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado Springs CO, 80903"
          },
          "geoAdminLevel1": {
            "description": "Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado"
          },
          "geoAdminLevel2": {
            "description": "Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.",
            "maxLength": 120,
            "type": "string",
            "example": "El Paso County"
          },
          "geoAdminLevel3": {
            "description": "Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado Springs"
          },
          "postalCode": {
            "description": "A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.",
            "maxLength": 32,
            "type": "string",
            "example": "80903"
          },
          "description": {
            "description": "Organization description.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example description"
          },
          "formerOrgId": {
            "description": "Former organization ID (if this organization previously existed as another organization).",
            "maxLength": 36,
            "type": "string",
            "example": "FORMERORG-ID"
          },
          "parentOrgId": {
            "description": "Parent organization ID of this organization if it is a child organization.",
            "maxLength": 36,
            "type": "string",
            "example": "PARENTORG-ID"
          },
          "financialYearEndDate": {
            "format": "date-time",
            "description": "For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "revenue": {
            "format": "double",
            "description": "For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "profit": {
            "format": "double",
            "description": "For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "ebitda": {
            "format": "double",
            "description": "For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "ftes": {
            "format": "int32",
            "description": "Total number of FTEs in this organization.",
            "type": "integer",
            "example": 123
          },
          "broker": {
            "description": "Designated broker for this organization.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "ceo": {
            "description": "For organizations of type CORPORATION, the name of the Chief Executive Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "cfo": {
            "description": "For organizations of type CORPORATION, the name of the Chief Financial Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "cto": {
            "description": "For organizations of type CORPORATION, the name of the Chief Technology Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "riskManager": {
            "description": "The name of the risk manager for the organization.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "massRanking": {
            "format": "int32",
            "description": "Mass ranking for this organization.",
            "type": "integer",
            "example": 123
          },
          "revenueRanking": {
            "format": "int32",
            "description": "Revenue ranking for this organization.",
            "type": "integer",
            "example": 123
          },
          "financialNotes": {
            "description": "For organizations of type CORPORATION, notes on company financials.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "servicesNotes": {
            "description": "Notes on the services provided by the organization.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "fleetPlanNotes": {
            "description": "Satellite fleet planning notes for this organization.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "some.user"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "RadarObservation_Abridged": {
        "description": "Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RADAROBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 1
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "obPosition": {
            "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
            "maxLength": 8,
            "type": "string",
            "example": "FIRST"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": true
          },
          "azimuth": {
            "format": "double",
            "description": "azimuth angle in degrees and topocentric frame.",
            "type": "number",
            "example": 45.23
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.",
            "type": "number",
            "example": 45.23
          },
          "azimuthBias": {
            "format": "double",
            "description": "Sensor azimuth angle bias in degrees.",
            "type": "number",
            "example": 45.23
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the line of sight azimuth in degrees per second.",
            "type": "number",
            "example": 1.23
          },
          "elevation": {
            "format": "double",
            "description": "Line of sight elevation in degrees and topocentric frame.",
            "type": "number",
            "example": 45.23
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight elevation angle measurement, in degrees.",
            "type": "number",
            "example": 1.23
          },
          "elevationBias": {
            "format": "double",
            "description": "Sensor elevation bias in degrees.",
            "type": "number",
            "example": 1.23
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the line of sight elevation in degrees per second.",
            "type": "number",
            "example": 1.23
          },
          "range": {
            "format": "double",
            "description": "Target range in km.",
            "type": "number",
            "example": 100.23
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeAccel": {
            "format": "double",
            "description": "Range accelaration in km/s2.",
            "type": "number",
            "example": 10.23
          },
          "rangeAccelUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).",
            "type": "number",
            "example": 1.23
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range measurement, in kilometers.",
            "type": "number",
            "example": 1.23
          },
          "rangeBias": {
            "format": "double",
            "description": "Sensor range bias in km.",
            "type": "number",
            "example": 1.23
          },
          "rangeRate": {
            "format": "double",
            "description": "Rate of change of the line of sight range in km/sec.",
            "type": "number",
            "example": 1.23
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range rate measurement, in kilometers/second.",
            "type": "number",
            "example": 0.5
          },
          "doppler": {
            "format": "double",
            "description": "Corrected doppler measurement in meters per second.",
            "type": "number",
            "example": 10.23
          },
          "dopplerUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the corrected doppler measurement, in meters/second.",
            "type": "number",
            "example": 1.23
          },
          "ra": {
            "format": "double",
            "description": "Line of sight right ascension in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 1.23
          },
          "raMeasured": {
            "description": "Optional flag indicating whether the ra value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "declination": {
            "format": "double",
            "description": "Line of sight declination angle in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.23
          },
          "declinationMeasured": {
            "description": "Optional flag indicating whether the declination value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "x": {
            "format": "double",
            "description": "X position of target in km in J2000 coordinate frame.",
            "type": "number",
            "example": 50.23
          },
          "y": {
            "format": "double",
            "description": "Y position of target in km in J2000 coordinate frame.",
            "type": "number",
            "example": 50.23
          },
          "z": {
            "format": "double",
            "description": "Z position of target in km in J2000 coordinate frame.",
            "type": "number",
            "example": 50.23
          },
          "xvel": {
            "format": "double",
            "description": "X velocity of target in km/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 1.23
          },
          "yvel": {
            "format": "double",
            "description": "Y velocity of target in km/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 5.23
          },
          "zvel": {
            "format": "double",
            "description": "Z velocity of target in km/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 5.23
          },
          "senx": {
            "format": "double",
            "description": "Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
            "type": "number",
            "example": 45.23
          },
          "seny": {
            "format": "double",
            "description": "Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
            "type": "number",
            "example": 40.23
          },
          "senz": {
            "format": "double",
            "description": "Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
            "type": "number",
            "example": 35.23
          },
          "rcs": {
            "format": "double",
            "description": "Radar cross section in meters squared for polarization principal.",
            "type": "number",
            "example": 100.23
          },
          "rcsUnc": {
            "format": "double",
            "description": "one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.",
            "type": "number",
            "example": 1.23
          },
          "orthogonalRcs": {
            "format": "double",
            "description": "Radar cross section in meters squared for orthogonal polarization.",
            "type": "number",
            "example": 1.23
          },
          "orthogonalRcsUnc": {
            "format": "double",
            "description": "one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.",
            "type": "number",
            "example": 10.23
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 0.5
          },
          "beam": {
            "format": "double",
            "description": "ID of the beam that produced this observation.",
            "type": "number",
            "example": 1.23
          },
          "timingBias": {
            "format": "double",
            "description": "Sensor timing bias in seconds.",
            "type": "number",
            "example": 1.23
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "rawFileURI"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "descriptor"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "type": {
            "description": "Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).",
            "type": "string",
            "readOnly": true,
            "example": "RADAR"
          }
        }
      },
      "RFBand_Full": {
        "description": "Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.",
        "required": [
          "idEntity",
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RFBAND-ID"
          },
          "idEntity": {
            "description": "Unique identifier of the parent Entity which uses this band.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENTITY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "RF Band name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "BAND_NAME"
          },
          "band": {
            "description": "Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.",
            "maxLength": 5,
            "type": "string",
            "example": "Ku"
          },
          "mode": {
            "description": "RF Band mode (e.g. TX, RX).",
            "maxLength": 4,
            "enum": [
              "TX",
              "RX"
            ],
            "type": "string",
            "example": "TX"
          },
          "purpose": {
            "description": "Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).",
            "maxLength": 16,
            "enum": [
              "COMM",
              "TTC",
              "OPS",
              "OTHER"
            ],
            "type": "string",
            "example": "TTC"
          },
          "freqMin": {
            "format": "double",
            "description": "Start/minimum of transmit RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 50.23
          },
          "freqMax": {
            "format": "double",
            "description": "End/maximum of transmit RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 2000.23
          },
          "centerFreq": {
            "format": "double",
            "description": "Center frequency of RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 1000.23
          },
          "peakGain": {
            "format": "double",
            "description": "RF Range maximum gain, in dBi.",
            "type": "number",
            "example": 120.23
          },
          "edgeGain": {
            "format": "double",
            "description": "RF Range edge gain, in dBi.",
            "type": "number",
            "example": 100.23
          },
          "bandwidth": {
            "format": "double",
            "description": "RF Band frequency range bandwidth in Mhz.",
            "type": "number",
            "example": 100.23
          },
          "beamwidth": {
            "format": "double",
            "description": "Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.",
            "type": "number",
            "example": 45.23
          },
          "polarization": {
            "description": "Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.",
            "maxLength": 4,
            "enum": [
              "H",
              "V",
              "R",
              "L"
            ],
            "type": "string",
            "example": "H"
          },
          "erp": {
            "format": "double",
            "description": "Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the \"main lobe\") of its radiation pattern.",
            "type": "number",
            "example": 2.23
          },
          "eirp": {
            "format": "double",
            "description": "EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the \"main lobe\") of its radiation pattern.",
            "type": "number",
            "example": 2.23
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "RFObservation_Abridged": {
        "description": "Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).",
        "required": [
          "type",
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "type": {
            "description": "Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "example": "RF"
          },
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RFOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 32258
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIG-OBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIG-SENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": false
          },
          "transponder": {
            "description": "Optional identifier provided by observation source to indicate the transponder used for this measurement.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSPONDER-A"
          },
          "azimuth": {
            "format": "double",
            "description": "azimuth angle in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.1
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the azimuth angle measurement, in degrees.",
            "type": "number",
            "example": 2.1
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the azimuth in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "elevation": {
            "format": "double",
            "description": "elevation in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.1
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the elevation angle measurement, in degrees.",
            "type": "number",
            "example": 10.1
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the elevation in degrees per second.",
            "type": "number",
            "example": 10.1
          },
          "range": {
            "format": "double",
            "description": "Target range in km.",
            "type": "number",
            "example": 10.1
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range measurement, in kilometers.",
            "type": "number",
            "example": 10.1
          },
          "rangeRate": {
            "format": "double",
            "description": "Rate of change of the range in km/sec.",
            "type": "number",
            "example": 10.1
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range rate measurement, in kilometers/second.",
            "type": "number",
            "example": 10.1
          },
          "trackRange": {
            "format": "double",
            "description": "Target track or apparent range in km.",
            "type": "number",
            "example": 10.1
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.2
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 80.3
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.",
            "type": "number",
            "example": 10.1
          },
          "elnot": {
            "description": "ELINT notation.",
            "maxLength": 10,
            "type": "string",
            "example": "Ex. ELINT"
          },
          "frequency": {
            "format": "double",
            "description": "Center carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "nominalFrequency": {
            "format": "double",
            "description": "Nominal or expected center carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "startFrequency": {
            "format": "double",
            "description": "Start carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "endFrequency": {
            "format": "double",
            "description": "End carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "relativeCarrierPower": {
            "format": "double",
            "description": "Measured power of the center carrier frequency in dBW.",
            "type": "number",
            "example": 10.1
          },
          "spectrumAnalyzerPower": {
            "format": "double",
            "description": "Measured spectrum analyzer power of the center carrier frequency in dBW.",
            "type": "number",
            "example": 10.1
          },
          "relativeNoiseFloor": {
            "format": "double",
            "description": "The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.",
            "type": "number",
            "example": 10.1
          },
          "referenceLevel": {
            "format": "double",
            "description": "Reference signal level, in dBW.",
            "type": "number",
            "example": 10.1
          },
          "pgri": {
            "format": "double",
            "description": "A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.",
            "type": "number",
            "example": 10.1
          },
          "confidence": {
            "format": "double",
            "description": "Confidence in the signal and its measurements and characterization.",
            "type": "number",
            "example": 10.1
          },
          "incoming": {
            "description": "True if the signal is incoming, false if outgoing.",
            "type": "boolean",
            "example": false
          },
          "switchPoint": {
            "format": "int32",
            "description": "Switch Point of the RFObservation record.",
            "type": "integer",
            "example": 10
          },
          "baudRate": {
            "format": "double",
            "description": "Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.",
            "type": "number",
            "example": 10.1
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "nominalSnr": {
            "format": "double",
            "description": "Nominal or expected signal to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "polarity": {
            "format": "double",
            "description": "The antenna pointing dependent polarizer angle, in degrees.",
            "type": "number",
            "example": 10.1
          },
          "polarityType": {
            "description": "Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.",
            "maxLength": 16,
            "enum": [
              "H",
              "V",
              "R",
              "L"
            ],
            "type": "string",
            "example": "H"
          },
          "channel": {
            "format": "int32",
            "description": "Channel of the RFObservation record.",
            "type": "integer",
            "example": 10
          },
          "powerOverNoise": {
            "format": "double",
            "description": "Measured carrier power over noise (dBW/Hz).",
            "type": "number",
            "example": 10.1
          },
          "nominalPowerOverNoise": {
            "format": "double",
            "description": "Expected carrier power over noise (dBW/Hz).",
            "type": "number",
            "example": 10.1
          },
          "bandwidth": {
            "format": "double",
            "description": "Measured bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "nominalBandwidth": {
            "format": "double",
            "description": "Expected bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "resolutionBandwidth": {
            "format": "double",
            "description": "Resolution bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "videoBandwidth": {
            "format": "double",
            "description": "Video bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "eirp": {
            "format": "double",
            "description": "Measured Equivalent Isotopically Radiated Power in dBW.",
            "type": "number",
            "example": 10.1
          },
          "nominalEirp": {
            "format": "double",
            "description": "Expected Equivalent Isotopically Radiated Power in dBW.",
            "type": "number",
            "example": 10.1
          },
          "minPSD": {
            "format": "double",
            "description": "Minimum measured PSD value of the trace in dBW.",
            "type": "number",
            "example": 10.1
          },
          "maxPSD": {
            "format": "double",
            "description": "Maximum measured PSD value of the trace in dBW.",
            "type": "number",
            "example": 10.1
          },
          "frequencyShift": {
            "format": "double",
            "description": "Frequency Shift of the RFObservation record.",
            "type": "number",
            "example": 10.1
          },
          "peak": {
            "description": "Peak of the RFObservation record.",
            "type": "boolean",
            "example": false
          },
          "antennaName": {
            "description": "Antenna name of the RFObservation record.",
            "maxLength": 64,
            "type": "string",
            "example": "Antenna1"
          },
          "detectionStatus": {
            "description": "Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "DETECTED"
          },
          "collectionMode": {
            "description": "Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "SURVEY"
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URI"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "noisePwrDensity": {
            "format": "double",
            "description": "Noise power density, in dBW-Hz.",
            "type": "number",
            "example": 10.1
          },
          "carrierStandard": {
            "description": "Carrier standard (e.g. DVB-S2, 802.11g, etc.).",
            "maxLength": 10,
            "type": "string",
            "example": "DVB-S2"
          },
          "modulation": {
            "description": "Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).",
            "maxLength": 10,
            "type": "string",
            "example": "Auto"
          },
          "innerCodingRate": {
            "format": "int32",
            "description": "Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.",
            "type": "integer",
            "example": 7
          },
          "outerCodingRate": {
            "format": "int32",
            "description": "Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.",
            "type": "integer",
            "example": 4
          },
          "transmitFilterType": {
            "description": "Transmit pulse shaping filter typ (e.g. RRC).",
            "maxLength": 10,
            "type": "string",
            "example": "RRC"
          },
          "transmitFilterRollOff": {
            "format": "double",
            "description": "Transmit pulse shaping filter roll-off value.",
            "type": "number",
            "example": 10.1
          },
          "symbolToNoiseRatio": {
            "format": "double",
            "description": "Symbol to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "bitErrorRate": {
            "format": "double",
            "description": "The ratio of bit errors per number of received bits.",
            "type": "number",
            "example": 10.1
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "descriptor"
          },
          "url": {
            "description": "Optional URL containing additional information on this observation.",
            "maxLength": 2048,
            "type": "string",
            "example": "https://some-url"
          }
        }
      },
      "Scientific_Full": {
        "description": "Scientific or other data from Seradata.",
        "required": [
          "classificationMarking",
          "spacecraftId",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SCIENTIFIC-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "spacecraftId": {
            "description": "Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-SPACECRAFT-ID"
          },
          "hostedForCompanyOrgId": {
            "description": "Hosted for company/Organization Id.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-HOSTEDFORCOMPANYORG-ID"
          },
          "manufacturerOrgId": {
            "description": "Unique identifier of the organization which manufactures this bus.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-MANUFACTURERORG-ID"
          },
          "payloadCategory": {
            "description": "Payload category, e.g. Magnetometer, Radiometer, Sensor, etc.",
            "maxLength": 50,
            "type": "string",
            "example": "Sensor"
          },
          "name": {
            "description": "Sensor name from sera data, e.g. SEM/MAG (SEM / Magnetometer).",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "SEM/MAG"
          },
          "frequencyBand": {
            "description": "Frequency band, e.g. Gamma.",
            "maxLength": 50,
            "type": "string",
            "example": "Gamma"
          },
          "notes": {
            "description": "Notes associated with the payload.",
            "maxLength": 256,
            "type": "string",
            "example": "NOTES"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "idEntity": {
            "description": "ID of the parent entity for this Scientific.",
            "maxLength": 36,
            "type": "string",
            "example": "0167f577-e06c-358e-85aa-0a07a730bdd0"
          },
          "entity": {
            "$ref": "#/components/schemas/Entity_Full"
          }
        }
      },
      "SeradataCommDetails_Full": {
        "description": "Seradata-compiled information on communications payloads.",
        "required": [
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SERADATACOMMDETAILS-ID"
          },
          "idComm": {
            "description": "UUID of the parent Comm record.",
            "maxLength": 36,
            "type": "string",
            "example": "idComm"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "spacecraftId": {
            "description": "Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).",
            "maxLength": 36,
            "type": "string",
            "example": "spacecraftId"
          },
          "band": {
            "description": "Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.",
            "maxLength": 5,
            "type": "string",
            "example": "X"
          },
          "solidStatePowerAmp": {
            "format": "double",
            "description": "Solid state power amplifier, in Watts.",
            "type": "number",
            "example": 1.23
          },
          "travelingWaveTubeAmplifier": {
            "format": "double",
            "description": "Comm travelingWaveTubeAmplifier in Watts.",
            "type": "number",
            "example": 1.23
          },
          "gatewayUplinkFrom": {
            "format": "double",
            "description": "Comm gatewayUplinkFrom in Ghz.",
            "type": "number",
            "example": 1.23
          },
          "gatewayUplinkTo": {
            "format": "double",
            "description": "Comm gatewayUplinkTo in Ghz.",
            "type": "number",
            "example": 1.23
          },
          "gatewayDownlinkFrom": {
            "format": "double",
            "description": "Comm gatewayDownlinkFrom in Ghz.",
            "type": "number",
            "example": 1.23
          },
          "gatewayDownlinkTo": {
            "format": "double",
            "description": "Comm gatewayDownlinkTo in Ghz.",
            "type": "number",
            "example": 1.23
          },
          "polarization": {
            "description": "Comm polarization.",
            "maxLength": 64,
            "type": "string",
            "example": "polarization"
          },
          "eirp": {
            "format": "double",
            "description": "Effective isotropic radiated power in dB.",
            "type": "number",
            "example": 1.23
          },
          "bandwidth": {
            "format": "double",
            "description": "Comm bandwidth in Mhz.",
            "type": "number",
            "example": 1.23
          },
          "numOperationalTransponders": {
            "format": "int32",
            "description": "Comm numOperationalTransponders.",
            "type": "integer",
            "example": 1
          },
          "numSpareTransponders": {
            "format": "int32",
            "description": "Comm numSpareTransponders.",
            "type": "integer",
            "example": 1
          },
          "hostedForCompanyOrgId": {
            "description": "Comm hostedForCompanyOrgId.",
            "maxLength": 36,
            "type": "string",
            "example": "hostedForCompanyOrgId"
          },
          "manufacturerOrgId": {
            "description": "Comm manufacturerOrgId.",
            "maxLength": 36,
            "type": "string",
            "example": "manufacturerOrgId"
          },
          "tradeLeaseOrgId": {
            "description": "Comm tradeLeaseOrgId.",
            "maxLength": 36,
            "type": "string",
            "example": "tradeLeaseOrgId"
          },
          "num36MhzEquivalentTransponders": {
            "format": "int32",
            "description": "Comm num36MhzEquivalentTransponders.",
            "type": "integer",
            "example": 1
          },
          "htsNumUserSpotBeams": {
            "format": "int32",
            "description": "Comm htsNumUserSpotBeams.",
            "type": "integer",
            "example": 1
          },
          "htsUserDownlinkBandwidthPerBeam": {
            "format": "double",
            "description": "Comm htsUserDownlinkBandwidthPerBeam in Mhz.",
            "type": "number",
            "example": 1.23
          },
          "htsUserUplinkBandwidthPerBeam": {
            "format": "double",
            "description": "Comm htsUserUplinkBandwidthPerBeam in Mhz.",
            "type": "number",
            "example": 1.23
          },
          "estHtsTotalUserDownlinkBandwidthPerBeam": {
            "format": "double",
            "description": "Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz.",
            "type": "number",
            "example": 1.23
          },
          "estHtsTotalUserUplinkBandwidthPerBeam": {
            "format": "double",
            "description": "Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz.",
            "type": "number",
            "example": 1.23
          },
          "estHtsTotalCapacity": {
            "format": "double",
            "description": "Comm estimated HtsTotalCapacity in Gbps.",
            "type": "number",
            "example": 1.23
          },
          "userDownlinkFrom": {
            "format": "double",
            "description": "Comm userDownlinkFrom in Ghz.",
            "type": "number",
            "example": 1.23
          },
          "userDownlinkTo": {
            "format": "double",
            "description": "Comm userDownlinkTo in Ghz.",
            "type": "number",
            "example": 1.23
          },
          "userUplinkFrom": {
            "format": "double",
            "description": "Comm userUplinkFrom in Ghz.",
            "type": "number",
            "example": 1.23
          },
          "userUplinkTo": {
            "format": "double",
            "description": "Comm userUplinkTo in Ghz.",
            "type": "number",
            "example": 1.23
          },
          "payloadNotes": {
            "description": "Payload notes.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "SeradataEarlyWarning_Full": {
        "description": "Details for an early warning payload from  Seradata.",
        "required": [
          "classificationMarking",
          "spacecraftId",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SERADATAEARLYWARNING-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idIR": {
            "description": "UUID of the parent IR record.",
            "maxLength": 36,
            "type": "string",
            "example": "idIR"
          },
          "spacecraftId": {
            "description": "Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "spacecraftId"
          },
          "hostedForCompanyOrgId": {
            "description": "Hosted for company/Organization Id.",
            "maxLength": 36,
            "type": "string",
            "example": "hostedForCompanyOrgId"
          },
          "manufacturerOrgId": {
            "description": "Manufacturer Organization Id.",
            "maxLength": 36,
            "type": "string",
            "example": "manufacturerOrgId"
          },
          "name": {
            "description": "Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.",
            "maxLength": 50,
            "type": "string",
            "example": "Infra red telescope"
          },
          "spectralBands": {
            "description": "Spectral Bands, e.g. Infra-Red.",
            "maxLength": 50,
            "type": "string",
            "example": "Infra-Red"
          },
          "frequencyLimits": {
            "description": "Frequency Limits for this IR.",
            "maxLength": 50,
            "type": "string",
            "example": "frequencyLimits"
          },
          "bestResolution": {
            "format": "double",
            "description": "Best resolution for this IR in meters.",
            "type": "number",
            "example": 1.23
          },
          "groundStations": {
            "description": "Ground Station info for this IR.",
            "maxLength": 128,
            "type": "string",
            "example": "groundStations"
          },
          "groundStationLocations": {
            "description": "Ground Station Locations for this IR.",
            "maxLength": 64,
            "type": "string",
            "example": "groundStationLocations"
          },
          "missileLaunchPhaseDetectionAbility": {
            "description": "Missile Launch Phase Detection Ability.",
            "maxLength": 64,
            "type": "string",
            "example": "missileLaunchPhaseDetectionAbility"
          },
          "earthPointing": {
            "description": "Is the sensor Earth Pointing.",
            "type": "boolean",
            "example": true
          },
          "partnerSpacecraftId": {
            "description": "Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).",
            "maxLength": 36,
            "type": "string",
            "example": "partnerSpacecraftId"
          },
          "payloadNotes": {
            "description": "Payload notes.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "SeradataNavigation_Full": {
        "description": "Details for a navigation payload from  Seradata.",
        "required": [
          "classificationMarking",
          "spacecraftId",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SERADATANAVIGATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idNavigation": {
            "description": "UUID of the parent Navigation record.",
            "maxLength": 36,
            "type": "string",
            "example": "idNavigation"
          },
          "spacecraftId": {
            "description": "Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "spacecraftId"
          },
          "hostedForCompanyOrgId": {
            "description": "Hosted for company/Organization Id.",
            "maxLength": 36,
            "type": "string",
            "example": "hostedForCompanyOrgId"
          },
          "manufacturerOrgId": {
            "description": "Manufacturer Organization Id.",
            "maxLength": 36,
            "type": "string",
            "example": "manufacturerOrgId"
          },
          "payloadType": {
            "description": "Navigation payload type, e.g. WAAS, GAGAN, etc.",
            "maxLength": 100,
            "type": "string",
            "example": "WAAS"
          },
          "modes": {
            "description": "Modes of operation.",
            "maxLength": 100,
            "type": "string",
            "example": "Military"
          },
          "modeFrequency": {
            "description": "Frequency for this payload.",
            "maxLength": 100,
            "type": "string",
            "example": "1234"
          },
          "locationAccuracy": {
            "format": "double",
            "description": "Location accuracy in meters.",
            "type": "number",
            "example": 1.23
          },
          "partnerSpacecraftId": {
            "description": "Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).",
            "maxLength": 36,
            "type": "string",
            "example": "partnerSpacecraftId"
          },
          "areaCoverage": {
            "description": "Area of coverage, e.g. Worldwide, India, etc.",
            "maxLength": 50,
            "type": "string",
            "example": "Worldwide"
          },
          "notes": {
            "description": "Payload notes.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "name": {
            "description": "Sensor name from Seradata, e.g. WAAS GEO-5, etc.",
            "maxLength": 50,
            "type": "string",
            "example": "WAAS GEO-5"
          },
          "clockType": {
            "description": "Type of clock, e.g. Rubidium, Hydrogen Maser, etc.",
            "maxLength": 20,
            "type": "string",
            "example": "Rubidium"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "SeradataOpticalPayload_Full": {
        "description": "Details for an optical payload from  Seradata.",
        "required": [
          "classificationMarking",
          "spacecraftId",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SERADATAOPTICALPAYLOAD-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "spacecraftId": {
            "description": "Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "spacecraftId"
          },
          "idSensor": {
            "description": "UUID of the Sensor record.",
            "maxLength": 36,
            "type": "string",
            "example": "idSensor"
          },
          "hostedForCompanyOrgId": {
            "description": "Hosted for company/Organization Id.",
            "maxLength": 36,
            "type": "string",
            "example": "hostedForCompanyOrgId"
          },
          "manufacturerOrgId": {
            "description": "Manufacturer Organization Id.",
            "maxLength": 36,
            "type": "string",
            "example": "manufacturerOrgId"
          },
          "imagingPayloadCategory": {
            "description": "Imaging category for this payload, e.g. Multispectral, Infrared, Panchromatic.",
            "maxLength": 50,
            "type": "string",
            "example": "Infrared"
          },
          "name": {
            "description": "Sensor name from Seradata, e.g. TOURNESOL, MESSR (Multispectral Self-Scanning Radiometer), AWFI, etc.",
            "maxLength": 50,
            "type": "string",
            "example": "TOURNESOL"
          },
          "spectralBand": {
            "description": "Spectral Band supported by this payload, e.g. Green, Red, Mid-wave infrared, etc.",
            "maxLength": 20,
            "type": "string",
            "example": "Green"
          },
          "spectralFrequencyLimits": {
            "description": "Frequency limit for this payload, e.g. 0.51 - 0.59.",
            "maxLength": 50,
            "type": "string",
            "example": "0.51"
          },
          "numberOfFilmReturnCanisters": {
            "format": "int16",
            "description": "Number of film return canisters.",
            "type": "integer",
            "example": 1
          },
          "bestResolution": {
            "format": "double",
            "description": "Best resolution.",
            "type": "number",
            "example": 1.23
          },
          "swathWidth": {
            "format": "double",
            "description": "Swath width in kilometers.",
            "type": "number",
            "example": 1.23
          },
          "recorderSize": {
            "description": "Recorder size.",
            "maxLength": 50,
            "type": "string",
            "example": "1024"
          },
          "fieldOfView": {
            "format": "double",
            "description": "Field of view of this radar in kilometers.",
            "type": "number",
            "example": 1.23
          },
          "fieldOfRegard": {
            "format": "double",
            "description": "Field of regard of this radar in degrees.",
            "type": "number",
            "example": 1.23
          },
          "pointingMethod": {
            "description": "Point method for this radar, e.g. Spacecraft.",
            "maxLength": 50,
            "type": "string",
            "example": "Spacecraft"
          },
          "groundStations": {
            "description": "Ground Station info for this payload.",
            "maxLength": 256,
            "type": "string",
            "example": "groundStations"
          },
          "groundStationLocations": {
            "description": "Ground Station Locations for this payload.",
            "maxLength": 128,
            "type": "string",
            "example": "groundStationLocations"
          },
          "notes": {
            "description": "Payload notes.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "SeradataRadarPayload_Full": {
        "description": "Details for an radar payload from  Seradata.",
        "required": [
          "classificationMarking",
          "spacecraftId",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SERADATARADARPAYLOAD-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "spacecraftId": {
            "description": "Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "12345"
          },
          "idSensor": {
            "description": "UUID of the Sensor record.",
            "maxLength": 36,
            "type": "string",
            "example": "3c1ee9a0-90ad-1d75-c47b-2414e0a77e53"
          },
          "hostedForCompanyOrgId": {
            "description": "Hosted for company/Organization Id.",
            "maxLength": 36,
            "type": "string",
            "example": "hostedForCompanyOrgId"
          },
          "manufacturerOrgId": {
            "description": "Manufacturer Organization Id.",
            "maxLength": 36,
            "type": "string",
            "example": "manufacturerOrgId"
          },
          "category": {
            "description": "Radar category, e.g. SAR, Surface Search, etc.",
            "maxLength": 20,
            "type": "string",
            "example": "SAR"
          },
          "name": {
            "description": "Sensor name from Seradata, e.g. ALT (Radar Altimeter), COSI (Corea SAR Instrument), etc.",
            "maxLength": 50,
            "type": "string",
            "example": "ALT"
          },
          "frequencyBand": {
            "description": "Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.",
            "maxLength": 10,
            "type": "string",
            "example": "X"
          },
          "frequency": {
            "format": "double",
            "description": "Frequency in giga hertz.",
            "type": "number",
            "example": 1.23
          },
          "waveLength": {
            "format": "double",
            "description": "Wave length in meters.",
            "type": "number",
            "example": 1.23
          },
          "bestResolution": {
            "format": "double",
            "description": "Best resolution in meters.",
            "type": "number",
            "example": 1.23
          },
          "swathWidth": {
            "format": "double",
            "description": "Swath width in kilometers.",
            "type": "number",
            "example": 1.23
          },
          "recorderSize": {
            "description": "Recorder size, e.g. 256.",
            "maxLength": 50,
            "type": "string",
            "example": "256"
          },
          "fieldOfView": {
            "format": "double",
            "description": "Field of view of this radar in kilometers.",
            "type": "number",
            "example": 1.23
          },
          "fieldOfRegard": {
            "format": "double",
            "description": "Field of regard of this radar in degrees.",
            "type": "number",
            "example": 1.23
          },
          "pointingMethod": {
            "description": "Point method for this radar, e.g. Spacecraft.",
            "maxLength": 50,
            "type": "string",
            "example": "Spacecraft"
          },
          "groundStations": {
            "description": "Ground Station info for this payload.",
            "maxLength": 128,
            "type": "string",
            "example": "groundStations"
          },
          "groundStationLocations": {
            "description": "Ground Station Locations for this payload.",
            "maxLength": 64,
            "type": "string",
            "example": "51,42N-44,35E"
          },
          "transmitPolarization": {
            "description": "Transmit polarization, e.g. Lin Dual, Lin vert, etc.",
            "maxLength": 50,
            "type": "string",
            "example": "Lin Dual"
          },
          "receivePolarization": {
            "description": "Receive polarization, e.g. Lin Dual, Lin vert, etc.",
            "maxLength": 50,
            "type": "string",
            "example": "Lin Dual"
          },
          "dutyCycle": {
            "description": "Duty cycle.",
            "maxLength": 50,
            "type": "string",
            "example": "dutyCycle"
          },
          "partnerSpacecraft": {
            "description": "Partner seradata-spacecraft.",
            "maxLength": 36,
            "type": "string",
            "example": "partnerSpacecraft"
          },
          "constellationInterferometricCapability": {
            "description": "Constellation interferometric capability.",
            "maxLength": 50,
            "type": "string",
            "example": "constellationInterferometricCapability"
          },
          "notes": {
            "description": "Payload notes.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "bandwidth": {
            "format": "double",
            "description": "Radar bandwidth in mega hertz.",
            "type": "number",
            "example": 1.23
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "SeradataSigIntPayload_Full": {
        "description": "Details for an sigint payload from  Seradata.",
        "required": [
          "classificationMarking",
          "spacecraftId",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SERADATASIGINTPAYLOAD-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "spacecraftId": {
            "description": "Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "spacecraftId"
          },
          "idSensor": {
            "description": "UUID of the Sensor record.",
            "maxLength": 36,
            "type": "string",
            "example": "0c5ec9c0-10cd-1d35-c46b-3764c4d76e13"
          },
          "hostedForCompanyOrgId": {
            "description": "Hosted for company/Organization Id.",
            "maxLength": 36,
            "type": "string",
            "example": "hostedForCompanyOrgId"
          },
          "manufacturerOrgId": {
            "description": "Manufacturer Organization Id.",
            "maxLength": 36,
            "type": "string",
            "example": "manufacturerOrgId"
          },
          "type": {
            "description": "SIGINT Payload type, e.g. Comint, Elint, etc.",
            "maxLength": 50,
            "type": "string",
            "example": "Comint"
          },
          "swathWidth": {
            "format": "double",
            "description": "Swath Width in kilometers.",
            "type": "number",
            "example": 1.23
          },
          "groundStations": {
            "description": "Ground Station info for this payload.",
            "maxLength": 128,
            "type": "string",
            "example": "groundStations"
          },
          "groundStationLocations": {
            "description": "Ground Station Locations for this payload.",
            "maxLength": 64,
            "type": "string",
            "example": "groundStationLocations"
          },
          "frequencyCoverage": {
            "description": "Frequency coverage for this payload.",
            "maxLength": 50,
            "type": "string",
            "example": "1.1 to 3.3"
          },
          "positionalAccuracy": {
            "description": "Positional Accuracy for this payload.",
            "maxLength": 50,
            "type": "string",
            "example": "positionalAccuracy"
          },
          "interceptParameters": {
            "description": "Intercept parameters.",
            "maxLength": 50,
            "type": "string",
            "example": "interceptParameters"
          },
          "name": {
            "description": "Sensor name from Seradata.",
            "maxLength": 50,
            "type": "string",
            "example": "Sensor Name"
          },
          "notes": {
            "description": "Payload notes.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "SeradataSpacecraftDetails_Abridged": {
        "description": "On-orbit spacecraft details compiled by Seradata for a particular satellite.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SERADATASPACECRAFTDETAILS-ID"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record, if available.",
            "maxLength": 36,
            "type": "string",
            "example": "503"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Spacecraft name.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "name"
          },
          "description": {
            "description": "Description associated with the spacecraft.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "description"
          },
          "intlNumber": {
            "description": "Seradata international number.",
            "maxLength": 16,
            "type": "string",
            "example": "number"
          },
          "sector": {
            "description": "Seradata sector (e.g. Commercial, Military, Civil/Other).",
            "maxLength": 16,
            "type": "string",
            "example": "Commercial"
          },
          "apogee": {
            "format": "double",
            "description": "Apogee in km.",
            "type": "number",
            "example": 1.23
          },
          "perigee": {
            "format": "double",
            "description": "Perigee in km.",
            "type": "number",
            "example": 1.23
          },
          "period": {
            "format": "double",
            "description": "Spacecraft period in minutes.",
            "type": "number",
            "example": 1.23
          },
          "inclination": {
            "format": "double",
            "description": "Seradata provided inclination in degrees.",
            "type": "number",
            "example": 1.23
          },
          "primeManufacturerOrgId": {
            "description": "UUID of the prime manufacturer organization, if available.",
            "maxLength": 36,
            "type": "string",
            "example": "05c43360-382e-4aa2-b875-ed28945ff2e5"
          },
          "stabilizer": {
            "description": "Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "3-Axis"
          },
          "designLife": {
            "format": "int32",
            "description": "Spacecraft design life in days.",
            "type": "integer",
            "example": 231
          },
          "expectedLife": {
            "format": "int32",
            "description": "Spacecraft expected life in days.",
            "type": "integer",
            "example": 231
          },
          "insuredAtLaunch": {
            "description": "Boolean indicating if the spacecraft was insured at launch.",
            "type": "boolean",
            "example": true
          },
          "launchMass": {
            "format": "double",
            "description": "Mass at launch in kg.",
            "type": "number",
            "example": 1.23
          },
          "dryMass": {
            "format": "double",
            "description": "Mass dry in kg.",
            "type": "number",
            "example": 1.23
          },
          "catalogNumber": {
            "format": "int32",
            "description": "NORAD satellite number if available.",
            "type": "integer",
            "example": 1
          },
          "totalPayloadPower": {
            "format": "double",
            "description": "Mass dry in kg.",
            "type": "number",
            "example": 1.23
          },
          "constellation": {
            "description": "Spacecraft constellation.",
            "maxLength": 64,
            "type": "string",
            "example": "GPS"
          },
          "orbitCategory": {
            "description": "Spacecraft orbit category (e.g GEO, LEO, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "GEO"
          },
          "orbitSubCategory": {
            "description": "Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Geostationary"
          },
          "launchCost": {
            "format": "double",
            "description": "Cost of launch in M USD.",
            "type": "number",
            "example": 1.23
          },
          "launchCostEstimated": {
            "description": "Boolean indicating if the spacecraft launch cost is estimated.",
            "type": "boolean",
            "example": true
          },
          "costEstimated": {
            "description": "Boolean indicating if the spacecraft cost is estimated.",
            "type": "boolean",
            "example": true
          },
          "newCost": {
            "format": "double",
            "description": "Cost of spacecraft at new in M USD.",
            "type": "number",
            "example": 1.23
          },
          "combinedNewCost": {
            "format": "double",
            "description": "Combined cost of spacecraft at new in M USD.",
            "type": "number",
            "example": 1.23
          },
          "combinedCostEstimated": {
            "description": "Boolean indicating if the spacecraft combined new cost is estimated.",
            "type": "boolean",
            "example": true
          },
          "insuredValueAtLaunch": {
            "format": "double",
            "description": "Insured value of spacecraft at launch in M USD.",
            "type": "number",
            "example": 1.23
          },
          "insuredValueLaunchEstimated": {
            "description": "Boolean indicating if the spacecraft insured value at launch is estimated.",
            "type": "boolean",
            "example": true
          },
          "annualInsuredDepreciationFactor": {
            "format": "double",
            "description": "Annual insured depreciaion factor as a percent fraction.",
            "type": "number",
            "example": 1.23
          },
          "annualInsuredDepreciationFactorEstimated": {
            "description": "Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.",
            "type": "boolean",
            "example": true
          },
          "insurancePremiumAtLaunch": {
            "format": "double",
            "description": "Insurance premium at launch in M USD.",
            "type": "number",
            "example": 1.23
          },
          "insurancePremiumAtLaunchEstimated": {
            "description": "Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.",
            "type": "boolean",
            "example": true
          },
          "numHumans": {
            "format": "int32",
            "description": "Number of humans carried on spacecraft.",
            "type": "integer",
            "example": 1
          },
          "cubesatDispenserType": {
            "description": "Cubesat dispenser type.",
            "maxLength": 64,
            "type": "string",
            "example": "cubesatDispenserType"
          },
          "massCategory": {
            "description": "Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "2500 - 3500kg  - Large Satellite"
          },
          "launchId": {
            "description": "Seradata launch ID.",
            "maxLength": 32,
            "type": "string",
            "example": "11573"
          },
          "launchVehicleId": {
            "description": "Seradata launch ID.",
            "maxLength": 36,
            "type": "string",
            "example": "123"
          },
          "launchProviderFlightNumber": {
            "description": "Seradata launch vehicle family.",
            "maxLength": 64,
            "type": "string",
            "example": "launchProviderFlightNumber"
          },
          "launchSiteName": {
            "description": "Launch Site Name.",
            "maxLength": 64,
            "type": "string",
            "example": "launchSiteName"
          },
          "launchSiteId": {
            "description": "Seradata Launch Site ID.",
            "maxLength": 32,
            "type": "string",
            "example": "28"
          },
          "launchCountry": {
            "description": "Seradata launch country.",
            "maxLength": 32,
            "type": "string",
            "example": "USA"
          },
          "launchProvider": {
            "description": "Seradata launch provider.",
            "maxLength": 128,
            "type": "string",
            "example": "launchProvider"
          },
          "launchProviderCountry": {
            "description": "Seradata launch provider country.",
            "maxLength": 32,
            "type": "string",
            "example": "USA"
          },
          "commercialLaunch": {
            "description": "Boolean indicating if the launch was commercial.",
            "type": "boolean",
            "example": true
          },
          "launchType": {
            "description": "Seradata launch type (e.g. Launched, Future, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "Future"
          },
          "launchCharacteristic": {
            "description": "Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Expendable"
          },
          "launchNumber": {
            "description": "Seradata launch number.",
            "maxLength": 16,
            "type": "string",
            "example": "FN040"
          },
          "launchDate": {
            "format": "date-time",
            "description": "Launch date.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "launchDateRemarks": {
            "description": "Seradata remarks on launch date.",
            "maxLength": 64,
            "type": "string",
            "example": "launchDateRemarks"
          },
          "youtubeLaunchLink": {
            "description": "Youtube link of launch.",
            "maxLength": 32,
            "type": "string",
            "example": "youtubeLaunchLink"
          },
          "status": {
            "description": "Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Inactive - Retired"
          },
          "owner": {
            "description": "Spacecraft owner name.",
            "maxLength": 128,
            "type": "string",
            "example": "owner"
          },
          "ownerCountry": {
            "description": "Spacecraft owner country.",
            "maxLength": 64,
            "type": "string",
            "example": "USA"
          },
          "operator": {
            "description": "Spacecraft operator name.",
            "maxLength": 128,
            "type": "string",
            "example": "operator"
          },
          "operatorCountry": {
            "description": "Spacecraft operator country.",
            "maxLength": 64,
            "type": "string",
            "example": "USA"
          },
          "leased": {
            "description": "Boolean indicating if the spacecraft was leased.",
            "type": "boolean",
            "example": true
          },
          "orderDate": {
            "format": "date-time",
            "description": "Spacecraft order date.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "capabilityLost": {
            "format": "double",
            "description": "Total capability lost as a percent fraction.",
            "type": "number",
            "example": 1.23
          },
          "capacityLost": {
            "format": "double",
            "description": "Total capacity lost as a percent fraction.",
            "type": "number",
            "example": 1.23
          },
          "primaryMissionGroup": {
            "description": "Spacecraft primary mission and group.",
            "maxLength": 64,
            "type": "string",
            "example": "primaryMissionGroup"
          },
          "additionalMissionsGroups": {
            "description": "Spacecraft additional missions and groups.",
            "maxLength": 256,
            "type": "string",
            "example": "additionalMissionsGroups"
          },
          "totalClaims": {
            "format": "int32",
            "description": "Number of insurance claims for this spacecraft.",
            "type": "integer",
            "example": 1
          },
          "totalInjuries": {
            "format": "int32",
            "description": "Number of injuries related to this spacecraft.",
            "type": "integer",
            "example": 1
          },
          "totalFatalities": {
            "format": "int32",
            "description": "Number of fatalities related to this spacecraft.",
            "type": "integer",
            "example": 1
          },
          "nameAtLaunch": {
            "description": "Spacecraft name at launch.",
            "maxLength": 64,
            "type": "string",
            "example": "nameAtLaunch"
          },
          "busId": {
            "description": "Spacecraft Bus ID.",
            "maxLength": 36,
            "type": "string",
            "example": "BUS-ID"
          },
          "currentAge": {
            "format": "double",
            "description": "Current age in years.",
            "type": "number",
            "example": 5.898630136986301
          },
          "lifeLost": {
            "format": "double",
            "description": "Spacecraft life lost as a percent fraction.",
            "type": "number",
            "example": 1.23
          },
          "geoPosition": {
            "format": "double",
            "description": "WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": -8.23
          },
          "insuranceLossesTotal": {
            "format": "double",
            "description": "Spacecraft total insurance losses as a fraction.",
            "type": "number",
            "example": 0.393
          },
          "launchArranger": {
            "description": "Spacecraft launch arranger.",
            "maxLength": 64,
            "type": "string",
            "example": "launchArranger"
          },
          "launchArrangerCountry": {
            "description": "Spacecraft launch arranger country.",
            "maxLength": 64,
            "type": "string",
            "example": "USA"
          },
          "serialNumber": {
            "description": "Spacecraft serial number.",
            "maxLength": 64,
            "type": "string",
            "example": "serialNumber"
          },
          "programName": {
            "description": "Spacecraft program name.",
            "maxLength": 64,
            "type": "string",
            "example": "programName"
          },
          "reusedHullName": {
            "description": "Spacecraft reused hull name.",
            "maxLength": 64,
            "type": "string",
            "example": "reusedHullName"
          },
          "dateOfObservation": {
            "format": "date-time",
            "description": "Spacecraft date of observation.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "lat": {
            "format": "double",
            "description": "Spacecraft latest latitude in degrees.",
            "type": "number",
            "example": 1.23
          },
          "lon": {
            "format": "double",
            "description": "Spacecraft latest longitude in degrees.",
            "type": "number",
            "example": 1.23
          },
          "altitude": {
            "format": "double",
            "description": "Spacecraft latest altitude in km.",
            "type": "number",
            "example": 36036.6330576414
          },
          "collisionRiskMM": {
            "format": "double",
            "description": "Spacecraft collision risk 1mm sqm latest.",
            "type": "number",
            "example": 1.33
          },
          "collisionRiskCM": {
            "format": "double",
            "description": "Spacecraft collision risk 1cm sqm latest.",
            "type": "number",
            "example": 1.43
          },
          "quantity": {
            "format": "int32",
            "description": "Spacecraft quantity.",
            "type": "integer",
            "example": 1
          },
          "reusableFlights": {
            "description": "Spacecraft reusable flights.",
            "maxLength": 64,
            "type": "string",
            "example": "reusableFlights"
          },
          "notes": {
            "description": "Notes on the spacecraft.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "insuranceNotes": {
            "description": "Insurance notes for the spacecraft.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "launchNotes": {
            "description": "Insurance notes for the spacecraft.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "SeradataSpacecraftDetails_Full": {
        "description": "On-orbit spacecraft details compiled by Seradata for a particular satellite.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SERADATASPACECRAFTDETAILS-ID"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record, if available.",
            "maxLength": 36,
            "type": "string",
            "example": "503"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Spacecraft name.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "name"
          },
          "description": {
            "description": "Description associated with the spacecraft.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "description"
          },
          "intlNumber": {
            "description": "Seradata international number.",
            "maxLength": 16,
            "type": "string",
            "example": "number"
          },
          "sector": {
            "description": "Seradata sector (e.g. Commercial, Military, Civil/Other).",
            "maxLength": 16,
            "type": "string",
            "example": "Commercial"
          },
          "apogee": {
            "format": "double",
            "description": "Apogee in km.",
            "type": "number",
            "example": 1.23
          },
          "perigee": {
            "format": "double",
            "description": "Perigee in km.",
            "type": "number",
            "example": 1.23
          },
          "period": {
            "format": "double",
            "description": "Spacecraft period in minutes.",
            "type": "number",
            "example": 1.23
          },
          "inclination": {
            "format": "double",
            "description": "Seradata provided inclination in degrees.",
            "type": "number",
            "example": 1.23
          },
          "primeManufacturerOrgId": {
            "description": "UUID of the prime manufacturer organization, if available.",
            "maxLength": 36,
            "type": "string",
            "example": "05c43360-382e-4aa2-b875-ed28945ff2e5"
          },
          "stabilizer": {
            "description": "Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "3-Axis"
          },
          "designLife": {
            "format": "int32",
            "description": "Spacecraft design life in days.",
            "type": "integer",
            "example": 231
          },
          "expectedLife": {
            "format": "int32",
            "description": "Spacecraft expected life in days.",
            "type": "integer",
            "example": 231
          },
          "insuredAtLaunch": {
            "description": "Boolean indicating if the spacecraft was insured at launch.",
            "type": "boolean",
            "example": true
          },
          "launchMass": {
            "format": "double",
            "description": "Mass at launch in kg.",
            "type": "number",
            "example": 1.23
          },
          "dryMass": {
            "format": "double",
            "description": "Mass dry in kg.",
            "type": "number",
            "example": 1.23
          },
          "catalogNumber": {
            "format": "int32",
            "description": "NORAD satellite number if available.",
            "type": "integer",
            "example": 1
          },
          "totalPayloadPower": {
            "format": "double",
            "description": "Mass dry in kg.",
            "type": "number",
            "example": 1.23
          },
          "constellation": {
            "description": "Spacecraft constellation.",
            "maxLength": 64,
            "type": "string",
            "example": "GPS"
          },
          "orbitCategory": {
            "description": "Spacecraft orbit category (e.g GEO, LEO, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "GEO"
          },
          "orbitSubCategory": {
            "description": "Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Geostationary"
          },
          "launchCost": {
            "format": "double",
            "description": "Cost of launch in M USD.",
            "type": "number",
            "example": 1.23
          },
          "launchCostEstimated": {
            "description": "Boolean indicating if the spacecraft launch cost is estimated.",
            "type": "boolean",
            "example": true
          },
          "costEstimated": {
            "description": "Boolean indicating if the spacecraft cost is estimated.",
            "type": "boolean",
            "example": true
          },
          "newCost": {
            "format": "double",
            "description": "Cost of spacecraft at new in M USD.",
            "type": "number",
            "example": 1.23
          },
          "combinedNewCost": {
            "format": "double",
            "description": "Combined cost of spacecraft at new in M USD.",
            "type": "number",
            "example": 1.23
          },
          "combinedCostEstimated": {
            "description": "Boolean indicating if the spacecraft combined new cost is estimated.",
            "type": "boolean",
            "example": true
          },
          "insuredValueAtLaunch": {
            "format": "double",
            "description": "Insured value of spacecraft at launch in M USD.",
            "type": "number",
            "example": 1.23
          },
          "insuredValueLaunchEstimated": {
            "description": "Boolean indicating if the spacecraft insured value at launch is estimated.",
            "type": "boolean",
            "example": true
          },
          "annualInsuredDepreciationFactor": {
            "format": "double",
            "description": "Annual insured depreciaion factor as a percent fraction.",
            "type": "number",
            "example": 1.23
          },
          "annualInsuredDepreciationFactorEstimated": {
            "description": "Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.",
            "type": "boolean",
            "example": true
          },
          "insurancePremiumAtLaunch": {
            "format": "double",
            "description": "Insurance premium at launch in M USD.",
            "type": "number",
            "example": 1.23
          },
          "insurancePremiumAtLaunchEstimated": {
            "description": "Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.",
            "type": "boolean",
            "example": true
          },
          "numHumans": {
            "format": "int32",
            "description": "Number of humans carried on spacecraft.",
            "type": "integer",
            "example": 1
          },
          "cubesatDispenserType": {
            "description": "Cubesat dispenser type.",
            "maxLength": 64,
            "type": "string",
            "example": "cubesatDispenserType"
          },
          "massCategory": {
            "description": "Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "2500 - 3500kg  - Large Satellite"
          },
          "launchId": {
            "description": "Seradata launch ID.",
            "maxLength": 32,
            "type": "string",
            "example": "11573"
          },
          "launchVehicleId": {
            "description": "Seradata launch ID.",
            "maxLength": 36,
            "type": "string",
            "example": "123"
          },
          "launchProviderFlightNumber": {
            "description": "Seradata launch vehicle family.",
            "maxLength": 64,
            "type": "string",
            "example": "launchProviderFlightNumber"
          },
          "launchSiteName": {
            "description": "Launch Site Name.",
            "maxLength": 64,
            "type": "string",
            "example": "launchSiteName"
          },
          "launchSiteId": {
            "description": "Seradata Launch Site ID.",
            "maxLength": 32,
            "type": "string",
            "example": "28"
          },
          "launchCountry": {
            "description": "Seradata launch country.",
            "maxLength": 32,
            "type": "string",
            "example": "USA"
          },
          "launchProvider": {
            "description": "Seradata launch provider.",
            "maxLength": 128,
            "type": "string",
            "example": "launchProvider"
          },
          "launchProviderCountry": {
            "description": "Seradata launch provider country.",
            "maxLength": 32,
            "type": "string",
            "example": "USA"
          },
          "commercialLaunch": {
            "description": "Boolean indicating if the launch was commercial.",
            "type": "boolean",
            "example": true
          },
          "launchType": {
            "description": "Seradata launch type (e.g. Launched, Future, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "Future"
          },
          "launchCharacteristic": {
            "description": "Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Expendable"
          },
          "launchNumber": {
            "description": "Seradata launch number.",
            "maxLength": 16,
            "type": "string",
            "example": "FN040"
          },
          "launchDate": {
            "format": "date-time",
            "description": "Launch date.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "launchDateRemarks": {
            "description": "Seradata remarks on launch date.",
            "maxLength": 64,
            "type": "string",
            "example": "launchDateRemarks"
          },
          "youtubeLaunchLink": {
            "description": "Youtube link of launch.",
            "maxLength": 32,
            "type": "string",
            "example": "youtubeLaunchLink"
          },
          "status": {
            "description": "Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Inactive - Retired"
          },
          "owner": {
            "description": "Spacecraft owner name.",
            "maxLength": 128,
            "type": "string",
            "example": "owner"
          },
          "ownerCountry": {
            "description": "Spacecraft owner country.",
            "maxLength": 64,
            "type": "string",
            "example": "USA"
          },
          "operator": {
            "description": "Spacecraft operator name.",
            "maxLength": 128,
            "type": "string",
            "example": "operator"
          },
          "operatorCountry": {
            "description": "Spacecraft operator country.",
            "maxLength": 64,
            "type": "string",
            "example": "USA"
          },
          "leased": {
            "description": "Boolean indicating if the spacecraft was leased.",
            "type": "boolean",
            "example": true
          },
          "orderDate": {
            "format": "date-time",
            "description": "Spacecraft order date.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "capabilityLost": {
            "format": "double",
            "description": "Total capability lost as a percent fraction.",
            "type": "number",
            "example": 1.23
          },
          "capacityLost": {
            "format": "double",
            "description": "Total capacity lost as a percent fraction.",
            "type": "number",
            "example": 1.23
          },
          "primaryMissionGroup": {
            "description": "Spacecraft primary mission and group.",
            "maxLength": 64,
            "type": "string",
            "example": "primaryMissionGroup"
          },
          "additionalMissionsGroups": {
            "description": "Spacecraft additional missions and groups.",
            "maxLength": 256,
            "type": "string",
            "example": "additionalMissionsGroups"
          },
          "totalClaims": {
            "format": "int32",
            "description": "Number of insurance claims for this spacecraft.",
            "type": "integer",
            "example": 1
          },
          "totalInjuries": {
            "format": "int32",
            "description": "Number of injuries related to this spacecraft.",
            "type": "integer",
            "example": 1
          },
          "totalFatalities": {
            "format": "int32",
            "description": "Number of fatalities related to this spacecraft.",
            "type": "integer",
            "example": 1
          },
          "nameAtLaunch": {
            "description": "Spacecraft name at launch.",
            "maxLength": 64,
            "type": "string",
            "example": "nameAtLaunch"
          },
          "busId": {
            "description": "Spacecraft Bus ID.",
            "maxLength": 36,
            "type": "string",
            "example": "BUS-ID"
          },
          "currentAge": {
            "format": "double",
            "description": "Current age in years.",
            "type": "number",
            "example": 5.898630136986301
          },
          "lifeLost": {
            "format": "double",
            "description": "Spacecraft life lost as a percent fraction.",
            "type": "number",
            "example": 1.23
          },
          "geoPosition": {
            "format": "double",
            "description": "WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": -8.23
          },
          "insuranceLossesTotal": {
            "format": "double",
            "description": "Spacecraft total insurance losses as a fraction.",
            "type": "number",
            "example": 0.393
          },
          "launchArranger": {
            "description": "Spacecraft launch arranger.",
            "maxLength": 64,
            "type": "string",
            "example": "launchArranger"
          },
          "launchArrangerCountry": {
            "description": "Spacecraft launch arranger country.",
            "maxLength": 64,
            "type": "string",
            "example": "USA"
          },
          "serialNumber": {
            "description": "Spacecraft serial number.",
            "maxLength": 64,
            "type": "string",
            "example": "serialNumber"
          },
          "programName": {
            "description": "Spacecraft program name.",
            "maxLength": 64,
            "type": "string",
            "example": "programName"
          },
          "reusedHullName": {
            "description": "Spacecraft reused hull name.",
            "maxLength": 64,
            "type": "string",
            "example": "reusedHullName"
          },
          "dateOfObservation": {
            "format": "date-time",
            "description": "Spacecraft date of observation.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "lat": {
            "format": "double",
            "description": "Spacecraft latest latitude in degrees.",
            "type": "number",
            "example": 1.23
          },
          "lon": {
            "format": "double",
            "description": "Spacecraft latest longitude in degrees.",
            "type": "number",
            "example": 1.23
          },
          "altitude": {
            "format": "double",
            "description": "Spacecraft latest altitude in km.",
            "type": "number",
            "example": 36036.6330576414
          },
          "collisionRiskMM": {
            "format": "double",
            "description": "Spacecraft collision risk 1mm sqm latest.",
            "type": "number",
            "example": 1.33
          },
          "collisionRiskCM": {
            "format": "double",
            "description": "Spacecraft collision risk 1cm sqm latest.",
            "type": "number",
            "example": 1.43
          },
          "quantity": {
            "format": "int32",
            "description": "Spacecraft quantity.",
            "type": "integer",
            "example": 1
          },
          "reusableFlights": {
            "description": "Spacecraft reusable flights.",
            "maxLength": 64,
            "type": "string",
            "example": "reusableFlights"
          },
          "notes": {
            "description": "Notes on the spacecraft.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "insuranceNotes": {
            "description": "Insurance notes for the spacecraft.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "launchNotes": {
            "description": "Insurance notes for the spacecraft.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "seradataSigIntPayload": {
            "description": "Read-only details of the SeradataSigIntPayload object, only used during detail queries (not to be provided on create/update operations).",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeradataSigIntPayload_Full"
            },
            "readOnly": true
          },
          "seradataRadarPayload": {
            "description": "Read-only details of the SeradataRadarPayload object, only used during detail queries (not to be provided on create/update operations).",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeradataRadarPayload_Full"
            },
            "readOnly": true
          },
          "seradataNavigation": {
            "description": "Read-only details of the SeradataNavigation object, only used during detail queries (not to be provided on create/update operations).",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeradataNavigation_Full"
            },
            "readOnly": true
          },
          "seradataOpticalPayload": {
            "description": "Read-only details of the SeradataOpticalPayload object, only used during detail queries (not to be provided on create/update operations).",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeradataOpticalPayload_Full"
            },
            "readOnly": true
          },
          "seradataEarlyWarning": {
            "description": "Read-only details of the SeradataEarlyWarning object, only used during detail queries (not to be provided on create/update operations).",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeradataEarlyWarning_Full"
            },
            "readOnly": true
          },
          "scientific": {
            "description": "Read-only details of the Scientific object, only used during detail queries (not to be provided on create/update operations).",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Scientific_Full"
            },
            "readOnly": true
          },
          "seradataCommDetails": {
            "description": "Read-only details of the SeradataCommDetails object, only used during detail queries (not to be provided on create/update operations).",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeradataCommDetails_Full"
            },
            "readOnly": true
          },
          "onOrbit": {
            "description": "Model object representing on-orbit objects or satellites in the system.",
            "required": [
              "classificationMarking",
              "satNo",
              "source",
              "dataMode"
            ],
            "type": "object",
            "properties": {
              "idOnOrbit": {
                "description": "For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.",
                "maxLength": 36,
                "minLength": 1,
                "type": "string",
                "example": "ONORBIT-ID"
              },
              "classificationMarking": {
                "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                "maxLength": 128,
                "minLength": 1,
                "type": "string",
                "example": "U"
              },
              "satNo": {
                "format": "int32",
                "description": "Satellite/Catalog number of the target on-orbit object.",
                "minimum": 0,
                "type": "integer",
                "example": 1
              },
              "commonName": {
                "description": "Common name of the on-orbit object.",
                "maxLength": 128,
                "type": "string",
                "example": "Example common name"
              },
              "constellation": {
                "description": "Constellation to which this satellite belongs.",
                "maxLength": 128,
                "type": "string",
                "example": "Big Dipper"
              },
              "intlDes": {
                "description": "International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.",
                "maxLength": 45,
                "type": "string",
                "example": "2021123ABC"
              },
              "launchDate": {
                "format": "date",
                "description": "Date of launch.",
                "type": "string",
                "example": "2018-01-01"
              },
              "decayDate": {
                "format": "date-time",
                "description": "Date of decay.",
                "type": "string",
                "example": "2018-01-01T16:00:00.123Z"
              },
              "objectType": {
                "description": "Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.",
                "maxLength": 32,
                "enum": [
                  "ROCKET BODY",
                  "DEBRIS",
                  "PAYLOAD",
                  "PLATFORM",
                  "MANNED",
                  "UNKNOWN"
                ],
                "type": "string",
                "example": "PAYLOAD"
              },
              "origin": {
                "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                "maxLength": 64,
                "type": "string",
                "example": "THIRD_PARTY_DATASOURCE"
              },
              "missionNumber": {
                "description": "Mission number of the on-orbit object.",
                "maxLength": 128,
                "type": "string",
                "example": "Expedition 1"
              },
              "category": {
                "description": "Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).",
                "maxLength": 45,
                "enum": [
                  "Unknown",
                  "On-Orbit",
                  "Decayed",
                  "Cataloged Without State",
                  "Launch Nominal",
                  "Analyst Satellite",
                  "Cislunar",
                  "Lunar",
                  "Hyperbolic",
                  "Heliocentric",
                  "Interplanetary",
                  "Lagrangian",
                  "Docked"
                ],
                "type": "string",
                "example": "Lunar"
              },
              "lifetimeYears": {
                "format": "int32",
                "description": "Estimated lifetime of the on-orbit payload, if known.",
                "type": "integer",
                "example": 10
              },
              "altName": {
                "description": "Alternate name of the on-orbit object.",
                "maxLength": 64,
                "type": "string",
                "example": "Alternate Name"
              },
              "createdAt": {
                "format": "date-time",
                "description": "Time the row was created in the database, auto-populated by the system.",
                "type": "string",
                "readOnly": true,
                "example": "2018-01-01T16:00:00.123Z"
              },
              "createdBy": {
                "description": "Application user who created the row in the database, auto-populated by the system.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "some.user"
              },
              "updatedAt": {
                "format": "date-time",
                "description": "Time the row was last updated in the database, auto-populated by the system.",
                "type": "string",
                "readOnly": true,
                "example": "2018-01-01T16:00:00.123Z"
              },
              "updatedBy": {
                "description": "Application user who updated the row in the database, auto-populated by the system.",
                "maxLength": 64,
                "type": "string",
                "readOnly": true,
                "example": "some.user"
              },
              "source": {
                "description": "Source of the data.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "example": "Bluestaq"
              },
              "dataMode": {
                "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                "maxLength": 32,
                "minLength": 1,
                "enum": [
                  "REAL",
                  "TEST",
                  "SIMULATED",
                  "EXERCISE"
                ],
                "type": "string",
                "example": "TEST"
              },
              "launchSiteId": {
                "description": "Id of the associated launchSite entity.",
                "maxLength": 36,
                "type": "string",
                "example": "LAUNCHSITE-ID"
              },
              "antennas": {
                "description": "Read-only collection of antennas on this on-orbit object.",
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OnorbitAntenna_Full"
                },
                "readOnly": true
              },
              "batteries": {
                "description": "Read-only collection of batteries on this on-orbit object.",
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OnorbitBattery_Full"
                },
                "readOnly": true
              },
              "solarArrays": {
                "description": "Read-only collection of solar arrays on this on-orbit object.",
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OnorbitSolarArray_Full"
                },
                "readOnly": true
              },
              "thrusters": {
                "description": "Read-only collection of thrusters (engines) on this on-orbit object.",
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OnorbitThruster_Full"
                },
                "readOnly": true
              },
              "onorbitDetails": {
                "description": "Read-only collection of details for this on-orbit object.",
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OnorbitDetails_Full"
                },
                "readOnly": true
              },
              "countryCode": {
                "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
                "maxLength": 4,
                "type": "string",
                "example": "US"
              },
              "origNetwork": {
                "description": "The originating source network on which this record was created, auto-populated by the system.",
                "maxLength": 32,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "OPS1"
              }
            }
          }
        }
      },
      "SeradataSpacecraftDetails_Ingest": {
        "description": "On-orbit spacecraft details compiled by Seradata for a particular satellite.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SERADATASPACECRAFTDETAILS-ID"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record, if available.",
            "maxLength": 36,
            "type": "string",
            "example": "503"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Spacecraft name.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "name"
          },
          "description": {
            "description": "Description associated with the spacecraft.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "description"
          },
          "intlNumber": {
            "description": "Seradata international number.",
            "maxLength": 16,
            "type": "string",
            "example": "number"
          },
          "sector": {
            "description": "Seradata sector (e.g. Commercial, Military, Civil/Other).",
            "maxLength": 16,
            "type": "string",
            "example": "Commercial"
          },
          "apogee": {
            "format": "double",
            "description": "Apogee in km.",
            "type": "number",
            "example": 1.23
          },
          "perigee": {
            "format": "double",
            "description": "Perigee in km.",
            "type": "number",
            "example": 1.23
          },
          "period": {
            "format": "double",
            "description": "Spacecraft period in minutes.",
            "type": "number",
            "example": 1.23
          },
          "inclination": {
            "format": "double",
            "description": "Seradata provided inclination in degrees.",
            "type": "number",
            "example": 1.23
          },
          "primeManufacturerOrgId": {
            "description": "UUID of the prime manufacturer organization, if available.",
            "maxLength": 36,
            "type": "string",
            "example": "05c43360-382e-4aa2-b875-ed28945ff2e5"
          },
          "stabilizer": {
            "description": "Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "3-Axis"
          },
          "designLife": {
            "format": "int32",
            "description": "Spacecraft design life in days.",
            "type": "integer",
            "example": 231
          },
          "expectedLife": {
            "format": "int32",
            "description": "Spacecraft expected life in days.",
            "type": "integer",
            "example": 231
          },
          "insuredAtLaunch": {
            "description": "Boolean indicating if the spacecraft was insured at launch.",
            "type": "boolean",
            "example": true
          },
          "launchMass": {
            "format": "double",
            "description": "Mass at launch in kg.",
            "type": "number",
            "example": 1.23
          },
          "dryMass": {
            "format": "double",
            "description": "Mass dry in kg.",
            "type": "number",
            "example": 1.23
          },
          "catalogNumber": {
            "format": "int32",
            "description": "NORAD satellite number if available.",
            "type": "integer",
            "example": 1
          },
          "totalPayloadPower": {
            "format": "double",
            "description": "Mass dry in kg.",
            "type": "number",
            "example": 1.23
          },
          "constellation": {
            "description": "Spacecraft constellation.",
            "maxLength": 64,
            "type": "string",
            "example": "GPS"
          },
          "orbitCategory": {
            "description": "Spacecraft orbit category (e.g GEO, LEO, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "GEO"
          },
          "orbitSubCategory": {
            "description": "Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Geostationary"
          },
          "launchCost": {
            "format": "double",
            "description": "Cost of launch in M USD.",
            "type": "number",
            "example": 1.23
          },
          "launchCostEstimated": {
            "description": "Boolean indicating if the spacecraft launch cost is estimated.",
            "type": "boolean",
            "example": true
          },
          "costEstimated": {
            "description": "Boolean indicating if the spacecraft cost is estimated.",
            "type": "boolean",
            "example": true
          },
          "newCost": {
            "format": "double",
            "description": "Cost of spacecraft at new in M USD.",
            "type": "number",
            "example": 1.23
          },
          "combinedNewCost": {
            "format": "double",
            "description": "Combined cost of spacecraft at new in M USD.",
            "type": "number",
            "example": 1.23
          },
          "combinedCostEstimated": {
            "description": "Boolean indicating if the spacecraft combined new cost is estimated.",
            "type": "boolean",
            "example": true
          },
          "insuredValueAtLaunch": {
            "format": "double",
            "description": "Insured value of spacecraft at launch in M USD.",
            "type": "number",
            "example": 1.23
          },
          "insuredValueLaunchEstimated": {
            "description": "Boolean indicating if the spacecraft insured value at launch is estimated.",
            "type": "boolean",
            "example": true
          },
          "annualInsuredDepreciationFactor": {
            "format": "double",
            "description": "Annual insured depreciaion factor as a percent fraction.",
            "type": "number",
            "example": 1.23
          },
          "annualInsuredDepreciationFactorEstimated": {
            "description": "Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.",
            "type": "boolean",
            "example": true
          },
          "insurancePremiumAtLaunch": {
            "format": "double",
            "description": "Insurance premium at launch in M USD.",
            "type": "number",
            "example": 1.23
          },
          "insurancePremiumAtLaunchEstimated": {
            "description": "Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.",
            "type": "boolean",
            "example": true
          },
          "numHumans": {
            "format": "int32",
            "description": "Number of humans carried on spacecraft.",
            "type": "integer",
            "example": 1
          },
          "cubesatDispenserType": {
            "description": "Cubesat dispenser type.",
            "maxLength": 64,
            "type": "string",
            "example": "cubesatDispenserType"
          },
          "massCategory": {
            "description": "Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "2500 - 3500kg  - Large Satellite"
          },
          "launchId": {
            "description": "Seradata launch ID.",
            "maxLength": 32,
            "type": "string",
            "example": "11573"
          },
          "launchVehicleId": {
            "description": "Seradata launch ID.",
            "maxLength": 36,
            "type": "string",
            "example": "123"
          },
          "launchProviderFlightNumber": {
            "description": "Seradata launch vehicle family.",
            "maxLength": 64,
            "type": "string",
            "example": "launchProviderFlightNumber"
          },
          "launchSiteName": {
            "description": "Launch Site Name.",
            "maxLength": 64,
            "type": "string",
            "example": "launchSiteName"
          },
          "launchSiteId": {
            "description": "Seradata Launch Site ID.",
            "maxLength": 32,
            "type": "string",
            "example": "28"
          },
          "launchCountry": {
            "description": "Seradata launch country.",
            "maxLength": 32,
            "type": "string",
            "example": "USA"
          },
          "launchProvider": {
            "description": "Seradata launch provider.",
            "maxLength": 128,
            "type": "string",
            "example": "launchProvider"
          },
          "launchProviderCountry": {
            "description": "Seradata launch provider country.",
            "maxLength": 32,
            "type": "string",
            "example": "USA"
          },
          "commercialLaunch": {
            "description": "Boolean indicating if the launch was commercial.",
            "type": "boolean",
            "example": true
          },
          "launchType": {
            "description": "Seradata launch type (e.g. Launched, Future, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "Future"
          },
          "launchCharacteristic": {
            "description": "Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Expendable"
          },
          "launchNumber": {
            "description": "Seradata launch number.",
            "maxLength": 16,
            "type": "string",
            "example": "FN040"
          },
          "launchDate": {
            "format": "date-time",
            "description": "Launch date.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "launchDateRemarks": {
            "description": "Seradata remarks on launch date.",
            "maxLength": 64,
            "type": "string",
            "example": "launchDateRemarks"
          },
          "youtubeLaunchLink": {
            "description": "Youtube link of launch.",
            "maxLength": 32,
            "type": "string",
            "example": "youtubeLaunchLink"
          },
          "status": {
            "description": "Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Inactive - Retired"
          },
          "owner": {
            "description": "Spacecraft owner name.",
            "maxLength": 128,
            "type": "string",
            "example": "owner"
          },
          "ownerCountry": {
            "description": "Spacecraft owner country.",
            "maxLength": 64,
            "type": "string",
            "example": "USA"
          },
          "operator": {
            "description": "Spacecraft operator name.",
            "maxLength": 128,
            "type": "string",
            "example": "operator"
          },
          "operatorCountry": {
            "description": "Spacecraft operator country.",
            "maxLength": 64,
            "type": "string",
            "example": "USA"
          },
          "leased": {
            "description": "Boolean indicating if the spacecraft was leased.",
            "type": "boolean",
            "example": true
          },
          "orderDate": {
            "format": "date-time",
            "description": "Spacecraft order date.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "capabilityLost": {
            "format": "double",
            "description": "Total capability lost as a percent fraction.",
            "type": "number",
            "example": 1.23
          },
          "capacityLost": {
            "format": "double",
            "description": "Total capacity lost as a percent fraction.",
            "type": "number",
            "example": 1.23
          },
          "primaryMissionGroup": {
            "description": "Spacecraft primary mission and group.",
            "maxLength": 64,
            "type": "string",
            "example": "primaryMissionGroup"
          },
          "additionalMissionsGroups": {
            "description": "Spacecraft additional missions and groups.",
            "maxLength": 256,
            "type": "string",
            "example": "additionalMissionsGroups"
          },
          "totalClaims": {
            "format": "int32",
            "description": "Number of insurance claims for this spacecraft.",
            "type": "integer",
            "example": 1
          },
          "totalInjuries": {
            "format": "int32",
            "description": "Number of injuries related to this spacecraft.",
            "type": "integer",
            "example": 1
          },
          "totalFatalities": {
            "format": "int32",
            "description": "Number of fatalities related to this spacecraft.",
            "type": "integer",
            "example": 1
          },
          "nameAtLaunch": {
            "description": "Spacecraft name at launch.",
            "maxLength": 64,
            "type": "string",
            "example": "nameAtLaunch"
          },
          "busId": {
            "description": "Spacecraft Bus ID.",
            "maxLength": 36,
            "type": "string",
            "example": "BUS-ID"
          },
          "currentAge": {
            "format": "double",
            "description": "Current age in years.",
            "type": "number",
            "example": 5.898630136986301
          },
          "lifeLost": {
            "format": "double",
            "description": "Spacecraft life lost as a percent fraction.",
            "type": "number",
            "example": 1.23
          },
          "geoPosition": {
            "format": "double",
            "description": "WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": -8.23
          },
          "insuranceLossesTotal": {
            "format": "double",
            "description": "Spacecraft total insurance losses as a fraction.",
            "type": "number",
            "example": 0.393
          },
          "launchArranger": {
            "description": "Spacecraft launch arranger.",
            "maxLength": 64,
            "type": "string",
            "example": "launchArranger"
          },
          "launchArrangerCountry": {
            "description": "Spacecraft launch arranger country.",
            "maxLength": 64,
            "type": "string",
            "example": "USA"
          },
          "serialNumber": {
            "description": "Spacecraft serial number.",
            "maxLength": 64,
            "type": "string",
            "example": "serialNumber"
          },
          "programName": {
            "description": "Spacecraft program name.",
            "maxLength": 64,
            "type": "string",
            "example": "programName"
          },
          "reusedHullName": {
            "description": "Spacecraft reused hull name.",
            "maxLength": 64,
            "type": "string",
            "example": "reusedHullName"
          },
          "dateOfObservation": {
            "format": "date-time",
            "description": "Spacecraft date of observation.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "lat": {
            "format": "double",
            "description": "Spacecraft latest latitude in degrees.",
            "type": "number",
            "example": 1.23
          },
          "lon": {
            "format": "double",
            "description": "Spacecraft latest longitude in degrees.",
            "type": "number",
            "example": 1.23
          },
          "altitude": {
            "format": "double",
            "description": "Spacecraft latest altitude in km.",
            "type": "number",
            "example": 36036.6330576414
          },
          "collisionRiskMM": {
            "format": "double",
            "description": "Spacecraft collision risk 1mm sqm latest.",
            "type": "number",
            "example": 1.33
          },
          "collisionRiskCM": {
            "format": "double",
            "description": "Spacecraft collision risk 1cm sqm latest.",
            "type": "number",
            "example": 1.43
          },
          "quantity": {
            "format": "int32",
            "description": "Spacecraft quantity.",
            "type": "integer",
            "example": 1
          },
          "reusableFlights": {
            "description": "Spacecraft reusable flights.",
            "maxLength": 64,
            "type": "string",
            "example": "reusableFlights"
          },
          "notes": {
            "description": "Notes on the spacecraft.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "insuranceNotes": {
            "description": "Insurance notes for the spacecraft.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "launchNotes": {
            "description": "Insurance notes for the spacecraft.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Sample Notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "SolarArray_Abridged": {
        "description": "Model representation of information on on-orbit/spacecraft solar arrays. A spacecraft may have multiple solar arrays and each solar array can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "name": {
            "description": "Solar Array name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Solar1"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "SolarArray_Full": {
        "description": "Model representation of information on on-orbit/spacecraft solar arrays. A spacecraft may have multiple solar arrays and each solar array can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "name": {
            "description": "Solar Array name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Solar1"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "solarArrayDetails": {
            "description": "Read-only collection of additional SolarArrayDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/solararraydetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolarArrayDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "SolarArray_Ingest": {
        "description": "Model representation of information on on-orbit/spacecraft solar arrays. A spacecraft may have multiple solar arrays and each solar array can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "name": {
            "description": "Solar Array name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Solar1"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "SolarArrayDetails_Abridged": {
        "description": "Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.",
        "required": [
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAYDETAILS-ID"
          },
          "idSolarArray": {
            "description": "Unique identifier of the parent SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of solar array (e.g. U Shaped).",
            "maxLength": 64,
            "type": "string",
            "example": "U Shaped"
          },
          "technology": {
            "description": "Solar array technology (e.g. Ga-As).",
            "maxLength": 64,
            "type": "string",
            "example": "Ga-As"
          },
          "junctionTechnology": {
            "description": "Solar array junction technology (e.g. Triple).",
            "maxLength": 64,
            "type": "string",
            "example": "Triple"
          },
          "manufacturerOrgId": {
            "description": "Unique identifier of the organization that manufactures the solar array.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "span": {
            "format": "double",
            "description": "Solar Array span in meters.",
            "type": "number",
            "example": 123.4
          },
          "area": {
            "format": "double",
            "description": "Solar Array area in square meters.",
            "type": "number",
            "example": 123.4
          },
          "description": {
            "description": "Solar array description/notes.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "SolarArrayDetails_Full": {
        "description": "Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.",
        "required": [
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAYDETAILS-ID"
          },
          "idSolarArray": {
            "description": "Unique identifier of the parent SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of solar array (e.g. U Shaped).",
            "maxLength": 64,
            "type": "string",
            "example": "U Shaped"
          },
          "technology": {
            "description": "Solar array technology (e.g. Ga-As).",
            "maxLength": 64,
            "type": "string",
            "example": "Ga-As"
          },
          "junctionTechnology": {
            "description": "Solar array junction technology (e.g. Triple).",
            "maxLength": 64,
            "type": "string",
            "example": "Triple"
          },
          "manufacturerOrgId": {
            "description": "Unique identifier of the organization that manufactures the solar array.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "span": {
            "format": "double",
            "description": "Solar Array span in meters.",
            "type": "number",
            "example": 123.4
          },
          "area": {
            "format": "double",
            "description": "Solar Array area in square meters.",
            "type": "number",
            "example": 123.4
          },
          "description": {
            "description": "Solar array description/notes.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "SolarArrayDetails_Ingest": {
        "description": "Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.",
        "required": [
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAYDETAILS-ID"
          },
          "idSolarArray": {
            "description": "Unique identifier of the parent SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of solar array (e.g. U Shaped).",
            "maxLength": 64,
            "type": "string",
            "example": "U Shaped"
          },
          "technology": {
            "description": "Solar array technology (e.g. Ga-As).",
            "maxLength": 64,
            "type": "string",
            "example": "Ga-As"
          },
          "junctionTechnology": {
            "description": "Solar array junction technology (e.g. Triple).",
            "maxLength": 64,
            "type": "string",
            "example": "Triple"
          },
          "manufacturerOrgId": {
            "description": "Unique identifier of the organization that manufactures the solar array.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "span": {
            "format": "double",
            "description": "Solar Array span in meters.",
            "type": "number",
            "example": 123.4
          },
          "area": {
            "format": "double",
            "description": "Solar Array area in square meters.",
            "type": "number",
            "example": 123.4
          },
          "description": {
            "description": "Solar array description/notes.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          }
        }
      },
      "Status_Full": {
        "description": "Status for a particular Entity. An entity may have multiple status records collected by various sources.",
        "required": [
          "classificationMarking",
          "idEntity",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "STATUS-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "derivedFrom": {
            "description": "The sources or SCG references from which the classification of this data is derived.",
            "maxLength": 128,
            "type": "string",
            "example": "SOME_SOURCE"
          },
          "declassificationDate": {
            "format": "date-time",
            "description": "The declassification date of this data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:02.123Z"
          },
          "declassificationString": {
            "description": "Declassification string of this data.",
            "maxLength": 256,
            "type": "string",
            "example": "U"
          },
          "idEntity": {
            "description": "Unique identifier of the parent entity.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENTITY-ID"
          },
          "state": {
            "description": "Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).",
            "maxLength": 16,
            "enum": [
              "UNKNOWN",
              "DEAD",
              "ACTIVE",
              "RF ACTIVE",
              "STANDBY"
            ],
            "type": "string",
            "example": "ACTIVE"
          },
          "sysCap": {
            "description": "System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).",
            "maxLength": 3,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "opsCap": {
            "description": "Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).",
            "maxLength": 3,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "subStatusCollection": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubStatus_Full"
            }
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "notes": {
            "description": "Comments describing the status creation and or updates to an entity.",
            "type": "string",
            "example": "Example Notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          }
        }
      },
      "SubStatus_Full": {
        "description": "Additional sub-system or capability status for the parent entity.",
        "required": [
          "type",
          "classificationMarking",
          "statusId",
          "status",
          "notes",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SUBSTATUS-ID"
          },
          "type": {
            "description": "Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "mwCap",
              "ssCap",
              "mdCap"
            ],
            "type": "string",
            "example": "mdCap"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "statusId": {
            "description": "Id of the parent status.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-STATUS-ID"
          },
          "status": {
            "description": "Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "notes": {
            "description": "Descriptions and/or comments associated with the sub-status.",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "example": "Sample Notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      }
    }
  }
}