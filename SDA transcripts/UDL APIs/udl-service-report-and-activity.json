{
  "openapi": "3.0.3",
  "info": {
    "title": "Unified Data Library Services API",
    "version": "1.30.0 Daiquiri",
    "description": "Unified Data Library Services OpenAPI v3 documentation.",
    "termsOfService": "storefront/storefront/appConfig/useragreement.html",
    "contact": {
      "name": "Sage Andorka, Deputy, Cross-Mission Ground",
      "email": "unifieddatalibrary@bluestaq.com"
    }
  },
  "tags": [
    {
      "name": "Report and Activity",
      "description": "These services provide operations for manipulation and querying of Report and Activity information. This information includes analytic reports, significant events, route statistics, and other georeferenced reports and activities."
    }
  ],
  "externalDocs": {
    "url": "udl/openapi.json"
  },
  "servers": [
    {
      "url": "https://unifieddatalibrary.com"
    }
  ],
  "paths": {
    "/filedrop/udl-analyticimagery": {
      "post": {
        "servers": [
          {
            "url": "https://imagery.unifieddatalibrary.com",
            "description": "Imagery upload server"
          }
        ],
        "tags": [
          "Report and Activity"
        ],
        "description": "The analytic imagery service allows for contribution of general images, such as data plots, graphs, heatmaps, and other graphics not supported as UDL ground or sky imagery. </br> This service operation requires a zip file in the body of the POST request.  The zip file must contain exactly two files. </br> <h3> 1) A json file with any file name that ends in .json  e.g. MyFitsFile.json  The contents of the json file must be valid according to the schema for Analytic Imagery. </br> 2) A binary image file of the specified types allowed for AnalyticImagery. </h3> The metadata and image files will be stored and associated with each other allowing queries of the data retrieval of the binary images. </br> This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_analyticimagery_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyticImagery_Ingest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-eventevolution": {
      "post": {
        "tags": [
          "Report and Activity"
        ],
        "description": "Service operation to take a list of EventEvolution records as a POST body and ingest into the database. Requires a specific role, please contact the UDL team to gain access. This operation is intended to be used for automated feeds into UDL.\n",
        "operationId": "filedrop_udl_eventevolution_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventEvolution_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-h3geo": {
      "post": {
        "tags": [
          "Report and Activity"
        ],
        "description": "Service operation to take a single H3Geo record and many associated H3Geo hex cell records as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_h3geo_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/H3Geo_Ingest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-poi": {
      "post": {
        "tags": [
          "Report and Activity"
        ],
        "description": "Service operation to take a list of POIs as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_poi_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/POI_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-rfgeolocation": {
      "post": {
        "tags": [
          "Report and Activity"
        ],
        "description": "Service operation to take multiple rfgeolocation records as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_rfgeolocation_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RFGeoLocation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-routestats": {
      "post": {
        "tags": [
          "Report and Activity"
        ],
        "description": "Service operation to take multiple routestats records as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_routestats_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RouteStats_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-sigact": {
      "post": {
        "tags": [
          "Report and Activity"
        ],
        "description": "Service operation to take a list of SigAct as a POST body and ingest into the database. A SigAct provides data for Report and Activity information. Requires a specific role, please contact the UDL team to gain access. This operation is intended to be used for automated feeds into UDL.\n",
        "operationId": "filedrop_udl_sigact_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SigAct_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-sigact-text": {
      "post": {
        "tags": [
          "Report and Activity"
        ],
        "description": "The sigact-txt service allows for contribution of large text that exceeds the limits of the sigact.eventDescription field (4096 characters). </br> This service operation requires a zip file in the body of the POST request. The zip file must contain exactly two files. </br> <h3> 1) A json file with any file name that ends in .json e.g. MyDataFile.json. The contents of the json file must be valid according to the schema for sigact. </br> 2) A txt file of the text encoded in UTF-8. </h3> The sigact metadata and text file will be stored and associated with each other allowing queries of the data retrieval of the text. </br> This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_sigact_text_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigAct_Ingest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/analyticimagery": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticImagery_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "msgTime",
            "description": "The message time of this image record, in ISO8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/analyticimagery/{id}": {
      "get": {
        "description": "Service operation to get a single AnalyticImagery record by its unique ID passed as a path parameter. AnalyticImagery represents metadata about an image, as well as the actual binary image data.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "The ID of the AnalyticImagery to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticImagery_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/analyticimagery/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "msgTime",
            "description": "The message time of this image record, in ISO8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/analyticimagery/getFile/{id}": {
      "get": {
        "description": "Service operation to get a single AnalyticImagery binary image by its unique ID passed as a path parameter. The image is returned as an attachment Content-Disposition.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "The ID of the binary AnalyticImagery to return.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/analyticimagery/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msgTime",
            "description": "The message time of this image record, in ISO8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticImagery_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/analyticimagery/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msgTime",
            "description": "The message time of this image record, in ISO8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/analyticimagery/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "msgTime",
            "description": "The message time of this image record, in ISO8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/analyticimagery/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/analyticimagery/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msgTime",
            "description": "The message time of this image record, in ISO8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticImagery_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/cot": {
      "post": {
        "description": "This service enables posting CoT messages to the UDL TAK server.  CoT data will be persisted in the UDL POI schema as well as federated to connected TAK servers.",
        "tags": [
          "Report and Activity"
        ],
        "requestBody": {
          "description": "JSON representation of one CotData to populate the cot message with.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CotData_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/eventevolution": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventEvolution_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "eventId",
            "description": "(One or more of fields 'eventId, startTime' are required.) User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "startTime",
            "description": "(One or more of fields 'eventId, startTime' are required.) The actual or estimated start time of the activity or event, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single EventEvolution object as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Report and Activity"
        ],
        "requestBody": {
          "description": "JSON representation of one EventEvolution entity.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventEvolution_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/eventevolution/{id}": {
      "get": {
        "description": "Service operation to get a single EventEvolution by its unique ID passed as a path parameter.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "The ID of the EventEvolution to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventEvolution_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/eventevolution/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "eventId",
            "description": "(One or more of fields 'eventId, startTime' are required.) User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "startTime",
            "description": "(One or more of fields 'eventId, startTime' are required.) The actual or estimated start time of the activity or event, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/eventevolution/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of EventEvolution records as a POST body and ingest into the database. Requires specific roles, please contact the UDL team to gain access. This operation is not intended to be used for automated feeds into UDL...data providers should contact the UDL team for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Report and Activity"
        ],
        "requestBody": {
          "description": "JSON representation of a list of EventEvolution entities.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventEvolution_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/eventevolution/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "description": "(One or more of fields 'eventId, startTime' are required.) User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "startTime",
            "description": "(One or more of fields 'eventId, startTime' are required.) The actual or estimated start time of the activity or event, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventEvolution_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/eventevolution/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "description": "(One or more of fields 'eventId, startTime' are required.) User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "startTime",
            "description": "(One or more of fields 'eventId, startTime' are required.) The actual or estimated start time of the activity or event, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/eventevolution/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "eventId",
            "description": "(One or more of fields 'eventId, startTime' are required.) User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "startTime",
            "description": "(One or more of fields 'eventId, startTime' are required.) The actual or estimated start time of the activity or event, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/eventevolution/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/eventevolution/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "description": "(One or more of fields 'eventId, startTime' are required.) User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "startTime",
            "description": "(One or more of fields 'eventId, startTime' are required.) The actual or estimated start time of the activity or event, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventEvolution_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/h3geo": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/H3Geo_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "Start time for this H3 Geo data set in ISO 8601 UTC with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single H3Geo record as a POST body and ingest into the database. This operation does not persist any H3GeoHexCell points that may be present in the body of the request. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Report and Activity"
        ],
        "requestBody": {
          "description": "JSON representation of one observation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/H3Geo_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/h3geo/{id}": {
      "get": {
        "description": "Service operation to get a single RF geolocation by its unique ID passed as a path parameter.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "The ID of the h3geo to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/H3Geo_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/h3geo/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "Start time for this H3 Geo data set in ISO 8601 UTC with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/h3geo/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/h3geo/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "Start time for this H3 Geo data set in ISO 8601 UTC with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/H3Geo_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/h3geohexcell": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/H3GeoHexCell_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "idH3Geo",
            "description": "Unique identifier of the parent H3 Geo record containing this hex cell. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/h3geohexcell/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "idH3Geo",
            "description": "Unique identifier of the parent H3 Geo record containing this hex cell. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/h3geohexcell/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/h3geohexcell/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idH3Geo",
            "description": "Unique identifier of the parent H3 Geo record containing this hex cell. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/H3GeoHexCell_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/hazard": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hazard_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "detectTime",
            "description": "The detect time, in ISO 8601 UTC format, with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single hazard as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Report and Activity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hazard_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/hazard/{id}": {
      "get": {
        "description": "Service operation to get a single Hazard by its unique ID passed as a path parameter.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "The ID of the hazard to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hazard_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/hazard/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "detectTime",
            "description": "The detect time, in ISO 8601 UTC format, with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/hazard/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of hazards as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Report and Activity"
        ],
        "requestBody": {
          "description": "JSON array of Hazards.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Hazard_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/hazard/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "required": false,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "detectTime",
            "description": "The detect time, in ISO 8601 UTC format, with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hazard_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/hazard/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "required": false,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "required": false,
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "required": false,
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "required": false,
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "detectTime",
            "description": "The detect time, in ISO 8601 UTC format, with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/hazard/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "detectTime",
            "description": "The detect time, in ISO 8601 UTC format, with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/hazard/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/hazard/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "detectTime",
            "description": "The detect time, in ISO 8601 UTC format, with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hazard_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/poi": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/POI_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "ts",
            "description": "Activity/POI timestamp in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single POI as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Report and Activity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POI_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/poi/{id}": {
      "get": {
        "description": "Service operation to get a single POI by its unique ID passed as a path parameter.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "The ID of the POI to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POI_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/poi/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "ts",
            "description": "Activity/POI timestamp in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/poi/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of POIs as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Report and Activity"
        ],
        "requestBody": {
          "description": "JSON representation of list of POIs.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/POI_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/poi/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts",
            "description": "Activity/POI timestamp in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/POI_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/poi/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts",
            "description": "Activity/POI timestamp in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/poi/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "ts",
            "description": "Activity/POI timestamp in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/poi/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/poi/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts",
            "description": "Activity/POI timestamp in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/POI_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/rfgeolocation": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFGeoLocation_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single RF geolocation as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Report and Activity"
        ],
        "requestBody": {
          "description": "JSON representation of one observation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RFGeoLocation_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/rfgeolocation/{id}": {
      "delete": {
        "description": "Service operation to delete a RF geolocation specified by the passed ID path parameter. A specific role is required to perform this service operation. Please contact the UDL team for assistance. Note, delete operations do not remove data from historical or publish/subscribe stores.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "The ID of the observation to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single RF geolocation by its unique ID passed as a path parameter.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "The ID of the rfgeolocation to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RFGeoLocation_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/rfgeolocation/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/rfgeolocation/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of RF geolocations as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Report and Activity"
        ],
        "requestBody": {
          "description": "JSON array of observations.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RFGeoLocation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/rfgeolocation/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/rfgeolocation/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFGeoLocation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/routestats": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RouteStats_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single routeStats record as a POST body and ingest into the database.  A specific role is required to perform this service operation.  Please contact the UDL team for assistance.",
        "tags": [
          "Report and Activity"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteStats_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/routestats/{id}": {
      "delete": {
        "description": "Service operation to delete a routeStats record specified by the passed ID path parameter. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "The ID of the RouteStats entry to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single routeStats record by its unique ID passed as a path parameter.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "The ID of the RouteStats to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteStats_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single RouteStats. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "The ID of the RouteStats entry to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one RouteStats.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteStats_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/routestats/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/routestats/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of RouteStats as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Report and Activity"
        ],
        "requestBody": {
          "description": "JSON array of RouteStats",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RouteStats_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/routestats/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/routestats/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RouteStats_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sigact": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigAct_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "reportDate",
            "description": "Date of the report or filing. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/sigact/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "reportDate",
            "description": "Date of the report or filing. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/sigact/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of SigAct records as a POST body and ingest into the database. Requires specific roles, please contact the UDL team to gain access. This operation is not intended to be used for automated feeds into UDL...data providers should contact the UDL team for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Report and Activity"
        ],
        "requestBody": {
          "description": "JSON representation of list of SigAct record.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SigAct_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sigact/getFile/{id}": {
      "get": {
        "description": "Service operation to get a single SigAct text file by its unique ID passed as a path parameter. The text file is returned as an attachment Content-Disposition.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "The ID of the text SigAct to return.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sigact/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportDate",
            "description": "Date of the report or filing. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigAct_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sigact/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "reportDate",
            "description": "Date of the report or filing. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/sigact/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Report and Activity"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sigact/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Report and Activity"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportDate",
            "description": "Date of the report or filing. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigAct_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AnalyticImagery_Abridged": {
        "description": "The analytic imagery schema supports data plots and graphics of various types. The records contain general file information, allows for annotations to user-defined areas of interest on the graphics, and supports keyword searching.",
        "required": [
          "classificationMarking",
          "content",
          "msgTime",
          "imageType",
          "filename",
          "filesize",
          "description",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANALYTIC-IMAGERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "content": {
            "description": "General type of content of this image (CONTOUR, DIAGRAM, HEATMAP, HISTOGRAM, PLOT, SCREENSHOT).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "CONTOUR"
          },
          "msgTime": {
            "format": "date-time",
            "description": "The message time of this image record, in ISO8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "imageType": {
            "description": "The type of image associated with this record (GIF, JPG, PNG, TIF).",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "JPG"
          },
          "filename": {
            "description": "The image file name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "IMAGE-NAME"
          },
          "filesize": {
            "format": "int64",
            "description": "The image file size, in bytes.  The maximum file size for this service is 40,000,000 bytes (40MB). Files exceeding the maximum size will be rejected.",
            "maximum": 40000000,
            "type": "integer",
            "example": 7654321
          },
          "imgWidth": {
            "format": "int32",
            "description": "The image width (horizontal), in pixels.",
            "type": "integer",
            "example": 123
          },
          "imgHeight": {
            "format": "int32",
            "description": "The image height (vertical), in pixels.",
            "type": "integer",
            "example": 123
          },
          "xUnits": {
            "description": "Optional field indicating the units that apply to the x-axis of the attached image, when applicable.",
            "maxLength": 36,
            "type": "string",
            "example": "pixels"
          },
          "yUnits": {
            "description": "Optional field indicating the units that apply to the y-axis of the attached image, when applicable.",
            "maxLength": 36,
            "type": "string",
            "example": "pixels"
          },
          "zUnits": {
            "description": "Optional field indicating the units that apply to the z-axis of the attached image, when applicable.",
            "maxLength": 36,
            "type": "string",
            "example": "pixels"
          },
          "imageSetId": {
            "description": "User-defined set ID of a sequence of images.  Used to associate related analytic image records.",
            "maxLength": 36,
            "type": "string",
            "example": "IMAGE-IDS"
          },
          "imageSetLength": {
            "format": "int32",
            "description": "The number of images in an image set.",
            "type": "integer",
            "example": 123
          },
          "sequenceId": {
            "format": "int32",
            "description": "The sequence number of an image within an image set.  If null, then it is assumed that the order of images in an imageSet is not relevant.",
            "type": "integer",
            "example": 123
          },
          "description": {
            "description": "Description of the image content and utility.",
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "example": "Image description"
          },
          "dataStart": {
            "format": "date-time",
            "description": "The start time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "dataStop": {
            "format": "date-time",
            "description": "The stop time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "annLims": {
            "description": "Rectangular annotation limits, specified in pixels, as an array of arrays of the coordinates [ [UL1x, UL1y], [UR1x, UR1y], [LR1x, LR1y], [LL1x, LL1y] ], indicating the corners of a rectangle beginning with the Upper Left (UL) and moving clockwise. Allows the image provider to highlight one or more rectangular area(s) of interest. The array must contain Nx4 two-element arrays, where N is the number of rectangles of interest.  The associated annotation(s) should be included in the annText array.",
            "maxItems": 10,
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "int32",
                "type": "integer"
              }
            },
            "example": [
              [
                1,
                1
              ],
              [
                1,
                2
              ],
              [
                1,
                3
              ],
              [
                1,
                4
              ]
            ]
          },
          "annText": {
            "description": "Annotation text, a string array of annotation(s) corresponding to the rectangular areas specified in annLims.  This array contains the annotation text associated with the areas of interest indicated in annLims, in order.  This array should contain one annotation per four values of the area (annLims) array.",
            "maxItems": 256,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "rec1",
              "rec2"
            ]
          },
          "keywords": {
            "description": "Array of searchable keywords for this analytic imagery record.",
            "maxItems": 36,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Key1",
              "Key2"
            ]
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "POLYGON"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 2
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 4326
          },
          "satId": {
            "description": "Assessed satellite ID (NORAD RSO object number).  The 'satId' and 'satIdConf' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "12004",
              "12005"
            ]
          },
          "satIdConf": {
            "description": "Assessed satellite confidence corresponding to an assessment ID.  Values are between 0.0 and 1.0.  The 'satId' and 'satIdConf' arrays must match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.98,
              0.22
            ]
          },
          "srcTyps": {
            "description": "Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this image. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "maxItems": 36,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "MTI",
              "POI"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to this image. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "maxItems": 36,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "DOA_ID",
              "DWELL_ID"
            ]
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "checksumValue": {
            "description": "MD5 checksum value of the file. The ingest/create operation will automatically generate the value.",
            "maxLength": 256,
            "type": "string",
            "readOnly": true,
            "example": "123"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGIN"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "AnalyticImagery_Full": {
        "description": "The analytic imagery schema supports data plots and graphics of various types. The records contain general file information, allows for annotations to user-defined areas of interest on the graphics, and supports keyword searching.",
        "required": [
          "classificationMarking",
          "content",
          "msgTime",
          "imageType",
          "filename",
          "filesize",
          "description",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANALYTIC-IMAGERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "content": {
            "description": "General type of content of this image (CONTOUR, DIAGRAM, HEATMAP, HISTOGRAM, PLOT, SCREENSHOT).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "CONTOUR"
          },
          "msgTime": {
            "format": "date-time",
            "description": "The message time of this image record, in ISO8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "imageType": {
            "description": "The type of image associated with this record (GIF, JPG, PNG, TIF).",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "JPG"
          },
          "filename": {
            "description": "The image file name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "IMAGE-NAME"
          },
          "filesize": {
            "format": "int64",
            "description": "The image file size, in bytes.  The maximum file size for this service is 40,000,000 bytes (40MB). Files exceeding the maximum size will be rejected.",
            "maximum": 40000000,
            "type": "integer",
            "example": 7654321
          },
          "imgWidth": {
            "format": "int32",
            "description": "The image width (horizontal), in pixels.",
            "type": "integer",
            "example": 123
          },
          "imgHeight": {
            "format": "int32",
            "description": "The image height (vertical), in pixels.",
            "type": "integer",
            "example": 123
          },
          "xUnits": {
            "description": "Optional field indicating the units that apply to the x-axis of the attached image, when applicable.",
            "maxLength": 36,
            "type": "string",
            "example": "pixels"
          },
          "yUnits": {
            "description": "Optional field indicating the units that apply to the y-axis of the attached image, when applicable.",
            "maxLength": 36,
            "type": "string",
            "example": "pixels"
          },
          "zUnits": {
            "description": "Optional field indicating the units that apply to the z-axis of the attached image, when applicable.",
            "maxLength": 36,
            "type": "string",
            "example": "pixels"
          },
          "imageSetId": {
            "description": "User-defined set ID of a sequence of images.  Used to associate related analytic image records.",
            "maxLength": 36,
            "type": "string",
            "example": "IMAGE-IDS"
          },
          "imageSetLength": {
            "format": "int32",
            "description": "The number of images in an image set.",
            "type": "integer",
            "example": 123
          },
          "sequenceId": {
            "format": "int32",
            "description": "The sequence number of an image within an image set.  If null, then it is assumed that the order of images in an imageSet is not relevant.",
            "type": "integer",
            "example": 123
          },
          "description": {
            "description": "Description of the image content and utility.",
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "example": "Image description"
          },
          "dataStart": {
            "format": "date-time",
            "description": "The start time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "dataStop": {
            "format": "date-time",
            "description": "The stop time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "annLims": {
            "description": "Rectangular annotation limits, specified in pixels, as an array of arrays of the coordinates [ [UL1x, UL1y], [UR1x, UR1y], [LR1x, LR1y], [LL1x, LL1y] ], indicating the corners of a rectangle beginning with the Upper Left (UL) and moving clockwise. Allows the image provider to highlight one or more rectangular area(s) of interest. The array must contain Nx4 two-element arrays, where N is the number of rectangles of interest.  The associated annotation(s) should be included in the annText array.",
            "maxItems": 10,
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "int32",
                "type": "integer"
              }
            },
            "example": [
              [
                1,
                1
              ],
              [
                1,
                2
              ],
              [
                1,
                3
              ],
              [
                1,
                4
              ]
            ]
          },
          "annText": {
            "description": "Annotation text, a string array of annotation(s) corresponding to the rectangular areas specified in annLims.  This array contains the annotation text associated with the areas of interest indicated in annLims, in order.  This array should contain one annotation per four values of the area (annLims) array.",
            "maxItems": 256,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "rec1",
              "rec2"
            ]
          },
          "keywords": {
            "description": "Array of searchable keywords for this analytic imagery record.",
            "maxItems": 36,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Key1",
              "Key2"
            ]
          },
          "area": {
            "description": "Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "POLYGON"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 2
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 4326
          },
          "satId": {
            "description": "Assessed satellite ID (NORAD RSO object number).  The 'satId' and 'satIdConf' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "12004",
              "12005"
            ]
          },
          "satIdConf": {
            "description": "Assessed satellite confidence corresponding to an assessment ID.  Values are between 0.0 and 1.0.  The 'satId' and 'satIdConf' arrays must match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.98,
              0.22
            ]
          },
          "srcTyps": {
            "description": "Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this image. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "maxItems": 36,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "MTI",
              "POI"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to this image. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "maxItems": 36,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "DOA_ID",
              "DWELL_ID"
            ]
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "checksumValue": {
            "description": "MD5 checksum value of the file. The ingest/create operation will automatically generate the value.",
            "maxLength": 256,
            "type": "string",
            "readOnly": true,
            "example": "123"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGIN"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "AnalyticImagery_Ingest": {
        "description": "The analytic imagery schema supports data plots and graphics of various types. The records contain general file information, allows for annotations to user-defined areas of interest on the graphics, and supports keyword searching.",
        "required": [
          "classificationMarking",
          "content",
          "msgTime",
          "imageType",
          "filename",
          "filesize",
          "description",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANALYTIC-IMAGERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "content": {
            "description": "General type of content of this image (CONTOUR, DIAGRAM, HEATMAP, HISTOGRAM, PLOT, SCREENSHOT).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "CONTOUR"
          },
          "msgTime": {
            "format": "date-time",
            "description": "The message time of this image record, in ISO8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "imageType": {
            "description": "The type of image associated with this record (GIF, JPG, PNG, TIF).",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "JPG"
          },
          "filename": {
            "description": "The image file name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "IMAGE-NAME"
          },
          "filesize": {
            "format": "int64",
            "description": "The image file size, in bytes.  The maximum file size for this service is 40,000,000 bytes (40MB). Files exceeding the maximum size will be rejected.",
            "maximum": 40000000,
            "type": "integer",
            "example": 7654321
          },
          "imgWidth": {
            "format": "int32",
            "description": "The image width (horizontal), in pixels.",
            "type": "integer",
            "example": 123
          },
          "imgHeight": {
            "format": "int32",
            "description": "The image height (vertical), in pixels.",
            "type": "integer",
            "example": 123
          },
          "xUnits": {
            "description": "Optional field indicating the units that apply to the x-axis of the attached image, when applicable.",
            "maxLength": 36,
            "type": "string",
            "example": "pixels"
          },
          "yUnits": {
            "description": "Optional field indicating the units that apply to the y-axis of the attached image, when applicable.",
            "maxLength": 36,
            "type": "string",
            "example": "pixels"
          },
          "zUnits": {
            "description": "Optional field indicating the units that apply to the z-axis of the attached image, when applicable.",
            "maxLength": 36,
            "type": "string",
            "example": "pixels"
          },
          "imageSetId": {
            "description": "User-defined set ID of a sequence of images.  Used to associate related analytic image records.",
            "maxLength": 36,
            "type": "string",
            "example": "IMAGE-IDS"
          },
          "imageSetLength": {
            "format": "int32",
            "description": "The number of images in an image set.",
            "type": "integer",
            "example": 123
          },
          "sequenceId": {
            "format": "int32",
            "description": "The sequence number of an image within an image set.  If null, then it is assumed that the order of images in an imageSet is not relevant.",
            "type": "integer",
            "example": 123
          },
          "description": {
            "description": "Description of the image content and utility.",
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "example": "Image description"
          },
          "dataStart": {
            "format": "date-time",
            "description": "The start time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "dataStop": {
            "format": "date-time",
            "description": "The stop time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "annLims": {
            "description": "Rectangular annotation limits, specified in pixels, as an array of arrays of the coordinates [ [UL1x, UL1y], [UR1x, UR1y], [LR1x, LR1y], [LL1x, LL1y] ], indicating the corners of a rectangle beginning with the Upper Left (UL) and moving clockwise. Allows the image provider to highlight one or more rectangular area(s) of interest. The array must contain Nx4 two-element arrays, where N is the number of rectangles of interest.  The associated annotation(s) should be included in the annText array.",
            "maxItems": 10,
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "int32",
                "type": "integer"
              }
            },
            "example": [
              [
                1,
                1
              ],
              [
                1,
                2
              ],
              [
                1,
                3
              ],
              [
                1,
                4
              ]
            ]
          },
          "annText": {
            "description": "Annotation text, a string array of annotation(s) corresponding to the rectangular areas specified in annLims.  This array contains the annotation text associated with the areas of interest indicated in annLims, in order.  This array should contain one annotation per four values of the area (annLims) array.",
            "maxItems": 256,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "rec1",
              "rec2"
            ]
          },
          "keywords": {
            "description": "Array of searchable keywords for this analytic imagery record.",
            "maxItems": 36,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Key1",
              "Key2"
            ]
          },
          "area": {
            "description": "Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "POLYGON"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 2
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 4326
          },
          "satId": {
            "description": "Assessed satellite ID (NORAD RSO object number).  The 'satId' and 'satIdConf' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "12004",
              "12005"
            ]
          },
          "satIdConf": {
            "description": "Assessed satellite confidence corresponding to an assessment ID.  Values are between 0.0 and 1.0.  The 'satId' and 'satIdConf' arrays must match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.98,
              0.22
            ]
          },
          "srcTyps": {
            "description": "Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this image. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "maxItems": 36,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "MTI",
              "POI"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to this image. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "maxItems": 36,
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "DOA_ID",
              "DWELL_ID"
            ]
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "checksumValue": {
            "description": "MD5 checksum value of the file. The ingest/create operation will automatically generate the value.",
            "maxLength": 256,
            "type": "string",
            "readOnly": true,
            "example": "123"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGIN"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Antenna_Full": {
        "description": "Model representation of information on on-orbit/spacecraft communication antennas. A spacecraft may have multiple antennas and each antenna can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "name": {
            "description": "Antenna name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "IRIDIUM NEXT 121-ANTENNA-10075"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "antennaDetails": {
            "description": "Read-only collection of additional AntennaDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/antennadetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AntennaDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "AntennaDetails_Full": {
        "description": "Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.",
        "required": [
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNADETAILS-ID"
          },
          "idAntenna": {
            "description": "Unique identifier of the parent Antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Reflector"
          },
          "position": {
            "description": "Antenna position (e.g. Top, Nadir, Side).",
            "maxLength": 128,
            "type": "string",
            "example": "Top"
          },
          "mode": {
            "description": "Antenna mode (e.g. TX,RX).",
            "maxLength": 4,
            "enum": [
              "TX",
              "RX"
            ],
            "type": "string",
            "example": "TX"
          },
          "steerable": {
            "description": "Boolean indicating if this antenna is steerable.",
            "type": "boolean",
            "example": false
          },
          "beamForming": {
            "description": "Boolean indicating if this is a beam forming antenna.",
            "type": "boolean",
            "example": false
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the antenna.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTUREORG-ID"
          },
          "diameter": {
            "format": "double",
            "description": "Antenna diameter in meters.",
            "type": "number",
            "example": 0.01
          },
          "size": {
            "description": "Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.05
            ]
          },
          "startFrequency": {
            "format": "double",
            "description": "Antenna start of frequency range in Mhz.",
            "type": "number",
            "example": 2.1
          },
          "endFrequency": {
            "format": "double",
            "description": "Antenna end of frequency range in Mhz.",
            "type": "number",
            "example": 3.3
          },
          "beamwidth": {
            "format": "double",
            "description": "Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.",
            "type": "number",
            "example": 14.1
          },
          "gain": {
            "format": "double",
            "description": "Antenna maximum gain in dBi.",
            "type": "number",
            "example": 20.1
          },
          "gainTolerance": {
            "format": "double",
            "description": "Antenna gain tolerance in dB.",
            "type": "number",
            "example": 5.1
          },
          "polarization": {
            "format": "double",
            "description": "Antenna polarization in degrees.",
            "type": "number",
            "example": 45.1
          },
          "description": {
            "description": "Antenna description.",
            "maxLength": 512,
            "type": "string",
            "example": "Description of antenna A"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "Battery_Full": {
        "description": "Model representation of specific spacecraft battery types.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "name": {
            "description": "Battery name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "JAK-BATTERY-1479"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "batteryDetails": {
            "description": "Read-only collection of additional BatteryDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/batterydetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatteryDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "BatteryDetails_Full": {
        "description": "Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.",
        "required": [
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERYDETAILS-ID"
          },
          "idBattery": {
            "description": "Identifier of the parent battery type record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "technology": {
            "description": "Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Ni-Cd"
          },
          "capacity": {
            "format": "double",
            "description": "Battery capacity in Ah.",
            "type": "number",
            "example": 10.1
          },
          "dischargeDepth": {
            "format": "double",
            "description": "Depth of discharge as a percentage/fraction.",
            "type": "number",
            "example": 0.2
          },
          "model": {
            "description": "Battery model number or name.",
            "maxLength": 128,
            "type": "string",
            "example": "11212"
          },
          "description": {
            "description": "Battery description/notes.",
            "maxLength": 1024,
            "type": "string",
            "example": "example notes"
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the battery.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "CotChatData_Ingest": {
        "description": "Schema for the CotChatData to post.",
        "type": "object",
        "properties": {
          "chatRoom": {
            "description": "Chat room name to send chat message to.",
            "type": "string",
            "example": "All Chat Rooms"
          },
          "chatSenderCallSign": {
            "description": "Callsign of chat sender.",
            "type": "string",
            "example": "Pebble"
          },
          "chatMsg": {
            "description": "Contents of a chat message.",
            "type": "string",
            "example": "Mission is go"
          }
        }
      },
      "CotData_Ingest": {
        "description": "Schema for the CotData to post.",
        "required": [
          "lat",
          "lon"
        ],
        "type": "object",
        "properties": {
          "senderUid": {
            "description": "Identifier of the sender of the cot message which should remain the same on subsequent POI records of the same point of interest.",
            "type": "string",
            "example": "POI-ID"
          },
          "how": {
            "description": "How the event point was generated, in CoT object heirarchy notation (optional, CoT).",
            "type": "string",
            "example": "h-e"
          },
          "ce": {
            "format": "double",
            "description": "Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).",
            "type": "number",
            "example": 10.23
          },
          "le": {
            "format": "double",
            "description": "Height above lat/lon point, in meters (1-sigma, if representing linear error).",
            "type": "number",
            "example": 10.23
          },
          "stale": {
            "format": "date-time",
            "description": "Stale timestamp (optional), in ISO8601 UTC format.",
            "type": "string",
            "example": "2020-01-01T16:00:00.123456Z"
          },
          "start": {
            "format": "date-time",
            "description": "Start time of event validity (optional), in ISO8601 UTC format.",
            "type": "string",
            "example": "2020-01-01T16:00:00.123456Z"
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 45.23
          },
          "type": {
            "description": "Event type, in CoT object heirarchy notation (optional, CoT).",
            "type": "string",
            "example": "a-h-G"
          },
          "alt": {
            "format": "double",
            "description": "Point height above ellipsoid (WGS-84), in meters.",
            "type": "number",
            "example": 5.23
          },
          "cotPositionData": {
            "$ref": "#/components/schemas/CotPositionData_Ingest"
          },
          "cotChatData": {
            "$ref": "#/components/schemas/CotChatData_Ingest"
          },
          "callSigns": {
            "description": "Optional list of call signs to send message to directly.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uids": {
            "description": "Optional list of TAK user ids to send message to directly.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groups": {
            "description": "Optional set of groups to send message to specifically.  If not specified, the message will be sent to the default _ANON_ group.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CotPositionData_Ingest": {
        "description": "Schema for the CotPositionData to post.",
        "required": [
          "callSign",
          "teamRole",
          "team"
        ],
        "type": "object",
        "properties": {
          "callSign": {
            "description": "Name of the POI target Object.",
            "minLength": 1,
            "type": "string",
            "example": "POI_NAME"
          },
          "teamRole": {
            "description": "Team role  (Team Member| Team Lead | HQ | Sniper | Medic | Forward Observer | RTO | K9).",
            "minLength": 1,
            "type": "string",
            "example": "Team Member"
          },
          "team": {
            "description": "Description of the POI target Object.",
            "minLength": 1,
            "type": "string",
            "example": "Description of the object"
          }
        }
      },
      "Engine_Full": {
        "description": "Known launch vehicle engines and their performance characteristics and limits.  A launch vehicle has 1 to many engines per stage.",
        "required": [
          "name",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "name": {
            "description": "Engine name/variant.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE_VARIANT1"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engineDetails": {
            "description": "Read-only collection of additional EngineDetails by various sources for this engine, ignored on create/update. These details must be created separately via the /udl/enginedetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EngineDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "EngineDetails_Full": {
        "description": "Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.",
        "required": [
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINEDETAILS-ID"
          },
          "idEngine": {
            "description": "Identifier of the parent engine record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "family": {
            "description": "Engine type or family.",
            "maxLength": 64,
            "type": "string",
            "example": "ENGINE_TYPE1"
          },
          "cycleType": {
            "description": "Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Pressure Fed"
          },
          "characteristicType": {
            "description": "Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Electric"
          },
          "manufacturerOrgId": {
            "description": "Organization ID of the engine manufacturer.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "specificImpulse": {
            "format": "double",
            "description": "Launch engine specific impulse in seconds.",
            "type": "number",
            "example": 1.1
          },
          "burnTime": {
            "format": "double",
            "description": "Launch engine maximum burn time in seconds.",
            "type": "number",
            "example": 1.1
          },
          "seaLevelThrust": {
            "format": "double",
            "description": "Engine maximum thrust at sea level in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "vacuumThrust": {
            "format": "double",
            "description": "Engine maximum thrust in a vacuum in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "chamberPressure": {
            "format": "double",
            "description": "Engine chamber pressure in bars.",
            "type": "number",
            "example": 1.1
          },
          "nozzleExpansionRatio": {
            "format": "double",
            "description": "Engine nozzle expansion ratio.",
            "type": "number",
            "example": 1.1
          },
          "maxFirings": {
            "format": "int32",
            "description": "Engine maximum number of firings.",
            "type": "integer",
            "example": 5
          },
          "propellant": {
            "description": "Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid"
          },
          "oxidizer": {
            "description": "Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid Oxygen"
          },
          "notes": {
            "description": "Notes/Description of the engine.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "EventEvolution_Abridged": {
        "description": "Event Evolution is a unique service supporting the association of UDL records of various data types to a common event or activity. The associations may be a one time summary, aggregating sources of a past event, or of an ongoing activity that evolves over a period of time.",
        "required": [
          "classificationMarking",
          "eventId",
          "summary",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EVENT_EVOL_ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "eventId": {
            "description": "User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EVENT_ID"
          },
          "category": {
            "description": "The activity or event type associated with this record (e.g. BREAKUP, DIRECT FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an event may incorporate records of various types, for example, a LAUNCH event may evolve into a BREAKUP event.",
            "maxLength": 128,
            "type": "string",
            "example": "PROTEST"
          },
          "summary": {
            "description": "Summary or description of the activity or event.",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "example": "Example summary of the event."
          },
          "startTime": {
            "format": "date-time",
            "description": "The actual or estimated start time of the activity or event, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-12-02T16:00:00.123Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The actual or estimated start time of the activity or event, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-12-03T16:00:00.123Z"
          },
          "status": {
            "description": "The status of this activity or event.  (ACTIVE, CONCLUDED, UNKNOWN).",
            "maxLength": 24,
            "type": "string",
            "example": "UNKNOWN"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "geoAdminLevel1": {
            "description": "Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the state/province in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.",
            "maxLength": 128,
            "type": "string",
            "example": "Colorado"
          },
          "geoAdminLevel2": {
            "description": "Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the city/district in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.",
            "maxLength": 128,
            "type": "string",
            "example": "El Paso County"
          },
          "geoAdminLevel3": {
            "description": "Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body.",
            "maxLength": 128,
            "type": "string",
            "example": "Colorado Springs"
          },
          "redact": {
            "description": "Flag indicating that this record is for the purpose of redacting one or more previously specified records from association with this activity or event.  If this flag is set then all records indicated in srcTyps/srcIds should be removed from event association.",
            "type": "boolean",
            "example": false
          },
          "srcTyps": {
            "description": "Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this activity or event. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "AIS",
              "CONJUNCTION"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to the determination of this activity or event. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SRC_ID_1",
              "SRC_ID_2"
            ]
          },
          "dataDescription": {
            "description": "Optional description of the relationship between the records provided in the srcTyps/srcIds and the activity or event.",
            "maxLength": 2056,
            "type": "string",
            "example": "Description of relationship between srcTyps and srcIds"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "POLYGON"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 2
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 4326
          },
          "url": {
            "description": "List of URLs to before/after images of this point of interest entity.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "URL1",
              "URL2"
            ]
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2021-12-02T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "EventEvolution_Full": {
        "description": "Event Evolution is a unique service supporting the association of UDL records of various data types to a common event or activity. The associations may be a one time summary, aggregating sources of a past event, or of an ongoing activity that evolves over a period of time.",
        "required": [
          "classificationMarking",
          "eventId",
          "summary",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EVENT_EVOL_ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "eventId": {
            "description": "User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EVENT_ID"
          },
          "category": {
            "description": "The activity or event type associated with this record (e.g. BREAKUP, DIRECT FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an event may incorporate records of various types, for example, a LAUNCH event may evolve into a BREAKUP event.",
            "maxLength": 128,
            "type": "string",
            "example": "PROTEST"
          },
          "summary": {
            "description": "Summary or description of the activity or event.",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "example": "Example summary of the event."
          },
          "startTime": {
            "format": "date-time",
            "description": "The actual or estimated start time of the activity or event, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-12-02T16:00:00.123Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The actual or estimated start time of the activity or event, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-12-03T16:00:00.123Z"
          },
          "status": {
            "description": "The status of this activity or event.  (ACTIVE, CONCLUDED, UNKNOWN).",
            "maxLength": 24,
            "type": "string",
            "example": "UNKNOWN"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "geoAdminLevel1": {
            "description": "Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the state/province in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.",
            "maxLength": 128,
            "type": "string",
            "example": "Colorado"
          },
          "geoAdminLevel2": {
            "description": "Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the city/district in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.",
            "maxLength": 128,
            "type": "string",
            "example": "El Paso County"
          },
          "geoAdminLevel3": {
            "description": "Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body.",
            "maxLength": 128,
            "type": "string",
            "example": "Colorado Springs"
          },
          "redact": {
            "description": "Flag indicating that this record is for the purpose of redacting one or more previously specified records from association with this activity or event.  If this flag is set then all records indicated in srcTyps/srcIds should be removed from event association.",
            "type": "boolean",
            "example": false
          },
          "srcTyps": {
            "description": "Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this activity or event. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "AIS",
              "CONJUNCTION"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to the determination of this activity or event. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SRC_ID_1",
              "SRC_ID_2"
            ]
          },
          "dataDescription": {
            "description": "Optional description of the relationship between the records provided in the srcTyps/srcIds and the activity or event.",
            "maxLength": 2056,
            "type": "string",
            "example": "Description of relationship between srcTyps and srcIds"
          },
          "area": {
            "description": "Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "POLYGON"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 2
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 4326
          },
          "url": {
            "description": "List of URLs to before/after images of this point of interest entity.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "URL1",
              "URL2"
            ]
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2021-12-02T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "EventEvolution_Ingest": {
        "description": "Event Evolution is a unique service supporting the association of UDL records of various data types to a common event or activity. The associations may be a one time summary, aggregating sources of a past event, or of an ongoing activity that evolves over a period of time.",
        "required": [
          "classificationMarking",
          "eventId",
          "summary",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EVENT_EVOL_ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "eventId": {
            "description": "User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EVENT_ID"
          },
          "category": {
            "description": "The activity or event type associated with this record (e.g. BREAKUP, DIRECT FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an event may incorporate records of various types, for example, a LAUNCH event may evolve into a BREAKUP event.",
            "maxLength": 128,
            "type": "string",
            "example": "PROTEST"
          },
          "summary": {
            "description": "Summary or description of the activity or event.",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "example": "Example summary of the event."
          },
          "startTime": {
            "format": "date-time",
            "description": "The actual or estimated start time of the activity or event, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-12-02T16:00:00.123Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The actual or estimated start time of the activity or event, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-12-03T16:00:00.123Z"
          },
          "status": {
            "description": "The status of this activity or event.  (ACTIVE, CONCLUDED, UNKNOWN).",
            "maxLength": 24,
            "type": "string",
            "example": "UNKNOWN"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "geoAdminLevel1": {
            "description": "Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the state/province in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.",
            "maxLength": 128,
            "type": "string",
            "example": "Colorado"
          },
          "geoAdminLevel2": {
            "description": "Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the city/district in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.",
            "maxLength": 128,
            "type": "string",
            "example": "El Paso County"
          },
          "geoAdminLevel3": {
            "description": "Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body.",
            "maxLength": 128,
            "type": "string",
            "example": "Colorado Springs"
          },
          "redact": {
            "description": "Flag indicating that this record is for the purpose of redacting one or more previously specified records from association with this activity or event.  If this flag is set then all records indicated in srcTyps/srcIds should be removed from event association.",
            "type": "boolean",
            "example": false
          },
          "srcTyps": {
            "description": "Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this activity or event. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "AIS",
              "CONJUNCTION"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to the determination of this activity or event. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SRC_ID_1",
              "SRC_ID_2"
            ]
          },
          "dataDescription": {
            "description": "Optional description of the relationship between the records provided in the srcTyps/srcIds and the activity or event.",
            "maxLength": 2056,
            "type": "string",
            "example": "Description of relationship between srcTyps and srcIds"
          },
          "area": {
            "description": "Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "POLYGON"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 2
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 4326
          },
          "url": {
            "description": "List of URLs to before/after images of this point of interest entity.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "URL1",
              "URL2"
            ]
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2021-12-02T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "H3Geo_Abridged": {
        "description": "H3 Geospatial Binning is a discrete global grid system for indexing geographies into a hexagonal grid. The H3 schema is a collection of hexagonal cells that contain data for producing geospatial maps over a specified time span.",
        "required": [
          "classificationMarking",
          "startTime",
          "numCells",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "resolution": {
            "format": "int32",
            "description": "H3 resolution (0 – 15) for the data set. At this time, UDL supports a resolution of 3 or less.",
            "type": "integer",
            "example": 3
          },
          "startTime": {
            "format": "date-time",
            "description": "Start time for this H3 Geo data set in ISO 8601 UTC with millisecond precision.",
            "type": "string",
            "example": "2024-07-02T00:00:00.123Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "End time for this H3 Geo data set in ISO 8601 UTC with millisecond precision.",
            "type": "string",
            "example": "2024-07-03T00:00:00.123Z"
          },
          "centerFreq": {
            "format": "double",
            "description": "The center frequency of this H3 Geo data set measured in megahertz.",
            "type": "number",
            "example": 1575.42
          },
          "numCells": {
            "format": "int32",
            "description": "The number of cells associated with this H3 Geo data set. At this time, UDL supports up to 50,000 cells.",
            "type": "integer",
            "example": 1
          },
          "type": {
            "description": "An optional field containing the type of data that is represented by this H3 Geo data set.",
            "maxLength": 36,
            "type": "string",
            "example": "Cell Towers"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "H3Geo_Full": {
        "description": "H3 Geospatial Binning is a discrete global grid system for indexing geographies into a hexagonal grid. The H3 schema is a collection of hexagonal cells that contain data for producing geospatial maps over a specified time span.",
        "required": [
          "classificationMarking",
          "startTime",
          "cells",
          "numCells",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "resolution": {
            "format": "int32",
            "description": "H3 resolution (0 – 15) for the data set. At this time, UDL supports a resolution of 3 or less.",
            "type": "integer",
            "example": 3
          },
          "startTime": {
            "format": "date-time",
            "description": "Start time for this H3 Geo data set in ISO 8601 UTC with millisecond precision.",
            "type": "string",
            "example": "2024-07-02T00:00:00.123Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "End time for this H3 Geo data set in ISO 8601 UTC with millisecond precision.",
            "type": "string",
            "example": "2024-07-03T00:00:00.123Z"
          },
          "centerFreq": {
            "format": "double",
            "description": "The center frequency of this H3 Geo data set measured in megahertz.",
            "type": "number",
            "example": 1575.42
          },
          "cells": {
            "description": "The collection of hex cells contained in this H3 data set. The number of cells is a function of the specified resolution.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/H3GeoHexCell_Full"
            }
          },
          "numCells": {
            "format": "int32",
            "description": "The number of cells associated with this H3 Geo data set. At this time, UDL supports up to 50,000 cells.",
            "type": "integer",
            "example": 1
          },
          "type": {
            "description": "An optional field containing the type of data that is represented by this H3 Geo data set.",
            "maxLength": 36,
            "type": "string",
            "example": "Cell Towers"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "H3Geo_Ingest": {
        "description": "H3 Geospatial Binning is a discrete global grid system for indexing geographies into a hexagonal grid. The H3 schema is a collection of hexagonal cells that contain data for producing geospatial maps over a specified time span.",
        "required": [
          "classificationMarking",
          "startTime",
          "cells",
          "numCells",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "resolution": {
            "format": "int32",
            "description": "H3 resolution (0 – 15) for the data set. At this time, UDL supports a resolution of 3 or less.",
            "type": "integer",
            "example": 3
          },
          "startTime": {
            "format": "date-time",
            "description": "Start time for this H3 Geo data set in ISO 8601 UTC with millisecond precision.",
            "type": "string",
            "example": "2024-07-02T00:00:00.123Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "End time for this H3 Geo data set in ISO 8601 UTC with millisecond precision.",
            "type": "string",
            "example": "2024-07-03T00:00:00.123Z"
          },
          "centerFreq": {
            "format": "double",
            "description": "The center frequency of this H3 Geo data set measured in megahertz.",
            "type": "number",
            "example": 1575.42
          },
          "cells": {
            "description": "The collection of hex cells contained in this H3 data set. The number of cells is a function of the specified resolution.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/H3GeoHexCell_Ingest"
            }
          },
          "numCells": {
            "format": "int32",
            "description": "The number of cells associated with this H3 Geo data set. At this time, UDL supports up to 50,000 cells.",
            "type": "integer",
            "example": 1
          },
          "type": {
            "description": "An optional field containing the type of data that is represented by this H3 Geo data set.",
            "maxLength": 36,
            "type": "string",
            "example": "Cell Towers"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "H3GeoHexCell_Abridged": {
        "description": "Model representation of a hex cell array containing data for a set of observations.",
        "required": [
          "classificationMarking",
          "cellId",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "443fg911-4ab6-3d74-1991-372149d87f89"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "cellId": {
            "description": "The H3 index represented as a 16 character hexadecimal string.",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "830b90fffffffff"
          },
          "idH3Geo": {
            "description": "Unique identifier of the parent H3 Geo record containing this hex cell.",
            "maxLength": 36,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "coverage": {
            "format": "int32",
            "description": "The total number of available observations in the H3 cell during the start/end times.",
            "type": "integer",
            "example": 8
          },
          "anomScoreInterference": {
            "format": "double",
            "description": "The anomaly score for probable manufactured interference or RF interference; calculated as a ratio of #anomalous obs / #total obs or coverage.",
            "type": "number",
            "example": 0.125
          },
          "anomScoreSpoofing": {
            "format": "double",
            "description": "The anomaly score for probable spoofing; calculated as a ratio of #anomalous obs / #total obs or coverage.",
            "type": "number",
            "example": 0.125
          },
          "rpmMedian": {
            "format": "double",
            "description": "The median received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 48.375
          },
          "rpmMean": {
            "format": "double",
            "description": "The mean received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 47.953125
          },
          "rpmMax": {
            "format": "double",
            "description": "The max received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 50.1
          },
          "rpmMin": {
            "format": "double",
            "description": "The min received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 43.1
          },
          "rpmSigma": {
            "format": "double",
            "description": "The standard deviation of the received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 1.23
          },
          "altMean": {
            "format": "double",
            "description": "The mean altitude of the set of observations within this cell, measured in kilometers.",
            "type": "number",
            "example": 450.1
          },
          "altSigma": {
            "format": "double",
            "description": "The standard deviation of alttitude in the set of observations within this cell, measured in kilometers.",
            "type": "number",
            "example": 400.1
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "H3GeoHexCell_Full": {
        "description": "Model representation of a hex cell array containing data for a set of observations.",
        "required": [
          "classificationMarking",
          "cellId",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "443fg911-4ab6-3d74-1991-372149d87f89"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "cellId": {
            "description": "The H3 index represented as a 16 character hexadecimal string.",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "830b90fffffffff"
          },
          "idH3Geo": {
            "description": "Unique identifier of the parent H3 Geo record containing this hex cell.",
            "maxLength": 36,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "coverage": {
            "format": "int32",
            "description": "The total number of available observations in the H3 cell during the start/end times.",
            "type": "integer",
            "example": 8
          },
          "anomScoreInterference": {
            "format": "double",
            "description": "The anomaly score for probable manufactured interference or RF interference; calculated as a ratio of #anomalous obs / #total obs or coverage.",
            "type": "number",
            "example": 0.125
          },
          "anomScoreSpoofing": {
            "format": "double",
            "description": "The anomaly score for probable spoofing; calculated as a ratio of #anomalous obs / #total obs or coverage.",
            "type": "number",
            "example": 0.125
          },
          "rpmMedian": {
            "format": "double",
            "description": "The median received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 48.375
          },
          "rpmMean": {
            "format": "double",
            "description": "The mean received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 47.953125
          },
          "rpmMax": {
            "format": "double",
            "description": "The max received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 50.1
          },
          "rpmMin": {
            "format": "double",
            "description": "The min received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 43.1
          },
          "rpmSigma": {
            "format": "double",
            "description": "The standard deviation of the received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 1.23
          },
          "altMean": {
            "format": "double",
            "description": "The mean altitude of the set of observations within this cell, measured in kilometers.",
            "type": "number",
            "example": 450.1
          },
          "altSigma": {
            "format": "double",
            "description": "The standard deviation of alttitude in the set of observations within this cell, measured in kilometers.",
            "type": "number",
            "example": 400.1
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "H3GeoHexCell_Ingest": {
        "description": "Model representation of a hex cell array containing data for a set of observations.",
        "required": [
          "classificationMarking",
          "cellId",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "443fg911-4ab6-3d74-1991-372149d87f89"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "cellId": {
            "description": "The H3 index represented as a 16 character hexadecimal string.",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "830b90fffffffff"
          },
          "idH3Geo": {
            "description": "Unique identifier of the parent H3 Geo record containing this hex cell.",
            "maxLength": 36,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "coverage": {
            "format": "int32",
            "description": "The total number of available observations in the H3 cell during the start/end times.",
            "type": "integer",
            "example": 8
          },
          "anomScoreInterference": {
            "format": "double",
            "description": "The anomaly score for probable manufactured interference or RF interference; calculated as a ratio of #anomalous obs / #total obs or coverage.",
            "type": "number",
            "example": 0.125
          },
          "anomScoreSpoofing": {
            "format": "double",
            "description": "The anomaly score for probable spoofing; calculated as a ratio of #anomalous obs / #total obs or coverage.",
            "type": "number",
            "example": 0.125
          },
          "rpmMedian": {
            "format": "double",
            "description": "The median received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 48.375
          },
          "rpmMean": {
            "format": "double",
            "description": "The mean received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 47.953125
          },
          "rpmMax": {
            "format": "double",
            "description": "The max received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 50.1
          },
          "rpmMin": {
            "format": "double",
            "description": "The min received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 43.1
          },
          "rpmSigma": {
            "format": "double",
            "description": "The standard deviation of the received power monitor (RPM) output value for the set of data contained within this cell.",
            "type": "number",
            "example": 1.23
          },
          "altMean": {
            "format": "double",
            "description": "The mean altitude of the set of observations within this cell, measured in kilometers.",
            "type": "number",
            "example": 450.1
          },
          "altSigma": {
            "format": "double",
            "description": "The standard deviation of alttitude in the set of observations within this cell, measured in kilometers.",
            "type": "number",
            "example": 400.1
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Hazard_Abridged": {
        "description": "Hazard contains information concerning the exposure of a geographic area to a Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard schema includes the detection time and type of contamination as well as optional information regarding specific material properties, the extent of contamination, and identification of affected regions.",
        "required": [
          "classificationMarking",
          "detectType",
          "detectTime",
          "alarms",
          "alarmValues",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "HAZARD-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "detectType": {
            "description": "The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "example": "Chemical"
          },
          "detectTime": {
            "format": "date-time",
            "description": "The detect time, in ISO 8601 UTC format, with millisecond precision.",
            "type": "string",
            "example": "2022-03-07T14:51:39.653Z"
          },
          "harmful": {
            "description": "Flag indicating whether this detection is harmful to humans.",
            "type": "boolean",
            "example": false
          },
          "alarms": {
            "description": "Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Alarm1",
              "Alarm2"
            ]
          },
          "alarmValues": {
            "description": "Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              2.7,
              2.9
            ]
          },
          "readings": {
            "description": "Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Rad1",
              "Rad2"
            ]
          },
          "readingUnits": {
            "description": "Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Gray",
              "Gray"
            ]
          },
          "readingValues": {
            "description": "Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              107.2,
              124.1
            ]
          },
          "matType": {
            "description": "The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.",
            "maxLength": 48,
            "type": "string",
            "example": "21"
          },
          "matClass": {
            "description": "The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.",
            "maxLength": 64,
            "type": "string",
            "example": "Nerve Agent"
          },
          "matName": {
            "description": "The material common name associated with this detection.",
            "maxLength": 64,
            "type": "string",
            "example": "VX"
          },
          "matCat": {
            "format": "int32",
            "description": "The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: \n\nCategory 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. \n\nCategory 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. \n\nCategory 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. \n\nCategory 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. \n\nCategory 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.",
            "type": "integer",
            "example": 3
          },
          "casRN": {
            "description": "The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.",
            "maxLength": 24,
            "type": "string",
            "example": "64-17-5"
          },
          "ppm": {
            "format": "int32",
            "description": "Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).",
            "type": "integer",
            "example": 27129
          },
          "density": {
            "format": "double",
            "description": "Measure of density of the material associated with this detection, in kg/m^3.",
            "type": "number",
            "example": 18900.2
          },
          "radCtrn": {
            "format": "double",
            "description": "Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.",
            "type": "number",
            "example": 1.31
          },
          "gBar": {
            "format": "double",
            "description": "Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.",
            "type": "number",
            "example": 2.5
          },
          "hBar": {
            "format": "double",
            "description": "Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.",
            "type": "number",
            "example": 3.1
          },
          "z": {
            "format": "int32",
            "description": "The Atomic Number of the material associated with this detection.",
            "type": "integer",
            "example": 92
          },
          "a": {
            "format": "int32",
            "description": "The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.",
            "type": "integer",
            "example": 238
          },
          "bottleId": {
            "description": "The specific bottle ID associated with this detection.",
            "maxLength": 16,
            "type": "string",
            "example": "6264"
          },
          "channel": {
            "description": "The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .",
            "maxLength": 64,
            "type": "string",
            "example": "Skin"
          },
          "duration": {
            "format": "int32",
            "description": "The known or projected hazard duration, in seconds, associated with this material detection.",
            "type": "integer",
            "example": 14400
          },
          "activity": {
            "format": "double",
            "description": "The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.",
            "type": "number",
            "example": 120.1
          },
          "dep": {
            "format": "double",
            "description": "The deposition measurement of the contaminant to surface area, in kg/m^2.",
            "type": "number",
            "example": 1.084
          },
          "depCtrn": {
            "format": "double",
            "description": "The deposition concentration of the contaminant to surface area, in becquerels/m^2.",
            "type": "number",
            "example": 86.1
          },
          "massFrac": {
            "format": "double",
            "description": "Ratio of the chemical substance mass to the total mass of the mixture.",
            "type": "number",
            "example": 0.029
          },
          "dose": {
            "format": "double",
            "description": "The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.",
            "type": "number",
            "example": 1.12
          },
          "ctrnTime": {
            "format": "double",
            "description": "The concentration time, in (kg/sec)/m^3, associated with this material detection.",
            "type": "number",
            "example": 1.077
          },
          "doseRate": {
            "format": "double",
            "description": "The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.",
            "type": "number",
            "example": 1.0000001865
          },
          "idPOI": {
            "description": "ID of the Point of Interest (POI) record related to this hazard record.",
            "maxLength": 36,
            "type": "string",
            "example": "POI-ID"
          },
          "idTrack": {
            "description": "ID of the Track record related to this hazard record.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Hazard_Full": {
        "description": "Hazard contains information concerning the exposure of a geographic area to a Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard schema includes the detection time and type of contamination as well as optional information regarding specific material properties, the extent of contamination, and identification of affected regions.",
        "required": [
          "classificationMarking",
          "detectType",
          "detectTime",
          "alarms",
          "alarmValues",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "HAZARD-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "detectType": {
            "description": "The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "example": "Chemical"
          },
          "detectTime": {
            "format": "date-time",
            "description": "The detect time, in ISO 8601 UTC format, with millisecond precision.",
            "type": "string",
            "example": "2022-03-07T14:51:39.653Z"
          },
          "harmful": {
            "description": "Flag indicating whether this detection is harmful to humans.",
            "type": "boolean",
            "example": false
          },
          "alarms": {
            "description": "Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Alarm1",
              "Alarm2"
            ]
          },
          "alarmValues": {
            "description": "Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              2.7,
              2.9
            ]
          },
          "readings": {
            "description": "Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Rad1",
              "Rad2"
            ]
          },
          "readingUnits": {
            "description": "Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Gray",
              "Gray"
            ]
          },
          "readingValues": {
            "description": "Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              107.2,
              124.1
            ]
          },
          "matType": {
            "description": "The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.",
            "maxLength": 48,
            "type": "string",
            "example": "21"
          },
          "matClass": {
            "description": "The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.",
            "maxLength": 64,
            "type": "string",
            "example": "Nerve Agent"
          },
          "matName": {
            "description": "The material common name associated with this detection.",
            "maxLength": 64,
            "type": "string",
            "example": "VX"
          },
          "matCat": {
            "format": "int32",
            "description": "The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: \n\nCategory 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. \n\nCategory 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. \n\nCategory 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. \n\nCategory 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. \n\nCategory 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.",
            "type": "integer",
            "example": 3
          },
          "casRN": {
            "description": "The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.",
            "maxLength": 24,
            "type": "string",
            "example": "64-17-5"
          },
          "ppm": {
            "format": "int32",
            "description": "Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).",
            "type": "integer",
            "example": 27129
          },
          "density": {
            "format": "double",
            "description": "Measure of density of the material associated with this detection, in kg/m^3.",
            "type": "number",
            "example": 18900.2
          },
          "radCtrn": {
            "format": "double",
            "description": "Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.",
            "type": "number",
            "example": 1.31
          },
          "gBar": {
            "format": "double",
            "description": "Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.",
            "type": "number",
            "example": 2.5
          },
          "hBar": {
            "format": "double",
            "description": "Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.",
            "type": "number",
            "example": 3.1
          },
          "z": {
            "format": "int32",
            "description": "The Atomic Number of the material associated with this detection.",
            "type": "integer",
            "example": 92
          },
          "a": {
            "format": "int32",
            "description": "The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.",
            "type": "integer",
            "example": 238
          },
          "bottleId": {
            "description": "The specific bottle ID associated with this detection.",
            "maxLength": 16,
            "type": "string",
            "example": "6264"
          },
          "channel": {
            "description": "The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .",
            "maxLength": 64,
            "type": "string",
            "example": "Skin"
          },
          "duration": {
            "format": "int32",
            "description": "The known or projected hazard duration, in seconds, associated with this material detection.",
            "type": "integer",
            "example": 14400
          },
          "activity": {
            "format": "double",
            "description": "The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.",
            "type": "number",
            "example": 120.1
          },
          "dep": {
            "format": "double",
            "description": "The deposition measurement of the contaminant to surface area, in kg/m^2.",
            "type": "number",
            "example": 1.084
          },
          "depCtrn": {
            "format": "double",
            "description": "The deposition concentration of the contaminant to surface area, in becquerels/m^2.",
            "type": "number",
            "example": 86.1
          },
          "massFrac": {
            "format": "double",
            "description": "Ratio of the chemical substance mass to the total mass of the mixture.",
            "type": "number",
            "example": 0.029
          },
          "dose": {
            "format": "double",
            "description": "The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.",
            "type": "number",
            "example": 1.12
          },
          "ctrnTime": {
            "format": "double",
            "description": "The concentration time, in (kg/sec)/m^3, associated with this material detection.",
            "type": "number",
            "example": 1.077
          },
          "doseRate": {
            "format": "double",
            "description": "The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.",
            "type": "number",
            "example": 1.0000001865
          },
          "idPOI": {
            "description": "ID of the Point of Interest (POI) record related to this hazard record.",
            "maxLength": 36,
            "type": "string",
            "example": "POI-ID"
          },
          "idTrack": {
            "description": "ID of the Track record related to this hazard record.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Hazard_Ingest": {
        "description": "Hazard contains information concerning the exposure of a geographic area to a Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard schema includes the detection time and type of contamination as well as optional information regarding specific material properties, the extent of contamination, and identification of affected regions.",
        "required": [
          "classificationMarking",
          "detectType",
          "detectTime",
          "alarms",
          "alarmValues",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "HAZARD-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "detectType": {
            "description": "The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "example": "Chemical"
          },
          "detectTime": {
            "format": "date-time",
            "description": "The detect time, in ISO 8601 UTC format, with millisecond precision.",
            "type": "string",
            "example": "2022-03-07T14:51:39.653Z"
          },
          "harmful": {
            "description": "Flag indicating whether this detection is harmful to humans.",
            "type": "boolean",
            "example": false
          },
          "alarms": {
            "description": "Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Alarm1",
              "Alarm2"
            ]
          },
          "alarmValues": {
            "description": "Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              2.7,
              2.9
            ]
          },
          "readings": {
            "description": "Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Rad1",
              "Rad2"
            ]
          },
          "readingUnits": {
            "description": "Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Gray",
              "Gray"
            ]
          },
          "readingValues": {
            "description": "Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              107.2,
              124.1
            ]
          },
          "matType": {
            "description": "The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.",
            "maxLength": 48,
            "type": "string",
            "example": "21"
          },
          "matClass": {
            "description": "The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.",
            "maxLength": 64,
            "type": "string",
            "example": "Nerve Agent"
          },
          "matName": {
            "description": "The material common name associated with this detection.",
            "maxLength": 64,
            "type": "string",
            "example": "VX"
          },
          "matCat": {
            "format": "int32",
            "description": "The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: \n\nCategory 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. \n\nCategory 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. \n\nCategory 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. \n\nCategory 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. \n\nCategory 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.",
            "type": "integer",
            "example": 3
          },
          "casRN": {
            "description": "The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.",
            "maxLength": 24,
            "type": "string",
            "example": "64-17-5"
          },
          "ppm": {
            "format": "int32",
            "description": "Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).",
            "type": "integer",
            "example": 27129
          },
          "density": {
            "format": "double",
            "description": "Measure of density of the material associated with this detection, in kg/m^3.",
            "type": "number",
            "example": 18900.2
          },
          "radCtrn": {
            "format": "double",
            "description": "Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.",
            "type": "number",
            "example": 1.31
          },
          "gBar": {
            "format": "double",
            "description": "Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.",
            "type": "number",
            "example": 2.5
          },
          "hBar": {
            "format": "double",
            "description": "Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.",
            "type": "number",
            "example": 3.1
          },
          "z": {
            "format": "int32",
            "description": "The Atomic Number of the material associated with this detection.",
            "type": "integer",
            "example": 92
          },
          "a": {
            "format": "int32",
            "description": "The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.",
            "type": "integer",
            "example": 238
          },
          "bottleId": {
            "description": "The specific bottle ID associated with this detection.",
            "maxLength": 16,
            "type": "string",
            "example": "6264"
          },
          "channel": {
            "description": "The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .",
            "maxLength": 64,
            "type": "string",
            "example": "Skin"
          },
          "duration": {
            "format": "int32",
            "description": "The known or projected hazard duration, in seconds, associated with this material detection.",
            "type": "integer",
            "example": 14400
          },
          "activity": {
            "format": "double",
            "description": "The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.",
            "type": "number",
            "example": 120.1
          },
          "dep": {
            "format": "double",
            "description": "The deposition measurement of the contaminant to surface area, in kg/m^2.",
            "type": "number",
            "example": 1.084
          },
          "depCtrn": {
            "format": "double",
            "description": "The deposition concentration of the contaminant to surface area, in becquerels/m^2.",
            "type": "number",
            "example": 86.1
          },
          "massFrac": {
            "format": "double",
            "description": "Ratio of the chemical substance mass to the total mass of the mixture.",
            "type": "number",
            "example": 0.029
          },
          "dose": {
            "format": "double",
            "description": "The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.",
            "type": "number",
            "example": 1.12
          },
          "ctrnTime": {
            "format": "double",
            "description": "The concentration time, in (kg/sec)/m^3, associated with this material detection.",
            "type": "number",
            "example": 1.077
          },
          "doseRate": {
            "format": "double",
            "description": "The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.",
            "type": "number",
            "example": 1.0000001865
          },
          "idPOI": {
            "description": "ID of the Point of Interest (POI) record related to this hazard record.",
            "maxLength": 36,
            "type": "string",
            "example": "POI-ID"
          },
          "idTrack": {
            "description": "ID of the Track record related to this hazard record.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Location_Full": {
        "description": "Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idLocation": {
            "description": "Unique identifier of the location, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Location name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Example location"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 16,
            "type": "string",
            "example": "US"
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "altitude": {
            "format": "double",
            "description": "Altitude of the location, in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Onorbit_Full": {
        "description": "Model object representing on-orbit objects or satellites in the system.",
        "required": [
          "classificationMarking",
          "satNo",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idOnOrbit": {
            "description": "For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "commonName": {
            "description": "Common name of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Example common name"
          },
          "constellation": {
            "description": "Constellation to which this satellite belongs.",
            "maxLength": 128,
            "type": "string",
            "example": "Big Dipper"
          },
          "intlDes": {
            "description": "International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.",
            "maxLength": 45,
            "type": "string",
            "example": "2021123ABC"
          },
          "launchDate": {
            "format": "date",
            "description": "Date of launch.",
            "type": "string",
            "example": "2018-01-01"
          },
          "decayDate": {
            "format": "date-time",
            "description": "Date of decay.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "objectType": {
            "description": "Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.",
            "maxLength": 32,
            "enum": [
              "ROCKET BODY",
              "DEBRIS",
              "PAYLOAD",
              "PLATFORM",
              "MANNED",
              "UNKNOWN"
            ],
            "type": "string",
            "example": "PAYLOAD"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "missionNumber": {
            "description": "Mission number of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Expedition 1"
          },
          "category": {
            "description": "Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).",
            "maxLength": 45,
            "enum": [
              "Unknown",
              "On-Orbit",
              "Decayed",
              "Cataloged Without State",
              "Launch Nominal",
              "Analyst Satellite",
              "Cislunar",
              "Lunar",
              "Hyperbolic",
              "Heliocentric",
              "Interplanetary",
              "Lagrangian",
              "Docked"
            ],
            "type": "string",
            "example": "Lunar"
          },
          "lifetimeYears": {
            "format": "int32",
            "description": "Estimated lifetime of the on-orbit payload, if known.",
            "type": "integer",
            "example": 10
          },
          "altName": {
            "description": "Alternate name of the on-orbit object.",
            "maxLength": 64,
            "type": "string",
            "example": "Alternate Name"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "launchSiteId": {
            "description": "Id of the associated launchSite entity.",
            "maxLength": 36,
            "type": "string",
            "example": "LAUNCHSITE-ID"
          },
          "entityCollection": {
            "description": "Read-only entity details (only returned/used on detail queries).",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "description": "An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.",
              "required": [
                "name",
                "classificationMarking",
                "type",
                "source",
                "dataMode"
              ],
              "type": "object",
              "properties": {
                "idEntity": {
                  "description": "Unique identifier of the record.",
                  "maxLength": 36,
                  "minLength": 1,
                  "type": "string",
                  "example": "ENTITY-ID"
                },
                "name": {
                  "description": "Unique entity name.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "example": "Example name"
                },
                "classificationMarking": {
                  "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "example": "U"
                },
                "terrestrialId": {
                  "description": "Terrestrial identifier of this entity, if applicable.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "TERRESTRIAL-ID"
                },
                "type": {
                  "description": "The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).",
                  "maxLength": 45,
                  "minLength": 1,
                  "enum": [
                    "AIRCRAFT",
                    "BUS",
                    "COMM",
                    "IR",
                    "NAVIGATION",
                    "ONORBIT",
                    "RFEMITTER",
                    "SCIENTIFIC",
                    "SENSOR",
                    "SITE",
                    "VESSEL"
                  ],
                  "type": "string",
                  "example": "ONORBIT"
                },
                "idLocation": {
                  "description": "Unique identifier of the entity location, if terrestrial/fixed.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "LOCATION-ID"
                },
                "countryCode": {
                  "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
                  "maxLength": 4,
                  "type": "string",
                  "example": "US"
                },
                "ownerType": {
                  "description": "Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).",
                  "maxLength": 32,
                  "enum": [
                    "Commercial",
                    "Government",
                    "Academic",
                    "Consortium",
                    "Other"
                  ],
                  "type": "string",
                  "example": "Commercial"
                },
                "taskable": {
                  "description": "Boolean indicating if this entity is taskable.",
                  "type": "boolean",
                  "example": false
                },
                "urls": {
                  "description": "List of URLs to additional details/documents for this entity.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "URL1",
                    "URL2"
                  ]
                },
                "createdAt": {
                  "format": "date-time",
                  "description": "Time the row was created in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "createdBy": {
                  "description": "Application user who created the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "updatedAt": {
                  "format": "date-time",
                  "description": "Time the row was last updated in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "updatedBy": {
                  "description": "Application user who updated the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "source": {
                  "description": "Source of the data.",
                  "maxLength": 64,
                  "minLength": 1,
                  "type": "string",
                  "example": "Bluestaq"
                },
                "origin": {
                  "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                  "maxLength": 64,
                  "type": "string",
                  "example": "THIRD_PARTY_DATASOURCE"
                },
                "dataMode": {
                  "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                  "maxLength": 32,
                  "minLength": 1,
                  "enum": [
                    "REAL",
                    "TEST",
                    "SIMULATED",
                    "EXERCISE"
                  ],
                  "type": "string",
                  "example": "TEST"
                },
                "location": {
                  "$ref": "#/components/schemas/Location_Full"
                },
                "idOnOrbit": {
                  "description": "Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "ONORBIT-ID"
                },
                "operatingUnit": {
                  "$ref": "#/components/schemas/Operatingunit_Full"
                },
                "idOperatingUnit": {
                  "description": "Unique identifier of the associated operating unit object.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "OPERATINGUNIT-ID"
                },
                "origNetwork": {
                  "description": "The originating source network on which this record was created, auto-populated by the system.",
                  "maxLength": 32,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "OPS1"
                },
                "statusCollection": {
                  "description": "Read-only collection of statuses which can be collected by multiple sources.",
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Status_Full"
                  },
                  "readOnly": true
                },
                "rfBands": {
                  "description": "Read-only collection of RF bands utilized by this entity for communication and/or operation.",
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFBand_Full"
                  },
                  "readOnly": true
                }
              }
            },
            "readOnly": true
          },
          "antennas": {
            "description": "Read-only collection of antennas on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitAntenna_Full"
            },
            "readOnly": true
          },
          "batteries": {
            "description": "Read-only collection of batteries on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitBattery_Full"
            },
            "readOnly": true
          },
          "solarArrays": {
            "description": "Read-only collection of solar arrays on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitSolarArray_Full"
            },
            "readOnly": true
          },
          "thrusters": {
            "description": "Read-only collection of thrusters (engines) on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitThruster_Full"
            },
            "readOnly": true
          },
          "onorbitDetails": {
            "description": "Read-only collection of details for this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitDetails_Full"
            },
            "readOnly": true
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitAntenna_Full": {
        "required": [
          "idOnOrbit",
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITANTENNA-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idAntenna": {
            "description": "ID of the antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "antenna": {
            "$ref": "#/components/schemas/Antenna_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitBattery_Full": {
        "required": [
          "idOnOrbit",
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITBATTERY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idBattery": {
            "description": "ID of the battery.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of batteries on the spacecraft of the type identified by idBattery.",
            "type": "integer",
            "example": 5
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "battery": {
            "$ref": "#/components/schemas/Battery_Full"
          }
        }
      },
      "OnorbitDetails_Full": {
        "description": "Contains details of the OnOrbit object.",
        "required": [
          "idOnOrbit",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITDETAILS-ID"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "lastObTime": {
            "format": "date-time",
            "description": "Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "vismag": {
            "format": "double",
            "description": "Current/latest visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "vismagMin": {
            "format": "double",
            "description": "Minimum visual magnitude in M.",
            "type": "number",
            "example": 5.23
          },
          "vismagMax": {
            "format": "double",
            "description": "Maximum visual magnitude in M.",
            "type": "number",
            "example": 15.23
          },
          "vismagMean": {
            "format": "double",
            "description": "Mean visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "rcs": {
            "format": "double",
            "description": "Current/latest radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "rcsMin": {
            "format": "double",
            "description": "Minimum radar cross section in meters squared.",
            "type": "number",
            "example": 5.23
          },
          "rcsMax": {
            "format": "double",
            "description": "Maximum radar cross section in meters squared.",
            "type": "number",
            "example": 15.23
          },
          "rcsMean": {
            "format": "double",
            "description": "Mean radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "bolDeltaV": {
            "format": "double",
            "description": "The total beginning of life delta V of the spacecraft, in meters per second.",
            "type": "number",
            "example": 1000.1
          },
          "maxDeltaV": {
            "format": "double",
            "description": "Maximum delta V available for this on-orbit spacecraft, in meters per second.",
            "type": "number",
            "example": 10.23
          },
          "deltaVUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.",
            "type": "number",
            "example": 50.1
          },
          "estDeltaVDuration": {
            "format": "double",
            "description": "Estimated maximum burn duration for the object, in seconds.",
            "type": "number",
            "example": 10.23
          },
          "numMission": {
            "format": "int32",
            "description": "The number of distinct missions the spacecraft performs.",
            "type": "integer",
            "example": 2
          },
          "missionTypes": {
            "description": "Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Weather",
              "Space Weather"
            ]
          },
          "busType": {
            "description": "Type of the bus on the spacecraft.",
            "maxLength": 32,
            "type": "string",
            "example": "A2100"
          },
          "geoSlot": {
            "format": "double",
            "description": "GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 90.23
          },
          "driftRate": {
            "format": "double",
            "description": "GEO drift rate, if applicable in degrees per day.",
            "type": "number",
            "example": 1.23
          },
          "dryMass": {
            "format": "double",
            "description": "Spacecraft dry mass (without fuel or disposables) in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "additionalMass": {
            "format": "double",
            "description": "Mass of fuel and disposables at launch time in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMin": {
            "format": "double",
            "description": "Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 5.23
          },
          "launchMass": {
            "format": "double",
            "description": "Nominal mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMax": {
            "format": "double",
            "description": "Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 15.23
          },
          "bolFuelMass": {
            "format": "double",
            "description": "Spacecraft beginning of life fuel mass, in orbit, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "currentMass": {
            "format": "double",
            "description": "The estimated total current mass of the spacecraft, in kilograms.",
            "type": "number",
            "example": 500
          },
          "totalMassUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft mass, in kilograms.",
            "type": "number",
            "example": 50.1
          },
          "solarArrayArea": {
            "format": "double",
            "description": "Spacecraft deployed area of solar array in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maneuverable": {
            "description": "Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.",
            "type": "boolean",
            "example": false
          },
          "fuelRemaining": {
            "format": "double",
            "description": "Estimated remaining fuel for the object in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "crossSection": {
            "format": "double",
            "description": "Average cross sectional area in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "busCrossSection": {
            "format": "double",
            "description": "Average cross sectional area of the bus in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maxRadius": {
            "format": "double",
            "description": "Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.",
            "type": "number",
            "example": 10.23
          },
          "colaRadius": {
            "format": "double",
            "description": "Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.",
            "type": "number",
            "example": 10.23
          },
          "adeptRadius": {
            "format": "double",
            "description": "The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.",
            "type": "number",
            "example": 10.23
          },
          "numDeployable": {
            "format": "int32",
            "description": "The number of sub-satellites or deployable objects on the spacecraft.",
            "type": "integer",
            "example": 2
          },
          "depNames": {
            "description": "Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GOES-18A",
              "GOES-18B"
            ]
          },
          "depEstMasses": {
            "description": "Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              20,
              21
            ]
          },
          "depMassUncs": {
            "description": "Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              10,
              5
            ]
          },
          "refSource": {
            "description": "The reference source, sources, or URL from which the data in this record was obtained.",
            "maxLength": 256,
            "type": "string",
            "example": "Wikipedia"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "lastObSource": {
            "description": "The name of the source who last provided an observation for this idOnOrbit.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitSolarArray_Full": {
        "required": [
          "idOnOrbit",
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITSOLARARRAY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idSolarArray": {
            "description": "ID of the SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of solar arrays on the spacecraft of the type identified by idSolarArray.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "solarArray": {
            "$ref": "#/components/schemas/SolarArray_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitThruster_Full": {
        "required": [
          "idOnOrbit",
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITTHRUSTER-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idEngine": {
            "description": "ID of the Engine.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "The type of thruster associated with this record (e.g. LAE, Hydrazine REA, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Hydrazine REA"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of engines/thrusters on the spacecraft of the type identified by idEngine.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engine": {
            "$ref": "#/components/schemas/Engine_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Operatingunit_Full": {
        "description": "Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idOperatingUnit": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OPERATINGUNIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "altOperatingUnitId": {
            "description": "Unique identifier of the operating unit record from the originating system.",
            "maxLength": 36,
            "type": "string",
            "example": "32100000000021"
          },
          "name": {
            "description": "Name of the operating unit.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "SOME_NAME"
          },
          "description": {
            "description": "Description of the operating unit.",
            "maxLength": 256,
            "type": "string",
            "example": "Description of unit"
          },
          "idLocation": {
            "description": "Unique identifier of the location record for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "idContact": {
            "description": "Unique identifier of the contact for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "CONTACT-ID"
          },
          "idOrganization": {
            "description": "Unique identifier of the organization record for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "unitIdentifier": {
            "description": "An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.",
            "maxLength": 10,
            "type": "string",
            "example": "AZXAZ12345"
          },
          "countryCode": {
            "description": "The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to \"OTHR\" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).",
            "maxLength": 4,
            "type": "string",
            "example": "IQ"
          },
          "altCountryCode": {
            "description": "Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.",
            "maxLength": 4,
            "type": "string",
            "example": "IZ"
          },
          "wac": {
            "description": "World Aeronautical Chart identifier for the area in which a designated operating unit is located.",
            "maxLength": 4,
            "type": "string",
            "example": "0427"
          },
          "operStatus": {
            "description": "The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 3,
            "type": "string",
            "example": "OPR"
          },
          "condition": {
            "description": "The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "RDY"
          },
          "conditionAvail": {
            "description": "Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "A"
          },
          "eval": {
            "format": "int32",
            "description": "The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.",
            "type": "integer",
            "example": 7
          },
          "fpa": {
            "description": "Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 5,
            "type": "string",
            "example": "EOB"
          },
          "ident": {
            "description": "Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): \n\nASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.\n\nFRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.\n\nHOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.\n\nFAKER: Friendly track, object, or entity acting as an exercise hostile.\n\nJOKER: Friendly track, object, or entity acting as an exercise suspect.\n\nNEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.\n\nPENDING: Track object which has not been evaluated.\n\nSUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.\n\nUNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.",
            "maxLength": 32,
            "type": "string",
            "example": "FRIEND"
          },
          "allegiance": {
            "description": "The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to \"OTHR\" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).",
            "maxLength": 4,
            "type": "string",
            "example": "OTHR"
          },
          "altAllegiance": {
            "description": "Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.",
            "maxLength": 4,
            "type": "string",
            "example": "HL"
          },
          "locName": {
            "description": "Location name for the coordinates.",
            "maxLength": 54,
            "type": "string",
            "example": "LOCATION_NAME"
          },
          "locReason": {
            "description": "Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 9,
            "type": "string",
            "example": "GR"
          },
          "force": {
            "description": "An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "NV"
          },
          "forceName": {
            "description": "The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.",
            "maxLength": 54,
            "type": "string",
            "example": "FORCE-NAME"
          },
          "functRole": {
            "description": "Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 3,
            "type": "string",
            "example": "MIL"
          },
          "msnPrimary": {
            "description": "Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "W6"
          },
          "msnPrimarySpecialty": {
            "description": "Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "QK"
          },
          "masterUnit": {
            "description": "This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.",
            "type": "boolean",
            "example": true
          },
          "stylizedUnit": {
            "description": "This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.",
            "type": "boolean",
            "example": true
          },
          "divCat": {
            "description": "Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 1,
            "type": "string",
            "example": "5"
          },
          "echelon": {
            "description": "Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "SHIP"
          },
          "echelonTier": {
            "description": "Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 2,
            "type": "string",
            "example": "68"
          },
          "fleetId": {
            "description": "Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 1,
            "type": "string",
            "example": "A"
          },
          "deployStatus": {
            "description": "A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 2,
            "type": "string",
            "example": "ND"
          },
          "flagFlown": {
            "description": "The country code of the observed flag flown.",
            "maxLength": 4,
            "type": "string",
            "example": "IZ"
          },
          "coordDatum": {
            "description": "A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 16,
            "type": "string",
            "example": "WGS"
          },
          "coord": {
            "description": "\"Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.\nPos. 1-2.  Latitude Degrees     [00-90]\nPos. 3-4.  Latitude Minutes     [00-59]\nPos. 5-6.  Latitude Seconds     [00-59]\nPos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  \nPos. 10. Latitude Hemisphere       [NS] \nPos. 11-13. Longitude Degrees     [00-180] \nPos. 14-15. Longitude Minutes     [00-59] \nPos. 16-17. Longitude Seconds     [00-59] \nPos. 18-20. Longitude Thousandths Of Seconds      [000-999]\nPos. 21. Longitude Hemisphere     [EW]\nPos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]\".\n",
            "maxLength": 21,
            "type": "string",
            "example": "340000000N0430000000E"
          },
          "coordDerivAcc": {
            "format": "double",
            "description": "Indicates the plus or minus error assessed against the method used to derive the coordinate.",
            "type": "number",
            "example": 12.345
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 179.1
          },
          "elevMsl": {
            "format": "double",
            "description": "Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.",
            "type": "number",
            "example": 123.45
          },
          "elevMslConfLvl": {
            "format": "int32",
            "description": "Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.",
            "type": "integer",
            "example": 50
          },
          "elevMslDerivAcc": {
            "format": "double",
            "description": "Indicates the plus or minus error assessed against the method used to derive the elevation.",
            "type": "number",
            "example": 12.34
          },
          "geoidalMslSep": {
            "format": "double",
            "description": "The distance between Mean Sea Level and a referenced ellipsoid.",
            "type": "number",
            "example": 12.34
          },
          "milGridSys": {
            "description": "\"Indicates the grid system used in the development of the milGrid coordinates. Values are:\nUPS - Universal Polar System\nUTM - Universal Transverse Mercator\".",
            "maxLength": 3,
            "type": "string",
            "example": "UTM"
          },
          "milGrid": {
            "description": "The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:\n4Q (grid zone designator, GZD)\nFJ (the 100,000-meter square identifier)\n12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).",
            "maxLength": 15,
            "type": "string",
            "example": "4QFJ12345678"
          },
          "utm": {
            "description": "Universal Transverse Mercator (UTM) grid coordinates.\nPos. 1-2, UTM Zone Column   [01-60\nPos. 3, UTM Zone Row   [C-HJ-NP-X]\nPos. 4, UTM False Easting   [0-9]\nPos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]\nPos. 10-11, UTM False Northing    [0-9][0-9]\nPos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].",
            "maxLength": 16,
            "type": "string",
            "example": "19P4390691376966"
          },
          "airDefArea": {
            "description": "Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.",
            "maxLength": 5,
            "type": "string",
            "example": "AL006"
          },
          "polSubdiv": {
            "description": "Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 7,
            "type": "string",
            "example": "IZ07"
          },
          "symCode": {
            "description": "A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.",
            "maxLength": 15,
            "type": "string",
            "example": "SOGPU----------"
          },
          "classRating": {
            "description": "Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:\n0 - Does not meet criteria above\n1 - Primary importance to system\n2 - Secondary importance to system\n3 - Tertiary importance to system\nO - Other. Explain in Remarks.",
            "maxLength": 1,
            "type": "string",
            "example": "1"
          },
          "recStatus": {
            "description": "Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:\nA - Active\nI - Inactive\nK - Acknowledged\nL - Local\nQ - A nominated (NOM) or Data Change Request (DCR) record\nR - Production reduced by CMD decision\nW - Working Record.",
            "maxLength": 1,
            "type": "string",
            "example": "A"
          },
          "reviewDate": {
            "format": "date",
            "description": "Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.",
            "type": "string",
            "example": "2008-06-10"
          },
          "resProd": {
            "description": "Responsible Producer - Organization that is responsible for the maintenance of the record.",
            "maxLength": 4,
            "type": "string",
            "example": "RT"
          },
          "referenceDoc": {
            "description": "The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 128,
            "type": "string",
            "example": "Provider Reference Documentation"
          },
          "operatingUnitRemarks": {
            "description": "Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperatingUnitRemark_Full"
            },
            "readOnly": true
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization_Full"
          },
          "location": {
            "$ref": "#/components/schemas/Location_Full"
          }
        }
      },
      "OperatingUnitRemark_Full": {
        "description": "Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.",
        "required": [
          "classificationMarking",
          "idOperatingUnit",
          "text",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "0167f577-e06c-358e-85aa-0a07a730bdd0"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOperatingUnit": {
            "description": "The ID of the operating unit to which this remark applies.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OperatingUnit-ID"
          },
          "altRmkId": {
            "description": "Unique identifier of the unit remark record from the originating system.",
            "maxLength": 36,
            "type": "string",
            "example": "123456ABC"
          },
          "name": {
            "description": "The name of the remark.",
            "maxLength": 64,
            "type": "string",
            "example": "Remark name"
          },
          "type": {
            "description": "The remark type (e.g. Caution, Information, Misc, Restriction, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Restriction"
          },
          "text": {
            "description": "The text of the remark.",
            "maxLength": 16384,
            "minLength": 1,
            "type": "string",
            "example": "This is a remark"
          },
          "code": {
            "description": "The remark type identifier. For example, the Mobility Air Forces (MAF) remark code, defined in the Airfield Suitability and Restriction Report (ASRR).",
            "maxLength": 16,
            "type": "string",
            "example": "M"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Organization_Full": {
        "description": "An organization such as a corporation, manufacturer, consortium, government, etc. An organization may have parent and child organizations as well as link to a former organization if this org previously existed as another organization.",
        "required": [
          "classificationMarking",
          "name",
          "type",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Organization name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "type": {
            "description": "Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "GOVERNMENT"
          },
          "category": {
            "description": "Subtype or category of the organization (e.g. Private company, stock market quoted company, subsidiary, goverment department/agency, etc).",
            "maxLength": 128,
            "type": "string",
            "example": "Private company"
          },
          "externalId": {
            "description": "Optional externally provided identifier for this row.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "description": {
            "description": "Organization description.",
            "maxLength": 256,
            "type": "string",
            "example": "Example description"
          },
          "countryCode": {
            "description": "Country of the physical location of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code. However, it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "nationality": {
            "description": "Country of registration or ownership of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "active": {
            "description": "Boolean indicating if this organization is currently active.",
            "type": "boolean",
            "example": false
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "some.user"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "organizationDetails": {
            "description": "Read-only collection of additional OrganizationDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/organizationdetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationDetails_Full"
            },
            "readOnly": true
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OrganizationDetails_Full": {
        "description": "Model representation of additional detailed organization data as collected by a particular source.",
        "required": [
          "idOrganization",
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATIONDETAILS-ID"
          },
          "idOrganization": {
            "description": "Unique identifier of the parent organization.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Organization details name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "email": {
            "description": "Listed contact email address for the organization.",
            "maxLength": 320,
            "type": "string",
            "example": "some_organization@organization.com"
          },
          "address1": {
            "description": "Street number of the organization.",
            "maxLength": 120,
            "type": "string",
            "example": "123 Main Street"
          },
          "address2": {
            "description": "Field for additional organization address information such as PO Box and unit number.",
            "maxLength": 120,
            "type": "string",
            "example": "Apt 4B"
          },
          "address3": {
            "description": "Contains the third line of address information for an organization.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado Springs CO, 80903"
          },
          "geoAdminLevel1": {
            "description": "Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado"
          },
          "geoAdminLevel2": {
            "description": "Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.",
            "maxLength": 120,
            "type": "string",
            "example": "El Paso County"
          },
          "geoAdminLevel3": {
            "description": "Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado Springs"
          },
          "postalCode": {
            "description": "A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.",
            "maxLength": 32,
            "type": "string",
            "example": "80903"
          },
          "description": {
            "description": "Organization description.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example description"
          },
          "formerOrgId": {
            "description": "Former organization ID (if this organization previously existed as another organization).",
            "maxLength": 36,
            "type": "string",
            "example": "FORMERORG-ID"
          },
          "parentOrgId": {
            "description": "Parent organization ID of this organization if it is a child organization.",
            "maxLength": 36,
            "type": "string",
            "example": "PARENTORG-ID"
          },
          "financialYearEndDate": {
            "format": "date-time",
            "description": "For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "revenue": {
            "format": "double",
            "description": "For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "profit": {
            "format": "double",
            "description": "For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "ebitda": {
            "format": "double",
            "description": "For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "ftes": {
            "format": "int32",
            "description": "Total number of FTEs in this organization.",
            "type": "integer",
            "example": 123
          },
          "broker": {
            "description": "Designated broker for this organization.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "ceo": {
            "description": "For organizations of type CORPORATION, the name of the Chief Executive Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "cfo": {
            "description": "For organizations of type CORPORATION, the name of the Chief Financial Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "cto": {
            "description": "For organizations of type CORPORATION, the name of the Chief Technology Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "riskManager": {
            "description": "The name of the risk manager for the organization.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "massRanking": {
            "format": "int32",
            "description": "Mass ranking for this organization.",
            "type": "integer",
            "example": 123
          },
          "revenueRanking": {
            "format": "int32",
            "description": "Revenue ranking for this organization.",
            "type": "integer",
            "example": 123
          },
          "financialNotes": {
            "description": "For organizations of type CORPORATION, notes on company financials.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "servicesNotes": {
            "description": "Notes on the services provided by the organization.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "fleetPlanNotes": {
            "description": "Satellite fleet planning notes for this organization.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "some.user"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "POI_Abridged": {
        "description": "A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).",
        "required": [
          "classificationMarking",
          "poiid",
          "name",
          "ts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "POI-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "pps": {
            "description": "The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).",
            "maxLength": 36,
            "type": "string",
            "example": "BDA"
          },
          "msnid": {
            "description": "Optional mission ID related to the POI.",
            "maxLength": 36,
            "type": "string",
            "example": "MSN-ID"
          },
          "pri": {
            "format": "int32",
            "description": "Priority of the  POI target object.",
            "type": "integer",
            "example": 2
          },
          "trkid": {
            "description": "Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.",
            "maxLength": 36,
            "type": "string",
            "example": "TRK-ID"
          },
          "idWeatherReport": {
            "description": "Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "WEATHER-EVENT-ID1",
              "WEATHER-EVENT-ID2"
            ]
          },
          "poiid": {
            "description": "Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "POI-ID"
          },
          "name": {
            "description": "Name of the POI target object.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "POI_NAME"
          },
          "desc": {
            "description": "Description of the POI target object.",
            "maxLength": 128,
            "type": "string",
            "example": "Description of the object"
          },
          "spec": {
            "description": "Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).",
            "maxLength": 24,
            "type": "string",
            "example": "LIGHT_TANK"
          },
          "ident": {
            "description": "Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).",
            "maxLength": 16,
            "type": "string",
            "example": "FRIEND"
          },
          "env": {
            "description": "POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).",
            "maxLength": 24,
            "type": "string",
            "example": "SURFACE"
          },
          "plat": {
            "description": "POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).",
            "maxLength": 36,
            "type": "string",
            "example": "COMBAT_VEHICLE"
          },
          "activity": {
            "description": "The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.",
            "maxLength": 32,
            "type": "string",
            "example": "TRAINING"
          },
          "ts": {
            "format": "date-time",
            "description": "Activity/POI timestamp in ISO8601 UTC format.",
            "type": "string",
            "example": "2020-01-01T16:00:00.123456Z"
          },
          "start": {
            "format": "date-time",
            "description": "Start time of event validity (optional), in ISO8601 UTC format.",
            "type": "string",
            "example": "2020-01-01T16:00:00.123456Z"
          },
          "stale": {
            "format": "date-time",
            "description": "Stale timestamp (optional), in ISO8601 UTC format.",
            "type": "string",
            "example": "2020-01-01T16:00:00.123456Z"
          },
          "how": {
            "description": "How the event point was generated, in CoT object heirarchy notation (optional, CoT).",
            "maxLength": 36,
            "type": "string",
            "example": "h-g-i-g-o"
          },
          "type": {
            "description": "Event type, in CoT object heirarchy notation (optional, CoT).",
            "maxLength": 36,
            "type": "string",
            "example": "a-h-G"
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.",
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.",
            "type": "number",
            "example": 45.23
          },
          "alt": {
            "format": "double",
            "description": "Point height above ellipsoid (WGS-84), in meters.",
            "type": "number",
            "example": 5.23
          },
          "az": {
            "format": "double",
            "description": "Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).",
            "type": "number",
            "example": 45.23
          },
          "el": {
            "format": "double",
            "description": "Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).",
            "type": "number",
            "example": 45.23
          },
          "le": {
            "format": "double",
            "description": "Height above lat/lon point, in meters (1-sigma, if representing linear error).",
            "type": "number",
            "example": 10.23
          },
          "ce": {
            "format": "double",
            "description": "Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).",
            "type": "number",
            "example": 10.23
          },
          "elle": {
            "description": "Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              125.5,
              85.1,
              125.75
            ]
          },
          "cntct": {
            "description": "Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.",
            "maxLength": 32,
            "type": "string",
            "example": "Contact Info"
          },
          "conf": {
            "format": "double",
            "description": "POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.",
            "type": "number",
            "example": 0.5
          },
          "urls": {
            "description": "List of URLs to before/after images of this Point of Interest entity.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "URL1",
              "URL2"
            ]
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "Type1"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 3
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 3
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "groups": {
            "description": "Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GROUP1",
              "GROUP2"
            ]
          },
          "asset": {
            "description": "ID/name of the platform or entity providing the POI data.",
            "maxLength": 64,
            "type": "string",
            "example": "PLATFORM_NAME"
          },
          "beNumber": {
            "description": "The Basic Encyclopedia Number associated with the POI, if applicable.",
            "maxLength": 64,
            "type": "string",
            "example": "0427RT1030"
          },
          "orientation": {
            "format": "double",
            "description": "The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.",
            "type": "number",
            "example": 45.23
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          }
        }
      },
      "POI_Full": {
        "description": "A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).",
        "required": [
          "classificationMarking",
          "poiid",
          "name",
          "ts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "POI-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "pps": {
            "description": "The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).",
            "maxLength": 36,
            "type": "string",
            "example": "BDA"
          },
          "msnid": {
            "description": "Optional mission ID related to the POI.",
            "maxLength": 36,
            "type": "string",
            "example": "MSN-ID"
          },
          "pri": {
            "format": "int32",
            "description": "Priority of the  POI target object.",
            "type": "integer",
            "example": 2
          },
          "trkid": {
            "description": "Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.",
            "maxLength": 36,
            "type": "string",
            "example": "TRK-ID"
          },
          "idWeatherReport": {
            "description": "Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "WEATHER-EVENT-ID1",
              "WEATHER-EVENT-ID2"
            ]
          },
          "poiid": {
            "description": "Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "POI-ID"
          },
          "name": {
            "description": "Name of the POI target object.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "POI_NAME"
          },
          "desc": {
            "description": "Description of the POI target object.",
            "maxLength": 128,
            "type": "string",
            "example": "Description of the object"
          },
          "spec": {
            "description": "Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).",
            "maxLength": 24,
            "type": "string",
            "example": "LIGHT_TANK"
          },
          "ident": {
            "description": "Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).",
            "maxLength": 16,
            "type": "string",
            "example": "FRIEND"
          },
          "env": {
            "description": "POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).",
            "maxLength": 24,
            "type": "string",
            "example": "SURFACE"
          },
          "plat": {
            "description": "POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).",
            "maxLength": 36,
            "type": "string",
            "example": "COMBAT_VEHICLE"
          },
          "activity": {
            "description": "The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.",
            "maxLength": 32,
            "type": "string",
            "example": "TRAINING"
          },
          "ts": {
            "format": "date-time",
            "description": "Activity/POI timestamp in ISO8601 UTC format.",
            "type": "string",
            "example": "2020-01-01T16:00:00.123456Z"
          },
          "start": {
            "format": "date-time",
            "description": "Start time of event validity (optional), in ISO8601 UTC format.",
            "type": "string",
            "example": "2020-01-01T16:00:00.123456Z"
          },
          "stale": {
            "format": "date-time",
            "description": "Stale timestamp (optional), in ISO8601 UTC format.",
            "type": "string",
            "example": "2020-01-01T16:00:00.123456Z"
          },
          "how": {
            "description": "How the event point was generated, in CoT object heirarchy notation (optional, CoT).",
            "maxLength": 36,
            "type": "string",
            "example": "h-g-i-g-o"
          },
          "type": {
            "description": "Event type, in CoT object heirarchy notation (optional, CoT).",
            "maxLength": 36,
            "type": "string",
            "example": "a-h-G"
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.",
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.",
            "type": "number",
            "example": 45.23
          },
          "alt": {
            "format": "double",
            "description": "Point height above ellipsoid (WGS-84), in meters.",
            "type": "number",
            "example": 5.23
          },
          "az": {
            "format": "double",
            "description": "Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).",
            "type": "number",
            "example": 45.23
          },
          "el": {
            "format": "double",
            "description": "Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).",
            "type": "number",
            "example": 45.23
          },
          "le": {
            "format": "double",
            "description": "Height above lat/lon point, in meters (1-sigma, if representing linear error).",
            "type": "number",
            "example": 10.23
          },
          "ce": {
            "format": "double",
            "description": "Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).",
            "type": "number",
            "example": 10.23
          },
          "elle": {
            "description": "Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              125.5,
              85.1,
              125.75
            ]
          },
          "cntct": {
            "description": "Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.",
            "maxLength": 32,
            "type": "string",
            "example": "Contact Info"
          },
          "conf": {
            "format": "double",
            "description": "POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.",
            "type": "number",
            "example": 0.5
          },
          "urls": {
            "description": "List of URLs to before/after images of this Point of Interest entity.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "URL1",
              "URL2"
            ]
          },
          "area": {
            "description": "Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "Type1"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 3
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 3
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "groups": {
            "description": "Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GROUP1",
              "GROUP2"
            ]
          },
          "asset": {
            "description": "ID/name of the platform or entity providing the POI data.",
            "maxLength": 64,
            "type": "string",
            "example": "PLATFORM_NAME"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "srcTyps": {
            "description": "Array of UDL record types (GROUNDIMAGE, RFOBS) that are related to the determination of this Point of Interest. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TYPE1",
              "TYPE2"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to the determination of this Point of Interest. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size.  See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/rfobservation/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ID1",
              "ID2"
            ]
          },
          "beNumber": {
            "description": "The Basic Encyclopedia Number associated with the POI, if applicable.",
            "maxLength": 64,
            "type": "string",
            "example": "0427RT1030"
          },
          "orientation": {
            "format": "double",
            "description": "The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.",
            "type": "number",
            "example": 45.23
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          }
        }
      },
      "POI_Ingest": {
        "description": "A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).",
        "required": [
          "classificationMarking",
          "poiid",
          "name",
          "ts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "POI-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "pps": {
            "description": "The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).",
            "maxLength": 36,
            "type": "string",
            "example": "BDA"
          },
          "msnid": {
            "description": "Optional mission ID related to the POI.",
            "maxLength": 36,
            "type": "string",
            "example": "MSN-ID"
          },
          "pri": {
            "format": "int32",
            "description": "Priority of the  POI target object.",
            "type": "integer",
            "example": 2
          },
          "trkid": {
            "description": "Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.",
            "maxLength": 36,
            "type": "string",
            "example": "TRK-ID"
          },
          "idWeatherReport": {
            "description": "Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "WEATHER-EVENT-ID1",
              "WEATHER-EVENT-ID2"
            ]
          },
          "poiid": {
            "description": "Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "POI-ID"
          },
          "name": {
            "description": "Name of the POI target object.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "POI_NAME"
          },
          "desc": {
            "description": "Description of the POI target object.",
            "maxLength": 128,
            "type": "string",
            "example": "Description of the object"
          },
          "spec": {
            "description": "Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).",
            "maxLength": 24,
            "type": "string",
            "example": "LIGHT_TANK"
          },
          "ident": {
            "description": "Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).",
            "maxLength": 16,
            "type": "string",
            "example": "FRIEND"
          },
          "env": {
            "description": "POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).",
            "maxLength": 24,
            "type": "string",
            "example": "SURFACE"
          },
          "plat": {
            "description": "POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).",
            "maxLength": 36,
            "type": "string",
            "example": "COMBAT_VEHICLE"
          },
          "activity": {
            "description": "The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.",
            "maxLength": 32,
            "type": "string",
            "example": "TRAINING"
          },
          "ts": {
            "format": "date-time",
            "description": "Activity/POI timestamp in ISO8601 UTC format.",
            "type": "string",
            "example": "2020-01-01T16:00:00.123456Z"
          },
          "start": {
            "format": "date-time",
            "description": "Start time of event validity (optional), in ISO8601 UTC format.",
            "type": "string",
            "example": "2020-01-01T16:00:00.123456Z"
          },
          "stale": {
            "format": "date-time",
            "description": "Stale timestamp (optional), in ISO8601 UTC format.",
            "type": "string",
            "example": "2020-01-01T16:00:00.123456Z"
          },
          "how": {
            "description": "How the event point was generated, in CoT object heirarchy notation (optional, CoT).",
            "maxLength": 36,
            "type": "string",
            "example": "h-g-i-g-o"
          },
          "type": {
            "description": "Event type, in CoT object heirarchy notation (optional, CoT).",
            "maxLength": 36,
            "type": "string",
            "example": "a-h-G"
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.",
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.",
            "type": "number",
            "example": 45.23
          },
          "alt": {
            "format": "double",
            "description": "Point height above ellipsoid (WGS-84), in meters.",
            "type": "number",
            "example": 5.23
          },
          "az": {
            "format": "double",
            "description": "Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).",
            "type": "number",
            "example": 45.23
          },
          "el": {
            "format": "double",
            "description": "Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).",
            "type": "number",
            "example": 45.23
          },
          "le": {
            "format": "double",
            "description": "Height above lat/lon point, in meters (1-sigma, if representing linear error).",
            "type": "number",
            "example": 10.23
          },
          "ce": {
            "format": "double",
            "description": "Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).",
            "type": "number",
            "example": 10.23
          },
          "elle": {
            "description": "Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              125.5,
              85.1,
              125.75
            ]
          },
          "cntct": {
            "description": "Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.",
            "maxLength": 32,
            "type": "string",
            "example": "Contact Info"
          },
          "conf": {
            "format": "double",
            "description": "POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.",
            "type": "number",
            "example": 0.5
          },
          "urls": {
            "description": "List of URLs to before/after images of this Point of Interest entity.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "URL1",
              "URL2"
            ]
          },
          "area": {
            "description": "Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "Type1"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 3
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 3
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "groups": {
            "description": "Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GROUP1",
              "GROUP2"
            ]
          },
          "asset": {
            "description": "ID/name of the platform or entity providing the POI data.",
            "maxLength": 64,
            "type": "string",
            "example": "PLATFORM_NAME"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "srcTyps": {
            "description": "Array of UDL record types (GROUNDIMAGE, RFOBS) that are related to the determination of this Point of Interest. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TYPE1",
              "TYPE2"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to the determination of this Point of Interest. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size.  See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/rfobservation/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ID1",
              "ID2"
            ]
          },
          "beNumber": {
            "description": "The Basic Encyclopedia Number associated with the POI, if applicable.",
            "maxLength": 64,
            "type": "string",
            "example": "0427RT1030"
          },
          "orientation": {
            "format": "double",
            "description": "The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.",
            "type": "number",
            "example": 45.23
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          }
        }
      },
      "RelatedDocument_Abridged": {
        "type": "object",
        "properties": {
          "documentId": {
            "description": "The document id of the related document.",
            "type": "string"
          },
          "dataSourceRefs": {
            "description": "List of data sources related to this document.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SofDataSourceRef_Abridged"
            }
          }
        }
      },
      "RelatedDocument_Full": {
        "type": "object",
        "properties": {
          "documentId": {
            "description": "The document id of the related document.",
            "type": "string"
          },
          "dataSourceRefs": {
            "description": "List of data sources related to this document.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SofDataSourceRef_Full"
            }
          }
        }
      },
      "RelatedDocument_Ingest": {
        "type": "object",
        "properties": {
          "documentId": {
            "description": "The document id of the related document.",
            "type": "string"
          },
          "dataSourceRefs": {
            "description": "List of data sources related to this document.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SofDataSourceRef_Ingest"
            }
          }
        }
      },
      "RFBand_Full": {
        "description": "Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.",
        "required": [
          "idEntity",
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RFBAND-ID"
          },
          "idEntity": {
            "description": "Unique identifier of the parent Entity which uses this band.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENTITY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "RF Band name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "BAND_NAME"
          },
          "band": {
            "description": "Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.",
            "maxLength": 5,
            "type": "string",
            "example": "Ku"
          },
          "mode": {
            "description": "RF Band mode (e.g. TX, RX).",
            "maxLength": 4,
            "enum": [
              "TX",
              "RX"
            ],
            "type": "string",
            "example": "TX"
          },
          "purpose": {
            "description": "Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).",
            "maxLength": 16,
            "enum": [
              "COMM",
              "TTC",
              "OPS",
              "OTHER"
            ],
            "type": "string",
            "example": "TTC"
          },
          "freqMin": {
            "format": "double",
            "description": "Start/minimum of transmit RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 50.23
          },
          "freqMax": {
            "format": "double",
            "description": "End/maximum of transmit RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 2000.23
          },
          "centerFreq": {
            "format": "double",
            "description": "Center frequency of RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 1000.23
          },
          "peakGain": {
            "format": "double",
            "description": "RF Range maximum gain, in dBi.",
            "type": "number",
            "example": 120.23
          },
          "edgeGain": {
            "format": "double",
            "description": "RF Range edge gain, in dBi.",
            "type": "number",
            "example": 100.23
          },
          "bandwidth": {
            "format": "double",
            "description": "RF Band frequency range bandwidth in Mhz.",
            "type": "number",
            "example": 100.23
          },
          "beamwidth": {
            "format": "double",
            "description": "Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.",
            "type": "number",
            "example": 45.23
          },
          "polarization": {
            "description": "Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.",
            "maxLength": 4,
            "enum": [
              "H",
              "V",
              "R",
              "L"
            ],
            "type": "string",
            "example": "H"
          },
          "erp": {
            "format": "double",
            "description": "Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the \"main lobe\") of its radiation pattern.",
            "type": "number",
            "example": 2.23
          },
          "eirp": {
            "format": "double",
            "description": "EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the \"main lobe\") of its radiation pattern.",
            "type": "number",
            "example": 2.23
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "RFGeoLocation_Abridged": {
        "description": "Model representation of geolocation data for a radio frequency (RF) signal or emitter.",
        "required": [
          "classificationMarking",
          "orderId",
          "receivedTs",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "orderId": {
            "description": "The order identifier for this RF Geo Location data set.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "155240"
          },
          "createdTs": {
            "format": "date-time",
            "description": "Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2024-05-31T23:06:18.123456Z"
          },
          "receivedTs": {
            "format": "date-time",
            "description": "The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2024-05-31T21:16:58.123456Z"
          },
          "startTime": {
            "format": "date-time",
            "description": "The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2024-05-31T21:12:12.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2024-05-31T21:16:15.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "HawkEye360-7"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 101
          },
          "origObjectId": {
            "description": "Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "constellation": {
            "description": "The name of the satellite constellation.",
            "maxLength": 36,
            "type": "string",
            "example": "HawkEye360"
          },
          "signalOfInterest": {
            "description": "The name of the signal of interest.",
            "maxLength": 36,
            "type": "string",
            "example": "GPS"
          },
          "idRFEmitter": {
            "description": "Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "RFEMITTER-ID"
          },
          "origRFEmitterId": {
            "description": "Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGRFEMITTER-ID"
          },
          "numBursts": {
            "format": "int32",
            "description": "The count of single-burst observations used for this geolocation observation.",
            "type": "integer",
            "example": 17
          },
          "minFreq": {
            "format": "double",
            "description": "The minimum detected frequency in megahertz.",
            "type": "number",
            "example": 1575.42
          },
          "maxFreq": {
            "format": "double",
            "description": "The maximum detected frequency in megahertz.",
            "type": "number",
            "example": 1575.42
          },
          "centerFreq": {
            "format": "double",
            "description": "The detected signal frequency in megahertz.",
            "type": "number",
            "example": 1575.42
          },
          "detectLat": {
            "format": "double",
            "description": "WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 41.172
          },
          "detectLon": {
            "format": "double",
            "description": "WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 37.019
          },
          "detectAlt": {
            "format": "double",
            "description": "The altitude relative to WGS-84 ellipsoid, in meters.",
            "type": "number",
            "example": 123.456
          },
          "confSemiMajor": {
            "format": "double",
            "description": "Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.",
            "type": "number",
            "example": 9435.896
          },
          "confSemiMinor": {
            "format": "double",
            "description": "Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.",
            "type": "number",
            "example": 2751.929
          },
          "confOrientation": {
            "format": "double",
            "description": "Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.",
            "type": "number",
            "example": 89.852
          },
          "confArea": {
            "format": "double",
            "description": "The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.",
            "type": "number",
            "example": 81577480.056
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "MultiPolygon"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 3
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 3
          },
          "passGroupId": {
            "description": "Optional external identifier referencing the entity used in the calculation of the geolocation.",
            "maxLength": 36,
            "type": "string",
            "example": "80fd25a8-8b41-448d-888a-91c9dfcd940b"
          },
          "algVersion": {
            "description": "The RFGeo algorithm type and version used in geolocation calculations.",
            "maxLength": 36,
            "type": "string",
            "example": "v1.0-3-gps_nb_3ball"
          },
          "externalId": {
            "description": "Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "780180925"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "RFGeoLocation_Full": {
        "description": "Model representation of geolocation data for a radio frequency (RF) signal or emitter.",
        "required": [
          "classificationMarking",
          "orderId",
          "receivedTs",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "orderId": {
            "description": "The order identifier for this RF Geo Location data set.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "155240"
          },
          "createdTs": {
            "format": "date-time",
            "description": "Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2024-05-31T23:06:18.123456Z"
          },
          "receivedTs": {
            "format": "date-time",
            "description": "The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2024-05-31T21:16:58.123456Z"
          },
          "startTime": {
            "format": "date-time",
            "description": "The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2024-05-31T21:12:12.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2024-05-31T21:16:15.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "HawkEye360-7"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 101
          },
          "origObjectId": {
            "description": "Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "constellation": {
            "description": "The name of the satellite constellation.",
            "maxLength": 36,
            "type": "string",
            "example": "HawkEye360"
          },
          "signalOfInterest": {
            "description": "The name of the signal of interest.",
            "maxLength": 36,
            "type": "string",
            "example": "GPS"
          },
          "idRFEmitter": {
            "description": "Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "RFEMITTER-ID"
          },
          "origRFEmitterId": {
            "description": "Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGRFEMITTER-ID"
          },
          "numBursts": {
            "format": "int32",
            "description": "The count of single-burst observations used for this geolocation observation.",
            "type": "integer",
            "example": 17
          },
          "minFreq": {
            "format": "double",
            "description": "The minimum detected frequency in megahertz.",
            "type": "number",
            "example": 1575.42
          },
          "maxFreq": {
            "format": "double",
            "description": "The maximum detected frequency in megahertz.",
            "type": "number",
            "example": 1575.42
          },
          "centerFreq": {
            "format": "double",
            "description": "The detected signal frequency in megahertz.",
            "type": "number",
            "example": 1575.42
          },
          "detectLat": {
            "format": "double",
            "description": "WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 41.172
          },
          "detectLon": {
            "format": "double",
            "description": "WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 37.019
          },
          "detectAlt": {
            "format": "double",
            "description": "The altitude relative to WGS-84 ellipsoid, in meters.",
            "type": "number",
            "example": 123.456
          },
          "confSemiMajor": {
            "format": "double",
            "description": "Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.",
            "type": "number",
            "example": 9435.896
          },
          "confSemiMinor": {
            "format": "double",
            "description": "Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.",
            "type": "number",
            "example": 2751.929
          },
          "confOrientation": {
            "format": "double",
            "description": "Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.",
            "type": "number",
            "example": 89.852
          },
          "confArea": {
            "format": "double",
            "description": "The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.",
            "type": "number",
            "example": 81577480.056
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "MultiPolygon"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "area": {
            "description": "Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 3
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 3
          },
          "passGroupId": {
            "description": "Optional external identifier referencing the entity used in the calculation of the geolocation.",
            "maxLength": 36,
            "type": "string",
            "example": "80fd25a8-8b41-448d-888a-91c9dfcd940b"
          },
          "algVersion": {
            "description": "The RFGeo algorithm type and version used in geolocation calculations.",
            "maxLength": 36,
            "type": "string",
            "example": "v1.0-3-gps_nb_3ball"
          },
          "externalId": {
            "description": "Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "780180925"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          }
        }
      },
      "RFGeoLocation_Ingest": {
        "description": "Model representation of geolocation data for a radio frequency (RF) signal or emitter.",
        "required": [
          "classificationMarking",
          "orderId",
          "receivedTs",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "orderId": {
            "description": "The order identifier for this RF Geo Location data set.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "155240"
          },
          "createdTs": {
            "format": "date-time",
            "description": "Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2024-05-31T23:06:18.123456Z"
          },
          "receivedTs": {
            "format": "date-time",
            "description": "The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2024-05-31T21:16:58.123456Z"
          },
          "startTime": {
            "format": "date-time",
            "description": "The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2024-05-31T21:12:12.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2024-05-31T21:16:15.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "HawkEye360-7"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 101
          },
          "origObjectId": {
            "description": "Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "constellation": {
            "description": "The name of the satellite constellation.",
            "maxLength": 36,
            "type": "string",
            "example": "HawkEye360"
          },
          "signalOfInterest": {
            "description": "The name of the signal of interest.",
            "maxLength": 36,
            "type": "string",
            "example": "GPS"
          },
          "idRFEmitter": {
            "description": "Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "RFEMITTER-ID"
          },
          "origRFEmitterId": {
            "description": "Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGRFEMITTER-ID"
          },
          "numBursts": {
            "format": "int32",
            "description": "The count of single-burst observations used for this geolocation observation.",
            "type": "integer",
            "example": 17
          },
          "minFreq": {
            "format": "double",
            "description": "The minimum detected frequency in megahertz.",
            "type": "number",
            "example": 1575.42
          },
          "maxFreq": {
            "format": "double",
            "description": "The maximum detected frequency in megahertz.",
            "type": "number",
            "example": 1575.42
          },
          "centerFreq": {
            "format": "double",
            "description": "The detected signal frequency in megahertz.",
            "type": "number",
            "example": 1575.42
          },
          "detectLat": {
            "format": "double",
            "description": "WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 41.172
          },
          "detectLon": {
            "format": "double",
            "description": "WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 37.019
          },
          "detectAlt": {
            "format": "double",
            "description": "The altitude relative to WGS-84 ellipsoid, in meters.",
            "type": "number",
            "example": 123.456
          },
          "confSemiMajor": {
            "format": "double",
            "description": "Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.",
            "type": "number",
            "example": 9435.896
          },
          "confSemiMinor": {
            "format": "double",
            "description": "Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.",
            "type": "number",
            "example": 2751.929
          },
          "confOrientation": {
            "format": "double",
            "description": "Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.",
            "type": "number",
            "example": 89.852
          },
          "confArea": {
            "format": "double",
            "description": "The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.",
            "type": "number",
            "example": 81577480.056
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "MultiPolygon"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "area": {
            "description": "Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 3
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 3
          },
          "passGroupId": {
            "description": "Optional external identifier referencing the entity used in the calculation of the geolocation.",
            "maxLength": 36,
            "type": "string",
            "example": "80fd25a8-8b41-448d-888a-91c9dfcd940b"
          },
          "algVersion": {
            "description": "The RFGeo algorithm type and version used in geolocation calculations.",
            "maxLength": 36,
            "type": "string",
            "example": "v1.0-3-gps_nb_3ball"
          },
          "externalId": {
            "description": "Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "780180925"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "RouteStats_Abridged": {
        "description": "General statistics applying to navigation routes utilized by vessels, aircraft, ground vehicles, etc.",
        "required": [
          "classificationMarking",
          "locationStart",
          "locationEnd",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "0167f577-e06c-358e-85aa-0a07a730bdd0"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idSiteStart": {
            "description": "Unique identifier of the Site at the route's starting location. This ID can be used to obtain additional information on a Site using the 'get by ID' operation (e.g. /udl/site/{id}). For example, the Site object with idSite = abc would be queried as /udl/site/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "23370387-5e8e-4a74-89db-ad81145aa4df"
          },
          "idSiteEnd": {
            "description": "Unique identifier of the Site at the route's end location. This ID can be used to obtain additional information on a Site using the 'get by ID' operation (e.g. /udl/site/{id}). For example, the Site object with idSite = abc would be queried as /udl/site/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "77b5550c-c0f4-47bd-94ce-d71cdaa52f62"
          },
          "locationStart": {
            "description": "Starting location of the vehicle.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "KDEN"
          },
          "locationEnd": {
            "description": "End location of the vehicle.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "KCOS"
          },
          "locationType": {
            "description": "Type of location used for route start and end points (e.g., ICAO, PORT, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ICAO"
          },
          "distance": {
            "format": "double",
            "description": "Distance between the departure and arrival locations in the indicated unit of measurement, distUnit.",
            "type": "number",
            "example": 63.1
          },
          "distUnit": {
            "description": "The unit of measurement used for distance in this calculation.",
            "maxLength": 32,
            "type": "string",
            "example": "Nautical miles"
          },
          "vehicleCategory": {
            "description": "The vehicle category that is the subject of this calculation (e.g., AIRCRAFT, CAR, BOAT, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "AIRCRAFT"
          },
          "vehicleType": {
            "description": "The vehicle type that is the subject of this calculation (e.g., C-17, F-15, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "C-17"
          },
          "idealDuration": {
            "format": "double",
            "description": "Estimated ideal travel duration in hours for the full distance using the indicated vehicle type. The field \"idealDesc\" should be used to describe the ideal travel route.",
            "type": "number",
            "example": 45.1
          },
          "idealDesc": {
            "description": "Description of the portion of travel used to estimate the value of the idealDuration field.",
            "maxLength": 128,
            "type": "string",
            "example": "Block speed using great circle path"
          },
          "partialDuration": {
            "format": "double",
            "description": "Estimated ideal travel duration in hours for a partial distance using the indicated vehicle type. The field \"partialDesc\" should be used to specify the intended portion of travel.",
            "type": "number",
            "example": 38.1
          },
          "partialDesc": {
            "description": "Description of the portion of travel used to estimate the value of the partialDuration field.",
            "maxLength": 128,
            "type": "string",
            "example": "Performance speed using great circle path"
          },
          "avgDuration": {
            "format": "double",
            "description": "Average travel duration for the indicated distance and type of vehicle in hours.",
            "type": "number",
            "example": 47.1
          },
          "minDuration": {
            "format": "double",
            "description": "Minimum travel duration for the indicated distance and type of vehicle in hours.",
            "type": "number",
            "example": 42.1
          },
          "maxDuration": {
            "format": "double",
            "description": "Maximum travel duration for the indicated distance and type of vehicle in hours.",
            "type": "number",
            "example": 52.1
          },
          "avgSpeed": {
            "format": "double",
            "description": "Average speed during travel in the indicated unit of measurement, speedUnit.",
            "type": "number",
            "example": 450.1
          },
          "minSpeed": {
            "format": "double",
            "description": "Minimum speed during travel in the indicated unit of measurement, speedUnit.",
            "type": "number",
            "example": 420.1
          },
          "maxSpeed": {
            "format": "double",
            "description": "Maximum speed during travel in the indicated unit of measurement, speedUnit.",
            "type": "number",
            "example": 470.1
          },
          "speedUnit": {
            "description": "The unit of measurement used for speed in this calculation.",
            "maxLength": 32,
            "type": "string",
            "example": "knots"
          },
          "timePeriod": {
            "description": "The time period this data was collected.",
            "maxLength": 32,
            "type": "string",
            "example": "Q1"
          },
          "firstPt": {
            "format": "date-time",
            "description": "Date of the first data point used in this calculation, in ISO8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2024-01-01T16:00:00.123Z"
          },
          "lastPt": {
            "format": "date-time",
            "description": "Date of the last data point used in this calculation, in ISO8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2024-03-31T16:00:00.123Z"
          },
          "dataPtsUsed": {
            "format": "int32",
            "description": "The number of data points used in this travel duration calculation.",
            "type": "integer",
            "example": 6
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "RouteStats_Full": {
        "description": "General statistics applying to navigation routes utilized by vessels, aircraft, ground vehicles, etc.",
        "required": [
          "classificationMarking",
          "locationStart",
          "locationEnd",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "0167f577-e06c-358e-85aa-0a07a730bdd0"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idSiteStart": {
            "description": "Unique identifier of the Site at the route's starting location. This ID can be used to obtain additional information on a Site using the 'get by ID' operation (e.g. /udl/site/{id}). For example, the Site object with idSite = abc would be queried as /udl/site/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "23370387-5e8e-4a74-89db-ad81145aa4df"
          },
          "idSiteEnd": {
            "description": "Unique identifier of the Site at the route's end location. This ID can be used to obtain additional information on a Site using the 'get by ID' operation (e.g. /udl/site/{id}). For example, the Site object with idSite = abc would be queried as /udl/site/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "77b5550c-c0f4-47bd-94ce-d71cdaa52f62"
          },
          "locationStart": {
            "description": "Starting location of the vehicle.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "KDEN"
          },
          "locationEnd": {
            "description": "End location of the vehicle.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "KCOS"
          },
          "locationType": {
            "description": "Type of location used for route start and end points (e.g., ICAO, PORT, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ICAO"
          },
          "distance": {
            "format": "double",
            "description": "Distance between the departure and arrival locations in the indicated unit of measurement, distUnit.",
            "type": "number",
            "example": 63.1
          },
          "distUnit": {
            "description": "The unit of measurement used for distance in this calculation.",
            "maxLength": 32,
            "type": "string",
            "example": "Nautical miles"
          },
          "vehicleCategory": {
            "description": "The vehicle category that is the subject of this calculation (e.g., AIRCRAFT, CAR, BOAT, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "AIRCRAFT"
          },
          "vehicleType": {
            "description": "The vehicle type that is the subject of this calculation (e.g., C-17, F-15, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "C-17"
          },
          "idealDuration": {
            "format": "double",
            "description": "Estimated ideal travel duration in hours for the full distance using the indicated vehicle type. The field \"idealDesc\" should be used to describe the ideal travel route.",
            "type": "number",
            "example": 45.1
          },
          "idealDesc": {
            "description": "Description of the portion of travel used to estimate the value of the idealDuration field.",
            "maxLength": 128,
            "type": "string",
            "example": "Block speed using great circle path"
          },
          "partialDuration": {
            "format": "double",
            "description": "Estimated ideal travel duration in hours for a partial distance using the indicated vehicle type. The field \"partialDesc\" should be used to specify the intended portion of travel.",
            "type": "number",
            "example": 38.1
          },
          "partialDesc": {
            "description": "Description of the portion of travel used to estimate the value of the partialDuration field.",
            "maxLength": 128,
            "type": "string",
            "example": "Performance speed using great circle path"
          },
          "avgDuration": {
            "format": "double",
            "description": "Average travel duration for the indicated distance and type of vehicle in hours.",
            "type": "number",
            "example": 47.1
          },
          "minDuration": {
            "format": "double",
            "description": "Minimum travel duration for the indicated distance and type of vehicle in hours.",
            "type": "number",
            "example": 42.1
          },
          "maxDuration": {
            "format": "double",
            "description": "Maximum travel duration for the indicated distance and type of vehicle in hours.",
            "type": "number",
            "example": 52.1
          },
          "avgSpeed": {
            "format": "double",
            "description": "Average speed during travel in the indicated unit of measurement, speedUnit.",
            "type": "number",
            "example": 450.1
          },
          "minSpeed": {
            "format": "double",
            "description": "Minimum speed during travel in the indicated unit of measurement, speedUnit.",
            "type": "number",
            "example": 420.1
          },
          "maxSpeed": {
            "format": "double",
            "description": "Maximum speed during travel in the indicated unit of measurement, speedUnit.",
            "type": "number",
            "example": 470.1
          },
          "speedUnit": {
            "description": "The unit of measurement used for speed in this calculation.",
            "maxLength": 32,
            "type": "string",
            "example": "knots"
          },
          "timePeriod": {
            "description": "The time period this data was collected.",
            "maxLength": 32,
            "type": "string",
            "example": "Q1"
          },
          "firstPt": {
            "format": "date-time",
            "description": "Date of the first data point used in this calculation, in ISO8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2024-01-01T16:00:00.123Z"
          },
          "lastPt": {
            "format": "date-time",
            "description": "Date of the last data point used in this calculation, in ISO8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2024-03-31T16:00:00.123Z"
          },
          "dataPtsUsed": {
            "format": "int32",
            "description": "The number of data points used in this travel duration calculation.",
            "type": "integer",
            "example": 6
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "RouteStats_Ingest": {
        "description": "General statistics applying to navigation routes utilized by vessels, aircraft, ground vehicles, etc.",
        "required": [
          "classificationMarking",
          "locationStart",
          "locationEnd",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "0167f577-e06c-358e-85aa-0a07a730bdd0"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idSiteStart": {
            "description": "Unique identifier of the Site at the route's starting location. This ID can be used to obtain additional information on a Site using the 'get by ID' operation (e.g. /udl/site/{id}). For example, the Site object with idSite = abc would be queried as /udl/site/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "23370387-5e8e-4a74-89db-ad81145aa4df"
          },
          "idSiteEnd": {
            "description": "Unique identifier of the Site at the route's end location. This ID can be used to obtain additional information on a Site using the 'get by ID' operation (e.g. /udl/site/{id}). For example, the Site object with idSite = abc would be queried as /udl/site/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "77b5550c-c0f4-47bd-94ce-d71cdaa52f62"
          },
          "locationStart": {
            "description": "Starting location of the vehicle.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "KDEN"
          },
          "locationEnd": {
            "description": "End location of the vehicle.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "KCOS"
          },
          "locationType": {
            "description": "Type of location used for route start and end points (e.g., ICAO, PORT, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "ICAO"
          },
          "distance": {
            "format": "double",
            "description": "Distance between the departure and arrival locations in the indicated unit of measurement, distUnit.",
            "type": "number",
            "example": 63.1
          },
          "distUnit": {
            "description": "The unit of measurement used for distance in this calculation.",
            "maxLength": 32,
            "type": "string",
            "example": "Nautical miles"
          },
          "vehicleCategory": {
            "description": "The vehicle category that is the subject of this calculation (e.g., AIRCRAFT, CAR, BOAT, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "AIRCRAFT"
          },
          "vehicleType": {
            "description": "The vehicle type that is the subject of this calculation (e.g., C-17, F-15, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "C-17"
          },
          "idealDuration": {
            "format": "double",
            "description": "Estimated ideal travel duration in hours for the full distance using the indicated vehicle type. The field \"idealDesc\" should be used to describe the ideal travel route.",
            "type": "number",
            "example": 45.1
          },
          "idealDesc": {
            "description": "Description of the portion of travel used to estimate the value of the idealDuration field.",
            "maxLength": 128,
            "type": "string",
            "example": "Block speed using great circle path"
          },
          "partialDuration": {
            "format": "double",
            "description": "Estimated ideal travel duration in hours for a partial distance using the indicated vehicle type. The field \"partialDesc\" should be used to specify the intended portion of travel.",
            "type": "number",
            "example": 38.1
          },
          "partialDesc": {
            "description": "Description of the portion of travel used to estimate the value of the partialDuration field.",
            "maxLength": 128,
            "type": "string",
            "example": "Performance speed using great circle path"
          },
          "avgDuration": {
            "format": "double",
            "description": "Average travel duration for the indicated distance and type of vehicle in hours.",
            "type": "number",
            "example": 47.1
          },
          "minDuration": {
            "format": "double",
            "description": "Minimum travel duration for the indicated distance and type of vehicle in hours.",
            "type": "number",
            "example": 42.1
          },
          "maxDuration": {
            "format": "double",
            "description": "Maximum travel duration for the indicated distance and type of vehicle in hours.",
            "type": "number",
            "example": 52.1
          },
          "avgSpeed": {
            "format": "double",
            "description": "Average speed during travel in the indicated unit of measurement, speedUnit.",
            "type": "number",
            "example": 450.1
          },
          "minSpeed": {
            "format": "double",
            "description": "Minimum speed during travel in the indicated unit of measurement, speedUnit.",
            "type": "number",
            "example": 420.1
          },
          "maxSpeed": {
            "format": "double",
            "description": "Maximum speed during travel in the indicated unit of measurement, speedUnit.",
            "type": "number",
            "example": 470.1
          },
          "speedUnit": {
            "description": "The unit of measurement used for speed in this calculation.",
            "maxLength": 32,
            "type": "string",
            "example": "knots"
          },
          "timePeriod": {
            "description": "The time period this data was collected.",
            "maxLength": 32,
            "type": "string",
            "example": "Q1"
          },
          "firstPt": {
            "format": "date-time",
            "description": "Date of the first data point used in this calculation, in ISO8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2024-01-01T16:00:00.123Z"
          },
          "lastPt": {
            "format": "date-time",
            "description": "Date of the last data point used in this calculation, in ISO8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2024-03-31T16:00:00.123Z"
          },
          "dataPtsUsed": {
            "format": "int32",
            "description": "The number of data points used in this travel duration calculation.",
            "type": "integer",
            "example": 6
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "SigAct_Abridged": {
        "description": "Provides information on the dates, actors, locations, fatalities, and types of all reported political violence and protest events across the world.",
        "required": [
          "classificationMarking",
          "reportDate",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SIGACT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "sourceLanguage": {
            "description": "The source language of the significant event using the ISO 639-3, 3 character code definition.",
            "maxLength": 4,
            "type": "string",
            "example": "eng"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "city": {
            "description": "The city in or near which this event occurred.",
            "maxLength": 128,
            "type": "string",
            "example": "Austin"
          },
          "district": {
            "description": "The district in which this event occurred.",
            "maxLength": 128,
            "type": "string",
            "example": "district 12"
          },
          "province": {
            "description": "The province in which this event occurred.",
            "maxLength": 128,
            "type": "string",
            "example": "Province_Example"
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 centroid latitude of the event location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.31
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 centroid longitude of the event location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 90.23
          },
          "milgrid": {
            "description": "The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:\n\n&nbsp;&nbsp;4Q (grid zone designator, GZD)\n\n&nbsp;&nbsp;FJ (the 100,000-meter square identifier)\n\n&nbsp;&nbsp;12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).",
            "maxLength": 128,
            "type": "string",
            "example": "4QFJ12345678"
          },
          "theater": {
            "description": "Area in which important military events occur or are progressing.  A theater can include the entirety of the airspace, land and sea area that is or that may potentially become involved in war operations.",
            "maxLength": 128,
            "type": "string",
            "example": "Kabul"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "maxLength": 512,
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "maxLength": 512,
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "Type1"
          },
          "andims": {
            "format": "int16",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 3
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 3
          },
          "eventStart": {
            "format": "date-time",
            "description": "The approximate start time of the event, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:03.123Z"
          },
          "eventEnd": {
            "format": "date-time",
            "description": "The approximate end time of the event, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:03.123Z"
          },
          "reportDate": {
            "format": "date-time",
            "description": "Date of the report or filing.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "actors": {
            "description": "A list of one or more actors involved in the event.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "US",
              "CAN"
            ]
          },
          "civAbd": {
            "format": "int32",
            "description": "Number of civilians abducted in the activity.",
            "type": "integer",
            "example": 423
          },
          "civDet": {
            "format": "int32",
            "description": "Number of civilians detained in the activity.",
            "type": "integer",
            "example": 234
          },
          "civKIA": {
            "format": "int32",
            "description": "Number of civilians killed in the activity.",
            "type": "integer",
            "example": 2
          },
          "civWound": {
            "format": "int32",
            "description": "Number of civilians wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "coalAbd": {
            "format": "int32",
            "description": "Number of coalition members abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "coalDet": {
            "format": "int32",
            "description": "Number of coalition members detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "coalKIA": {
            "format": "int32",
            "description": "Number of coalition members killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "coalWound": {
            "format": "int32",
            "description": "Number of coalition members wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "enemyAbd": {
            "format": "int32",
            "description": "Number of enemy combatants abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "enemyDet": {
            "format": "int32",
            "description": "Number of enemy combatants detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "enemyKIA": {
            "format": "int32",
            "description": "Number of enemy combatants killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "friendlyAbd": {
            "format": "int32",
            "description": "Number of friendlies abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "friendlyDet": {
            "format": "int32",
            "description": "Number of friendlies in the activity.",
            "type": "integer",
            "example": 123
          },
          "friendlyKIA": {
            "format": "int32",
            "description": "Number of friendlies killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "friendlyWound": {
            "format": "int32",
            "description": "Number of friendlies wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "hostNatAbd": {
            "format": "int32",
            "description": "Number of Host Nation members abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "hostNatDet": {
            "format": "int32",
            "description": "Number of Host Nation members detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "hostNatKIA": {
            "format": "int32",
            "description": "Number of Host Nation members killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "hostNatWound": {
            "format": "int32",
            "description": "Number of Host Nation members wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideAAbd": {
            "format": "int32",
            "description": "Number of side A members abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideADet": {
            "format": "int32",
            "description": "Number of side A members detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideAKIA": {
            "format": "int32",
            "description": "Number of side A members killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideAWound": {
            "format": "int32",
            "description": "Number of side A members wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideBAbd": {
            "format": "int32",
            "description": "Number of side B members abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideBDet": {
            "format": "int32",
            "description": "Number of side B members detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideBKIA": {
            "format": "int32",
            "description": "Number of side B members killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideBWound": {
            "format": "int32",
            "description": "Number of side B members wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "target": {
            "description": "The name of the target.  The target may be an individual, an entity, or a country/region.",
            "maxLength": 64,
            "type": "string",
            "example": "US"
          },
          "eventDescription": {
            "description": "A description of the event.",
            "maxLength": 4096,
            "type": "string",
            "example": "Example_Description"
          },
          "eventType": {
            "description": "The type of event (e.g.  Military, Natural, Political, Social, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Military"
          },
          "typeOfAttack": {
            "description": "The mode of this attack or event (e.g. Direct Fire, IED Explosion, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "IED Explosion"
          },
          "complexAttack": {
            "description": "Flag indicating that this attack was of a complex or coordinated nature.",
            "type": "boolean",
            "example": false
          },
          "idNumber": {
            "description": "Unique identifier assigned to each event record that uniquely identifies it in the master dataset.  This ID is provided for convenience of mapping to external systems.",
            "maxLength": 64,
            "type": "string",
            "example": "NUMBER-ID"
          },
          "confidence": {
            "format": "int32",
            "description": "Estimate of the confidence that this event occurred.",
            "type": "integer",
            "example": 13
          },
          "accuracy": {
            "format": "int32",
            "description": "Estimate of the accuracy that this event occurred as described/reported.",
            "type": "integer",
            "example": 13
          },
          "clarity": {
            "format": "int32",
            "description": "1 (high) for events where the reporting allows the coder to identify the event in full. That is, events where the individual happening is described by the original source in a sufficiently detailed way as to identify individual incidents, i.e. separate activities of fighting in a single location:\n\n2 (lower) for events where an aggregation of information was already made by the source material that is impossible to undo in the coding process. Such events are described by the original source only as aggregates (totals) of multiple separate activities of fighting spanning over a longer period than a single, clearly defined day.",
            "type": "integer",
            "example": 1
          },
          "cameoCode": {
            "description": "This is the raw CAMEO action code describing the action that Actor1 performed upon Actor2.  Additional information about Cameo Codes can be obtained from the GDELT project documentation here: https://www.gdeltproject.org/data.html#documentation.",
            "maxLength": 32,
            "type": "string",
            "example": "CAMEO_CODE"
          },
          "cameoBaseCode": {
            "description": "CAMEO event codes are defined in a three-level taxonomy. For events at level three in the taxonomy, this yields its level two leaf root node. For example, code 0251 (Appeal for easing of administrative sanctions) would yield an EventBaseCode of 025 (Appeal to yield). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.",
            "maxLength": 32,
            "type": "string",
            "example": "Example_cameoBaseCode"
          },
          "cameoRootCode": {
            "description": "Similar to EventBaseCode, this defines the root-level category the event code falls under. For example, code 0251 (Appeal for easing of administrative sanctions) has a root code of 02 (Appeal). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.",
            "maxLength": 32,
            "type": "string",
            "example": "Example_cameoRootCode"
          },
          "goldstein": {
            "format": "double",
            "description": "Each CAMEO event code is assigned a numeric score from -10 to +10, capturing the theoretical potential impact that type of event will have on the stability of a country. This is known as the Goldstein Scale. NOTE: this score is based on the type of event, not the specifics of the actual event record being recorded  thus two riots, one with 10 people and one with 10,000, will both receive the same Goldstein score. This can be aggregated to various levels of time resolution to yield an approximation of the stability of a location over time.",
            "type": "number",
            "example": 9.32
          },
          "documentSource": {
            "description": "The source of the document or report.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_documentSource"
          },
          "documentFilename": {
            "description": "The filename of the document or report.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_documentFilename"
          },
          "hasAttachment": {
            "description": "Flag indicating this SigAct record has an associated txt file stored in the UDL. Retrieve the txt file by using the GET/udl/sigact/getFile/{id} where id is the same as the SigAct record id. The maximum file size for this service is 10,000,000 bytes (10MB). Files exceeding the maximum size will be rejected.",
            "type": "boolean",
            "example": true
          },
          "filesize": {
            "format": "int64",
            "description": "Size of the associated text file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.",
            "type": "integer",
            "example": 0
          },
          "checksumValue": {
            "description": "MD5 value of the file. The ingest/create operation will automatically generate the value.",
            "maxLength": 256,
            "type": "string",
            "example": "120EA8A25E5D487BF68B5F7096440019"
          },
          "repUnit": {
            "description": "The reporting unit.",
            "maxLength": 128,
            "type": "string",
            "example": "Unit_1"
          },
          "repUnitType": {
            "description": "The reporting unit type.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_repUnitType"
          },
          "repUnitActivity": {
            "description": "The activity the unit was engaged in.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_Activity"
          },
          "numMentions": {
            "format": "int32",
            "description": "This is the total number of mentions of this event across all source documents during the 15 minute update in which it was first seen. Multiple references to an event within a single document also contribute to this count. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.",
            "type": "integer",
            "example": 8
          },
          "numSources": {
            "format": "int32",
            "description": "This is the total number of information sources containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.",
            "type": "integer",
            "example": 8
          },
          "numArticles": {
            "format": "int32",
            "description": "This is the total number of source documents containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.",
            "type": "integer",
            "example": 8
          },
          "avgTone": {
            "format": "double",
            "description": "This is the average tone of all documents containing one or more mentions of this event during the 15 minute update in which it was first seen. The score ranges from -100 (extremely negative) to +100 (extremely positive). Common values range between -10 and +10, with 0 indicating neutral.",
            "type": "number",
            "example": 8.23
          },
          "sourceUrl": {
            "description": "This field records the URL or citation of the first news report it found this event in. In most cases this is the first report it saw the article in, but due to the timing and flow of news reports through the processing pipeline, this may not always be the very first report, but is at least in the first few reports.",
            "maxLength": 256,
            "type": "string",
            "example": "Example_URL"
          },
          "relatedDocs": {
            "description": "Related document ids.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedDocument_Abridged"
            }
          },
          "summary": {
            "description": "A summary of the event.",
            "maxLength": 4096,
            "type": "string",
            "example": "Example_Summary"
          },
          "notes": {
            "description": "Notes related to the documents or event.",
            "maxLength": 4096,
            "type": "string",
            "example": "Example_Notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "SigAct_Full": {
        "description": "Provides information on the dates, actors, locations, fatalities, and types of all reported political violence and protest events across the world.",
        "required": [
          "classificationMarking",
          "reportDate",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SIGACT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "sourceLanguage": {
            "description": "The source language of the significant event using the ISO 639-3, 3 character code definition.",
            "maxLength": 4,
            "type": "string",
            "example": "eng"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "city": {
            "description": "The city in or near which this event occurred.",
            "maxLength": 128,
            "type": "string",
            "example": "Austin"
          },
          "district": {
            "description": "The district in which this event occurred.",
            "maxLength": 128,
            "type": "string",
            "example": "district 12"
          },
          "province": {
            "description": "The province in which this event occurred.",
            "maxLength": 128,
            "type": "string",
            "example": "Province_Example"
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 centroid latitude of the event location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.31
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 centroid longitude of the event location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 90.23
          },
          "milgrid": {
            "description": "The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:\n\n&nbsp;&nbsp;4Q (grid zone designator, GZD)\n\n&nbsp;&nbsp;FJ (the 100,000-meter square identifier)\n\n&nbsp;&nbsp;12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).",
            "maxLength": 128,
            "type": "string",
            "example": "4QFJ12345678"
          },
          "theater": {
            "description": "Area in which important military events occur or are progressing.  A theater can include the entirety of the airspace, land and sea area that is or that may potentially become involved in war operations.",
            "maxLength": 128,
            "type": "string",
            "example": "Kabul"
          },
          "area": {
            "description": "Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.",
            "maxLength": 512,
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "maxLength": 512,
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "maxLength": 512,
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "Type1"
          },
          "andims": {
            "format": "int16",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 3
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 3
          },
          "eventStart": {
            "format": "date-time",
            "description": "The approximate start time of the event, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:03.123Z"
          },
          "eventEnd": {
            "format": "date-time",
            "description": "The approximate end time of the event, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:03.123Z"
          },
          "reportDate": {
            "format": "date-time",
            "description": "Date of the report or filing.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "actors": {
            "description": "A list of one or more actors involved in the event.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "US",
              "CAN"
            ]
          },
          "civAbd": {
            "format": "int32",
            "description": "Number of civilians abducted in the activity.",
            "type": "integer",
            "example": 423
          },
          "civDet": {
            "format": "int32",
            "description": "Number of civilians detained in the activity.",
            "type": "integer",
            "example": 234
          },
          "civKIA": {
            "format": "int32",
            "description": "Number of civilians killed in the activity.",
            "type": "integer",
            "example": 2
          },
          "civWound": {
            "format": "int32",
            "description": "Number of civilians wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "coalAbd": {
            "format": "int32",
            "description": "Number of coalition members abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "coalDet": {
            "format": "int32",
            "description": "Number of coalition members detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "coalKIA": {
            "format": "int32",
            "description": "Number of coalition members killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "coalWound": {
            "format": "int32",
            "description": "Number of coalition members wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "enemyAbd": {
            "format": "int32",
            "description": "Number of enemy combatants abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "enemyDet": {
            "format": "int32",
            "description": "Number of enemy combatants detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "enemyKIA": {
            "format": "int32",
            "description": "Number of enemy combatants killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "friendlyAbd": {
            "format": "int32",
            "description": "Number of friendlies abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "friendlyDet": {
            "format": "int32",
            "description": "Number of friendlies in the activity.",
            "type": "integer",
            "example": 123
          },
          "friendlyKIA": {
            "format": "int32",
            "description": "Number of friendlies killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "friendlyWound": {
            "format": "int32",
            "description": "Number of friendlies wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "hostNatAbd": {
            "format": "int32",
            "description": "Number of Host Nation members abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "hostNatDet": {
            "format": "int32",
            "description": "Number of Host Nation members detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "hostNatKIA": {
            "format": "int32",
            "description": "Number of Host Nation members killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "hostNatWound": {
            "format": "int32",
            "description": "Number of Host Nation members wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideAAbd": {
            "format": "int32",
            "description": "Number of side A members abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideADet": {
            "format": "int32",
            "description": "Number of side A members detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideAKIA": {
            "format": "int32",
            "description": "Number of side A members killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideAWound": {
            "format": "int32",
            "description": "Number of side A members wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideBAbd": {
            "format": "int32",
            "description": "Number of side B members abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideBDet": {
            "format": "int32",
            "description": "Number of side B members detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideBKIA": {
            "format": "int32",
            "description": "Number of side B members killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideBWound": {
            "format": "int32",
            "description": "Number of side B members wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "target": {
            "description": "The name of the target.  The target may be an individual, an entity, or a country/region.",
            "maxLength": 64,
            "type": "string",
            "example": "US"
          },
          "eventDescription": {
            "description": "A description of the event.",
            "maxLength": 4096,
            "type": "string",
            "example": "Example_Description"
          },
          "eventType": {
            "description": "The type of event (e.g.  Military, Natural, Political, Social, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Military"
          },
          "typeOfAttack": {
            "description": "The mode of this attack or event (e.g. Direct Fire, IED Explosion, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "IED Explosion"
          },
          "complexAttack": {
            "description": "Flag indicating that this attack was of a complex or coordinated nature.",
            "type": "boolean",
            "example": false
          },
          "idNumber": {
            "description": "Unique identifier assigned to each event record that uniquely identifies it in the master dataset.  This ID is provided for convenience of mapping to external systems.",
            "maxLength": 64,
            "type": "string",
            "example": "NUMBER-ID"
          },
          "confidence": {
            "format": "int32",
            "description": "Estimate of the confidence that this event occurred.",
            "type": "integer",
            "example": 13
          },
          "accuracy": {
            "format": "int32",
            "description": "Estimate of the accuracy that this event occurred as described/reported.",
            "type": "integer",
            "example": 13
          },
          "clarity": {
            "format": "int32",
            "description": "1 (high) for events where the reporting allows the coder to identify the event in full. That is, events where the individual happening is described by the original source in a sufficiently detailed way as to identify individual incidents, i.e. separate activities of fighting in a single location:\n\n2 (lower) for events where an aggregation of information was already made by the source material that is impossible to undo in the coding process. Such events are described by the original source only as aggregates (totals) of multiple separate activities of fighting spanning over a longer period than a single, clearly defined day.",
            "type": "integer",
            "example": 1
          },
          "cameoCode": {
            "description": "This is the raw CAMEO action code describing the action that Actor1 performed upon Actor2.  Additional information about Cameo Codes can be obtained from the GDELT project documentation here: https://www.gdeltproject.org/data.html#documentation.",
            "maxLength": 32,
            "type": "string",
            "example": "CAMEO_CODE"
          },
          "cameoBaseCode": {
            "description": "CAMEO event codes are defined in a three-level taxonomy. For events at level three in the taxonomy, this yields its level two leaf root node. For example, code 0251 (Appeal for easing of administrative sanctions) would yield an EventBaseCode of 025 (Appeal to yield). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.",
            "maxLength": 32,
            "type": "string",
            "example": "Example_cameoBaseCode"
          },
          "cameoRootCode": {
            "description": "Similar to EventBaseCode, this defines the root-level category the event code falls under. For example, code 0251 (Appeal for easing of administrative sanctions) has a root code of 02 (Appeal). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.",
            "maxLength": 32,
            "type": "string",
            "example": "Example_cameoRootCode"
          },
          "goldstein": {
            "format": "double",
            "description": "Each CAMEO event code is assigned a numeric score from -10 to +10, capturing the theoretical potential impact that type of event will have on the stability of a country. This is known as the Goldstein Scale. NOTE: this score is based on the type of event, not the specifics of the actual event record being recorded  thus two riots, one with 10 people and one with 10,000, will both receive the same Goldstein score. This can be aggregated to various levels of time resolution to yield an approximation of the stability of a location over time.",
            "type": "number",
            "example": 9.32
          },
          "documentSource": {
            "description": "The source of the document or report.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_documentSource"
          },
          "documentFilename": {
            "description": "The filename of the document or report.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_documentFilename"
          },
          "hasAttachment": {
            "description": "Flag indicating this SigAct record has an associated txt file stored in the UDL. Retrieve the txt file by using the GET/udl/sigact/getFile/{id} where id is the same as the SigAct record id. The maximum file size for this service is 10,000,000 bytes (10MB). Files exceeding the maximum size will be rejected.",
            "type": "boolean",
            "example": true
          },
          "filesize": {
            "format": "int64",
            "description": "Size of the associated text file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.",
            "type": "integer",
            "example": 0
          },
          "checksumValue": {
            "description": "MD5 value of the file. The ingest/create operation will automatically generate the value.",
            "maxLength": 256,
            "type": "string",
            "example": "120EA8A25E5D487BF68B5F7096440019"
          },
          "repUnit": {
            "description": "The reporting unit.",
            "maxLength": 128,
            "type": "string",
            "example": "Unit_1"
          },
          "repUnitType": {
            "description": "The reporting unit type.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_repUnitType"
          },
          "repUnitActivity": {
            "description": "The activity the unit was engaged in.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_Activity"
          },
          "numMentions": {
            "format": "int32",
            "description": "This is the total number of mentions of this event across all source documents during the 15 minute update in which it was first seen. Multiple references to an event within a single document also contribute to this count. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.",
            "type": "integer",
            "example": 8
          },
          "numSources": {
            "format": "int32",
            "description": "This is the total number of information sources containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.",
            "type": "integer",
            "example": 8
          },
          "numArticles": {
            "format": "int32",
            "description": "This is the total number of source documents containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.",
            "type": "integer",
            "example": 8
          },
          "avgTone": {
            "format": "double",
            "description": "This is the average tone of all documents containing one or more mentions of this event during the 15 minute update in which it was first seen. The score ranges from -100 (extremely negative) to +100 (extremely positive). Common values range between -10 and +10, with 0 indicating neutral.",
            "type": "number",
            "example": 8.23
          },
          "sourceUrl": {
            "description": "This field records the URL or citation of the first news report it found this event in. In most cases this is the first report it saw the article in, but due to the timing and flow of news reports through the processing pipeline, this may not always be the very first report, but is at least in the first few reports.",
            "maxLength": 256,
            "type": "string",
            "example": "Example_URL"
          },
          "relatedDocs": {
            "description": "Related document ids.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedDocument_Full"
            }
          },
          "summary": {
            "description": "A summary of the event.",
            "maxLength": 4096,
            "type": "string",
            "example": "Example_Summary"
          },
          "notes": {
            "description": "Notes related to the documents or event.",
            "maxLength": 4096,
            "type": "string",
            "example": "Example_Notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "SigAct_Ingest": {
        "description": "Provides information on the dates, actors, locations, fatalities, and types of all reported political violence and protest events across the world.",
        "required": [
          "classificationMarking",
          "reportDate",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SIGACT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "sourceLanguage": {
            "description": "The source language of the significant event using the ISO 639-3, 3 character code definition.",
            "maxLength": 4,
            "type": "string",
            "example": "eng"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "city": {
            "description": "The city in or near which this event occurred.",
            "maxLength": 128,
            "type": "string",
            "example": "Austin"
          },
          "district": {
            "description": "The district in which this event occurred.",
            "maxLength": 128,
            "type": "string",
            "example": "district 12"
          },
          "province": {
            "description": "The province in which this event occurred.",
            "maxLength": 128,
            "type": "string",
            "example": "Province_Example"
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 centroid latitude of the event location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.31
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 centroid longitude of the event location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 90.23
          },
          "milgrid": {
            "description": "The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:\n\n&nbsp;&nbsp;4Q (grid zone designator, GZD)\n\n&nbsp;&nbsp;FJ (the 100,000-meter square identifier)\n\n&nbsp;&nbsp;12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).",
            "maxLength": 128,
            "type": "string",
            "example": "4QFJ12345678"
          },
          "theater": {
            "description": "Area in which important military events occur or are progressing.  A theater can include the entirety of the airspace, land and sea area that is or that may potentially become involved in war operations.",
            "maxLength": 128,
            "type": "string",
            "example": "Kabul"
          },
          "area": {
            "description": "Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.",
            "maxLength": 512,
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "maxLength": 512,
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "maxLength": 512,
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "Type1"
          },
          "andims": {
            "format": "int16",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 3
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 3
          },
          "eventStart": {
            "format": "date-time",
            "description": "The approximate start time of the event, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:03.123Z"
          },
          "eventEnd": {
            "format": "date-time",
            "description": "The approximate end time of the event, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:03.123Z"
          },
          "reportDate": {
            "format": "date-time",
            "description": "Date of the report or filing.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "actors": {
            "description": "A list of one or more actors involved in the event.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "US",
              "CAN"
            ]
          },
          "civAbd": {
            "format": "int32",
            "description": "Number of civilians abducted in the activity.",
            "type": "integer",
            "example": 423
          },
          "civDet": {
            "format": "int32",
            "description": "Number of civilians detained in the activity.",
            "type": "integer",
            "example": 234
          },
          "civKIA": {
            "format": "int32",
            "description": "Number of civilians killed in the activity.",
            "type": "integer",
            "example": 2
          },
          "civWound": {
            "format": "int32",
            "description": "Number of civilians wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "coalAbd": {
            "format": "int32",
            "description": "Number of coalition members abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "coalDet": {
            "format": "int32",
            "description": "Number of coalition members detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "coalKIA": {
            "format": "int32",
            "description": "Number of coalition members killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "coalWound": {
            "format": "int32",
            "description": "Number of coalition members wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "enemyAbd": {
            "format": "int32",
            "description": "Number of enemy combatants abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "enemyDet": {
            "format": "int32",
            "description": "Number of enemy combatants detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "enemyKIA": {
            "format": "int32",
            "description": "Number of enemy combatants killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "friendlyAbd": {
            "format": "int32",
            "description": "Number of friendlies abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "friendlyDet": {
            "format": "int32",
            "description": "Number of friendlies in the activity.",
            "type": "integer",
            "example": 123
          },
          "friendlyKIA": {
            "format": "int32",
            "description": "Number of friendlies killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "friendlyWound": {
            "format": "int32",
            "description": "Number of friendlies wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "hostNatAbd": {
            "format": "int32",
            "description": "Number of Host Nation members abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "hostNatDet": {
            "format": "int32",
            "description": "Number of Host Nation members detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "hostNatKIA": {
            "format": "int32",
            "description": "Number of Host Nation members killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "hostNatWound": {
            "format": "int32",
            "description": "Number of Host Nation members wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideAAbd": {
            "format": "int32",
            "description": "Number of side A members abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideADet": {
            "format": "int32",
            "description": "Number of side A members detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideAKIA": {
            "format": "int32",
            "description": "Number of side A members killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideAWound": {
            "format": "int32",
            "description": "Number of side A members wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideBAbd": {
            "format": "int32",
            "description": "Number of side B members abducted in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideBDet": {
            "format": "int32",
            "description": "Number of side B members detained in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideBKIA": {
            "format": "int32",
            "description": "Number of side B members killed in the activity.",
            "type": "integer",
            "example": 123
          },
          "sideBWound": {
            "format": "int32",
            "description": "Number of side B members wounded in the activity.",
            "type": "integer",
            "example": 123
          },
          "target": {
            "description": "The name of the target.  The target may be an individual, an entity, or a country/region.",
            "maxLength": 64,
            "type": "string",
            "example": "US"
          },
          "eventDescription": {
            "description": "A description of the event.",
            "maxLength": 4096,
            "type": "string",
            "example": "Example_Description"
          },
          "eventType": {
            "description": "The type of event (e.g.  Military, Natural, Political, Social, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Military"
          },
          "typeOfAttack": {
            "description": "The mode of this attack or event (e.g. Direct Fire, IED Explosion, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "IED Explosion"
          },
          "complexAttack": {
            "description": "Flag indicating that this attack was of a complex or coordinated nature.",
            "type": "boolean",
            "example": false
          },
          "idNumber": {
            "description": "Unique identifier assigned to each event record that uniquely identifies it in the master dataset.  This ID is provided for convenience of mapping to external systems.",
            "maxLength": 64,
            "type": "string",
            "example": "NUMBER-ID"
          },
          "confidence": {
            "format": "int32",
            "description": "Estimate of the confidence that this event occurred.",
            "type": "integer",
            "example": 13
          },
          "accuracy": {
            "format": "int32",
            "description": "Estimate of the accuracy that this event occurred as described/reported.",
            "type": "integer",
            "example": 13
          },
          "clarity": {
            "format": "int32",
            "description": "1 (high) for events where the reporting allows the coder to identify the event in full. That is, events where the individual happening is described by the original source in a sufficiently detailed way as to identify individual incidents, i.e. separate activities of fighting in a single location:\n\n2 (lower) for events where an aggregation of information was already made by the source material that is impossible to undo in the coding process. Such events are described by the original source only as aggregates (totals) of multiple separate activities of fighting spanning over a longer period than a single, clearly defined day.",
            "type": "integer",
            "example": 1
          },
          "cameoCode": {
            "description": "This is the raw CAMEO action code describing the action that Actor1 performed upon Actor2.  Additional information about Cameo Codes can be obtained from the GDELT project documentation here: https://www.gdeltproject.org/data.html#documentation.",
            "maxLength": 32,
            "type": "string",
            "example": "CAMEO_CODE"
          },
          "cameoBaseCode": {
            "description": "CAMEO event codes are defined in a three-level taxonomy. For events at level three in the taxonomy, this yields its level two leaf root node. For example, code 0251 (Appeal for easing of administrative sanctions) would yield an EventBaseCode of 025 (Appeal to yield). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.",
            "maxLength": 32,
            "type": "string",
            "example": "Example_cameoBaseCode"
          },
          "cameoRootCode": {
            "description": "Similar to EventBaseCode, this defines the root-level category the event code falls under. For example, code 0251 (Appeal for easing of administrative sanctions) has a root code of 02 (Appeal). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.",
            "maxLength": 32,
            "type": "string",
            "example": "Example_cameoRootCode"
          },
          "goldstein": {
            "format": "double",
            "description": "Each CAMEO event code is assigned a numeric score from -10 to +10, capturing the theoretical potential impact that type of event will have on the stability of a country. This is known as the Goldstein Scale. NOTE: this score is based on the type of event, not the specifics of the actual event record being recorded  thus two riots, one with 10 people and one with 10,000, will both receive the same Goldstein score. This can be aggregated to various levels of time resolution to yield an approximation of the stability of a location over time.",
            "type": "number",
            "example": 9.32
          },
          "documentSource": {
            "description": "The source of the document or report.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_documentSource"
          },
          "documentFilename": {
            "description": "The filename of the document or report.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_documentFilename"
          },
          "hasAttachment": {
            "description": "Flag indicating this SigAct record has an associated txt file stored in the UDL. Retrieve the txt file by using the GET/udl/sigact/getFile/{id} where id is the same as the SigAct record id. The maximum file size for this service is 10,000,000 bytes (10MB). Files exceeding the maximum size will be rejected.",
            "type": "boolean",
            "example": true
          },
          "filesize": {
            "format": "int64",
            "description": "Size of the associated text file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.",
            "type": "integer",
            "example": 0
          },
          "checksumValue": {
            "description": "MD5 value of the file. The ingest/create operation will automatically generate the value.",
            "maxLength": 256,
            "type": "string",
            "example": "120EA8A25E5D487BF68B5F7096440019"
          },
          "repUnit": {
            "description": "The reporting unit.",
            "maxLength": 128,
            "type": "string",
            "example": "Unit_1"
          },
          "repUnitType": {
            "description": "The reporting unit type.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_repUnitType"
          },
          "repUnitActivity": {
            "description": "The activity the unit was engaged in.",
            "maxLength": 128,
            "type": "string",
            "example": "Example_Activity"
          },
          "numMentions": {
            "format": "int32",
            "description": "This is the total number of mentions of this event across all source documents during the 15 minute update in which it was first seen. Multiple references to an event within a single document also contribute to this count. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.",
            "type": "integer",
            "example": 8
          },
          "numSources": {
            "format": "int32",
            "description": "This is the total number of information sources containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.",
            "type": "integer",
            "example": 8
          },
          "numArticles": {
            "format": "int32",
            "description": "This is the total number of source documents containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.",
            "type": "integer",
            "example": 8
          },
          "avgTone": {
            "format": "double",
            "description": "This is the average tone of all documents containing one or more mentions of this event during the 15 minute update in which it was first seen. The score ranges from -100 (extremely negative) to +100 (extremely positive). Common values range between -10 and +10, with 0 indicating neutral.",
            "type": "number",
            "example": 8.23
          },
          "sourceUrl": {
            "description": "This field records the URL or citation of the first news report it found this event in. In most cases this is the first report it saw the article in, but due to the timing and flow of news reports through the processing pipeline, this may not always be the very first report, but is at least in the first few reports.",
            "maxLength": 256,
            "type": "string",
            "example": "Example_URL"
          },
          "relatedDocs": {
            "description": "Related document ids.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedDocument_Ingest"
            }
          },
          "summary": {
            "description": "A summary of the event.",
            "maxLength": 4096,
            "type": "string",
            "example": "Example_Summary"
          },
          "notes": {
            "description": "Notes related to the documents or event.",
            "maxLength": 4096,
            "type": "string",
            "example": "Example_Notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "SofDataSourceRef_Abridged": {
        "type": "object",
        "properties": {
          "dataSourceId": {
            "description": "Data source id.",
            "type": "string"
          },
          "startPosition": {
            "description": "start position.",
            "type": "string"
          },
          "endPosition": {
            "description": "end position.",
            "type": "string"
          },
          "paragraphNumber": {
            "description": "paragraph number.",
            "type": "string"
          },
          "sentenceNumber": {
            "description": "sentence number.",
            "type": "string"
          }
        }
      },
      "SofDataSourceRef_Full": {
        "type": "object",
        "properties": {
          "dataSourceId": {
            "description": "Data source id.",
            "type": "string"
          },
          "startPosition": {
            "description": "start position.",
            "type": "string"
          },
          "endPosition": {
            "description": "end position.",
            "type": "string"
          },
          "paragraphNumber": {
            "description": "paragraph number.",
            "type": "string"
          },
          "sentenceNumber": {
            "description": "sentence number.",
            "type": "string"
          }
        }
      },
      "SofDataSourceRef_Ingest": {
        "type": "object",
        "properties": {
          "dataSourceId": {
            "description": "Data source id.",
            "type": "string"
          },
          "startPosition": {
            "description": "start position.",
            "type": "string"
          },
          "endPosition": {
            "description": "end position.",
            "type": "string"
          },
          "paragraphNumber": {
            "description": "paragraph number.",
            "type": "string"
          },
          "sentenceNumber": {
            "description": "sentence number.",
            "type": "string"
          }
        }
      },
      "SolarArray_Full": {
        "description": "Model representation of information on on-orbit/spacecraft solar arrays. A spacecraft may have multiple solar arrays and each solar array can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "name": {
            "description": "Solar Array name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Solar1"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "solarArrayDetails": {
            "description": "Read-only collection of additional SolarArrayDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/solararraydetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolarArrayDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "SolarArrayDetails_Full": {
        "description": "Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.",
        "required": [
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAYDETAILS-ID"
          },
          "idSolarArray": {
            "description": "Unique identifier of the parent SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of solar array (e.g. U Shaped).",
            "maxLength": 64,
            "type": "string",
            "example": "U Shaped"
          },
          "technology": {
            "description": "Solar array technology (e.g. Ga-As).",
            "maxLength": 64,
            "type": "string",
            "example": "Ga-As"
          },
          "junctionTechnology": {
            "description": "Solar array junction technology (e.g. Triple).",
            "maxLength": 64,
            "type": "string",
            "example": "Triple"
          },
          "manufacturerOrgId": {
            "description": "Unique identifier of the organization that manufactures the solar array.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "span": {
            "format": "double",
            "description": "Solar Array span in meters.",
            "type": "number",
            "example": 123.4
          },
          "area": {
            "format": "double",
            "description": "Solar Array area in square meters.",
            "type": "number",
            "example": 123.4
          },
          "description": {
            "description": "Solar array description/notes.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "Status_Full": {
        "description": "Status for a particular Entity. An entity may have multiple status records collected by various sources.",
        "required": [
          "classificationMarking",
          "idEntity",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "STATUS-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "derivedFrom": {
            "description": "The sources or SCG references from which the classification of this data is derived.",
            "maxLength": 128,
            "type": "string",
            "example": "SOME_SOURCE"
          },
          "declassificationDate": {
            "format": "date-time",
            "description": "The declassification date of this data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:02.123Z"
          },
          "declassificationString": {
            "description": "Declassification string of this data.",
            "maxLength": 256,
            "type": "string",
            "example": "U"
          },
          "idEntity": {
            "description": "Unique identifier of the parent entity.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENTITY-ID"
          },
          "state": {
            "description": "Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).",
            "maxLength": 16,
            "enum": [
              "UNKNOWN",
              "DEAD",
              "ACTIVE",
              "RF ACTIVE",
              "STANDBY"
            ],
            "type": "string",
            "example": "ACTIVE"
          },
          "sysCap": {
            "description": "System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).",
            "maxLength": 3,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "opsCap": {
            "description": "Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).",
            "maxLength": 3,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "subStatusCollection": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubStatus_Full"
            }
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "notes": {
            "description": "Comments describing the status creation and or updates to an entity.",
            "type": "string",
            "example": "Example Notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          }
        }
      },
      "SubStatus_Full": {
        "description": "Additional sub-system or capability status for the parent entity.",
        "required": [
          "type",
          "classificationMarking",
          "statusId",
          "status",
          "notes",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SUBSTATUS-ID"
          },
          "type": {
            "description": "Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "mwCap",
              "ssCap",
              "mdCap"
            ],
            "type": "string",
            "example": "mdCap"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "statusId": {
            "description": "Id of the parent status.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-STATUS-ID"
          },
          "status": {
            "description": "Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "notes": {
            "description": "Descriptions and/or comments associated with the sub-status.",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "example": "Sample Notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      }
    }
  }
}