{
  "openapi": "3.0.3",
  "info": {
    "title": "Unified Data Library Services API",
    "version": "1.30.0 Daiquiri",
    "description": "Unified Data Library Services OpenAPI v3 documentation.",
    "termsOfService": "storefront/storefront/appConfig/useragreement.html",
    "contact": {
      "name": "Sage Andorka, Deputy, Cross-Mission Ground",
      "email": "unifieddatalibrary@bluestaq.com"
    }
  },
  "tags": [
    {
      "name": "Sensor Tasking",
      "description": "These services provide operations for posting and querying Sensor Tasking data."
    }
  ],
  "externalDocs": {
    "url": "udl/openapi.json"
  },
  "servers": [
    {
      "url": "https://unifieddatalibrary.com"
    }
  ],
  "paths": {
    "/filedrop/udl-collectrequest": {
      "post": {
        "tags": [
          "Sensor Tasking"
        ],
        "description": "Service operation to take a list of CollectRequest as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_collectrequest_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CollectRequest_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-collectresponse": {
      "post": {
        "tags": [
          "Sensor Tasking"
        ],
        "description": "Service operation to take a list of CollectResponse as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_collectresponse_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CollectResponse_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-isrcollection": {
      "post": {
        "tags": [
          "Sensor Tasking"
        ],
        "description": "Service operation to take multiple ISR Collections as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_isrcollection_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ISRCollection_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-sensorplan": {
      "post": {
        "tags": [
          "Sensor Tasking"
        ],
        "description": "Service operation to take one sensorplan record as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_sensorplan_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SensorPlan_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/collectrequest": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectRequest_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single CollectRequest as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Sensor Tasking"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectRequest_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/collectrequest/{id}": {
      "get": {
        "description": "Service operation to get a single CollectRequest by its unique ID passed as a path parameter.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "The ID of the CollectRequest to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectRequest_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/collectrequest/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/collectrequest/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of CollectRequest as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Sensor Tasking"
        ],
        "requestBody": {
          "description": "JSON array of CollectRequest.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CollectRequest_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/collectrequest/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectRequest_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/collectrequest/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/collectrequest/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/collectrequest/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/collectrequest/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectRequest_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/collectresponse": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectResponse_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single Collect Response object as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Sensor Tasking"
        ],
        "requestBody": {
          "description": "JSON representation of one Collect Response object.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectResponse_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/collectresponse/{id}": {
      "get": {
        "description": "Service operation to get a single Collect Response record by its unique ID passed as a path parameter.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "The ID of the Collect Response object to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectResponse_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/collectresponse/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/collectresponse/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of Collect Response objects as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Sensor Tasking"
        ],
        "requestBody": {
          "description": "JSON representation of list of Collect Response objects.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CollectResponse_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/collectresponse/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectResponse_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/collectresponse/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/collectresponse/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/collectresponse/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/collectresponse/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectResponse_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/isrcollection": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ISRCollection_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/isrcollection/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/isrcollection/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of ISRCollection records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Sensor Tasking"
        ],
        "requestBody": {
          "description": "JSON representation of multiple UDL ISRCollections.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ISRCollection_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/isrcollection/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ISRCollection_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/isrcollection/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/isrcollection/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/isrcollection/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/isrcollection/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAt",
            "description": "Time the row was created in the database, auto-populated by the system. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ISRCollection_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sensorplan": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorPlan_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "The start time of the plan or schedule, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single sensor plan as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Sensor Tasking"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorPlan_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sensorplan/{id}": {
      "get": {
        "description": "Service operation to get a single SensorPlan by its unique ID passed as a path parameter.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "The ID of the Sensor to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorPlan_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single SensorPlan. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "The ID of the SensorPlan to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorPlan_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sensorplan/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "The start time of the plan or schedule, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/sensorplan/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "The start time of the plan or schedule, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorPlan_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sensorplan/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "The start time of the plan or schedule, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sensorplan/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "The start time of the plan or schedule, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/sensorplan/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Sensor Tasking"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sensorplan/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Sensor Tasking"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "The start time of the plan or schedule, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorPlan_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Antenna_Full": {
        "description": "Model representation of information on on-orbit/spacecraft communication antennas. A spacecraft may have multiple antennas and each antenna can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "name": {
            "description": "Antenna name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "IRIDIUM NEXT 121-ANTENNA-10075"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "antennaDetails": {
            "description": "Read-only collection of additional AntennaDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/antennadetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AntennaDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "AntennaDetails_Full": {
        "description": "Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.",
        "required": [
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNADETAILS-ID"
          },
          "idAntenna": {
            "description": "Unique identifier of the parent Antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Reflector"
          },
          "position": {
            "description": "Antenna position (e.g. Top, Nadir, Side).",
            "maxLength": 128,
            "type": "string",
            "example": "Top"
          },
          "mode": {
            "description": "Antenna mode (e.g. TX,RX).",
            "maxLength": 4,
            "enum": [
              "TX",
              "RX"
            ],
            "type": "string",
            "example": "TX"
          },
          "steerable": {
            "description": "Boolean indicating if this antenna is steerable.",
            "type": "boolean",
            "example": false
          },
          "beamForming": {
            "description": "Boolean indicating if this is a beam forming antenna.",
            "type": "boolean",
            "example": false
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the antenna.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTUREORG-ID"
          },
          "diameter": {
            "format": "double",
            "description": "Antenna diameter in meters.",
            "type": "number",
            "example": 0.01
          },
          "size": {
            "description": "Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.05
            ]
          },
          "startFrequency": {
            "format": "double",
            "description": "Antenna start of frequency range in Mhz.",
            "type": "number",
            "example": 2.1
          },
          "endFrequency": {
            "format": "double",
            "description": "Antenna end of frequency range in Mhz.",
            "type": "number",
            "example": 3.3
          },
          "beamwidth": {
            "format": "double",
            "description": "Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.",
            "type": "number",
            "example": 14.1
          },
          "gain": {
            "format": "double",
            "description": "Antenna maximum gain in dBi.",
            "type": "number",
            "example": 20.1
          },
          "gainTolerance": {
            "format": "double",
            "description": "Antenna gain tolerance in dB.",
            "type": "number",
            "example": 5.1
          },
          "polarization": {
            "format": "double",
            "description": "Antenna polarization in degrees.",
            "type": "number",
            "example": 45.1
          },
          "description": {
            "description": "Antenna description.",
            "maxLength": 512,
            "type": "string",
            "example": "Description of antenna A"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "Battery_Full": {
        "description": "Model representation of specific spacecraft battery types.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "name": {
            "description": "Battery name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "JAK-BATTERY-1479"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "batteryDetails": {
            "description": "Read-only collection of additional BatteryDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/batterydetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatteryDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "BatteryDetails_Full": {
        "description": "Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.",
        "required": [
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERYDETAILS-ID"
          },
          "idBattery": {
            "description": "Identifier of the parent battery type record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "technology": {
            "description": "Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Ni-Cd"
          },
          "capacity": {
            "format": "double",
            "description": "Battery capacity in Ah.",
            "type": "number",
            "example": 10.1
          },
          "dischargeDepth": {
            "format": "double",
            "description": "Depth of discharge as a percentage/fraction.",
            "type": "number",
            "example": 0.2
          },
          "model": {
            "description": "Battery model number or name.",
            "maxLength": 128,
            "type": "string",
            "example": "11212"
          },
          "description": {
            "description": "Battery description/notes.",
            "maxLength": 1024,
            "type": "string",
            "example": "example notes"
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the battery.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "CollectRequest_Abridged": {
        "description": "Collect Requests support several types of individual requests, or planned/scheduled tasks on sensors and/or orbital objects. Options are provided to accomodate most common sensor contact and collection applications, including single sensor-object tasking, search operations, and TT&C support. Multiple requests originating from a plan or schedule may be associated to a sensor plan if desired.",
        "required": [
          "classificationMarking",
          "type",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "COLLECTREQUEST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idParentReq": {
            "description": "The unique ID of the collect request record from which this request originated. This may be used for cases of sensor-to-sensor tasking, such as tip/cue operations.",
            "maxLength": 36,
            "type": "string",
            "example": "da98671b-34db-47bf-8c8d-7c668b92c800"
          },
          "msgType": {
            "description": "The type of external message from which this request originated.",
            "maxLength": 16,
            "type": "string",
            "example": "SU67"
          },
          "msgCreateDate": {
            "format": "date-time",
            "description": "The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2024-04-25T08:17:01.346Z"
          },
          "type": {
            "description": "The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT, POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "DWELL"
          },
          "idPlan": {
            "description": "Unique identifier of the parent plan or schedule associated with this request.  If null, this request is assumed not associated with a plan or schedule.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-PLAN-ID"
          },
          "planIndex": {
            "format": "int32",
            "description": "Index number (integer) for records within a collection plan or schedule.",
            "type": "integer",
            "example": 8
          },
          "taskId": {
            "description": "Task ID associated with this request.  A task ID may be associated with a single collect request or may be used to tie together the sub-requests of a full collect, for example a DWELL consisting of many dwell points.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "dwellId": {
            "description": "The dwell ID associated with this request.  A dwell ID is dwell point specific and a DWELL request consist of many dwell point requests.",
            "maxLength": 36,
            "type": "string",
            "example": "DWELL-ID"
          },
          "externalId": {
            "description": "Optional ID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the requested/scheduled/planned sensor associated with this request.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "obType": {
            "description": "Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER) requested.  This field may correspond to a request of a specific sensor, or to a general non sensor specific request.",
            "maxLength": 24,
            "type": "string",
            "example": "RADAR"
          },
          "priority": {
            "description": "The priority of the collect request  (EMERGENCY, FLASH, IMMEDIATE, PRIORITY, ROUTINE).",
            "maxLength": 24,
            "type": "string",
            "example": "EMERGENCY"
          },
          "taskCategory": {
            "format": "int32",
            "description": "The (SSN) tasking category (1-5) associated with this request.  The tasking category defines the priority of gathering and transmitting the requested observational data.  Note that category definitions are sensor type specific.",
            "type": "integer",
            "example": 4
          },
          "suffix": {
            "description": "The (SSN) tasking suffix (A-Z) associated with this request.  The suffix defines the amount of observational data and the frequency of collection.  Note that suffix definitions are sensor type specific.",
            "maxLength": 1,
            "type": "string",
            "example": "T"
          },
          "uctFollowUp": {
            "description": "Boolean indicating that this collect request is UCT follow-up.",
            "type": "boolean",
            "example": false
          },
          "startTime": {
            "format": "date-time",
            "description": "The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The end time of the collect or contact request window, in ISO 8601 UTC format.  If no endTime or duration is provided it is assumed the request is either ongoing or that the request is for a specified number of tracks (numTracks).  If both duration and endTime are provided, the endTime is assumed to take precedence.",
            "type": "string",
            "example": "2018-01-01T18:00:00.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object for this request.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "REF-ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object for this request.",
            "type": "integer",
            "example": 101
          },
          "origObjectId": {
            "description": "Optional identifier provided by the data source to indicate the target object of this request. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "taskGroup": {
            "description": "The tasking group to which the target object is assigned.",
            "maxLength": 16,
            "type": "string",
            "example": "729"
          },
          "iron": {
            "format": "int32",
            "description": "Inter-Range Operations Number.  Four-digit identifier used to schedule and identify AFSCN contact support for booster, launch, and on-orbit operations.",
            "type": "integer",
            "example": 3
          },
          "orbitRegime": {
            "description": "The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER).",
            "maxLength": 12,
            "type": "string",
            "example": "GEO"
          },
          "targetSize": {
            "format": "double",
            "description": "The minimum object (diameter) size, in meters, to be reported.",
            "type": "number",
            "example": 1.1
          },
          "rcsMin": {
            "format": "double",
            "description": "The minimum Radar Cross-Section of the target, in m^2.  If only minimum RCS is provided it is assumed to be minimum reportable RCS.",
            "type": "number",
            "example": 1.1
          },
          "rcs": {
            "format": "double",
            "description": "The Radar Cross-Section of the target, in m^2.",
            "type": "number",
            "example": 1.1
          },
          "rcsMax": {
            "format": "double",
            "description": "The maximum Radar Cross-Section of the target, in m^2.",
            "type": "number",
            "example": 1.1
          },
          "freqMin": {
            "format": "double",
            "description": "The minimum frequency of interest, in MHz.  If only minimum frequency is provided it is assumed to be minimum reportable frequency.",
            "type": "number",
            "example": 1.1
          },
          "freq": {
            "format": "double",
            "description": "The estimated or expected emission frequency of the target, in MHz.",
            "type": "number",
            "example": 1.1
          },
          "freqMax": {
            "format": "double",
            "description": "The maximum frequency of interest, in MHz.",
            "type": "number",
            "example": 1.1
          },
          "polarization": {
            "description": "The RF polarization (H, LHC, RHC, V).",
            "maxLength": 4,
            "type": "string",
            "example": "H"
          },
          "visMagMin": {
            "format": "double",
            "description": "The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).  If only minimum vismag is provided it is assumed to be minimum reportable vismag.",
            "type": "number",
            "example": 1.1
          },
          "visMag": {
            "format": "double",
            "description": "The estimated or expected visual magnitude of the target, in Magnitudes (M).",
            "type": "number",
            "example": 1.1
          },
          "visMagMax": {
            "format": "double",
            "description": "The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).",
            "type": "number",
            "example": 1.1
          },
          "spectralModel": {
            "description": "The spectral model used for the irradiance calculation.",
            "maxLength": 36,
            "type": "string",
            "example": "Example Model"
          },
          "reflectance": {
            "format": "double",
            "description": "The fraction of solar energy reflected from target.",
            "type": "number",
            "example": 1.1
          },
          "irradiance": {
            "format": "double",
            "description": "The target object irradiance value.",
            "type": "number",
            "example": 1.1
          },
          "numFrames": {
            "format": "int32",
            "description": "For optical sensors, the requested number of frames to capture at each sensor step.",
            "type": "integer",
            "example": 6
          },
          "frameRate": {
            "format": "double",
            "description": "For optical sensors, the frame rate of the camera, in Hz.",
            "type": "number",
            "example": 1.1
          },
          "integrationTime": {
            "format": "double",
            "description": "For optical sensors, the integration time per camera frame, in milliseconds.",
            "type": "number",
            "example": 1.1
          },
          "numTracks": {
            "format": "int32",
            "description": "The number of requested tracks on the target.  If numTracks is not provided it is assumed to indicate all possible observations every pass over the request duration or within the request start/end window.",
            "type": "integer",
            "example": 3
          },
          "numObs": {
            "format": "int32",
            "description": "The number of requested observations on the target.",
            "minimum": 1,
            "type": "integer",
            "example": 9
          },
          "duration": {
            "format": "int32",
            "description": "The duration of the collect request, in seconds.  If both duration and endTime are provided, the endTime is assumed to take precedence.",
            "type": "integer",
            "example": 11
          },
          "srchPattern": {
            "description": "The search pattern to be executed for this request (e.g. PICKET-FENCE, SCAN, etc.).",
            "maxLength": 24,
            "type": "string",
            "example": "SCAN"
          },
          "scenario": {
            "description": "Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.",
            "maxLength": 24,
            "type": "string",
            "example": "Example direction"
          },
          "idElset": {
            "description": "ID of the UDL Elset of the object associated with this request.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-ELSET-ID"
          },
          "idManifold": {
            "description": "ID of the UDL Manifold Elset of the object associated with this request.  A Manifold Elset provides theoretical Keplerian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-MANIFOLD-ID"
          },
          "idStateVector": {
            "description": "ID of the UDL State Vector of the object or central vector associated with this request.",
            "maxLength": 36,
            "type": "string",
            "example": "STATEVECTOR-ID"
          },
          "esId": {
            "description": "ID of the UDL Ephemeris Set of the object associated with this request.",
            "maxLength": 36,
            "type": "string",
            "example": "ES-ID"
          },
          "epoch": {
            "format": "date-time",
            "description": "Epoch time, in ISO 8601 UTC format, of the orbital elements.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "semiMajorAxis": {
            "format": "double",
            "description": "The average of the periapsis and apoapsis distances, in kilometers. For circular orbits, the semimajor axis is the distance between the centers of the bodies.",
            "type": "number",
            "example": 1.1
          },
          "eccentricity": {
            "format": "double",
            "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle.",
            "type": "number",
            "example": 1.1
          },
          "inclination": {
            "format": "double",
            "description": "The angle, in degrees, between the equator and the orbit plane when looking from the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90 representing posigrade orbits and 90-180 representing retrograde orbits.",
            "type": "number",
            "example": 1.1
          },
          "raan": {
            "format": "double",
            "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node.",
            "type": "number",
            "example": 1.1
          },
          "argOfPerigee": {
            "format": "double",
            "description": "The argument of perigee is the angle, in degrees, formed between the perigee and the ascending node.",
            "type": "number",
            "example": 1.1
          },
          "trueAnomoly": {
            "format": "double",
            "description": "The true anomaly defines the angular position, in degrees, of the object on it's orbital path as measured from the orbit focal point at epoch.  The true anomaly is referenced from perigee.",
            "type": "number",
            "example": 1.1
          },
          "ra": {
            "format": "double",
            "description": "The expected or directed right ascension angle, in degrees, for search or target acquisition.",
            "type": "number",
            "example": 1.1
          },
          "dec": {
            "format": "double",
            "description": "The expected or directed declination angle, in degrees, for search or target acquisition.",
            "type": "number",
            "example": 1.1
          },
          "az": {
            "format": "double",
            "description": "The expected or directed azimuth angle, in degrees, for search or target acquisition.",
            "type": "number",
            "example": 1.1
          },
          "el": {
            "format": "double",
            "description": "The expected or directed elevation angle, in degrees, for search or target acquisition.",
            "type": "number",
            "example": 1.1
          },
          "range": {
            "format": "double",
            "description": "The expected acquisition range or defined center range, in km.",
            "type": "number",
            "example": 1.1
          },
          "extentAz": {
            "format": "double",
            "description": "The extent of the azimuth angle, in degrees, from center azimuth to define a spatial volume.",
            "type": "number",
            "example": 1.1
          },
          "extentEl": {
            "format": "double",
            "description": "The extent of the elevation angle, in degrees, from center elevation to define a spatial volume.",
            "type": "number",
            "example": 1.1
          },
          "extentRange": {
            "format": "double",
            "description": "The extent of the range, in km, from center range to define a spatial volume.",
            "type": "number",
            "example": 1.1
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).  If an accompanying stopLat is provided, then the lat value can be assumed to be the starting latitude of a volume definition.",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 1.1
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).  If an accompanying stopLon is provided, then lon value can be assumed to be the starting longitude of a volume definition.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 1.1
          },
          "alt": {
            "format": "double",
            "description": "Height above WGS-84 ellipsoid (HAE), in kilometers.  If an accompanying stopAlt is provided, then alt value can be assumed to be the starting altitude of a volume definition.",
            "type": "number",
            "example": 1.1
          },
          "stopLat": {
            "format": "double",
            "description": "The stopping WGS-84 latitude of a volume definition, in degrees.  -90 to 90 degrees (negative values south of equator).  The stopLat value is only meaningful if a (starting) lat value is provided.",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 1.1
          },
          "stopLon": {
            "format": "double",
            "description": "The stopping WGS-84 longitude of a volume definition, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).  The stopLon value is only meaningful if a (starting) lon value is provided.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 1.1
          },
          "stopAlt": {
            "format": "double",
            "description": "The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in kilometers.  The stopAlt value is only meaningful if a (starting) alt value is provided.",
            "type": "number",
            "example": 1.1
          },
          "srchInc": {
            "format": "double",
            "description": "The maximum inclination, in degrees, to be used in search operations.",
            "type": "number",
            "example": 1.1
          },
          "xAngle": {
            "format": "double",
            "description": "The angular distance, in degrees, in the sensor-x direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.",
            "type": "number",
            "example": 1.1
          },
          "yAngle": {
            "format": "double",
            "description": "The angular distance, in degrees, in the sensor-y direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.",
            "type": "number",
            "example": 1.1
          },
          "orientAngle": {
            "format": "double",
            "description": "The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.  A positive value indicates clockwise rotation about the sensor boresight vector.",
            "type": "number",
            "example": 1.1
          },
          "customer": {
            "description": "The customer for this request.",
            "maxLength": 64,
            "type": "string",
            "example": "Bluestaq"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "notes": {
            "description": "Notes or comments associated with this request.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "Example source"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "stateVector": {
            "description": "This service provides operations for querying and manipulation of state vectors for OnOrbit objects. State vectors are cartesian vectors of position (r) and velocity (v) that, together with their time (epoch) (t), uniquely determine the trajectory of the orbiting body in space. J2000 is the preferred coordinate frame for all state vector positions/velocities in UDL, but in some cases data may be in another frame depending on the provider and/or datatype. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
            "required": [
              "classificationMarking",
              "epoch",
              "source",
              "dataMode"
            ],
            "type": "object",
            "properties": {
              "idStateVector": {
                "description": "Unique identifier of the record, auto-generated by the system.",
                "maxLength": 36,
                "minLength": 1,
                "type": "string",
                "example": "STATEVECTOR-ID"
              },
              "classificationMarking": {
                "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                "maxLength": 128,
                "minLength": 1,
                "type": "string",
                "example": "U"
              },
              "epoch": {
                "format": "date-time",
                "description": "Time of validity for state vector in ISO 8601 UTC datetime format, with microsecond precision.",
                "type": "string",
                "example": "2018-01-01T16:00:00.123456Z"
              },
              "pedigree": {
                "description": "The pedigree of state vector, or methods used for its generation to include state update/orbit determination, propagation from another state, or a state from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION, CONJUNCTION, FLIGHT_PLAN).",
                "maxLength": 32,
                "type": "string",
                "example": "CONJUNCTION"
              },
              "idOnOrbit": {
                "description": "Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                "maxLength": 36,
                "type": "string",
                "readOnly": true,
                "example": "ONORBIT-ID"
              },
              "satNo": {
                "format": "int32",
                "description": "Satellite/Catalog number of the target OnOrbit object.",
                "type": "integer",
                "example": 12
              },
              "origObjectId": {
                "description": "Optional identifier provided by state vector source to indicate the target onorbit object of this state vector. This may be an internal identifier and not necessarily map to a valid satellite number.",
                "maxLength": 64,
                "type": "string",
                "example": "ORIGOBJECT-ID"
              },
              "idOrbitDetermination": {
                "description": "Unique identifier of the OD solution record that produced this state vector. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queries as /udl/orbitdetermination/abc.",
                "maxLength": 36,
                "type": "string",
                "example": "026dd511-8ba5-47d3-9909-836149f87686"
              },
              "uct": {
                "description": "Boolean indicating this state vector was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
                "type": "boolean",
                "example": true
              },
              "xpos": {
                "format": "double",
                "description": "Cartesian X position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -1118.577381
              },
              "ypos": {
                "format": "double",
                "description": "Cartesian Y position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": 3026.231084
              },
              "zpos": {
                "format": "double",
                "description": "Cartesian Z position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": 6167.831808
              },
              "xvel": {
                "format": "double",
                "description": "Cartesian X velocity of target, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -4.25242784
              },
              "yvel": {
                "format": "double",
                "description": "Cartesian Y velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": 5.291107434
              },
              "zvel": {
                "format": "double",
                "description": "Cartesian Z velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -3.356493869
              },
              "xaccel": {
                "format": "double",
                "description": "Cartesian X acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -2.12621392
              },
              "yaccel": {
                "format": "double",
                "description": "Cartesian Y acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": 2.645553717
              },
              "zaccel": {
                "format": "double",
                "description": "Cartesian Z acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -1.06310696
              },
              "referenceFrame": {
                "description": "The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.",
                "maxLength": 24,
                "enum": [
                  "J2000",
                  "EFG/TDR",
                  "ECR/ECEF",
                  "TEME",
                  "ITRF",
                  "GCRF"
                ],
                "type": "string",
                "example": "J2000"
              },
              "cov": {
                "description": "Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.  If the covReferenceFrame is null it is assumed to be J2000.\nThe array values (1-21) represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;\n\nx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3\n\nz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6\n\nx'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10\n\ny'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15\n\nz'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;\n\nThe cov array should contain only the lower left triangle values from top left down to bottom right, in order.\n\nIf additional covariance terms are included for DRAG, SRP, and/or THRUST, the matrix can be extended with the following order of elements:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR\n\nDRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;\n\nSRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;\n\nTHR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;\n\n\n",
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                },
                "example": [
                  1.1,
                  2.4,
                  3.8,
                  4.2,
                  5.5,
                  6
                ]
              },
              "covReferenceFrame": {
                "description": "The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.",
                "maxLength": 24,
                "enum": [
                  "J2000",
                  "UVW"
                ],
                "type": "string",
                "example": "J2000"
              },
              "covMethod": {
                "description": "The method used to generate the covariance during the orbit determination (OD) that produced the state vector, or whether an arbitrary, non-calculated default value was used (CALCULATED, DEFAULT).",
                "maxLength": 24,
                "type": "string",
                "example": "CALCULATED"
              },
              "eqCov": {
                "description": "The covariance matrix values represent the lower triangular half of the covariance matrix in terms of equinoctial elements.&nbsp; The size of the covariance matrix is dynamic.&nbsp; The values are outputted in order across each row, i.e.:\n\n1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5\n\n6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n\n\n\nThe ordering of values is as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp; Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp; B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...\n\nAf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1\n\nAg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3\n\nL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6\n\nN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10\n\nChi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp; 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15\n\nPsi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp; 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21\n\nB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp; 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28\n\nBDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp; 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36\n\nAGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp; 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45\n\nT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp; 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp; 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55\n\nC1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp; 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp; 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66\n\nC2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp; 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp; 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78\n\n:\n\n:\n\nwhere C1, C2, etc, are the \"consider parameters\" that may be added to the covariance matrix.&nbsp; The covariance matrix will be as large as the last element/model parameter needed.&nbsp; In other words, if the DC solved for all 6 elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size will be set to 0x0, and no data will follow.&nbsp; The cov field should contain only the lower left triangle values from top left down to bottom right, in order.",
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                },
                "example": [
                  1.1,
                  2.2
                ]
              },
              "xposAlt1": {
                "format": "double",
                "description": "Cartesian X position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -1145.688502
              },
              "yposAlt1": {
                "format": "double",
                "description": "Cartesian Y position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": 3020.729572
              },
              "zposAlt1": {
                "format": "double",
                "description": "Cartesian Z position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": 6165.55187
              },
              "xvelAlt1": {
                "format": "double",
                "description": "Cartesian X velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -4.270832252
              },
              "yvelAlt1": {
                "format": "double",
                "description": "Cartesian Y velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": 5.27074276
              },
              "zvelAlt1": {
                "format": "double",
                "description": "Cartesian Z velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -3.365155181
              },
              "alt1ReferenceFrame": {
                "description": "The reference frame of the alternate1 (Alt1) cartesian orbital state.",
                "maxLength": 24,
                "type": "string",
                "example": "TEME"
              },
              "xposAlt2": {
                "format": "double",
                "description": "Cartesian X position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -1456.915926
              },
              "yposAlt2": {
                "format": "double",
                "description": "Cartesian Y position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -2883.540406
              },
              "zposAlt2": {
                "format": "double",
                "description": "Cartesian Z position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": 6165.55187
              },
              "xvelAlt2": {
                "format": "double",
                "description": "Cartesian X velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -1.219814294
              },
              "yvelAlt2": {
                "format": "double",
                "description": "Cartesian Y velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -6.602080212
              },
              "zvelAlt2": {
                "format": "double",
                "description": "Cartesian Z velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -3.365155181
              },
              "alt2ReferenceFrame": {
                "description": "The reference frame of the alternate2 (Alt2) cartesian orbital state.",
                "maxLength": 24,
                "type": "string",
                "example": "EFG/TDR"
              },
              "posUnc": {
                "format": "double",
                "description": "One sigma position uncertainty, in kilometers.",
                "type": "number",
                "example": 0.333399744452
              },
              "velUnc": {
                "format": "double",
                "description": "One sigma velocity uncertainty, in kilometers/second.",
                "type": "number",
                "example": 0.000004
              },
              "mass": {
                "format": "double",
                "description": "The mass of the object, in kilograms.",
                "type": "number",
                "example": 164.5
              },
              "area": {
                "format": "double",
                "description": "The actual area of the object at it's largest cross-section, expressed in meters^2.",
                "type": "number",
                "example": 5.065
              },
              "solarRadPressCoeff": {
                "format": "double",
                "description": "Area-to-mass ratio coefficient for solar radiation pressure.",
                "type": "number",
                "example": 0.0244394
              },
              "dragCoeff": {
                "format": "double",
                "description": "Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).",
                "type": "number",
                "example": 0.0224391269775
              },
              "dragArea": {
                "format": "double",
                "description": "The effective area of the object exposed to atmospheric drag, expressed in meters^2.",
                "type": "number",
                "example": 4.739
              },
              "revNo": {
                "format": "int32",
                "description": "Epoch revolution number.",
                "type": "integer",
                "example": 7205
              },
              "geopotentialModel": {
                "description": "Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96 24Z,24T.",
                "maxLength": 32,
                "type": "string",
                "example": "EGM-96"
              },
              "dragModel": {
                "description": "The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).",
                "maxLength": 32,
                "type": "string",
                "example": "JAC70"
              },
              "lunarSolar": {
                "description": "Boolean indicating use of lunar/solar perturbations for this vector.",
                "type": "boolean",
                "example": true
              },
              "solarRadPress": {
                "description": "Boolean indicating use of solar radiation pressure perturbations for this vector.",
                "type": "boolean",
                "example": true
              },
              "srpArea": {
                "format": "double",
                "description": "The effective area of the object exposed to solar radiation pressure, expressed in meters^2.",
                "type": "number",
                "example": 4.311
              },
              "solidEarthTides": {
                "description": "Boolean indicating use of solid earth tide perturbations for this vector.",
                "type": "boolean",
                "example": true
              },
              "inTrackThrust": {
                "description": "Boolean indicating use of in-track thrust perturbations for this vector.",
                "type": "boolean",
                "example": true
              },
              "bDot": {
                "format": "double",
                "description": "First derivative of drag/ballistic coefficient (m2/kg-s).",
                "type": "number",
                "example": 1.23
              },
              "edr": {
                "format": "double",
                "description": "Model parameter value for energy dissipation rate (EDR) (w/kg).",
                "type": "number",
                "example": 1.23
              },
              "thrustAccel": {
                "format": "double",
                "description": "Model parameter value for thrust acceleration (m/s2).",
                "type": "number",
                "example": 1.23
              },
              "cmOffset": {
                "format": "double",
                "description": "Model parameter value for center of mass offset (m).",
                "type": "number",
                "example": 1.23
              },
              "lastObStart": {
                "format": "date-time",
                "description": "The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.",
                "type": "string",
                "example": "2022-11-09T11:20:21.247192Z"
              },
              "lastObEnd": {
                "format": "date-time",
                "description": "The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.",
                "type": "string",
                "example": "2022-11-09T11:20:21.247192Z"
              },
              "obsAvailable": {
                "format": "int32",
                "description": "The number of observations available for the OD of the object.",
                "type": "integer",
                "example": 376
              },
              "obsUsed": {
                "format": "int32",
                "description": "The number of observations accepted for the OD of the object.",
                "type": "integer",
                "example": 374
              },
              "tracksAvail": {
                "format": "int32",
                "description": "The number of sensor tracks available for the OD of the object.",
                "type": "integer",
                "example": 163
              },
              "tracksUsed": {
                "format": "int32",
                "description": "The number of sensor tracks accepted for the OD of the object.",
                "type": "integer",
                "example": 163
              },
              "recODSpan": {
                "format": "double",
                "description": "The recommended OD time span calculated for the object, expressed in days.",
                "type": "number",
                "example": 3.5
              },
              "actualODSpan": {
                "format": "double",
                "description": "The actual time span used for the OD of the object, expressed in days.",
                "type": "number",
                "example": 3.5
              },
              "residualsAcc": {
                "format": "double",
                "description": "The percentage of residuals accepted in the OD of the object.",
                "type": "number",
                "example": 99.5
              },
              "solarFluxF10": {
                "format": "double",
                "description": "F10 (10.7 cm) solar flux value.",
                "type": "number",
                "example": 1.23
              },
              "solarFluxF10Avg": {
                "format": "double",
                "description": "F10 (10.7 cm) solar flux 81-day average value.",
                "type": "number",
                "example": 1.23
              },
              "solarFluxAPAvg": {
                "format": "double",
                "description": "Average solar flux geomagnetic index.",
                "type": "number",
                "example": 1.23
              },
              "taiUtc": {
                "format": "double",
                "description": "TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset in seconds.",
                "type": "number",
                "example": 1.23
              },
              "ut1Utc": {
                "format": "double",
                "description": "Universal Time-1 (UT1) minus UTC offset, in seconds.",
                "type": "number",
                "example": 1.23
              },
              "ut1Rate": {
                "format": "double",
                "description": "Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.",
                "type": "number",
                "example": 1.23
              },
              "polarMotionX": {
                "format": "double",
                "description": "Polar Wander Motion X (arc seconds).",
                "type": "number",
                "example": 1.23
              },
              "polarMotionY": {
                "format": "double",
                "description": "Polar Wander Motion Y (arc seconds).",
                "type": "number",
                "example": 1.23
              },
              "iau1980Terms": {
                "format": "int32",
                "description": "Number of terms used in the IAU 1980 nutation model (4, 50, or 106).",
                "type": "integer",
                "example": 4
              },
              "leapSecondTime": {
                "format": "date-time",
                "description": "Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap second is not known, the time of the previous leap second is used.",
                "type": "string",
                "example": "2021-01-01T01:01:01.123Z"
              },
              "integratorMode": {
                "description": "Integrator Mode.",
                "maxLength": 32,
                "type": "string",
                "example": "integratorMode"
              },
              "partials": {
                "description": "Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).",
                "maxLength": 16,
                "type": "string",
                "example": "ANALYTIC"
              },
              "stepMode": {
                "description": "Integrator step mode (AUTO, TIME, or S).",
                "maxLength": 16,
                "type": "string",
                "example": "AUTO"
              },
              "fixedStep": {
                "description": "Boolean indicating use of fixed step size for this vector.",
                "type": "boolean",
                "example": true
              },
              "stepSizeSelection": {
                "description": "Initial step size selection (AUTO or MANUAL).",
                "maxLength": 16,
                "type": "string",
                "example": "AUTO"
              },
              "stepSize": {
                "format": "double",
                "description": "Initial integration step size (seconds).",
                "type": "number",
                "example": 1.23
              },
              "errorControl": {
                "format": "double",
                "description": "Integrator error control.",
                "type": "number",
                "example": 1.23
              },
              "sigmaPosUVW": {
                "description": "Array containing the standard deviation of error in target object position, U, V and W direction respectively (km).",
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                },
                "example": [
                  1.23,
                  4.56
                ]
              },
              "sigmaVelUVW": {
                "description": "Array containing the standard deviation of error in target object velocity, U, V and W direction respectively (km/sec).",
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                },
                "example": [
                  1.23,
                  4.56
                ]
              },
              "rms": {
                "format": "double",
                "description": "The Weighted Root Mean Squared (RMS) of the differential correction on the target object that produced this vector.  WRMS is a quality indicator of the state vector update, with a value of 1.00 being optimal.  WRMS applies to Batch Least Squares (BLS) processes.",
                "type": "number",
                "example": 0.991
              },
              "source": {
                "description": "Source of the data.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "example": "Bluestaq"
              },
              "origin": {
                "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                "maxLength": 64,
                "type": "string",
                "example": "THIRD_PARTY_DATASOURCE"
              },
              "dataMode": {
                "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                "maxLength": 32,
                "minLength": 1,
                "enum": [
                  "REAL",
                  "TEST",
                  "SIMULATED",
                  "EXERCISE"
                ],
                "type": "string",
                "example": "TEST"
              },
              "algorithm": {
                "description": "Optional algorithm used to produce this record.",
                "maxLength": 64,
                "type": "string",
                "example": "SAMPLE_ALGORITHM"
              },
              "createdAt": {
                "format": "date-time",
                "description": "Time the row was created in the database, auto-populated by the system.",
                "type": "string",
                "readOnly": true,
                "example": "2018-01-01T16:00:00.123Z"
              },
              "createdBy": {
                "description": "Application user who created the row in the database, auto-populated by the system.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "some.user"
              },
              "descriptor": {
                "description": "Optional source-provided and searchable metadata or descriptor of the data.",
                "maxLength": 64,
                "type": "string",
                "example": "descriptor"
              },
              "transactionId": {
                "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
                "maxLength": 64,
                "type": "string",
                "example": "transactionId"
              },
              "origNetwork": {
                "description": "The originating source network on which this record was created, auto-populated by the system.",
                "maxLength": 32,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "ORIG"
              },
              "sourceDL": {
                "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
                "maxLength": 64,
                "type": "string",
                "readOnly": true,
                "example": "AXE"
              }
            }
          },
          "elset": {
            "description": "An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.",
            "required": [
              "classificationMarking",
              "epoch",
              "source",
              "dataMode"
            ],
            "type": "object",
            "properties": {
              "idElset": {
                "description": "Unique identifier of the record, auto-generated by the system.",
                "maxLength": 36,
                "minLength": 1,
                "type": "string",
                "example": "ELSET-ID"
              },
              "classificationMarking": {
                "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                "maxLength": 128,
                "minLength": 1,
                "type": "string",
                "example": "U"
              },
              "satNo": {
                "format": "int32",
                "description": "Satellite/catalog number of the target on-orbit object.",
                "type": "integer",
                "example": 12
              },
              "epoch": {
                "format": "date-time",
                "description": "Elset epoch time in ISO 8601 UTC format, with microsecond precision.",
                "type": "string",
                "example": "2018-01-01T16:00:00.123456Z"
              },
              "meanMotion": {
                "format": "double",
                "description": "Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.",
                "type": "number",
                "example": 1.1
              },
              "idOnOrbit": {
                "description": "Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                "maxLength": 36,
                "type": "string",
                "readOnly": true,
                "example": "ONORBIT-ID"
              },
              "uct": {
                "description": "Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
                "type": "boolean",
                "example": false
              },
              "eccentricity": {
                "format": "double",
                "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.",
                "type": "number",
                "example": 0.333
              },
              "inclination": {
                "format": "double",
                "description": "The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.",
                "type": "number",
                "example": 45.1
              },
              "raan": {
                "format": "double",
                "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.",
                "type": "number",
                "example": 1.1
              },
              "argOfPerigee": {
                "format": "double",
                "description": "The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.",
                "type": "number",
                "example": 1.1
              },
              "meanAnomaly": {
                "format": "double",
                "description": "Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.",
                "type": "number",
                "example": 179.1
              },
              "revNo": {
                "format": "int32",
                "description": "The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.",
                "type": "integer",
                "example": 111
              },
              "bStar": {
                "format": "double",
                "description": "The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.",
                "type": "number",
                "example": 1.1
              },
              "agom": {
                "format": "double",
                "description": "AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.",
                "type": "number",
                "example": 0.0126
              },
              "ballisticCoeff": {
                "format": "double",
                "description": "Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.",
                "type": "number",
                "example": 0.00815
              },
              "meanMotionDot": {
                "format": "double",
                "description": "1st derivative of the mean motion with respect to time. Units are revolutions per day squared.",
                "type": "number",
                "example": 1.1
              },
              "meanMotionDDot": {
                "format": "double",
                "description": "2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.",
                "type": "number",
                "example": 1.1
              },
              "semiMajorAxis": {
                "format": "double",
                "description": "The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.",
                "type": "number",
                "example": 1.1
              },
              "period": {
                "format": "double",
                "description": "Period of the orbit equal to inverse of mean motion, in minutes.",
                "type": "number",
                "example": 1.1
              },
              "apogee": {
                "format": "double",
                "description": "The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).",
                "type": "number",
                "example": 1.1
              },
              "perigee": {
                "format": "double",
                "description": "The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).",
                "type": "number",
                "example": 1.1
              },
              "origObjectId": {
                "description": "Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.",
                "maxLength": 64,
                "type": "string",
                "example": "ORIGOBJECT-ID"
              },
              "idOrbitDetermination": {
                "description": "Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.",
                "maxLength": 36,
                "type": "string",
                "example": "026dd511-8ba5-47d3-9909-836149f87686"
              },
              "line1": {
                "description": "Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
                "maxLength": 69,
                "type": "string",
                "readOnly": true,
                "example": "Example line1"
              },
              "line2": {
                "description": "Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
                "maxLength": 69,
                "type": "string",
                "readOnly": true,
                "example": "Example line2"
              },
              "descriptor": {
                "description": "Optional source-provided and searchable metadata or descriptor of the data.",
                "maxLength": 64,
                "type": "string",
                "example": "Example description"
              },
              "createdAt": {
                "format": "date-time",
                "description": "Time the row was created in the database, auto-populated by the system.",
                "type": "string",
                "readOnly": true,
                "example": "2018-01-01T16:00:00.123Z"
              },
              "createdBy": {
                "description": "Application user who created the row in the database, auto-populated by the system.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "some.user"
              },
              "origin": {
                "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                "maxLength": 64,
                "type": "string",
                "example": "THIRD_PARTY_DATASOURCE"
              },
              "sourceDL": {
                "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
                "maxLength": 64,
                "type": "string",
                "readOnly": true,
                "example": "AXE"
              },
              "source": {
                "description": "Source of the data.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "example": "Bluestaq"
              },
              "dataMode": {
                "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                "maxLength": 32,
                "minLength": 1,
                "enum": [
                  "REAL",
                  "TEST",
                  "SIMULATED",
                  "EXERCISE"
                ],
                "type": "string",
                "example": "TEST"
              },
              "algorithm": {
                "description": "Optional algorithm used to produce this record.",
                "maxLength": 64,
                "type": "string",
                "example": "Example algorithm"
              },
              "transactionId": {
                "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
                "maxLength": 64,
                "type": "string",
                "example": "TRANSACTION-ID"
              },
              "ephemType": {
                "format": "int16",
                "description": "The ephemeris type associated with this TLE:\n\n0:&nbsp;SGP (or SGP4 with Kozai mean motion)\n\n1:&nbsp;SGP (Kozai mean motion)\n\n2:&nbsp;SGP4 (Brouver mean motion)\n\n3:&nbsp;SDP4\n\n4:&nbsp;SGP4-XP\n\n5:&nbsp;SDP8\n\n6:&nbsp;SP (osculating mean motion)\n\n",
                "type": "integer",
                "example": 1
              },
              "origNetwork": {
                "description": "The originating source network on which this record was created, auto-populated by the system.",
                "maxLength": 32,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "ORIG"
              }
            }
          }
        }
      },
      "CollectRequest_Full": {
        "description": "Collect Requests support several types of individual requests, or planned/scheduled tasks on sensors and/or orbital objects. Options are provided to accomodate most common sensor contact and collection applications, including single sensor-object tasking, search operations, and TT&C support. Multiple requests originating from a plan or schedule may be associated to a sensor plan if desired.",
        "required": [
          "classificationMarking",
          "type",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "COLLECTREQUEST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idParentReq": {
            "description": "The unique ID of the collect request record from which this request originated. This may be used for cases of sensor-to-sensor tasking, such as tip/cue operations.",
            "maxLength": 36,
            "type": "string",
            "example": "da98671b-34db-47bf-8c8d-7c668b92c800"
          },
          "msgType": {
            "description": "The type of external message from which this request originated.",
            "maxLength": 16,
            "type": "string",
            "example": "SU67"
          },
          "msgCreateDate": {
            "format": "date-time",
            "description": "The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2024-04-25T08:17:01.346Z"
          },
          "type": {
            "description": "The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT, POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "DWELL"
          },
          "idPlan": {
            "description": "Unique identifier of the parent plan or schedule associated with this request.  If null, this request is assumed not associated with a plan or schedule.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-PLAN-ID"
          },
          "planIndex": {
            "format": "int32",
            "description": "Index number (integer) for records within a collection plan or schedule.",
            "type": "integer",
            "example": 8
          },
          "taskId": {
            "description": "Task ID associated with this request.  A task ID may be associated with a single collect request or may be used to tie together the sub-requests of a full collect, for example a DWELL consisting of many dwell points.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "dwellId": {
            "description": "The dwell ID associated with this request.  A dwell ID is dwell point specific and a DWELL request consist of many dwell point requests.",
            "maxLength": 36,
            "type": "string",
            "example": "DWELL-ID"
          },
          "externalId": {
            "description": "Optional ID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the requested/scheduled/planned sensor associated with this request.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "obType": {
            "description": "Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER) requested.  This field may correspond to a request of a specific sensor, or to a general non sensor specific request.",
            "maxLength": 24,
            "type": "string",
            "example": "RADAR"
          },
          "priority": {
            "description": "The priority of the collect request  (EMERGENCY, FLASH, IMMEDIATE, PRIORITY, ROUTINE).",
            "maxLength": 24,
            "type": "string",
            "example": "EMERGENCY"
          },
          "taskCategory": {
            "format": "int32",
            "description": "The (SSN) tasking category (1-5) associated with this request.  The tasking category defines the priority of gathering and transmitting the requested observational data.  Note that category definitions are sensor type specific.",
            "type": "integer",
            "example": 4
          },
          "suffix": {
            "description": "The (SSN) tasking suffix (A-Z) associated with this request.  The suffix defines the amount of observational data and the frequency of collection.  Note that suffix definitions are sensor type specific.",
            "maxLength": 1,
            "type": "string",
            "example": "T"
          },
          "uctFollowUp": {
            "description": "Boolean indicating that this collect request is UCT follow-up.",
            "type": "boolean",
            "example": false
          },
          "startTime": {
            "format": "date-time",
            "description": "The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The end time of the collect or contact request window, in ISO 8601 UTC format.  If no endTime or duration is provided it is assumed the request is either ongoing or that the request is for a specified number of tracks (numTracks).  If both duration and endTime are provided, the endTime is assumed to take precedence.",
            "type": "string",
            "example": "2018-01-01T18:00:00.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object for this request.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "REF-ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object for this request.",
            "type": "integer",
            "example": 101
          },
          "origObjectId": {
            "description": "Optional identifier provided by the data source to indicate the target object of this request. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "taskGroup": {
            "description": "The tasking group to which the target object is assigned.",
            "maxLength": 16,
            "type": "string",
            "example": "729"
          },
          "iron": {
            "format": "int32",
            "description": "Inter-Range Operations Number.  Four-digit identifier used to schedule and identify AFSCN contact support for booster, launch, and on-orbit operations.",
            "type": "integer",
            "example": 3
          },
          "orbitRegime": {
            "description": "The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER).",
            "maxLength": 12,
            "type": "string",
            "example": "GEO"
          },
          "targetSize": {
            "format": "double",
            "description": "The minimum object (diameter) size, in meters, to be reported.",
            "type": "number",
            "example": 1.1
          },
          "rcsMin": {
            "format": "double",
            "description": "The minimum Radar Cross-Section of the target, in m^2.  If only minimum RCS is provided it is assumed to be minimum reportable RCS.",
            "type": "number",
            "example": 1.1
          },
          "rcs": {
            "format": "double",
            "description": "The Radar Cross-Section of the target, in m^2.",
            "type": "number",
            "example": 1.1
          },
          "rcsMax": {
            "format": "double",
            "description": "The maximum Radar Cross-Section of the target, in m^2.",
            "type": "number",
            "example": 1.1
          },
          "freqMin": {
            "format": "double",
            "description": "The minimum frequency of interest, in MHz.  If only minimum frequency is provided it is assumed to be minimum reportable frequency.",
            "type": "number",
            "example": 1.1
          },
          "freq": {
            "format": "double",
            "description": "The estimated or expected emission frequency of the target, in MHz.",
            "type": "number",
            "example": 1.1
          },
          "freqMax": {
            "format": "double",
            "description": "The maximum frequency of interest, in MHz.",
            "type": "number",
            "example": 1.1
          },
          "polarization": {
            "description": "The RF polarization (H, LHC, RHC, V).",
            "maxLength": 4,
            "type": "string",
            "example": "H"
          },
          "visMagMin": {
            "format": "double",
            "description": "The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).  If only minimum vismag is provided it is assumed to be minimum reportable vismag.",
            "type": "number",
            "example": 1.1
          },
          "visMag": {
            "format": "double",
            "description": "The estimated or expected visual magnitude of the target, in Magnitudes (M).",
            "type": "number",
            "example": 1.1
          },
          "visMagMax": {
            "format": "double",
            "description": "The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).",
            "type": "number",
            "example": 1.1
          },
          "spectralModel": {
            "description": "The spectral model used for the irradiance calculation.",
            "maxLength": 36,
            "type": "string",
            "example": "Example Model"
          },
          "reflectance": {
            "format": "double",
            "description": "The fraction of solar energy reflected from target.",
            "type": "number",
            "example": 1.1
          },
          "irradiance": {
            "format": "double",
            "description": "The target object irradiance value.",
            "type": "number",
            "example": 1.1
          },
          "numFrames": {
            "format": "int32",
            "description": "For optical sensors, the requested number of frames to capture at each sensor step.",
            "type": "integer",
            "example": 6
          },
          "frameRate": {
            "format": "double",
            "description": "For optical sensors, the frame rate of the camera, in Hz.",
            "type": "number",
            "example": 1.1
          },
          "integrationTime": {
            "format": "double",
            "description": "For optical sensors, the integration time per camera frame, in milliseconds.",
            "type": "number",
            "example": 1.1
          },
          "numTracks": {
            "format": "int32",
            "description": "The number of requested tracks on the target.  If numTracks is not provided it is assumed to indicate all possible observations every pass over the request duration or within the request start/end window.",
            "type": "integer",
            "example": 3
          },
          "numObs": {
            "format": "int32",
            "description": "The number of requested observations on the target.",
            "minimum": 1,
            "type": "integer",
            "example": 9
          },
          "duration": {
            "format": "int32",
            "description": "The duration of the collect request, in seconds.  If both duration and endTime are provided, the endTime is assumed to take precedence.",
            "type": "integer",
            "example": 11
          },
          "srchPattern": {
            "description": "The search pattern to be executed for this request (e.g. PICKET-FENCE, SCAN, etc.).",
            "maxLength": 24,
            "type": "string",
            "example": "SCAN"
          },
          "scenario": {
            "description": "Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.",
            "maxLength": 24,
            "type": "string",
            "example": "Example direction"
          },
          "idElset": {
            "description": "ID of the UDL Elset of the object associated with this request.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-ELSET-ID"
          },
          "idManifold": {
            "description": "ID of the UDL Manifold Elset of the object associated with this request.  A Manifold Elset provides theoretical Keplerian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-MANIFOLD-ID"
          },
          "idStateVector": {
            "description": "ID of the UDL State Vector of the object or central vector associated with this request.",
            "maxLength": 36,
            "type": "string",
            "example": "STATEVECTOR-ID"
          },
          "esId": {
            "description": "ID of the UDL Ephemeris Set of the object associated with this request.",
            "maxLength": 36,
            "type": "string",
            "example": "ES-ID"
          },
          "epoch": {
            "format": "date-time",
            "description": "Epoch time, in ISO 8601 UTC format, of the orbital elements.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "semiMajorAxis": {
            "format": "double",
            "description": "The average of the periapsis and apoapsis distances, in kilometers. For circular orbits, the semimajor axis is the distance between the centers of the bodies.",
            "type": "number",
            "example": 1.1
          },
          "eccentricity": {
            "format": "double",
            "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle.",
            "type": "number",
            "example": 1.1
          },
          "inclination": {
            "format": "double",
            "description": "The angle, in degrees, between the equator and the orbit plane when looking from the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90 representing posigrade orbits and 90-180 representing retrograde orbits.",
            "type": "number",
            "example": 1.1
          },
          "raan": {
            "format": "double",
            "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node.",
            "type": "number",
            "example": 1.1
          },
          "argOfPerigee": {
            "format": "double",
            "description": "The argument of perigee is the angle, in degrees, formed between the perigee and the ascending node.",
            "type": "number",
            "example": 1.1
          },
          "trueAnomoly": {
            "format": "double",
            "description": "The true anomaly defines the angular position, in degrees, of the object on it's orbital path as measured from the orbit focal point at epoch.  The true anomaly is referenced from perigee.",
            "type": "number",
            "example": 1.1
          },
          "ra": {
            "format": "double",
            "description": "The expected or directed right ascension angle, in degrees, for search or target acquisition.",
            "type": "number",
            "example": 1.1
          },
          "dec": {
            "format": "double",
            "description": "The expected or directed declination angle, in degrees, for search or target acquisition.",
            "type": "number",
            "example": 1.1
          },
          "az": {
            "format": "double",
            "description": "The expected or directed azimuth angle, in degrees, for search or target acquisition.",
            "type": "number",
            "example": 1.1
          },
          "el": {
            "format": "double",
            "description": "The expected or directed elevation angle, in degrees, for search or target acquisition.",
            "type": "number",
            "example": 1.1
          },
          "range": {
            "format": "double",
            "description": "The expected acquisition range or defined center range, in km.",
            "type": "number",
            "example": 1.1
          },
          "extentAz": {
            "format": "double",
            "description": "The extent of the azimuth angle, in degrees, from center azimuth to define a spatial volume.",
            "type": "number",
            "example": 1.1
          },
          "extentEl": {
            "format": "double",
            "description": "The extent of the elevation angle, in degrees, from center elevation to define a spatial volume.",
            "type": "number",
            "example": 1.1
          },
          "extentRange": {
            "format": "double",
            "description": "The extent of the range, in km, from center range to define a spatial volume.",
            "type": "number",
            "example": 1.1
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).  If an accompanying stopLat is provided, then the lat value can be assumed to be the starting latitude of a volume definition.",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 1.1
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).  If an accompanying stopLon is provided, then lon value can be assumed to be the starting longitude of a volume definition.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 1.1
          },
          "alt": {
            "format": "double",
            "description": "Height above WGS-84 ellipsoid (HAE), in kilometers.  If an accompanying stopAlt is provided, then alt value can be assumed to be the starting altitude of a volume definition.",
            "type": "number",
            "example": 1.1
          },
          "stopLat": {
            "format": "double",
            "description": "The stopping WGS-84 latitude of a volume definition, in degrees.  -90 to 90 degrees (negative values south of equator).  The stopLat value is only meaningful if a (starting) lat value is provided.",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 1.1
          },
          "stopLon": {
            "format": "double",
            "description": "The stopping WGS-84 longitude of a volume definition, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).  The stopLon value is only meaningful if a (starting) lon value is provided.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 1.1
          },
          "stopAlt": {
            "format": "double",
            "description": "The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in kilometers.  The stopAlt value is only meaningful if a (starting) alt value is provided.",
            "type": "number",
            "example": 1.1
          },
          "srchInc": {
            "format": "double",
            "description": "The maximum inclination, in degrees, to be used in search operations.",
            "type": "number",
            "example": 1.1
          },
          "xAngle": {
            "format": "double",
            "description": "The angular distance, in degrees, in the sensor-x direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.",
            "type": "number",
            "example": 1.1
          },
          "yAngle": {
            "format": "double",
            "description": "The angular distance, in degrees, in the sensor-y direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.",
            "type": "number",
            "example": 1.1
          },
          "orientAngle": {
            "format": "double",
            "description": "The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.  A positive value indicates clockwise rotation about the sensor boresight vector.",
            "type": "number",
            "example": 1.1
          },
          "customer": {
            "description": "The customer for this request.",
            "maxLength": 64,
            "type": "string",
            "example": "Bluestaq"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "notes": {
            "description": "Notes or comments associated with this request.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "Example source"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "stateVector": {
            "description": "This service provides operations for querying and manipulation of state vectors for OnOrbit objects. State vectors are cartesian vectors of position (r) and velocity (v) that, together with their time (epoch) (t), uniquely determine the trajectory of the orbiting body in space. J2000 is the preferred coordinate frame for all state vector positions/velocities in UDL, but in some cases data may be in another frame depending on the provider and/or datatype. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
            "required": [
              "classificationMarking",
              "epoch",
              "source",
              "dataMode"
            ],
            "type": "object",
            "properties": {
              "idStateVector": {
                "description": "Unique identifier of the record, auto-generated by the system.",
                "maxLength": 36,
                "minLength": 1,
                "type": "string",
                "example": "STATEVECTOR-ID"
              },
              "classificationMarking": {
                "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                "maxLength": 128,
                "minLength": 1,
                "type": "string",
                "example": "U"
              },
              "epoch": {
                "format": "date-time",
                "description": "Time of validity for state vector in ISO 8601 UTC datetime format, with microsecond precision.",
                "type": "string",
                "example": "2018-01-01T16:00:00.123456Z"
              },
              "pedigree": {
                "description": "The pedigree of state vector, or methods used for its generation to include state update/orbit determination, propagation from another state, or a state from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION, CONJUNCTION, FLIGHT_PLAN).",
                "maxLength": 32,
                "type": "string",
                "example": "CONJUNCTION"
              },
              "idOnOrbit": {
                "description": "Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                "maxLength": 36,
                "type": "string",
                "readOnly": true,
                "example": "ONORBIT-ID"
              },
              "satNo": {
                "format": "int32",
                "description": "Satellite/Catalog number of the target OnOrbit object.",
                "type": "integer",
                "example": 12
              },
              "origObjectId": {
                "description": "Optional identifier provided by state vector source to indicate the target onorbit object of this state vector. This may be an internal identifier and not necessarily map to a valid satellite number.",
                "maxLength": 64,
                "type": "string",
                "example": "ORIGOBJECT-ID"
              },
              "idOrbitDetermination": {
                "description": "Unique identifier of the OD solution record that produced this state vector. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queries as /udl/orbitdetermination/abc.",
                "maxLength": 36,
                "type": "string",
                "example": "026dd511-8ba5-47d3-9909-836149f87686"
              },
              "uct": {
                "description": "Boolean indicating this state vector was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
                "type": "boolean",
                "example": true
              },
              "xpos": {
                "format": "double",
                "description": "Cartesian X position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -1118.577381
              },
              "ypos": {
                "format": "double",
                "description": "Cartesian Y position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": 3026.231084
              },
              "zpos": {
                "format": "double",
                "description": "Cartesian Z position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": 6167.831808
              },
              "xvel": {
                "format": "double",
                "description": "Cartesian X velocity of target, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -4.25242784
              },
              "yvel": {
                "format": "double",
                "description": "Cartesian Y velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": 5.291107434
              },
              "zvel": {
                "format": "double",
                "description": "Cartesian Z velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -3.356493869
              },
              "xaccel": {
                "format": "double",
                "description": "Cartesian X acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -2.12621392
              },
              "yaccel": {
                "format": "double",
                "description": "Cartesian Y acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": 2.645553717
              },
              "zaccel": {
                "format": "double",
                "description": "Cartesian Z acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -1.06310696
              },
              "referenceFrame": {
                "description": "The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.",
                "maxLength": 24,
                "enum": [
                  "J2000",
                  "EFG/TDR",
                  "ECR/ECEF",
                  "TEME",
                  "ITRF",
                  "GCRF"
                ],
                "type": "string",
                "example": "J2000"
              },
              "cov": {
                "description": "Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.  If the covReferenceFrame is null it is assumed to be J2000.\nThe array values (1-21) represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;\n\nx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3\n\nz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6\n\nx'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10\n\ny'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15\n\nz'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;\n\nThe cov array should contain only the lower left triangle values from top left down to bottom right, in order.\n\nIf additional covariance terms are included for DRAG, SRP, and/or THRUST, the matrix can be extended with the following order of elements:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR\n\nDRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;\n\nSRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;\n\nTHR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;\n\n\n",
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                },
                "example": [
                  1.1,
                  2.4,
                  3.8,
                  4.2,
                  5.5,
                  6
                ]
              },
              "covReferenceFrame": {
                "description": "The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.",
                "maxLength": 24,
                "enum": [
                  "J2000",
                  "UVW"
                ],
                "type": "string",
                "example": "J2000"
              },
              "covMethod": {
                "description": "The method used to generate the covariance during the orbit determination (OD) that produced the state vector, or whether an arbitrary, non-calculated default value was used (CALCULATED, DEFAULT).",
                "maxLength": 24,
                "type": "string",
                "example": "CALCULATED"
              },
              "eqCov": {
                "description": "The covariance matrix values represent the lower triangular half of the covariance matrix in terms of equinoctial elements.&nbsp; The size of the covariance matrix is dynamic.&nbsp; The values are outputted in order across each row, i.e.:\n\n1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5\n\n6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n\n\n\nThe ordering of values is as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp; Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp; B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...\n\nAf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1\n\nAg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3\n\nL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6\n\nN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10\n\nChi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp; 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15\n\nPsi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp; 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21\n\nB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp; 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28\n\nBDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp; 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36\n\nAGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp; 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45\n\nT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp; 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp; 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55\n\nC1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp; 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp; 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66\n\nC2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp; 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp; 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78\n\n:\n\n:\n\nwhere C1, C2, etc, are the \"consider parameters\" that may be added to the covariance matrix.&nbsp; The covariance matrix will be as large as the last element/model parameter needed.&nbsp; In other words, if the DC solved for all 6 elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size will be set to 0x0, and no data will follow.&nbsp; The cov field should contain only the lower left triangle values from top left down to bottom right, in order.",
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                },
                "example": [
                  1.1,
                  2.2
                ]
              },
              "xposAlt1": {
                "format": "double",
                "description": "Cartesian X position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -1145.688502
              },
              "yposAlt1": {
                "format": "double",
                "description": "Cartesian Y position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": 3020.729572
              },
              "zposAlt1": {
                "format": "double",
                "description": "Cartesian Z position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": 6165.55187
              },
              "xvelAlt1": {
                "format": "double",
                "description": "Cartesian X velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -4.270832252
              },
              "yvelAlt1": {
                "format": "double",
                "description": "Cartesian Y velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": 5.27074276
              },
              "zvelAlt1": {
                "format": "double",
                "description": "Cartesian Z velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -3.365155181
              },
              "alt1ReferenceFrame": {
                "description": "The reference frame of the alternate1 (Alt1) cartesian orbital state.",
                "maxLength": 24,
                "type": "string",
                "example": "TEME"
              },
              "xposAlt2": {
                "format": "double",
                "description": "Cartesian X position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -1456.915926
              },
              "yposAlt2": {
                "format": "double",
                "description": "Cartesian Y position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -2883.540406
              },
              "zposAlt2": {
                "format": "double",
                "description": "Cartesian Z position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": 6165.55187
              },
              "xvelAlt2": {
                "format": "double",
                "description": "Cartesian X velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -1.219814294
              },
              "yvelAlt2": {
                "format": "double",
                "description": "Cartesian Y velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -6.602080212
              },
              "zvelAlt2": {
                "format": "double",
                "description": "Cartesian Z velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -3.365155181
              },
              "alt2ReferenceFrame": {
                "description": "The reference frame of the alternate2 (Alt2) cartesian orbital state.",
                "maxLength": 24,
                "type": "string",
                "example": "EFG/TDR"
              },
              "posUnc": {
                "format": "double",
                "description": "One sigma position uncertainty, in kilometers.",
                "type": "number",
                "example": 0.333399744452
              },
              "velUnc": {
                "format": "double",
                "description": "One sigma velocity uncertainty, in kilometers/second.",
                "type": "number",
                "example": 0.000004
              },
              "mass": {
                "format": "double",
                "description": "The mass of the object, in kilograms.",
                "type": "number",
                "example": 164.5
              },
              "area": {
                "format": "double",
                "description": "The actual area of the object at it's largest cross-section, expressed in meters^2.",
                "type": "number",
                "example": 5.065
              },
              "solarRadPressCoeff": {
                "format": "double",
                "description": "Area-to-mass ratio coefficient for solar radiation pressure.",
                "type": "number",
                "example": 0.0244394
              },
              "dragCoeff": {
                "format": "double",
                "description": "Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).",
                "type": "number",
                "example": 0.0224391269775
              },
              "dragArea": {
                "format": "double",
                "description": "The effective area of the object exposed to atmospheric drag, expressed in meters^2.",
                "type": "number",
                "example": 4.739
              },
              "revNo": {
                "format": "int32",
                "description": "Epoch revolution number.",
                "type": "integer",
                "example": 7205
              },
              "geopotentialModel": {
                "description": "Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96 24Z,24T.",
                "maxLength": 32,
                "type": "string",
                "example": "EGM-96"
              },
              "dragModel": {
                "description": "The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).",
                "maxLength": 32,
                "type": "string",
                "example": "JAC70"
              },
              "lunarSolar": {
                "description": "Boolean indicating use of lunar/solar perturbations for this vector.",
                "type": "boolean",
                "example": true
              },
              "solarRadPress": {
                "description": "Boolean indicating use of solar radiation pressure perturbations for this vector.",
                "type": "boolean",
                "example": true
              },
              "srpArea": {
                "format": "double",
                "description": "The effective area of the object exposed to solar radiation pressure, expressed in meters^2.",
                "type": "number",
                "example": 4.311
              },
              "solidEarthTides": {
                "description": "Boolean indicating use of solid earth tide perturbations for this vector.",
                "type": "boolean",
                "example": true
              },
              "inTrackThrust": {
                "description": "Boolean indicating use of in-track thrust perturbations for this vector.",
                "type": "boolean",
                "example": true
              },
              "bDot": {
                "format": "double",
                "description": "First derivative of drag/ballistic coefficient (m2/kg-s).",
                "type": "number",
                "example": 1.23
              },
              "edr": {
                "format": "double",
                "description": "Model parameter value for energy dissipation rate (EDR) (w/kg).",
                "type": "number",
                "example": 1.23
              },
              "thrustAccel": {
                "format": "double",
                "description": "Model parameter value for thrust acceleration (m/s2).",
                "type": "number",
                "example": 1.23
              },
              "cmOffset": {
                "format": "double",
                "description": "Model parameter value for center of mass offset (m).",
                "type": "number",
                "example": 1.23
              },
              "lastObStart": {
                "format": "date-time",
                "description": "The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.",
                "type": "string",
                "example": "2022-11-09T11:20:21.247192Z"
              },
              "lastObEnd": {
                "format": "date-time",
                "description": "The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.",
                "type": "string",
                "example": "2022-11-09T11:20:21.247192Z"
              },
              "obsAvailable": {
                "format": "int32",
                "description": "The number of observations available for the OD of the object.",
                "type": "integer",
                "example": 376
              },
              "obsUsed": {
                "format": "int32",
                "description": "The number of observations accepted for the OD of the object.",
                "type": "integer",
                "example": 374
              },
              "tracksAvail": {
                "format": "int32",
                "description": "The number of sensor tracks available for the OD of the object.",
                "type": "integer",
                "example": 163
              },
              "tracksUsed": {
                "format": "int32",
                "description": "The number of sensor tracks accepted for the OD of the object.",
                "type": "integer",
                "example": 163
              },
              "recODSpan": {
                "format": "double",
                "description": "The recommended OD time span calculated for the object, expressed in days.",
                "type": "number",
                "example": 3.5
              },
              "actualODSpan": {
                "format": "double",
                "description": "The actual time span used for the OD of the object, expressed in days.",
                "type": "number",
                "example": 3.5
              },
              "residualsAcc": {
                "format": "double",
                "description": "The percentage of residuals accepted in the OD of the object.",
                "type": "number",
                "example": 99.5
              },
              "solarFluxF10": {
                "format": "double",
                "description": "F10 (10.7 cm) solar flux value.",
                "type": "number",
                "example": 1.23
              },
              "solarFluxF10Avg": {
                "format": "double",
                "description": "F10 (10.7 cm) solar flux 81-day average value.",
                "type": "number",
                "example": 1.23
              },
              "solarFluxAPAvg": {
                "format": "double",
                "description": "Average solar flux geomagnetic index.",
                "type": "number",
                "example": 1.23
              },
              "taiUtc": {
                "format": "double",
                "description": "TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset in seconds.",
                "type": "number",
                "example": 1.23
              },
              "ut1Utc": {
                "format": "double",
                "description": "Universal Time-1 (UT1) minus UTC offset, in seconds.",
                "type": "number",
                "example": 1.23
              },
              "ut1Rate": {
                "format": "double",
                "description": "Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.",
                "type": "number",
                "example": 1.23
              },
              "polarMotionX": {
                "format": "double",
                "description": "Polar Wander Motion X (arc seconds).",
                "type": "number",
                "example": 1.23
              },
              "polarMotionY": {
                "format": "double",
                "description": "Polar Wander Motion Y (arc seconds).",
                "type": "number",
                "example": 1.23
              },
              "iau1980Terms": {
                "format": "int32",
                "description": "Number of terms used in the IAU 1980 nutation model (4, 50, or 106).",
                "type": "integer",
                "example": 4
              },
              "leapSecondTime": {
                "format": "date-time",
                "description": "Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap second is not known, the time of the previous leap second is used.",
                "type": "string",
                "example": "2021-01-01T01:01:01.123Z"
              },
              "integratorMode": {
                "description": "Integrator Mode.",
                "maxLength": 32,
                "type": "string",
                "example": "integratorMode"
              },
              "partials": {
                "description": "Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).",
                "maxLength": 16,
                "type": "string",
                "example": "ANALYTIC"
              },
              "stepMode": {
                "description": "Integrator step mode (AUTO, TIME, or S).",
                "maxLength": 16,
                "type": "string",
                "example": "AUTO"
              },
              "fixedStep": {
                "description": "Boolean indicating use of fixed step size for this vector.",
                "type": "boolean",
                "example": true
              },
              "stepSizeSelection": {
                "description": "Initial step size selection (AUTO or MANUAL).",
                "maxLength": 16,
                "type": "string",
                "example": "AUTO"
              },
              "stepSize": {
                "format": "double",
                "description": "Initial integration step size (seconds).",
                "type": "number",
                "example": 1.23
              },
              "errorControl": {
                "format": "double",
                "description": "Integrator error control.",
                "type": "number",
                "example": 1.23
              },
              "sigmaPosUVW": {
                "description": "Array containing the standard deviation of error in target object position, U, V and W direction respectively (km).",
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                },
                "example": [
                  1.23,
                  4.56
                ]
              },
              "sigmaVelUVW": {
                "description": "Array containing the standard deviation of error in target object velocity, U, V and W direction respectively (km/sec).",
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                },
                "example": [
                  1.23,
                  4.56
                ]
              },
              "rms": {
                "format": "double",
                "description": "The Weighted Root Mean Squared (RMS) of the differential correction on the target object that produced this vector.  WRMS is a quality indicator of the state vector update, with a value of 1.00 being optimal.  WRMS applies to Batch Least Squares (BLS) processes.",
                "type": "number",
                "example": 0.991
              },
              "effectiveFrom": {
                "format": "date-time",
                "description": "Start time at which this state vector was the 'current' state vector for its satellite.",
                "type": "string",
                "readOnly": true,
                "example": "2018-01-01T16:00:00.123Z"
              },
              "effectiveUntil": {
                "format": "date-time",
                "description": "End time at which this state vector was no longer the 'current' state vector for its satellite.",
                "type": "string",
                "readOnly": true,
                "example": "2018-01-01T16:00:00.123Z"
              },
              "rawFileURI": {
                "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
                "maxLength": 256,
                "type": "string",
                "example": "rawFileURI"
              },
              "source": {
                "description": "Source of the data.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "example": "Bluestaq"
              },
              "origin": {
                "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                "maxLength": 64,
                "type": "string",
                "example": "THIRD_PARTY_DATASOURCE"
              },
              "dataMode": {
                "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                "maxLength": 32,
                "minLength": 1,
                "enum": [
                  "REAL",
                  "TEST",
                  "SIMULATED",
                  "EXERCISE"
                ],
                "type": "string",
                "example": "TEST"
              },
              "tags": {
                "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "TAG1",
                  "TAG2"
                ]
              },
              "algorithm": {
                "description": "Optional algorithm used to produce this record.",
                "maxLength": 64,
                "type": "string",
                "example": "SAMPLE_ALGORITHM"
              },
              "sourcedData": {
                "description": "Optional array of UDL data (observation) UUIDs used to build this state vector. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "DATA1",
                  "DATA2"
                ]
              },
              "sourcedDataTypes": {
                "description": "Optional array of UDL observation data types used to build this state vector (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).",
                "type": "array",
                "items": {
                  "enum": [
                    "EO",
                    "RADAR",
                    "RF",
                    "DOA",
                    "ELSET",
                    "SV"
                  ],
                  "type": "string"
                },
                "example": [
                  "RADAR"
                ]
              },
              "createdAt": {
                "format": "date-time",
                "description": "Time the row was created in the database, auto-populated by the system.",
                "type": "string",
                "readOnly": true,
                "example": "2018-01-01T16:00:00.123Z"
              },
              "createdBy": {
                "description": "Application user who created the row in the database, auto-populated by the system.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "some.user"
              },
              "descriptor": {
                "description": "Optional source-provided and searchable metadata or descriptor of the data.",
                "maxLength": 64,
                "type": "string",
                "example": "descriptor"
              },
              "transactionId": {
                "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
                "maxLength": 64,
                "type": "string",
                "example": "transactionId"
              },
              "origNetwork": {
                "description": "The originating source network on which this record was created, auto-populated by the system.",
                "maxLength": 32,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "ORIG"
              },
              "sourceDL": {
                "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
                "maxLength": 64,
                "type": "string",
                "readOnly": true,
                "example": "AXE"
              }
            }
          },
          "elset": {
            "description": "An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.",
            "required": [
              "classificationMarking",
              "epoch",
              "source",
              "dataMode"
            ],
            "type": "object",
            "properties": {
              "idElset": {
                "description": "Unique identifier of the record, auto-generated by the system.",
                "maxLength": 36,
                "minLength": 1,
                "type": "string",
                "example": "ELSET-ID"
              },
              "classificationMarking": {
                "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                "maxLength": 128,
                "minLength": 1,
                "type": "string",
                "example": "U"
              },
              "satNo": {
                "format": "int32",
                "description": "Satellite/catalog number of the target on-orbit object.",
                "type": "integer",
                "example": 12
              },
              "epoch": {
                "format": "date-time",
                "description": "Elset epoch time in ISO 8601 UTC format, with microsecond precision.",
                "type": "string",
                "example": "2018-01-01T16:00:00.123456Z"
              },
              "meanMotion": {
                "format": "double",
                "description": "Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.",
                "type": "number",
                "example": 1.1
              },
              "idOnOrbit": {
                "description": "Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                "maxLength": 36,
                "type": "string",
                "readOnly": true,
                "example": "ONORBIT-ID"
              },
              "uct": {
                "description": "Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
                "type": "boolean",
                "example": false
              },
              "eccentricity": {
                "format": "double",
                "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.",
                "type": "number",
                "example": 0.333
              },
              "inclination": {
                "format": "double",
                "description": "The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.",
                "type": "number",
                "example": 45.1
              },
              "raan": {
                "format": "double",
                "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.",
                "type": "number",
                "example": 1.1
              },
              "argOfPerigee": {
                "format": "double",
                "description": "The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.",
                "type": "number",
                "example": 1.1
              },
              "meanAnomaly": {
                "format": "double",
                "description": "Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.",
                "type": "number",
                "example": 179.1
              },
              "revNo": {
                "format": "int32",
                "description": "The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.",
                "type": "integer",
                "example": 111
              },
              "bStar": {
                "format": "double",
                "description": "The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.",
                "type": "number",
                "example": 1.1
              },
              "agom": {
                "format": "double",
                "description": "AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.",
                "type": "number",
                "example": 0.0126
              },
              "ballisticCoeff": {
                "format": "double",
                "description": "Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.",
                "type": "number",
                "example": 0.00815
              },
              "meanMotionDot": {
                "format": "double",
                "description": "1st derivative of the mean motion with respect to time. Units are revolutions per day squared.",
                "type": "number",
                "example": 1.1
              },
              "meanMotionDDot": {
                "format": "double",
                "description": "2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.",
                "type": "number",
                "example": 1.1
              },
              "semiMajorAxis": {
                "format": "double",
                "description": "The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.",
                "type": "number",
                "example": 1.1
              },
              "period": {
                "format": "double",
                "description": "Period of the orbit equal to inverse of mean motion, in minutes.",
                "type": "number",
                "example": 1.1
              },
              "apogee": {
                "format": "double",
                "description": "The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).",
                "type": "number",
                "example": 1.1
              },
              "perigee": {
                "format": "double",
                "description": "The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).",
                "type": "number",
                "example": 1.1
              },
              "origObjectId": {
                "description": "Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.",
                "maxLength": 64,
                "type": "string",
                "example": "ORIGOBJECT-ID"
              },
              "idOrbitDetermination": {
                "description": "Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.",
                "maxLength": 36,
                "type": "string",
                "example": "026dd511-8ba5-47d3-9909-836149f87686"
              },
              "effectiveFrom": {
                "format": "date-time",
                "description": "Read-only start time at which this elset was the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.",
                "type": "string",
                "readOnly": true,
                "example": "2018-01-01T16:00:00.123Z"
              },
              "effectiveUntil": {
                "format": "date-time",
                "description": "Read-only end time at which this elset was no longer the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.",
                "type": "string",
                "readOnly": true,
                "example": "2018-01-01T16:00:00.123Z"
              },
              "line1": {
                "description": "Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
                "maxLength": 69,
                "type": "string",
                "readOnly": true,
                "example": "Example line1"
              },
              "line2": {
                "description": "Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
                "maxLength": 69,
                "type": "string",
                "readOnly": true,
                "example": "Example line2"
              },
              "descriptor": {
                "description": "Optional source-provided and searchable metadata or descriptor of the data.",
                "maxLength": 64,
                "type": "string",
                "example": "Example description"
              },
              "createdAt": {
                "format": "date-time",
                "description": "Time the row was created in the database, auto-populated by the system.",
                "type": "string",
                "readOnly": true,
                "example": "2018-01-01T16:00:00.123Z"
              },
              "createdBy": {
                "description": "Application user who created the row in the database, auto-populated by the system.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "some.user"
              },
              "rawFileURI": {
                "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
                "maxLength": 256,
                "type": "string",
                "example": "Example URI"
              },
              "origin": {
                "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                "maxLength": 64,
                "type": "string",
                "example": "THIRD_PARTY_DATASOURCE"
              },
              "sourceDL": {
                "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
                "maxLength": 64,
                "type": "string",
                "readOnly": true,
                "example": "AXE"
              },
              "source": {
                "description": "Source of the data.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "example": "Bluestaq"
              },
              "dataMode": {
                "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                "maxLength": 32,
                "minLength": 1,
                "enum": [
                  "REAL",
                  "TEST",
                  "SIMULATED",
                  "EXERCISE"
                ],
                "type": "string",
                "example": "TEST"
              },
              "tags": {
                "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "PROVIDER_TAG1",
                  "PROVIDER_TAG2"
                ]
              },
              "algorithm": {
                "description": "Optional algorithm used to produce this record.",
                "maxLength": 64,
                "type": "string",
                "example": "Example algorithm"
              },
              "sourcedData": {
                "description": "Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "OBSERVATION_UUID1",
                  "OBSERVATION_UUID2"
                ]
              },
              "sourcedDataTypes": {
                "description": "Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).",
                "type": "array",
                "items": {
                  "enum": [
                    "EO",
                    "RADAR",
                    "RF",
                    "DOA",
                    "ELSET",
                    "SV"
                  ],
                  "type": "string"
                },
                "example": [
                  "RADAR",
                  "RF"
                ]
              },
              "transactionId": {
                "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
                "maxLength": 64,
                "type": "string",
                "example": "TRANSACTION-ID"
              },
              "ephemType": {
                "format": "int16",
                "description": "The ephemeris type associated with this TLE:\n\n0:&nbsp;SGP (or SGP4 with Kozai mean motion)\n\n1:&nbsp;SGP (Kozai mean motion)\n\n2:&nbsp;SGP4 (Brouver mean motion)\n\n3:&nbsp;SDP4\n\n4:&nbsp;SGP4-XP\n\n5:&nbsp;SDP8\n\n6:&nbsp;SP (osculating mean motion)\n\n",
                "type": "integer",
                "example": 1
              },
              "origNetwork": {
                "description": "The originating source network on which this record was created, auto-populated by the system.",
                "maxLength": 32,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "ORIG"
              }
            }
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "collectResponse": {
            "description": "CollectResponses associated to request id. Read-only details (only used on detail queries, not to be provided on create/update operations).",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectResponse_Full"
            },
            "readOnly": true
          }
        }
      },
      "CollectRequest_Ingest": {
        "description": "Collect Requests support several types of individual requests, or planned/scheduled tasks on sensors and/or orbital objects. Options are provided to accomodate most common sensor contact and collection applications, including single sensor-object tasking, search operations, and TT&C support. Multiple requests originating from a plan or schedule may be associated to a sensor plan if desired.",
        "required": [
          "classificationMarking",
          "type",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "COLLECTREQUEST-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idParentReq": {
            "description": "The unique ID of the collect request record from which this request originated. This may be used for cases of sensor-to-sensor tasking, such as tip/cue operations.",
            "maxLength": 36,
            "type": "string",
            "example": "da98671b-34db-47bf-8c8d-7c668b92c800"
          },
          "msgType": {
            "description": "The type of external message from which this request originated.",
            "maxLength": 16,
            "type": "string",
            "example": "SU67"
          },
          "msgCreateDate": {
            "format": "date-time",
            "description": "The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2024-04-25T08:17:01.346Z"
          },
          "type": {
            "description": "The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT, POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "DWELL"
          },
          "idPlan": {
            "description": "Unique identifier of the parent plan or schedule associated with this request.  If null, this request is assumed not associated with a plan or schedule.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-PLAN-ID"
          },
          "planIndex": {
            "format": "int32",
            "description": "Index number (integer) for records within a collection plan or schedule.",
            "type": "integer",
            "example": 8
          },
          "taskId": {
            "description": "Task ID associated with this request.  A task ID may be associated with a single collect request or may be used to tie together the sub-requests of a full collect, for example a DWELL consisting of many dwell points.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "dwellId": {
            "description": "The dwell ID associated with this request.  A dwell ID is dwell point specific and a DWELL request consist of many dwell point requests.",
            "maxLength": 36,
            "type": "string",
            "example": "DWELL-ID"
          },
          "externalId": {
            "description": "Optional ID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the requested/scheduled/planned sensor associated with this request.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "obType": {
            "description": "Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER) requested.  This field may correspond to a request of a specific sensor, or to a general non sensor specific request.",
            "maxLength": 24,
            "type": "string",
            "example": "RADAR"
          },
          "priority": {
            "description": "The priority of the collect request  (EMERGENCY, FLASH, IMMEDIATE, PRIORITY, ROUTINE).",
            "maxLength": 24,
            "type": "string",
            "example": "EMERGENCY"
          },
          "taskCategory": {
            "format": "int32",
            "description": "The (SSN) tasking category (1-5) associated with this request.  The tasking category defines the priority of gathering and transmitting the requested observational data.  Note that category definitions are sensor type specific.",
            "type": "integer",
            "example": 4
          },
          "suffix": {
            "description": "The (SSN) tasking suffix (A-Z) associated with this request.  The suffix defines the amount of observational data and the frequency of collection.  Note that suffix definitions are sensor type specific.",
            "maxLength": 1,
            "type": "string",
            "example": "T"
          },
          "uctFollowUp": {
            "description": "Boolean indicating that this collect request is UCT follow-up.",
            "type": "boolean",
            "example": false
          },
          "startTime": {
            "format": "date-time",
            "description": "The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The end time of the collect or contact request window, in ISO 8601 UTC format.  If no endTime or duration is provided it is assumed the request is either ongoing or that the request is for a specified number of tracks (numTracks).  If both duration and endTime are provided, the endTime is assumed to take precedence.",
            "type": "string",
            "example": "2018-01-01T18:00:00.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object for this request.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "REF-ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object for this request.",
            "type": "integer",
            "example": 101
          },
          "origObjectId": {
            "description": "Optional identifier provided by the data source to indicate the target object of this request. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "taskGroup": {
            "description": "The tasking group to which the target object is assigned.",
            "maxLength": 16,
            "type": "string",
            "example": "729"
          },
          "iron": {
            "format": "int32",
            "description": "Inter-Range Operations Number.  Four-digit identifier used to schedule and identify AFSCN contact support for booster, launch, and on-orbit operations.",
            "type": "integer",
            "example": 3
          },
          "orbitRegime": {
            "description": "The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER).",
            "maxLength": 12,
            "type": "string",
            "example": "GEO"
          },
          "targetSize": {
            "format": "double",
            "description": "The minimum object (diameter) size, in meters, to be reported.",
            "type": "number",
            "example": 1.1
          },
          "rcsMin": {
            "format": "double",
            "description": "The minimum Radar Cross-Section of the target, in m^2.  If only minimum RCS is provided it is assumed to be minimum reportable RCS.",
            "type": "number",
            "example": 1.1
          },
          "rcs": {
            "format": "double",
            "description": "The Radar Cross-Section of the target, in m^2.",
            "type": "number",
            "example": 1.1
          },
          "rcsMax": {
            "format": "double",
            "description": "The maximum Radar Cross-Section of the target, in m^2.",
            "type": "number",
            "example": 1.1
          },
          "freqMin": {
            "format": "double",
            "description": "The minimum frequency of interest, in MHz.  If only minimum frequency is provided it is assumed to be minimum reportable frequency.",
            "type": "number",
            "example": 1.1
          },
          "freq": {
            "format": "double",
            "description": "The estimated or expected emission frequency of the target, in MHz.",
            "type": "number",
            "example": 1.1
          },
          "freqMax": {
            "format": "double",
            "description": "The maximum frequency of interest, in MHz.",
            "type": "number",
            "example": 1.1
          },
          "polarization": {
            "description": "The RF polarization (H, LHC, RHC, V).",
            "maxLength": 4,
            "type": "string",
            "example": "H"
          },
          "visMagMin": {
            "format": "double",
            "description": "The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).  If only minimum vismag is provided it is assumed to be minimum reportable vismag.",
            "type": "number",
            "example": 1.1
          },
          "visMag": {
            "format": "double",
            "description": "The estimated or expected visual magnitude of the target, in Magnitudes (M).",
            "type": "number",
            "example": 1.1
          },
          "visMagMax": {
            "format": "double",
            "description": "The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).",
            "type": "number",
            "example": 1.1
          },
          "spectralModel": {
            "description": "The spectral model used for the irradiance calculation.",
            "maxLength": 36,
            "type": "string",
            "example": "Example Model"
          },
          "reflectance": {
            "format": "double",
            "description": "The fraction of solar energy reflected from target.",
            "type": "number",
            "example": 1.1
          },
          "irradiance": {
            "format": "double",
            "description": "The target object irradiance value.",
            "type": "number",
            "example": 1.1
          },
          "numFrames": {
            "format": "int32",
            "description": "For optical sensors, the requested number of frames to capture at each sensor step.",
            "type": "integer",
            "example": 6
          },
          "frameRate": {
            "format": "double",
            "description": "For optical sensors, the frame rate of the camera, in Hz.",
            "type": "number",
            "example": 1.1
          },
          "integrationTime": {
            "format": "double",
            "description": "For optical sensors, the integration time per camera frame, in milliseconds.",
            "type": "number",
            "example": 1.1
          },
          "numTracks": {
            "format": "int32",
            "description": "The number of requested tracks on the target.  If numTracks is not provided it is assumed to indicate all possible observations every pass over the request duration or within the request start/end window.",
            "type": "integer",
            "example": 3
          },
          "numObs": {
            "format": "int32",
            "description": "The number of requested observations on the target.",
            "minimum": 1,
            "type": "integer",
            "example": 9
          },
          "duration": {
            "format": "int32",
            "description": "The duration of the collect request, in seconds.  If both duration and endTime are provided, the endTime is assumed to take precedence.",
            "type": "integer",
            "example": 11
          },
          "srchPattern": {
            "description": "The search pattern to be executed for this request (e.g. PICKET-FENCE, SCAN, etc.).",
            "maxLength": 24,
            "type": "string",
            "example": "SCAN"
          },
          "scenario": {
            "description": "Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.",
            "maxLength": 24,
            "type": "string",
            "example": "Example direction"
          },
          "idElset": {
            "description": "ID of the UDL Elset of the object associated with this request.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-ELSET-ID"
          },
          "idManifold": {
            "description": "ID of the UDL Manifold Elset of the object associated with this request.  A Manifold Elset provides theoretical Keplerian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-MANIFOLD-ID"
          },
          "idStateVector": {
            "description": "ID of the UDL State Vector of the object or central vector associated with this request.",
            "maxLength": 36,
            "type": "string",
            "example": "STATEVECTOR-ID"
          },
          "esId": {
            "description": "ID of the UDL Ephemeris Set of the object associated with this request.",
            "maxLength": 36,
            "type": "string",
            "example": "ES-ID"
          },
          "epoch": {
            "format": "date-time",
            "description": "Epoch time, in ISO 8601 UTC format, of the orbital elements.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "semiMajorAxis": {
            "format": "double",
            "description": "The average of the periapsis and apoapsis distances, in kilometers. For circular orbits, the semimajor axis is the distance between the centers of the bodies.",
            "type": "number",
            "example": 1.1
          },
          "eccentricity": {
            "format": "double",
            "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle.",
            "type": "number",
            "example": 1.1
          },
          "inclination": {
            "format": "double",
            "description": "The angle, in degrees, between the equator and the orbit plane when looking from the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90 representing posigrade orbits and 90-180 representing retrograde orbits.",
            "type": "number",
            "example": 1.1
          },
          "raan": {
            "format": "double",
            "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node.",
            "type": "number",
            "example": 1.1
          },
          "argOfPerigee": {
            "format": "double",
            "description": "The argument of perigee is the angle, in degrees, formed between the perigee and the ascending node.",
            "type": "number",
            "example": 1.1
          },
          "trueAnomoly": {
            "format": "double",
            "description": "The true anomaly defines the angular position, in degrees, of the object on it's orbital path as measured from the orbit focal point at epoch.  The true anomaly is referenced from perigee.",
            "type": "number",
            "example": 1.1
          },
          "ra": {
            "format": "double",
            "description": "The expected or directed right ascension angle, in degrees, for search or target acquisition.",
            "type": "number",
            "example": 1.1
          },
          "dec": {
            "format": "double",
            "description": "The expected or directed declination angle, in degrees, for search or target acquisition.",
            "type": "number",
            "example": 1.1
          },
          "az": {
            "format": "double",
            "description": "The expected or directed azimuth angle, in degrees, for search or target acquisition.",
            "type": "number",
            "example": 1.1
          },
          "el": {
            "format": "double",
            "description": "The expected or directed elevation angle, in degrees, for search or target acquisition.",
            "type": "number",
            "example": 1.1
          },
          "range": {
            "format": "double",
            "description": "The expected acquisition range or defined center range, in km.",
            "type": "number",
            "example": 1.1
          },
          "extentAz": {
            "format": "double",
            "description": "The extent of the azimuth angle, in degrees, from center azimuth to define a spatial volume.",
            "type": "number",
            "example": 1.1
          },
          "extentEl": {
            "format": "double",
            "description": "The extent of the elevation angle, in degrees, from center elevation to define a spatial volume.",
            "type": "number",
            "example": 1.1
          },
          "extentRange": {
            "format": "double",
            "description": "The extent of the range, in km, from center range to define a spatial volume.",
            "type": "number",
            "example": 1.1
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).  If an accompanying stopLat is provided, then the lat value can be assumed to be the starting latitude of a volume definition.",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 1.1
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).  If an accompanying stopLon is provided, then lon value can be assumed to be the starting longitude of a volume definition.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 1.1
          },
          "alt": {
            "format": "double",
            "description": "Height above WGS-84 ellipsoid (HAE), in kilometers.  If an accompanying stopAlt is provided, then alt value can be assumed to be the starting altitude of a volume definition.",
            "type": "number",
            "example": 1.1
          },
          "stopLat": {
            "format": "double",
            "description": "The stopping WGS-84 latitude of a volume definition, in degrees.  -90 to 90 degrees (negative values south of equator).  The stopLat value is only meaningful if a (starting) lat value is provided.",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 1.1
          },
          "stopLon": {
            "format": "double",
            "description": "The stopping WGS-84 longitude of a volume definition, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).  The stopLon value is only meaningful if a (starting) lon value is provided.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 1.1
          },
          "stopAlt": {
            "format": "double",
            "description": "The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in kilometers.  The stopAlt value is only meaningful if a (starting) alt value is provided.",
            "type": "number",
            "example": 1.1
          },
          "srchInc": {
            "format": "double",
            "description": "The maximum inclination, in degrees, to be used in search operations.",
            "type": "number",
            "example": 1.1
          },
          "xAngle": {
            "format": "double",
            "description": "The angular distance, in degrees, in the sensor-x direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.",
            "type": "number",
            "example": 1.1
          },
          "yAngle": {
            "format": "double",
            "description": "The angular distance, in degrees, in the sensor-y direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.",
            "type": "number",
            "example": 1.1
          },
          "orientAngle": {
            "format": "double",
            "description": "The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.  A positive value indicates clockwise rotation about the sensor boresight vector.",
            "type": "number",
            "example": 1.1
          },
          "customer": {
            "description": "The customer for this request.",
            "maxLength": 64,
            "type": "string",
            "example": "Bluestaq"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "notes": {
            "description": "Notes or comments associated with this request.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "Example source"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "stateVector": {
            "description": "This service provides operations for querying and manipulation of state vectors for OnOrbit objects. State vectors are cartesian vectors of position (r) and velocity (v) that, together with their time (epoch) (t), uniquely determine the trajectory of the orbiting body in space. J2000 is the preferred coordinate frame for all state vector positions/velocities in UDL, but in some cases data may be in another frame depending on the provider and/or datatype. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
            "required": [
              "classificationMarking",
              "epoch",
              "source",
              "dataMode"
            ],
            "type": "object",
            "properties": {
              "idStateVector": {
                "description": "Unique identifier of the record, auto-generated by the system.",
                "maxLength": 36,
                "minLength": 1,
                "type": "string",
                "example": "STATEVECTOR-ID"
              },
              "classificationMarking": {
                "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                "maxLength": 128,
                "minLength": 1,
                "type": "string",
                "example": "U"
              },
              "epoch": {
                "format": "date-time",
                "description": "Time of validity for state vector in ISO 8601 UTC datetime format, with microsecond precision.",
                "type": "string",
                "example": "2018-01-01T16:00:00.123456Z"
              },
              "pedigree": {
                "description": "The pedigree of state vector, or methods used for its generation to include state update/orbit determination, propagation from another state, or a state from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION, CONJUNCTION, FLIGHT_PLAN).",
                "maxLength": 32,
                "type": "string",
                "example": "CONJUNCTION"
              },
              "idOnOrbit": {
                "description": "Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                "maxLength": 36,
                "type": "string",
                "readOnly": true,
                "example": "ONORBIT-ID"
              },
              "satNo": {
                "format": "int32",
                "description": "Satellite/Catalog number of the target OnOrbit object.",
                "type": "integer",
                "example": 12
              },
              "origObjectId": {
                "description": "Optional identifier provided by state vector source to indicate the target onorbit object of this state vector. This may be an internal identifier and not necessarily map to a valid satellite number.",
                "maxLength": 64,
                "type": "string",
                "example": "ORIGOBJECT-ID"
              },
              "idOrbitDetermination": {
                "description": "Unique identifier of the OD solution record that produced this state vector. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queries as /udl/orbitdetermination/abc.",
                "maxLength": 36,
                "type": "string",
                "example": "026dd511-8ba5-47d3-9909-836149f87686"
              },
              "uct": {
                "description": "Boolean indicating this state vector was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
                "type": "boolean",
                "example": true
              },
              "xpos": {
                "format": "double",
                "description": "Cartesian X position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -1118.577381
              },
              "ypos": {
                "format": "double",
                "description": "Cartesian Y position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": 3026.231084
              },
              "zpos": {
                "format": "double",
                "description": "Cartesian Z position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": 6167.831808
              },
              "xvel": {
                "format": "double",
                "description": "Cartesian X velocity of target, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -4.25242784
              },
              "yvel": {
                "format": "double",
                "description": "Cartesian Y velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": 5.291107434
              },
              "zvel": {
                "format": "double",
                "description": "Cartesian Z velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -3.356493869
              },
              "xaccel": {
                "format": "double",
                "description": "Cartesian X acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -2.12621392
              },
              "yaccel": {
                "format": "double",
                "description": "Cartesian Y acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": 2.645553717
              },
              "zaccel": {
                "format": "double",
                "description": "Cartesian Z acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                "type": "number",
                "example": -1.06310696
              },
              "referenceFrame": {
                "description": "The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.",
                "maxLength": 24,
                "enum": [
                  "J2000",
                  "EFG/TDR",
                  "ECR/ECEF",
                  "TEME",
                  "ITRF",
                  "GCRF"
                ],
                "type": "string",
                "example": "J2000"
              },
              "cov": {
                "description": "Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.  If the covReferenceFrame is null it is assumed to be J2000.\nThe array values (1-21) represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;\n\nx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3\n\nz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6\n\nx'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10\n\ny'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15\n\nz'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;\n\nThe cov array should contain only the lower left triangle values from top left down to bottom right, in order.\n\nIf additional covariance terms are included for DRAG, SRP, and/or THRUST, the matrix can be extended with the following order of elements:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR\n\nDRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;\n\nSRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;\n\nTHR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;\n\n\n",
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                },
                "example": [
                  1.1,
                  2.4,
                  3.8,
                  4.2,
                  5.5,
                  6
                ]
              },
              "covReferenceFrame": {
                "description": "The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.",
                "maxLength": 24,
                "enum": [
                  "J2000",
                  "UVW"
                ],
                "type": "string",
                "example": "J2000"
              },
              "covMethod": {
                "description": "The method used to generate the covariance during the orbit determination (OD) that produced the state vector, or whether an arbitrary, non-calculated default value was used (CALCULATED, DEFAULT).",
                "maxLength": 24,
                "type": "string",
                "example": "CALCULATED"
              },
              "eqCov": {
                "description": "The covariance matrix values represent the lower triangular half of the covariance matrix in terms of equinoctial elements.&nbsp; The size of the covariance matrix is dynamic.&nbsp; The values are outputted in order across each row, i.e.:\n\n1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5\n\n6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n\n\n\nThe ordering of values is as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp; Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp; B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...\n\nAf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1\n\nAg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3\n\nL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6\n\nN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10\n\nChi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp; 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15\n\nPsi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp; 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21\n\nB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp; 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28\n\nBDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp; 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36\n\nAGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp; 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45\n\nT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp; 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp; 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55\n\nC1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp; 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp; 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66\n\nC2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp; 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp; 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78\n\n:\n\n:\n\nwhere C1, C2, etc, are the \"consider parameters\" that may be added to the covariance matrix.&nbsp; The covariance matrix will be as large as the last element/model parameter needed.&nbsp; In other words, if the DC solved for all 6 elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size will be set to 0x0, and no data will follow.&nbsp; The cov field should contain only the lower left triangle values from top left down to bottom right, in order.",
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                },
                "example": [
                  1.1,
                  2.2
                ]
              },
              "xposAlt1": {
                "format": "double",
                "description": "Cartesian X position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -1145.688502
              },
              "yposAlt1": {
                "format": "double",
                "description": "Cartesian Y position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": 3020.729572
              },
              "zposAlt1": {
                "format": "double",
                "description": "Cartesian Z position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": 6165.55187
              },
              "xvelAlt1": {
                "format": "double",
                "description": "Cartesian X velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -4.270832252
              },
              "yvelAlt1": {
                "format": "double",
                "description": "Cartesian Y velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": 5.27074276
              },
              "zvelAlt1": {
                "format": "double",
                "description": "Cartesian Z velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -3.365155181
              },
              "alt1ReferenceFrame": {
                "description": "The reference frame of the alternate1 (Alt1) cartesian orbital state.",
                "maxLength": 24,
                "type": "string",
                "example": "TEME"
              },
              "xposAlt2": {
                "format": "double",
                "description": "Cartesian X position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -1456.915926
              },
              "yposAlt2": {
                "format": "double",
                "description": "Cartesian Y position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -2883.540406
              },
              "zposAlt2": {
                "format": "double",
                "description": "Cartesian Z position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": 6165.55187
              },
              "xvelAlt2": {
                "format": "double",
                "description": "Cartesian X velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -1.219814294
              },
              "yvelAlt2": {
                "format": "double",
                "description": "Cartesian Y velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -6.602080212
              },
              "zvelAlt2": {
                "format": "double",
                "description": "Cartesian Z velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                "type": "number",
                "example": -3.365155181
              },
              "alt2ReferenceFrame": {
                "description": "The reference frame of the alternate2 (Alt2) cartesian orbital state.",
                "maxLength": 24,
                "type": "string",
                "example": "EFG/TDR"
              },
              "posUnc": {
                "format": "double",
                "description": "One sigma position uncertainty, in kilometers.",
                "type": "number",
                "example": 0.333399744452
              },
              "velUnc": {
                "format": "double",
                "description": "One sigma velocity uncertainty, in kilometers/second.",
                "type": "number",
                "example": 0.000004
              },
              "mass": {
                "format": "double",
                "description": "The mass of the object, in kilograms.",
                "type": "number",
                "example": 164.5
              },
              "area": {
                "format": "double",
                "description": "The actual area of the object at it's largest cross-section, expressed in meters^2.",
                "type": "number",
                "example": 5.065
              },
              "solarRadPressCoeff": {
                "format": "double",
                "description": "Area-to-mass ratio coefficient for solar radiation pressure.",
                "type": "number",
                "example": 0.0244394
              },
              "dragCoeff": {
                "format": "double",
                "description": "Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).",
                "type": "number",
                "example": 0.0224391269775
              },
              "dragArea": {
                "format": "double",
                "description": "The effective area of the object exposed to atmospheric drag, expressed in meters^2.",
                "type": "number",
                "example": 4.739
              },
              "revNo": {
                "format": "int32",
                "description": "Epoch revolution number.",
                "type": "integer",
                "example": 7205
              },
              "geopotentialModel": {
                "description": "Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96 24Z,24T.",
                "maxLength": 32,
                "type": "string",
                "example": "EGM-96"
              },
              "dragModel": {
                "description": "The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).",
                "maxLength": 32,
                "type": "string",
                "example": "JAC70"
              },
              "lunarSolar": {
                "description": "Boolean indicating use of lunar/solar perturbations for this vector.",
                "type": "boolean",
                "example": true
              },
              "solarRadPress": {
                "description": "Boolean indicating use of solar radiation pressure perturbations for this vector.",
                "type": "boolean",
                "example": true
              },
              "srpArea": {
                "format": "double",
                "description": "The effective area of the object exposed to solar radiation pressure, expressed in meters^2.",
                "type": "number",
                "example": 4.311
              },
              "solidEarthTides": {
                "description": "Boolean indicating use of solid earth tide perturbations for this vector.",
                "type": "boolean",
                "example": true
              },
              "inTrackThrust": {
                "description": "Boolean indicating use of in-track thrust perturbations for this vector.",
                "type": "boolean",
                "example": true
              },
              "bDot": {
                "format": "double",
                "description": "First derivative of drag/ballistic coefficient (m2/kg-s).",
                "type": "number",
                "example": 1.23
              },
              "edr": {
                "format": "double",
                "description": "Model parameter value for energy dissipation rate (EDR) (w/kg).",
                "type": "number",
                "example": 1.23
              },
              "thrustAccel": {
                "format": "double",
                "description": "Model parameter value for thrust acceleration (m/s2).",
                "type": "number",
                "example": 1.23
              },
              "cmOffset": {
                "format": "double",
                "description": "Model parameter value for center of mass offset (m).",
                "type": "number",
                "example": 1.23
              },
              "lastObStart": {
                "format": "date-time",
                "description": "The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.",
                "type": "string",
                "example": "2022-11-09T11:20:21.247192Z"
              },
              "lastObEnd": {
                "format": "date-time",
                "description": "The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.",
                "type": "string",
                "example": "2022-11-09T11:20:21.247192Z"
              },
              "obsAvailable": {
                "format": "int32",
                "description": "The number of observations available for the OD of the object.",
                "type": "integer",
                "example": 376
              },
              "obsUsed": {
                "format": "int32",
                "description": "The number of observations accepted for the OD of the object.",
                "type": "integer",
                "example": 374
              },
              "tracksAvail": {
                "format": "int32",
                "description": "The number of sensor tracks available for the OD of the object.",
                "type": "integer",
                "example": 163
              },
              "tracksUsed": {
                "format": "int32",
                "description": "The number of sensor tracks accepted for the OD of the object.",
                "type": "integer",
                "example": 163
              },
              "recODSpan": {
                "format": "double",
                "description": "The recommended OD time span calculated for the object, expressed in days.",
                "type": "number",
                "example": 3.5
              },
              "actualODSpan": {
                "format": "double",
                "description": "The actual time span used for the OD of the object, expressed in days.",
                "type": "number",
                "example": 3.5
              },
              "residualsAcc": {
                "format": "double",
                "description": "The percentage of residuals accepted in the OD of the object.",
                "type": "number",
                "example": 99.5
              },
              "solarFluxF10": {
                "format": "double",
                "description": "F10 (10.7 cm) solar flux value.",
                "type": "number",
                "example": 1.23
              },
              "solarFluxF10Avg": {
                "format": "double",
                "description": "F10 (10.7 cm) solar flux 81-day average value.",
                "type": "number",
                "example": 1.23
              },
              "solarFluxAPAvg": {
                "format": "double",
                "description": "Average solar flux geomagnetic index.",
                "type": "number",
                "example": 1.23
              },
              "taiUtc": {
                "format": "double",
                "description": "TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset in seconds.",
                "type": "number",
                "example": 1.23
              },
              "ut1Utc": {
                "format": "double",
                "description": "Universal Time-1 (UT1) minus UTC offset, in seconds.",
                "type": "number",
                "example": 1.23
              },
              "ut1Rate": {
                "format": "double",
                "description": "Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.",
                "type": "number",
                "example": 1.23
              },
              "polarMotionX": {
                "format": "double",
                "description": "Polar Wander Motion X (arc seconds).",
                "type": "number",
                "example": 1.23
              },
              "polarMotionY": {
                "format": "double",
                "description": "Polar Wander Motion Y (arc seconds).",
                "type": "number",
                "example": 1.23
              },
              "iau1980Terms": {
                "format": "int32",
                "description": "Number of terms used in the IAU 1980 nutation model (4, 50, or 106).",
                "type": "integer",
                "example": 4
              },
              "leapSecondTime": {
                "format": "date-time",
                "description": "Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap second is not known, the time of the previous leap second is used.",
                "type": "string",
                "example": "2021-01-01T01:01:01.123Z"
              },
              "integratorMode": {
                "description": "Integrator Mode.",
                "maxLength": 32,
                "type": "string",
                "example": "integratorMode"
              },
              "partials": {
                "description": "Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).",
                "maxLength": 16,
                "type": "string",
                "example": "ANALYTIC"
              },
              "stepMode": {
                "description": "Integrator step mode (AUTO, TIME, or S).",
                "maxLength": 16,
                "type": "string",
                "example": "AUTO"
              },
              "fixedStep": {
                "description": "Boolean indicating use of fixed step size for this vector.",
                "type": "boolean",
                "example": true
              },
              "stepSizeSelection": {
                "description": "Initial step size selection (AUTO or MANUAL).",
                "maxLength": 16,
                "type": "string",
                "example": "AUTO"
              },
              "stepSize": {
                "format": "double",
                "description": "Initial integration step size (seconds).",
                "type": "number",
                "example": 1.23
              },
              "errorControl": {
                "format": "double",
                "description": "Integrator error control.",
                "type": "number",
                "example": 1.23
              },
              "sigmaPosUVW": {
                "description": "Array containing the standard deviation of error in target object position, U, V and W direction respectively (km).",
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                },
                "example": [
                  1.23,
                  4.56
                ]
              },
              "sigmaVelUVW": {
                "description": "Array containing the standard deviation of error in target object velocity, U, V and W direction respectively (km/sec).",
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                },
                "example": [
                  1.23,
                  4.56
                ]
              },
              "rms": {
                "format": "double",
                "description": "The Weighted Root Mean Squared (RMS) of the differential correction on the target object that produced this vector.  WRMS is a quality indicator of the state vector update, with a value of 1.00 being optimal.  WRMS applies to Batch Least Squares (BLS) processes.",
                "type": "number",
                "example": 0.991
              },
              "rawFileURI": {
                "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
                "maxLength": 256,
                "type": "string",
                "example": "rawFileURI"
              },
              "source": {
                "description": "Source of the data.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "example": "Bluestaq"
              },
              "origin": {
                "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                "maxLength": 64,
                "type": "string",
                "example": "THIRD_PARTY_DATASOURCE"
              },
              "dataMode": {
                "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                "maxLength": 32,
                "minLength": 1,
                "enum": [
                  "REAL",
                  "TEST",
                  "SIMULATED",
                  "EXERCISE"
                ],
                "type": "string",
                "example": "TEST"
              },
              "tags": {
                "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "TAG1",
                  "TAG2"
                ]
              },
              "algorithm": {
                "description": "Optional algorithm used to produce this record.",
                "maxLength": 64,
                "type": "string",
                "example": "SAMPLE_ALGORITHM"
              },
              "sourcedData": {
                "description": "Optional array of UDL data (observation) UUIDs used to build this state vector. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "DATA1",
                  "DATA2"
                ]
              },
              "sourcedDataTypes": {
                "description": "Optional array of UDL observation data types used to build this state vector (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).",
                "type": "array",
                "items": {
                  "enum": [
                    "EO",
                    "RADAR",
                    "RF",
                    "DOA",
                    "ELSET",
                    "SV"
                  ],
                  "type": "string"
                },
                "example": [
                  "RADAR"
                ]
              },
              "createdAt": {
                "format": "date-time",
                "description": "Time the row was created in the database, auto-populated by the system.",
                "type": "string",
                "readOnly": true,
                "example": "2018-01-01T16:00:00.123Z"
              },
              "createdBy": {
                "description": "Application user who created the row in the database, auto-populated by the system.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "some.user"
              },
              "descriptor": {
                "description": "Optional source-provided and searchable metadata or descriptor of the data.",
                "maxLength": 64,
                "type": "string",
                "example": "descriptor"
              },
              "transactionId": {
                "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
                "maxLength": 64,
                "type": "string",
                "example": "transactionId"
              },
              "origNetwork": {
                "description": "The originating source network on which this record was created, auto-populated by the system.",
                "maxLength": 32,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "ORIG"
              },
              "sourceDL": {
                "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
                "maxLength": 64,
                "type": "string",
                "readOnly": true,
                "example": "AXE"
              }
            }
          },
          "elset": {
            "description": "An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.",
            "required": [
              "classificationMarking",
              "epoch",
              "source",
              "dataMode"
            ],
            "type": "object",
            "properties": {
              "idElset": {
                "description": "Unique identifier of the record, auto-generated by the system.",
                "maxLength": 36,
                "minLength": 1,
                "type": "string",
                "example": "ELSET-ID"
              },
              "classificationMarking": {
                "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                "maxLength": 128,
                "minLength": 1,
                "type": "string",
                "example": "U"
              },
              "satNo": {
                "format": "int32",
                "description": "Satellite/catalog number of the target on-orbit object.",
                "type": "integer",
                "example": 12
              },
              "epoch": {
                "format": "date-time",
                "description": "Elset epoch time in ISO 8601 UTC format, with microsecond precision.",
                "type": "string",
                "example": "2018-01-01T16:00:00.123456Z"
              },
              "meanMotion": {
                "format": "double",
                "description": "Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.",
                "type": "number",
                "example": 1.1
              },
              "idOnOrbit": {
                "description": "Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                "maxLength": 36,
                "type": "string",
                "readOnly": true,
                "example": "ONORBIT-ID"
              },
              "uct": {
                "description": "Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
                "type": "boolean",
                "example": false
              },
              "eccentricity": {
                "format": "double",
                "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.",
                "type": "number",
                "example": 0.333
              },
              "inclination": {
                "format": "double",
                "description": "The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.",
                "type": "number",
                "example": 45.1
              },
              "raan": {
                "format": "double",
                "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.",
                "type": "number",
                "example": 1.1
              },
              "argOfPerigee": {
                "format": "double",
                "description": "The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.",
                "type": "number",
                "example": 1.1
              },
              "meanAnomaly": {
                "format": "double",
                "description": "Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.",
                "type": "number",
                "example": 179.1
              },
              "revNo": {
                "format": "int32",
                "description": "The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.",
                "type": "integer",
                "example": 111
              },
              "bStar": {
                "format": "double",
                "description": "The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.",
                "type": "number",
                "example": 1.1
              },
              "agom": {
                "format": "double",
                "description": "AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.",
                "type": "number",
                "example": 0.0126
              },
              "ballisticCoeff": {
                "format": "double",
                "description": "Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.",
                "type": "number",
                "example": 0.00815
              },
              "meanMotionDot": {
                "format": "double",
                "description": "1st derivative of the mean motion with respect to time. Units are revolutions per day squared.",
                "type": "number",
                "example": 1.1
              },
              "meanMotionDDot": {
                "format": "double",
                "description": "2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.",
                "type": "number",
                "example": 1.1
              },
              "semiMajorAxis": {
                "format": "double",
                "description": "The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.",
                "type": "number",
                "example": 1.1
              },
              "period": {
                "format": "double",
                "description": "Period of the orbit equal to inverse of mean motion, in minutes.",
                "type": "number",
                "example": 1.1
              },
              "apogee": {
                "format": "double",
                "description": "The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).",
                "type": "number",
                "example": 1.1
              },
              "perigee": {
                "format": "double",
                "description": "The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).",
                "type": "number",
                "example": 1.1
              },
              "origObjectId": {
                "description": "Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.",
                "maxLength": 64,
                "type": "string",
                "example": "ORIGOBJECT-ID"
              },
              "idOrbitDetermination": {
                "description": "Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.",
                "maxLength": 36,
                "type": "string",
                "example": "026dd511-8ba5-47d3-9909-836149f87686"
              },
              "line1": {
                "description": "Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
                "maxLength": 69,
                "type": "string",
                "readOnly": true,
                "example": "Example line1"
              },
              "line2": {
                "description": "Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
                "maxLength": 69,
                "type": "string",
                "readOnly": true,
                "example": "Example line2"
              },
              "descriptor": {
                "description": "Optional source-provided and searchable metadata or descriptor of the data.",
                "maxLength": 64,
                "type": "string",
                "example": "Example description"
              },
              "createdAt": {
                "format": "date-time",
                "description": "Time the row was created in the database, auto-populated by the system.",
                "type": "string",
                "readOnly": true,
                "example": "2018-01-01T16:00:00.123Z"
              },
              "createdBy": {
                "description": "Application user who created the row in the database, auto-populated by the system.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "some.user"
              },
              "rawFileURI": {
                "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
                "maxLength": 256,
                "type": "string",
                "example": "Example URI"
              },
              "origin": {
                "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                "maxLength": 64,
                "type": "string",
                "example": "THIRD_PARTY_DATASOURCE"
              },
              "sourceDL": {
                "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
                "maxLength": 64,
                "type": "string",
                "readOnly": true,
                "example": "AXE"
              },
              "source": {
                "description": "Source of the data.",
                "maxLength": 64,
                "minLength": 1,
                "type": "string",
                "example": "Bluestaq"
              },
              "dataMode": {
                "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                "maxLength": 32,
                "minLength": 1,
                "enum": [
                  "REAL",
                  "TEST",
                  "SIMULATED",
                  "EXERCISE"
                ],
                "type": "string",
                "example": "TEST"
              },
              "tags": {
                "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "PROVIDER_TAG1",
                  "PROVIDER_TAG2"
                ]
              },
              "algorithm": {
                "description": "Optional algorithm used to produce this record.",
                "maxLength": 64,
                "type": "string",
                "example": "Example algorithm"
              },
              "sourcedData": {
                "description": "Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "OBSERVATION_UUID1",
                  "OBSERVATION_UUID2"
                ]
              },
              "sourcedDataTypes": {
                "description": "Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).",
                "type": "array",
                "items": {
                  "enum": [
                    "EO",
                    "RADAR",
                    "RF",
                    "DOA",
                    "ELSET",
                    "SV"
                  ],
                  "type": "string"
                },
                "example": [
                  "RADAR",
                  "RF"
                ]
              },
              "transactionId": {
                "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
                "maxLength": 64,
                "type": "string",
                "example": "TRANSACTION-ID"
              },
              "ephemType": {
                "format": "int16",
                "description": "The ephemeris type associated with this TLE:\n\n0:&nbsp;SGP (or SGP4 with Kozai mean motion)\n\n1:&nbsp;SGP (Kozai mean motion)\n\n2:&nbsp;SGP4 (Brouver mean motion)\n\n3:&nbsp;SDP4\n\n4:&nbsp;SGP4-XP\n\n5:&nbsp;SDP8\n\n6:&nbsp;SP (osculating mean motion)\n\n",
                "type": "integer",
                "example": 1
              },
              "origNetwork": {
                "description": "The originating source network on which this record was created, auto-populated by the system.",
                "maxLength": 32,
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "example": "ORIG"
              }
            }
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "CollectResponse_Abridged": {
        "description": "Collect response supports the response and status of individual collect requests. Each response is referenced by the UUID of the request, and contains information including the status of the request, collection times and types, and reference(s) to the observations collected. There may be multiple responses associated with a request, either from multiple collectors or to relay status changes prior to completion and delivery.",
        "required": [
          "classificationMarking",
          "idRequest",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "COLLECTRESPONSE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idRequest": {
            "description": "Unique identifier of the request associated with this response.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-REQUEST-ID"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object associated with this response.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "REF-ONORBIT-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided by data source to indicate the target object of this response. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 101
          },
          "taskId": {
            "description": "Optional task ID associated with the request/response.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "idPlan": {
            "description": "Unique identifier of the parent plan or schedule associated with the request/response.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-PLAN-ID"
          },
          "externalId": {
            "description": "UUID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "status": {
            "description": "The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED, FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):\n\nACCEPTED: The collect or contact request has been received and accepted.\n\nCANCELLED: A previously scheduled collect or contact whose execution was cancelled.\n\nCOLLECTED: The collect has been accomplished. A collected state implies that additional activity is required for delivery/completion.\n\nCOMPLETED: The collect or contact has been completed. For many systems completed and delivered constitute an equivalent successful end state.\n\nDELIVERED: The collected observation(s) have been delivered to the requestor. For many systems completed and delivered constitute an equivalent successful end state. A DELIVERED state is typically used for systems that exhibit a delay between collect and delivery, such as with space-based systems which require ground contact to deliver observations.\n\nFAILED: The collect or contact was attempted and failed, or the delivery of the collected observation(s) failed. A FAILED status may be accompanied by an error code (errCode), if available.\n\nPARTIAL: A PARTIAL state indicates that a part of a multi-track request has been accomplished, but the full request is incomplete. A PARTIAL status should ultimately be resolved to an end state.\n\nPROPOSED: Indicates that the request was received and alternate collect or contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate is accepted by the requestor the current request should be cancelled and a new request created.\n\nREJECTED: The request has been received and rejected by the provider. A REJECTED status may be accompanied by an explanation (notes) of the reason that the request was rejected.\n\nSCHEDULED: The request was received and has been scheduled for execution.",
            "maxLength": 36,
            "type": "string",
            "example": "ACCEPTED"
          },
          "actualStartTime": {
            "format": "date-time",
            "description": "The actual start time of the collect or contact, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "actualEndTime": {
            "format": "date-time",
            "description": "The actual end time of the collect or contact, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T18:00:00.123456Z"
          },
          "altStartTime": {
            "format": "date-time",
            "description": "Proposed alternative start time, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "altEndTime": {
            "format": "date-time",
            "description": "Proposed alternative end time, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T18:00:00.123456Z"
          },
          "errCode": {
            "description": "Error code associated with this request/response.",
            "maxLength": 36,
            "type": "string",
            "example": "ERROR CODE"
          },
          "srcTyps": {
            "description": "Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or produced in response to the associated request.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "DOA",
              "DWELL"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data record(s) collected in response to the associated request.  See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "DOA_ID",
              "DWELL_ID"
            ]
          },
          "notes": {
            "description": "Notes or comments associated with this response.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the collection source to indicate the sensor identifier responding to this collect or contact. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "CollectResponse_Full": {
        "description": "Collect response supports the response and status of individual collect requests. Each response is referenced by the UUID of the request, and contains information including the status of the request, collection times and types, and reference(s) to the observations collected. There may be multiple responses associated with a request, either from multiple collectors or to relay status changes prior to completion and delivery.",
        "required": [
          "classificationMarking",
          "idRequest",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "COLLECTRESPONSE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idRequest": {
            "description": "Unique identifier of the request associated with this response.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-REQUEST-ID"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object associated with this response.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "REF-ONORBIT-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided by data source to indicate the target object of this response. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 101
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "taskId": {
            "description": "Optional task ID associated with the request/response.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "idPlan": {
            "description": "Unique identifier of the parent plan or schedule associated with the request/response.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-PLAN-ID"
          },
          "externalId": {
            "description": "UUID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "status": {
            "description": "The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED, FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):\n\nACCEPTED: The collect or contact request has been received and accepted.\n\nCANCELLED: A previously scheduled collect or contact whose execution was cancelled.\n\nCOLLECTED: The collect has been accomplished. A collected state implies that additional activity is required for delivery/completion.\n\nCOMPLETED: The collect or contact has been completed. For many systems completed and delivered constitute an equivalent successful end state.\n\nDELIVERED: The collected observation(s) have been delivered to the requestor. For many systems completed and delivered constitute an equivalent successful end state. A DELIVERED state is typically used for systems that exhibit a delay between collect and delivery, such as with space-based systems which require ground contact to deliver observations.\n\nFAILED: The collect or contact was attempted and failed, or the delivery of the collected observation(s) failed. A FAILED status may be accompanied by an error code (errCode), if available.\n\nPARTIAL: A PARTIAL state indicates that a part of a multi-track request has been accomplished, but the full request is incomplete. A PARTIAL status should ultimately be resolved to an end state.\n\nPROPOSED: Indicates that the request was received and alternate collect or contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate is accepted by the requestor the current request should be cancelled and a new request created.\n\nREJECTED: The request has been received and rejected by the provider. A REJECTED status may be accompanied by an explanation (notes) of the reason that the request was rejected.\n\nSCHEDULED: The request was received and has been scheduled for execution.",
            "maxLength": 36,
            "type": "string",
            "example": "ACCEPTED"
          },
          "actualStartTime": {
            "format": "date-time",
            "description": "The actual start time of the collect or contact, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "actualEndTime": {
            "format": "date-time",
            "description": "The actual end time of the collect or contact, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T18:00:00.123456Z"
          },
          "altStartTime": {
            "format": "date-time",
            "description": "Proposed alternative start time, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "altEndTime": {
            "format": "date-time",
            "description": "Proposed alternative end time, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T18:00:00.123456Z"
          },
          "errCode": {
            "description": "Error code associated with this request/response.",
            "maxLength": 36,
            "type": "string",
            "example": "ERROR CODE"
          },
          "srcTyps": {
            "description": "Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or produced in response to the associated request.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "DOA",
              "DWELL"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data record(s) collected in response to the associated request.  See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "DOA_ID",
              "DWELL_ID"
            ]
          },
          "notes": {
            "description": "Notes or comments associated with this response.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the collection source to indicate the sensor identifier responding to this collect or contact. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "CollectResponse_Ingest": {
        "description": "Collect response supports the response and status of individual collect requests. Each response is referenced by the UUID of the request, and contains information including the status of the request, collection times and types, and reference(s) to the observations collected. There may be multiple responses associated with a request, either from multiple collectors or to relay status changes prior to completion and delivery.",
        "required": [
          "classificationMarking",
          "idRequest",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "COLLECTRESPONSE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idRequest": {
            "description": "Unique identifier of the request associated with this response.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-REQUEST-ID"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object associated with this response.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "REF-ONORBIT-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided by data source to indicate the target object of this response. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 101
          },
          "taskId": {
            "description": "Optional task ID associated with the request/response.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "idPlan": {
            "description": "Unique identifier of the parent plan or schedule associated with the request/response.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-PLAN-ID"
          },
          "externalId": {
            "description": "UUID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "status": {
            "description": "The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED, FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):\n\nACCEPTED: The collect or contact request has been received and accepted.\n\nCANCELLED: A previously scheduled collect or contact whose execution was cancelled.\n\nCOLLECTED: The collect has been accomplished. A collected state implies that additional activity is required for delivery/completion.\n\nCOMPLETED: The collect or contact has been completed. For many systems completed and delivered constitute an equivalent successful end state.\n\nDELIVERED: The collected observation(s) have been delivered to the requestor. For many systems completed and delivered constitute an equivalent successful end state. A DELIVERED state is typically used for systems that exhibit a delay between collect and delivery, such as with space-based systems which require ground contact to deliver observations.\n\nFAILED: The collect or contact was attempted and failed, or the delivery of the collected observation(s) failed. A FAILED status may be accompanied by an error code (errCode), if available.\n\nPARTIAL: A PARTIAL state indicates that a part of a multi-track request has been accomplished, but the full request is incomplete. A PARTIAL status should ultimately be resolved to an end state.\n\nPROPOSED: Indicates that the request was received and alternate collect or contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate is accepted by the requestor the current request should be cancelled and a new request created.\n\nREJECTED: The request has been received and rejected by the provider. A REJECTED status may be accompanied by an explanation (notes) of the reason that the request was rejected.\n\nSCHEDULED: The request was received and has been scheduled for execution.",
            "maxLength": 36,
            "type": "string",
            "example": "ACCEPTED"
          },
          "actualStartTime": {
            "format": "date-time",
            "description": "The actual start time of the collect or contact, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "actualEndTime": {
            "format": "date-time",
            "description": "The actual end time of the collect or contact, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T18:00:00.123456Z"
          },
          "altStartTime": {
            "format": "date-time",
            "description": "Proposed alternative start time, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "altEndTime": {
            "format": "date-time",
            "description": "Proposed alternative end time, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T18:00:00.123456Z"
          },
          "errCode": {
            "description": "Error code associated with this request/response.",
            "maxLength": 36,
            "type": "string",
            "example": "ERROR CODE"
          },
          "srcTyps": {
            "description": "Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or produced in response to the associated request.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "DOA",
              "DWELL"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data record(s) collected in response to the associated request.  See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "DOA_ID",
              "DWELL_ID"
            ]
          },
          "notes": {
            "description": "Notes or comments associated with this response.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the collection source to indicate the sensor identifier responding to this collect or contact. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "Engine_Full": {
        "description": "Known launch vehicle engines and their performance characteristics and limits.  A launch vehicle has 1 to many engines per stage.",
        "required": [
          "name",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "name": {
            "description": "Engine name/variant.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE_VARIANT1"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engineDetails": {
            "description": "Read-only collection of additional EngineDetails by various sources for this engine, ignored on create/update. These details must be created separately via the /udl/enginedetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EngineDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "EngineDetails_Full": {
        "description": "Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.",
        "required": [
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINEDETAILS-ID"
          },
          "idEngine": {
            "description": "Identifier of the parent engine record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "family": {
            "description": "Engine type or family.",
            "maxLength": 64,
            "type": "string",
            "example": "ENGINE_TYPE1"
          },
          "cycleType": {
            "description": "Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Pressure Fed"
          },
          "characteristicType": {
            "description": "Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Electric"
          },
          "manufacturerOrgId": {
            "description": "Organization ID of the engine manufacturer.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "specificImpulse": {
            "format": "double",
            "description": "Launch engine specific impulse in seconds.",
            "type": "number",
            "example": 1.1
          },
          "burnTime": {
            "format": "double",
            "description": "Launch engine maximum burn time in seconds.",
            "type": "number",
            "example": 1.1
          },
          "seaLevelThrust": {
            "format": "double",
            "description": "Engine maximum thrust at sea level in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "vacuumThrust": {
            "format": "double",
            "description": "Engine maximum thrust in a vacuum in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "chamberPressure": {
            "format": "double",
            "description": "Engine chamber pressure in bars.",
            "type": "number",
            "example": 1.1
          },
          "nozzleExpansionRatio": {
            "format": "double",
            "description": "Engine nozzle expansion ratio.",
            "type": "number",
            "example": 1.1
          },
          "maxFirings": {
            "format": "int32",
            "description": "Engine maximum number of firings.",
            "type": "integer",
            "example": 5
          },
          "propellant": {
            "description": "Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid"
          },
          "oxidizer": {
            "description": "Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid Oxygen"
          },
          "notes": {
            "description": "Notes/Description of the engine.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "ISRCollection_Abridged": {
        "description": "ISR Collection data.",
        "required": [
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ISRCOLLECTION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idexVersion": {
            "format": "int32",
            "description": "Version of the IDEX software the request came from for compatibility.",
            "type": "integer",
            "example": 2
          },
          "name": {
            "description": "Human readable Mission Name.",
            "maxLength": 128,
            "type": "string",
            "example": "Example mission name"
          },
          "missionId": {
            "description": "Mission Identifier.",
            "maxLength": 32,
            "type": "string",
            "example": "myTask-2020-04-23T00:00:00.000Z"
          },
          "missionAOR": {
            "description": "Designation of mission Area Of Responsibility.",
            "maxLength": 32,
            "type": "string",
            "example": "Kandahar"
          },
          "missionPrimaryIntelDiscipline": {
            "description": "Primary type of intelligence to be collected during the mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Sig"
          },
          "missionPrimarySubCategory": {
            "description": "Sub category of primary intelligence to be collected.",
            "maxLength": 32,
            "type": "string",
            "example": "FMV"
          },
          "missionSecondaryIntelDiscipline": {
            "description": "Type of intelligence to be collected second.",
            "maxLength": 32,
            "type": "string",
            "example": "Intelligence_2"
          },
          "missionSecondarySubCategory": {
            "description": "Mission sub category for secondary intelligence discipline to be collected.",
            "maxLength": 32,
            "type": "string",
            "example": "Convoy"
          },
          "missionRole": {
            "description": "What is the primary objective(Role) of this mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Targeting of Lead Vehicle"
          },
          "missionOperation": {
            "description": "Mission operation name.",
            "maxLength": 32,
            "type": "string",
            "example": "OP-HONEY-BADGER"
          },
          "missionPriority": {
            "format": "int32",
            "description": "Mission Priority (1-n).",
            "type": "integer",
            "example": 1
          },
          "missionSupportedUnit": {
            "description": "Name of the Supporting unit/Location that is performing this mission.",
            "maxLength": 32,
            "type": "string",
            "example": "ENVOYS"
          },
          "missionEmphasis": {
            "description": "Text version of what we are emphasizing in this mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Mission emphasis"
          },
          "missionStartPointLat": {
            "format": "double",
            "description": "WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.23
          },
          "missionStartPointLong": {
            "format": "double",
            "description": "WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 80.23
          },
          "missionCollectionArea": {
            "description": "Mission geographical collection area.",
            "maxLength": 512,
            "type": "string",
            "example": "Example collection area"
          },
          "missionJoa": {
            "description": "Joint Operations Area.",
            "maxLength": 32,
            "type": "string",
            "example": "Operation area"
          },
          "missionSyncMatrixBin": {
            "description": "A synchronization matrix is used to organize the logistics synchronization process during a mission.",
            "maxLength": 32,
            "type": "string",
            "example": "MATRIX"
          },
          "missionCountry": {
            "description": "Country code of the mission.  A Country may represent countries, multi-national consortiums, and international organizations.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "missionRegion": {
            "description": "Region of the mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Example Region"
          },
          "missionSubRegion": {
            "description": "Subregion of the mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Example Subregion"
          },
          "collectionRequirements": {
            "description": "Mission desired collection requirements.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionRequirements_Abridged"
            }
          },
          "transit": {
            "description": "Object for data dissemination.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionTransit_Abridged"
            }
          },
          "taskings": {
            "description": "Individual taskings to complete the mission.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionTaskings_Abridged"
            }
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2021-01-19T01:01:15.001Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "ISRCollection_Full": {
        "description": "ISR Collection data.",
        "required": [
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ISRCOLLECTION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idexVersion": {
            "format": "int32",
            "description": "Version of the IDEX software the request came from for compatibility.",
            "type": "integer",
            "example": 2
          },
          "name": {
            "description": "Human readable Mission Name.",
            "maxLength": 128,
            "type": "string",
            "example": "Example mission name"
          },
          "missionId": {
            "description": "Mission Identifier.",
            "maxLength": 32,
            "type": "string",
            "example": "myTask-2020-04-23T00:00:00.000Z"
          },
          "missionAOR": {
            "description": "Designation of mission Area Of Responsibility.",
            "maxLength": 32,
            "type": "string",
            "example": "Kandahar"
          },
          "missionPrimaryIntelDiscipline": {
            "description": "Primary type of intelligence to be collected during the mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Sig"
          },
          "missionPrimarySubCategory": {
            "description": "Sub category of primary intelligence to be collected.",
            "maxLength": 32,
            "type": "string",
            "example": "FMV"
          },
          "missionSecondaryIntelDiscipline": {
            "description": "Type of intelligence to be collected second.",
            "maxLength": 32,
            "type": "string",
            "example": "Intelligence_2"
          },
          "missionSecondarySubCategory": {
            "description": "Mission sub category for secondary intelligence discipline to be collected.",
            "maxLength": 32,
            "type": "string",
            "example": "Convoy"
          },
          "missionRole": {
            "description": "What is the primary objective(Role) of this mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Targeting of Lead Vehicle"
          },
          "missionOperation": {
            "description": "Mission operation name.",
            "maxLength": 32,
            "type": "string",
            "example": "OP-HONEY-BADGER"
          },
          "missionPriority": {
            "format": "int32",
            "description": "Mission Priority (1-n).",
            "type": "integer",
            "example": 1
          },
          "missionSupportedUnit": {
            "description": "Name of the Supporting unit/Location that is performing this mission.",
            "maxLength": 32,
            "type": "string",
            "example": "ENVOYS"
          },
          "missionEmphasis": {
            "description": "Text version of what we are emphasizing in this mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Mission emphasis"
          },
          "missionStartPointLat": {
            "format": "double",
            "description": "WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.23
          },
          "missionStartPointLong": {
            "format": "double",
            "description": "WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 80.23
          },
          "missionCollectionArea": {
            "description": "Mission geographical collection area.",
            "maxLength": 512,
            "type": "string",
            "example": "Example collection area"
          },
          "missionJoa": {
            "description": "Joint Operations Area.",
            "maxLength": 32,
            "type": "string",
            "example": "Operation area"
          },
          "missionSyncMatrixBin": {
            "description": "A synchronization matrix is used to organize the logistics synchronization process during a mission.",
            "maxLength": 32,
            "type": "string",
            "example": "MATRIX"
          },
          "missionCountry": {
            "description": "Country code of the mission.  A Country may represent countries, multi-national consortiums, and international organizations.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "missionRegion": {
            "description": "Region of the mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Example Region"
          },
          "missionSubRegion": {
            "description": "Subregion of the mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Example Subregion"
          },
          "collectionRequirements": {
            "description": "Mission desired collection requirements.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionRequirements_Full"
            }
          },
          "transit": {
            "description": "Object for data dissemination.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionTransit_Full"
            }
          },
          "taskings": {
            "description": "Individual taskings to complete the mission.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionTaskings_Full"
            }
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2021-01-19T01:01:15.001Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "ISRCollection_Ingest": {
        "description": "ISR Collection data.",
        "required": [
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ISRCOLLECTION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idexVersion": {
            "format": "int32",
            "description": "Version of the IDEX software the request came from for compatibility.",
            "type": "integer",
            "example": 2
          },
          "name": {
            "description": "Human readable Mission Name.",
            "maxLength": 128,
            "type": "string",
            "example": "Example mission name"
          },
          "missionId": {
            "description": "Mission Identifier.",
            "maxLength": 32,
            "type": "string",
            "example": "myTask-2020-04-23T00:00:00.000Z"
          },
          "missionAOR": {
            "description": "Designation of mission Area Of Responsibility.",
            "maxLength": 32,
            "type": "string",
            "example": "Kandahar"
          },
          "missionPrimaryIntelDiscipline": {
            "description": "Primary type of intelligence to be collected during the mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Sig"
          },
          "missionPrimarySubCategory": {
            "description": "Sub category of primary intelligence to be collected.",
            "maxLength": 32,
            "type": "string",
            "example": "FMV"
          },
          "missionSecondaryIntelDiscipline": {
            "description": "Type of intelligence to be collected second.",
            "maxLength": 32,
            "type": "string",
            "example": "Intelligence_2"
          },
          "missionSecondarySubCategory": {
            "description": "Mission sub category for secondary intelligence discipline to be collected.",
            "maxLength": 32,
            "type": "string",
            "example": "Convoy"
          },
          "missionRole": {
            "description": "What is the primary objective(Role) of this mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Targeting of Lead Vehicle"
          },
          "missionOperation": {
            "description": "Mission operation name.",
            "maxLength": 32,
            "type": "string",
            "example": "OP-HONEY-BADGER"
          },
          "missionPriority": {
            "format": "int32",
            "description": "Mission Priority (1-n).",
            "type": "integer",
            "example": 1
          },
          "missionSupportedUnit": {
            "description": "Name of the Supporting unit/Location that is performing this mission.",
            "maxLength": 32,
            "type": "string",
            "example": "ENVOYS"
          },
          "missionEmphasis": {
            "description": "Text version of what we are emphasizing in this mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Mission emphasis"
          },
          "missionStartPointLat": {
            "format": "double",
            "description": "WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.23
          },
          "missionStartPointLong": {
            "format": "double",
            "description": "WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 80.23
          },
          "missionCollectionArea": {
            "description": "Mission geographical collection area.",
            "maxLength": 512,
            "type": "string",
            "example": "Example collection area"
          },
          "missionJoa": {
            "description": "Joint Operations Area.",
            "maxLength": 32,
            "type": "string",
            "example": "Operation area"
          },
          "missionSyncMatrixBin": {
            "description": "A synchronization matrix is used to organize the logistics synchronization process during a mission.",
            "maxLength": 32,
            "type": "string",
            "example": "MATRIX"
          },
          "missionCountry": {
            "description": "Country code of the mission.  A Country may represent countries, multi-national consortiums, and international organizations.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "missionRegion": {
            "description": "Region of the mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Example Region"
          },
          "missionSubRegion": {
            "description": "Subregion of the mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Example Subregion"
          },
          "collectionRequirements": {
            "description": "Mission desired collection requirements.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionRequirements_Ingest"
            }
          },
          "transit": {
            "description": "Object for data dissemination.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionTransit_Ingest"
            }
          },
          "taskings": {
            "description": "Individual taskings to complete the mission.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionTaskings_Ingest"
            }
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2021-01-19T01:01:15.001Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "ISRCollectionActual_Abridged": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique Identifier of actual collection period for historical archive.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONACTUAL-ID"
          },
          "start": {
            "format": "date-time",
            "description": "Start time the collection actually occurred, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "stop": {
            "format": "date-time",
            "description": "Stop time the collection actually occurred, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          }
        }
      },
      "ISRCollectionActual_Full": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique Identifier of actual collection period for historical archive.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONACTUAL-ID"
          },
          "start": {
            "format": "date-time",
            "description": "Start time the collection actually occurred, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "stop": {
            "format": "date-time",
            "description": "Stop time the collection actually occurred, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          }
        }
      },
      "ISRCollectionActual_Ingest": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique Identifier of actual collection period for historical archive.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONACTUAL-ID"
          },
          "start": {
            "format": "date-time",
            "description": "Start time the collection actually occurred, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "stop": {
            "format": "date-time",
            "description": "Stop time the collection actually occurred, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          }
        }
      },
      "ISRCollectionAdditional_Abridged": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique Identifier of additional collection period.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONADDITIONAL"
          },
          "start": {
            "format": "date-time",
            "description": "Start time of collection, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "stop": {
            "format": "date-time",
            "description": "Stop time of collection, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          }
        }
      },
      "ISRCollectionAdditional_Full": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique Identifier of additional collection period.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONADDITIONAL"
          },
          "start": {
            "format": "date-time",
            "description": "Start time of collection, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "stop": {
            "format": "date-time",
            "description": "Stop time of collection, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          }
        }
      },
      "ISRCollectionAdditional_Ingest": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique Identifier of additional collection period.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONADDITIONAL"
          },
          "start": {
            "format": "date-time",
            "description": "Start time of collection, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "stop": {
            "format": "date-time",
            "description": "Stop time of collection, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          }
        }
      },
      "ISRCollectionCriticalTimes_Abridged": {
        "required": [
          "earliestImagingTime",
          "latestImagingTime"
        ],
        "type": "object",
        "properties": {
          "earliestImagingTime": {
            "format": "date-time",
            "description": "Critical start time to collect an image for this requirement.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "latestImagingTime": {
            "format": "date-time",
            "description": "Critical stop time to collect an image for this requirement.",
            "type": "string",
            "example": "2021-01-19T01:11:15.001Z"
          }
        }
      },
      "ISRCollectionCriticalTimes_Full": {
        "required": [
          "earliestImagingTime",
          "latestImagingTime"
        ],
        "type": "object",
        "properties": {
          "earliestImagingTime": {
            "format": "date-time",
            "description": "Critical start time to collect an image for this requirement.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "latestImagingTime": {
            "format": "date-time",
            "description": "Critical stop time to collect an image for this requirement.",
            "type": "string",
            "example": "2021-01-19T01:11:15.001Z"
          }
        }
      },
      "ISRCollectionCriticalTimes_Ingest": {
        "required": [
          "earliestImagingTime",
          "latestImagingTime"
        ],
        "type": "object",
        "properties": {
          "earliestImagingTime": {
            "format": "date-time",
            "description": "Critical start time to collect an image for this requirement.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "latestImagingTime": {
            "format": "date-time",
            "description": "Critical stop time to collect an image for this requirement.",
            "type": "string",
            "example": "2021-01-19T01:11:15.001Z"
          }
        }
      },
      "ISRCollectionExploitationRequirement_Abridged": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Exploitation requirement id.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONEXPLOITATIONREQUIREMENT"
          },
          "amplification": {
            "description": "Amplifying data for the exploitation requirement.",
            "maxLength": 256,
            "type": "string",
            "example": "AMPLIFICATION"
          },
          "reportingCriteria": {
            "description": "The reporting criteria of the collection requirement.",
            "maxLength": 32,
            "type": "string",
            "example": "CRITERIA"
          },
          "dissemination": {
            "description": "List of e-mails to disseminate collection verification information.",
            "maxLength": 32,
            "type": "string",
            "example": "EMAILS"
          },
          "eei": {
            "description": "Essential Elements of Information.",
            "maxLength": 32,
            "type": "string",
            "example": "ESSENTIAL_ELEMENTS"
          },
          "poc": {
            "$ref": "#/components/schemas/ISRCollectionPOC_Abridged"
          }
        }
      },
      "ISRCollectionExploitationRequirement_Full": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Exploitation requirement id.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONEXPLOITATIONREQUIREMENT"
          },
          "amplification": {
            "description": "Amplifying data for the exploitation requirement.",
            "maxLength": 256,
            "type": "string",
            "example": "AMPLIFICATION"
          },
          "reportingCriteria": {
            "description": "The reporting criteria of the collection requirement.",
            "maxLength": 32,
            "type": "string",
            "example": "CRITERIA"
          },
          "dissemination": {
            "description": "List of e-mails to disseminate collection verification information.",
            "maxLength": 32,
            "type": "string",
            "example": "EMAILS"
          },
          "eei": {
            "description": "Essential Elements of Information.",
            "maxLength": 32,
            "type": "string",
            "example": "ESSENTIAL_ELEMENTS"
          },
          "poc": {
            "$ref": "#/components/schemas/ISRCollectionPOC_Full"
          }
        }
      },
      "ISRCollectionExploitationRequirement_Ingest": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Exploitation requirement id.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONEXPLOITATIONREQUIREMENT"
          },
          "amplification": {
            "description": "Amplifying data for the exploitation requirement.",
            "maxLength": 256,
            "type": "string",
            "example": "AMPLIFICATION"
          },
          "reportingCriteria": {
            "description": "The reporting criteria of the collection requirement.",
            "maxLength": 32,
            "type": "string",
            "example": "CRITERIA"
          },
          "dissemination": {
            "description": "List of e-mails to disseminate collection verification information.",
            "maxLength": 32,
            "type": "string",
            "example": "EMAILS"
          },
          "eei": {
            "description": "Essential Elements of Information.",
            "maxLength": 32,
            "type": "string",
            "example": "ESSENTIAL_ELEMENTS"
          },
          "poc": {
            "$ref": "#/components/schemas/ISRCollectionPOC_Ingest"
          }
        }
      },
      "ISRCollectionPeriods_Abridged": {
        "type": "object",
        "properties": {
          "planned": {
            "$ref": "#/components/schemas/ISRCollectionPlanned_Abridged"
          },
          "actual": {
            "description": "Actual start and stop for the collection.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionActual_Abridged"
            }
          }
        }
      },
      "ISRCollectionPeriods_Full": {
        "type": "object",
        "properties": {
          "planned": {
            "$ref": "#/components/schemas/ISRCollectionPlanned_Full"
          },
          "actual": {
            "description": "Actual start and stop for the collection.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionActual_Full"
            }
          }
        }
      },
      "ISRCollectionPeriods_Ingest": {
        "type": "object",
        "properties": {
          "planned": {
            "$ref": "#/components/schemas/ISRCollectionPlanned_Ingest"
          },
          "actual": {
            "description": "Actual start and stop for the collection.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionActual_Ingest"
            }
          }
        }
      },
      "ISRCollectionPlanned_Abridged": {
        "type": "object",
        "properties": {
          "start": {
            "format": "date-time",
            "description": "Start time of collection, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "stop": {
            "format": "date-time",
            "description": "Stop time of collection, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "additional": {
            "description": "Additional start and stop for the collection.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionAdditional_Abridged"
            }
          }
        }
      },
      "ISRCollectionPlanned_Full": {
        "type": "object",
        "properties": {
          "start": {
            "format": "date-time",
            "description": "Start time of collection, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "stop": {
            "format": "date-time",
            "description": "Stop time of collection, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "additional": {
            "description": "Additional start and stop for the collection.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionAdditional_Full"
            }
          }
        }
      },
      "ISRCollectionPlanned_Ingest": {
        "type": "object",
        "properties": {
          "start": {
            "format": "date-time",
            "description": "Start time of collection, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "stop": {
            "format": "date-time",
            "description": "Stop time of collection, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "additional": {
            "description": "Additional start and stop for the collection.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionAdditional_Ingest"
            }
          }
        }
      },
      "ISRCollectionPOC_Abridged": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the collection requirement POC.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONPOC-ID"
          },
          "name": {
            "description": "Name of the POC.",
            "maxLength": 128,
            "type": "string",
            "example": "NAME"
          },
          "callsign": {
            "description": "Callsign of the POC.",
            "maxLength": 32,
            "type": "string",
            "example": "CALLSIGN"
          },
          "unit": {
            "description": "Unit the POC belongs to.",
            "maxLength": 32,
            "type": "string",
            "example": "UNIT"
          },
          "email": {
            "description": "Email address of the POC.",
            "maxLength": 128,
            "type": "string",
            "example": "EMAIL"
          },
          "phone": {
            "description": "Phone number of the POC.",
            "maxLength": 45,
            "type": "string",
            "example": "PHONE"
          },
          "radioFrequency": {
            "format": "double",
            "description": "Radio Frequency the POC is on.",
            "type": "number",
            "example": 123.23
          },
          "chatSystem": {
            "description": "Chat system the POC is accessing.",
            "maxLength": 32,
            "type": "string",
            "example": "CHAT"
          },
          "chatName": {
            "description": "Chat name of the POC.",
            "maxLength": 32,
            "type": "string",
            "example": "CHAT_NAME"
          },
          "notes": {
            "description": "Amplifying notes about the POC.",
            "maxLength": 256,
            "type": "string",
            "example": "NOTES"
          }
        }
      },
      "ISRCollectionPOC_Full": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the collection requirement POC.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONPOC-ID"
          },
          "name": {
            "description": "Name of the POC.",
            "maxLength": 128,
            "type": "string",
            "example": "NAME"
          },
          "callsign": {
            "description": "Callsign of the POC.",
            "maxLength": 32,
            "type": "string",
            "example": "CALLSIGN"
          },
          "unit": {
            "description": "Unit the POC belongs to.",
            "maxLength": 32,
            "type": "string",
            "example": "UNIT"
          },
          "email": {
            "description": "Email address of the POC.",
            "maxLength": 128,
            "type": "string",
            "example": "EMAIL"
          },
          "phone": {
            "description": "Phone number of the POC.",
            "maxLength": 45,
            "type": "string",
            "example": "PHONE"
          },
          "radioFrequency": {
            "format": "double",
            "description": "Radio Frequency the POC is on.",
            "type": "number",
            "example": 123.23
          },
          "chatSystem": {
            "description": "Chat system the POC is accessing.",
            "maxLength": 32,
            "type": "string",
            "example": "CHAT"
          },
          "chatName": {
            "description": "Chat name of the POC.",
            "maxLength": 32,
            "type": "string",
            "example": "CHAT_NAME"
          },
          "notes": {
            "description": "Amplifying notes about the POC.",
            "maxLength": 256,
            "type": "string",
            "example": "NOTES"
          }
        }
      },
      "ISRCollectionPOC_Ingest": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the collection requirement POC.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONPOC-ID"
          },
          "name": {
            "description": "Name of the POC.",
            "maxLength": 128,
            "type": "string",
            "example": "NAME"
          },
          "callsign": {
            "description": "Callsign of the POC.",
            "maxLength": 32,
            "type": "string",
            "example": "CALLSIGN"
          },
          "unit": {
            "description": "Unit the POC belongs to.",
            "maxLength": 32,
            "type": "string",
            "example": "UNIT"
          },
          "email": {
            "description": "Email address of the POC.",
            "maxLength": 128,
            "type": "string",
            "example": "EMAIL"
          },
          "phone": {
            "description": "Phone number of the POC.",
            "maxLength": 45,
            "type": "string",
            "example": "PHONE"
          },
          "radioFrequency": {
            "format": "double",
            "description": "Radio Frequency the POC is on.",
            "type": "number",
            "example": 123.23
          },
          "chatSystem": {
            "description": "Chat system the POC is accessing.",
            "maxLength": 32,
            "type": "string",
            "example": "CHAT"
          },
          "chatName": {
            "description": "Chat name of the POC.",
            "maxLength": 32,
            "type": "string",
            "example": "CHAT_NAME"
          },
          "notes": {
            "description": "Amplifying notes about the POC.",
            "maxLength": 256,
            "type": "string",
            "example": "NOTES"
          }
        }
      },
      "ISRCollectionRequirements_Abridged": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Collection Requirement Unique Identifier.",
            "maxLength": 36,
            "type": "string",
            "example": "ISCRCOLLECTIONREQUIREMENTS"
          },
          "hash": {
            "description": "Encryption hashing algorithm.",
            "maxLength": 128,
            "type": "string",
            "example": "HASH"
          },
          "type": {
            "description": "Type collection this requirement applies to.",
            "maxLength": 128,
            "type": "string",
            "example": "COLLECTION_TYPE"
          },
          "cridNumbers": {
            "description": "Collection Requirement Unique Identifier.",
            "maxLength": 256,
            "type": "string",
            "example": "CRID"
          },
          "priority": {
            "format": "double",
            "description": "1-n priority for this collection requirement.",
            "type": "number",
            "example": 20.23
          },
          "recordId": {
            "description": "Record id.",
            "maxLength": 36,
            "type": "string",
            "example": "RECORD-ID"
          },
          "reconSurvey": {
            "description": "Reconnaissance Survey information the operator needs.",
            "maxLength": 32,
            "type": "string",
            "example": "SURVEY_INFO"
          },
          "intelDiscipline": {
            "description": "Primary type of intelligence to be collected for this requirement.",
            "maxLength": 32,
            "type": "string",
            "example": "Sig"
          },
          "secondary": {
            "description": "Sub category of primary intelligence to be collected for this requirement.",
            "type": "boolean",
            "example": false
          },
          "emphasized": {
            "description": "Is this collection requirement an emphasized/critical requirement.",
            "type": "boolean",
            "example": false
          },
          "isPrismCr": {
            "description": "Is this collection request for the Prism system?.",
            "type": "boolean",
            "example": true
          },
          "start": {
            "format": "date-time",
            "description": "Start time for this requirement, should be within the mission time window.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "stop": {
            "format": "date-time",
            "description": "Stop time for this requirement, should be within the mission time window.",
            "type": "string",
            "example": "2021-01-19T01:20:01.001Z"
          },
          "supportedUnit": {
            "description": "The name of the military unit that this assigned collection requirement will support.",
            "maxLength": 32,
            "type": "string",
            "example": "UNIT"
          },
          "country": {
            "description": "Country code of the collection requirement. A Country may represent countries, multi-national consortiums, and international organizations.",
            "maxLength": 4,
            "type": "string",
            "example": "VE"
          },
          "region": {
            "description": "Region of the collection requirement.",
            "maxLength": 32,
            "type": "string",
            "example": "REGION"
          },
          "subregion": {
            "description": "Subregion of the collection requirement.",
            "maxLength": 32,
            "type": "string",
            "example": "SUBREGION"
          },
          "specialComGuidance": {
            "description": "Free text field for the user to specify special instructions needed for this collection.",
            "maxLength": 256,
            "type": "string",
            "example": "TEXT"
          },
          "criticalTimes": {
            "$ref": "#/components/schemas/ISRCollectionCriticalTimes_Abridged"
          },
          "exploitationRequirement": {
            "$ref": "#/components/schemas/ISRCollectionExploitationRequirement_Abridged"
          },
          "targetList": {
            "description": "Array of POI Id's for the targets being tasked.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ISRCollectionRequirements_Full": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Collection Requirement Unique Identifier.",
            "maxLength": 36,
            "type": "string",
            "example": "ISCRCOLLECTIONREQUIREMENTS"
          },
          "hash": {
            "description": "Encryption hashing algorithm.",
            "maxLength": 128,
            "type": "string",
            "example": "HASH"
          },
          "type": {
            "description": "Type collection this requirement applies to.",
            "maxLength": 128,
            "type": "string",
            "example": "COLLECTION_TYPE"
          },
          "cridNumbers": {
            "description": "Collection Requirement Unique Identifier.",
            "maxLength": 256,
            "type": "string",
            "example": "CRID"
          },
          "priority": {
            "format": "double",
            "description": "1-n priority for this collection requirement.",
            "type": "number",
            "example": 20.23
          },
          "recordId": {
            "description": "Record id.",
            "maxLength": 36,
            "type": "string",
            "example": "RECORD-ID"
          },
          "reconSurvey": {
            "description": "Reconnaissance Survey information the operator needs.",
            "maxLength": 32,
            "type": "string",
            "example": "SURVEY_INFO"
          },
          "intelDiscipline": {
            "description": "Primary type of intelligence to be collected for this requirement.",
            "maxLength": 32,
            "type": "string",
            "example": "Sig"
          },
          "secondary": {
            "description": "Sub category of primary intelligence to be collected for this requirement.",
            "type": "boolean",
            "example": false
          },
          "emphasized": {
            "description": "Is this collection requirement an emphasized/critical requirement.",
            "type": "boolean",
            "example": false
          },
          "isPrismCr": {
            "description": "Is this collection request for the Prism system?.",
            "type": "boolean",
            "example": true
          },
          "start": {
            "format": "date-time",
            "description": "Start time for this requirement, should be within the mission time window.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "stop": {
            "format": "date-time",
            "description": "Stop time for this requirement, should be within the mission time window.",
            "type": "string",
            "example": "2021-01-19T01:20:01.001Z"
          },
          "supportedUnit": {
            "description": "The name of the military unit that this assigned collection requirement will support.",
            "maxLength": 32,
            "type": "string",
            "example": "UNIT"
          },
          "country": {
            "description": "Country code of the collection requirement. A Country may represent countries, multi-national consortiums, and international organizations.",
            "maxLength": 4,
            "type": "string",
            "example": "VE"
          },
          "region": {
            "description": "Region of the collection requirement.",
            "maxLength": 32,
            "type": "string",
            "example": "REGION"
          },
          "subregion": {
            "description": "Subregion of the collection requirement.",
            "maxLength": 32,
            "type": "string",
            "example": "SUBREGION"
          },
          "specialComGuidance": {
            "description": "Free text field for the user to specify special instructions needed for this collection.",
            "maxLength": 256,
            "type": "string",
            "example": "TEXT"
          },
          "criticalTimes": {
            "$ref": "#/components/schemas/ISRCollectionCriticalTimes_Full"
          },
          "exploitationRequirement": {
            "$ref": "#/components/schemas/ISRCollectionExploitationRequirement_Full"
          },
          "targetList": {
            "description": "Array of POI Id's for the targets being tasked.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ISRCollectionRequirements_Ingest": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Collection Requirement Unique Identifier.",
            "maxLength": 36,
            "type": "string",
            "example": "ISCRCOLLECTIONREQUIREMENTS"
          },
          "hash": {
            "description": "Encryption hashing algorithm.",
            "maxLength": 128,
            "type": "string",
            "example": "HASH"
          },
          "type": {
            "description": "Type collection this requirement applies to.",
            "maxLength": 128,
            "type": "string",
            "example": "COLLECTION_TYPE"
          },
          "cridNumbers": {
            "description": "Collection Requirement Unique Identifier.",
            "maxLength": 256,
            "type": "string",
            "example": "CRID"
          },
          "priority": {
            "format": "double",
            "description": "1-n priority for this collection requirement.",
            "type": "number",
            "example": 20.23
          },
          "recordId": {
            "description": "Record id.",
            "maxLength": 36,
            "type": "string",
            "example": "RECORD-ID"
          },
          "reconSurvey": {
            "description": "Reconnaissance Survey information the operator needs.",
            "maxLength": 32,
            "type": "string",
            "example": "SURVEY_INFO"
          },
          "intelDiscipline": {
            "description": "Primary type of intelligence to be collected for this requirement.",
            "maxLength": 32,
            "type": "string",
            "example": "Sig"
          },
          "secondary": {
            "description": "Sub category of primary intelligence to be collected for this requirement.",
            "type": "boolean",
            "example": false
          },
          "emphasized": {
            "description": "Is this collection requirement an emphasized/critical requirement.",
            "type": "boolean",
            "example": false
          },
          "isPrismCr": {
            "description": "Is this collection request for the Prism system?.",
            "type": "boolean",
            "example": true
          },
          "start": {
            "format": "date-time",
            "description": "Start time for this requirement, should be within the mission time window.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "stop": {
            "format": "date-time",
            "description": "Stop time for this requirement, should be within the mission time window.",
            "type": "string",
            "example": "2021-01-19T01:20:01.001Z"
          },
          "supportedUnit": {
            "description": "The name of the military unit that this assigned collection requirement will support.",
            "maxLength": 32,
            "type": "string",
            "example": "UNIT"
          },
          "country": {
            "description": "Country code of the collection requirement. A Country may represent countries, multi-national consortiums, and international organizations.",
            "maxLength": 4,
            "type": "string",
            "example": "VE"
          },
          "region": {
            "description": "Region of the collection requirement.",
            "maxLength": 32,
            "type": "string",
            "example": "REGION"
          },
          "subregion": {
            "description": "Subregion of the collection requirement.",
            "maxLength": 32,
            "type": "string",
            "example": "SUBREGION"
          },
          "specialComGuidance": {
            "description": "Free text field for the user to specify special instructions needed for this collection.",
            "maxLength": 256,
            "type": "string",
            "example": "TEXT"
          },
          "criticalTimes": {
            "$ref": "#/components/schemas/ISRCollectionCriticalTimes_Ingest"
          },
          "exploitationRequirement": {
            "$ref": "#/components/schemas/ISRCollectionExploitationRequirement_Ingest"
          },
          "targetList": {
            "description": "Array of POI Id's for the targets being tasked.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ISRCollectionTaskings_Abridged": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Tasking Unique Identifier.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONTASKINGS-ID"
          },
          "type": {
            "description": "Type of tasking.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "Deliberate",
              "Dynamic",
              "Training",
              "Transit"
            ],
            "type": "string",
            "example": "Deliberate"
          },
          "collectionType": {
            "description": "Type of collection tasked.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "Simultaneous",
              "Sequential",
              "Operationally",
              "Driven",
              "Priority",
              "Order"
            ],
            "type": "string",
            "example": "Simultaneous"
          },
          "taskingAOR": {
            "description": "Human readable definition of this taskings Area Of Responsibility.",
            "maxLength": 32,
            "type": "string",
            "example": "Kandahar"
          },
          "eightLine": {
            "description": "Eight line.",
            "maxLength": 256,
            "type": "string"
          },
          "taskingPrimaryIntelDiscipline": {
            "description": "Primary type of intelligence to be collected during the mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Sig"
          },
          "taskingPrimarySubCategory": {
            "description": "Sub category of primary intelligence to be collected.",
            "maxLength": 32,
            "type": "string",
            "example": "FMV"
          },
          "taskingSecondaryIntelDiscipline": {
            "description": "Type of tasking intelligence to be collected second.",
            "maxLength": 32,
            "type": "string",
            "example": "Intelligence_2"
          },
          "taskingSecondarySubCategory": {
            "description": "Mission sub category for secondary intelligence discipline to be collected.",
            "maxLength": 32,
            "type": "string",
            "example": "Convoy"
          },
          "taskingRole": {
            "description": "What is the primary objective (role) of this task.",
            "maxLength": 32,
            "type": "string",
            "example": "Track Lead Vehicle"
          },
          "taskingOperation": {
            "description": "Tasking operation name.",
            "maxLength": 32,
            "type": "string",
            "example": "OP-HONEY-BADGER"
          },
          "taskingPriority": {
            "format": "double",
            "description": "Tasking Priority (1-n).",
            "type": "number",
            "example": 10.23
          },
          "taskingSupportedUnit": {
            "description": "Military Base to transmit the dissemination of this data.",
            "maxLength": 32,
            "type": "string",
            "example": "ENVOYS"
          },
          "taskingEmphasis": {
            "description": "Tasking emphasis.",
            "maxLength": 32,
            "type": "string",
            "example": "EMPHASIS"
          },
          "taskingRetaskTime": {
            "format": "date-time",
            "description": "Time of retasking, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "taskingStartPointLat": {
            "format": "double",
            "description": "WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.23
          },
          "taskingStartPointLong": {
            "format": "double",
            "description": "WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 45.23
          },
          "taskingCollectionArea": {
            "description": "Tasking geographical collection area.",
            "type": "string",
            "example": "AREA"
          },
          "taskingJoa": {
            "description": "Joint Operations Area.",
            "maxLength": 32,
            "type": "string",
            "example": "AREA"
          },
          "taskingSyncMatrixBin": {
            "description": "A synchronization matrix is used to organize the logistics synchronization process during a mission.",
            "maxLength": 32,
            "type": "string",
            "example": "MATRIX"
          },
          "taskingCountry": {
            "description": "Country code of the tasking.  A Country may represent countries, multi-national consortiums, and international organizations.",
            "maxLength": 4,
            "type": "string",
            "example": "CODE"
          },
          "taskingRegion": {
            "description": "Region of the tasking.",
            "maxLength": 32,
            "type": "string",
            "example": "REGION"
          },
          "taskingSubRegion": {
            "description": "Subregion of the tasking.",
            "maxLength": 32,
            "type": "string",
            "example": "SUBREGION"
          },
          "sroTrack": {
            "description": "Value of the Sensitive Reconnaissance Operations Track.",
            "maxLength": 32,
            "type": "string",
            "example": "SRO"
          },
          "specialComGuidance": {
            "description": "Free text field for the user to specify special instructions needed for this collection.",
            "maxLength": 256,
            "type": "string",
            "example": "TEXT"
          },
          "collectionPeriods": {
            "$ref": "#/components/schemas/ISRCollectionPeriods_Abridged"
          },
          "taskingCollectionRequirements": {
            "description": "Tasking desired collection requirements.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionRequirements_Abridged"
            }
          }
        }
      },
      "ISRCollectionTaskings_Full": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Tasking Unique Identifier.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONTASKINGS-ID"
          },
          "type": {
            "description": "Type of tasking.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "Deliberate",
              "Dynamic",
              "Training",
              "Transit"
            ],
            "type": "string",
            "example": "Deliberate"
          },
          "collectionType": {
            "description": "Type of collection tasked.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "Simultaneous",
              "Sequential",
              "Operationally",
              "Driven",
              "Priority",
              "Order"
            ],
            "type": "string",
            "example": "Simultaneous"
          },
          "taskingAOR": {
            "description": "Human readable definition of this taskings Area Of Responsibility.",
            "maxLength": 32,
            "type": "string",
            "example": "Kandahar"
          },
          "eightLine": {
            "description": "Eight line.",
            "maxLength": 256,
            "type": "string"
          },
          "taskingPrimaryIntelDiscipline": {
            "description": "Primary type of intelligence to be collected during the mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Sig"
          },
          "taskingPrimarySubCategory": {
            "description": "Sub category of primary intelligence to be collected.",
            "maxLength": 32,
            "type": "string",
            "example": "FMV"
          },
          "taskingSecondaryIntelDiscipline": {
            "description": "Type of tasking intelligence to be collected second.",
            "maxLength": 32,
            "type": "string",
            "example": "Intelligence_2"
          },
          "taskingSecondarySubCategory": {
            "description": "Mission sub category for secondary intelligence discipline to be collected.",
            "maxLength": 32,
            "type": "string",
            "example": "Convoy"
          },
          "taskingRole": {
            "description": "What is the primary objective (role) of this task.",
            "maxLength": 32,
            "type": "string",
            "example": "Track Lead Vehicle"
          },
          "taskingOperation": {
            "description": "Tasking operation name.",
            "maxLength": 32,
            "type": "string",
            "example": "OP-HONEY-BADGER"
          },
          "taskingPriority": {
            "format": "double",
            "description": "Tasking Priority (1-n).",
            "type": "number",
            "example": 10.23
          },
          "taskingSupportedUnit": {
            "description": "Military Base to transmit the dissemination of this data.",
            "maxLength": 32,
            "type": "string",
            "example": "ENVOYS"
          },
          "taskingEmphasis": {
            "description": "Tasking emphasis.",
            "maxLength": 32,
            "type": "string",
            "example": "EMPHASIS"
          },
          "taskingRetaskTime": {
            "format": "date-time",
            "description": "Time of retasking, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "taskingStartPointLat": {
            "format": "double",
            "description": "WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.23
          },
          "taskingStartPointLong": {
            "format": "double",
            "description": "WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 45.23
          },
          "taskingCollectionArea": {
            "description": "Tasking geographical collection area.",
            "type": "string",
            "example": "AREA"
          },
          "taskingJoa": {
            "description": "Joint Operations Area.",
            "maxLength": 32,
            "type": "string",
            "example": "AREA"
          },
          "taskingSyncMatrixBin": {
            "description": "A synchronization matrix is used to organize the logistics synchronization process during a mission.",
            "maxLength": 32,
            "type": "string",
            "example": "MATRIX"
          },
          "taskingCountry": {
            "description": "Country code of the tasking.  A Country may represent countries, multi-national consortiums, and international organizations.",
            "maxLength": 4,
            "type": "string",
            "example": "CODE"
          },
          "taskingRegion": {
            "description": "Region of the tasking.",
            "maxLength": 32,
            "type": "string",
            "example": "REGION"
          },
          "taskingSubRegion": {
            "description": "Subregion of the tasking.",
            "maxLength": 32,
            "type": "string",
            "example": "SUBREGION"
          },
          "sroTrack": {
            "description": "Value of the Sensitive Reconnaissance Operations Track.",
            "maxLength": 32,
            "type": "string",
            "example": "SRO"
          },
          "specialComGuidance": {
            "description": "Free text field for the user to specify special instructions needed for this collection.",
            "maxLength": 256,
            "type": "string",
            "example": "TEXT"
          },
          "collectionPeriods": {
            "$ref": "#/components/schemas/ISRCollectionPeriods_Full"
          },
          "taskingCollectionRequirements": {
            "description": "Tasking desired collection requirements.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionRequirements_Full"
            }
          }
        }
      },
      "ISRCollectionTaskings_Ingest": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Tasking Unique Identifier.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONTASKINGS-ID"
          },
          "type": {
            "description": "Type of tasking.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "Deliberate",
              "Dynamic",
              "Training",
              "Transit"
            ],
            "type": "string",
            "example": "Deliberate"
          },
          "collectionType": {
            "description": "Type of collection tasked.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "Simultaneous",
              "Sequential",
              "Operationally",
              "Driven",
              "Priority",
              "Order"
            ],
            "type": "string",
            "example": "Simultaneous"
          },
          "taskingAOR": {
            "description": "Human readable definition of this taskings Area Of Responsibility.",
            "maxLength": 32,
            "type": "string",
            "example": "Kandahar"
          },
          "eightLine": {
            "description": "Eight line.",
            "maxLength": 256,
            "type": "string"
          },
          "taskingPrimaryIntelDiscipline": {
            "description": "Primary type of intelligence to be collected during the mission.",
            "maxLength": 32,
            "type": "string",
            "example": "Sig"
          },
          "taskingPrimarySubCategory": {
            "description": "Sub category of primary intelligence to be collected.",
            "maxLength": 32,
            "type": "string",
            "example": "FMV"
          },
          "taskingSecondaryIntelDiscipline": {
            "description": "Type of tasking intelligence to be collected second.",
            "maxLength": 32,
            "type": "string",
            "example": "Intelligence_2"
          },
          "taskingSecondarySubCategory": {
            "description": "Mission sub category for secondary intelligence discipline to be collected.",
            "maxLength": 32,
            "type": "string",
            "example": "Convoy"
          },
          "taskingRole": {
            "description": "What is the primary objective (role) of this task.",
            "maxLength": 32,
            "type": "string",
            "example": "Track Lead Vehicle"
          },
          "taskingOperation": {
            "description": "Tasking operation name.",
            "maxLength": 32,
            "type": "string",
            "example": "OP-HONEY-BADGER"
          },
          "taskingPriority": {
            "format": "double",
            "description": "Tasking Priority (1-n).",
            "type": "number",
            "example": 10.23
          },
          "taskingSupportedUnit": {
            "description": "Military Base to transmit the dissemination of this data.",
            "maxLength": 32,
            "type": "string",
            "example": "ENVOYS"
          },
          "taskingEmphasis": {
            "description": "Tasking emphasis.",
            "maxLength": 32,
            "type": "string",
            "example": "EMPHASIS"
          },
          "taskingRetaskTime": {
            "format": "date-time",
            "description": "Time of retasking, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-19T01:01:15.001Z"
          },
          "taskingStartPointLat": {
            "format": "double",
            "description": "WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.23
          },
          "taskingStartPointLong": {
            "format": "double",
            "description": "WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 45.23
          },
          "taskingCollectionArea": {
            "description": "Tasking geographical collection area.",
            "type": "string",
            "example": "AREA"
          },
          "taskingJoa": {
            "description": "Joint Operations Area.",
            "maxLength": 32,
            "type": "string",
            "example": "AREA"
          },
          "taskingSyncMatrixBin": {
            "description": "A synchronization matrix is used to organize the logistics synchronization process during a mission.",
            "maxLength": 32,
            "type": "string",
            "example": "MATRIX"
          },
          "taskingCountry": {
            "description": "Country code of the tasking.  A Country may represent countries, multi-national consortiums, and international organizations.",
            "maxLength": 4,
            "type": "string",
            "example": "CODE"
          },
          "taskingRegion": {
            "description": "Region of the tasking.",
            "maxLength": 32,
            "type": "string",
            "example": "REGION"
          },
          "taskingSubRegion": {
            "description": "Subregion of the tasking.",
            "maxLength": 32,
            "type": "string",
            "example": "SUBREGION"
          },
          "sroTrack": {
            "description": "Value of the Sensitive Reconnaissance Operations Track.",
            "maxLength": 32,
            "type": "string",
            "example": "SRO"
          },
          "specialComGuidance": {
            "description": "Free text field for the user to specify special instructions needed for this collection.",
            "maxLength": 256,
            "type": "string",
            "example": "TEXT"
          },
          "collectionPeriods": {
            "$ref": "#/components/schemas/ISRCollectionPeriods_Ingest"
          },
          "taskingCollectionRequirements": {
            "description": "Tasking desired collection requirements.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISRCollectionRequirements_Ingest"
            }
          }
        }
      },
      "ISRCollectionTransit_Abridged": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Transit Unique Identifier.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONTRANSIT-ID"
          },
          "base": {
            "description": "Military Base to transmit the dissemination of this data.",
            "maxLength": 32,
            "type": "string",
            "example": "ENVOYS"
          },
          "duration": {
            "format": "double",
            "description": "Length of mission in milliseconds.",
            "type": "number",
            "example": 200.23
          }
        }
      },
      "ISRCollectionTransit_Full": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Transit Unique Identifier.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONTRANSIT-ID"
          },
          "base": {
            "description": "Military Base to transmit the dissemination of this data.",
            "maxLength": 32,
            "type": "string",
            "example": "ENVOYS"
          },
          "duration": {
            "format": "double",
            "description": "Length of mission in milliseconds.",
            "type": "number",
            "example": 200.23
          }
        }
      },
      "ISRCollectionTransit_Ingest": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Transit Unique Identifier.",
            "maxLength": 36,
            "type": "string",
            "example": "ISRCOLLECTIONTRANSIT-ID"
          },
          "base": {
            "description": "Military Base to transmit the dissemination of this data.",
            "maxLength": 32,
            "type": "string",
            "example": "ENVOYS"
          },
          "duration": {
            "format": "double",
            "description": "Length of mission in milliseconds.",
            "type": "number",
            "example": 200.23
          }
        }
      },
      "Location_Full": {
        "description": "Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idLocation": {
            "description": "Unique identifier of the location, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Location name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Example location"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 16,
            "type": "string",
            "example": "US"
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "altitude": {
            "format": "double",
            "description": "Altitude of the location, in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Onorbit_Full": {
        "description": "Model object representing on-orbit objects or satellites in the system.",
        "required": [
          "classificationMarking",
          "satNo",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idOnOrbit": {
            "description": "For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "commonName": {
            "description": "Common name of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Example common name"
          },
          "constellation": {
            "description": "Constellation to which this satellite belongs.",
            "maxLength": 128,
            "type": "string",
            "example": "Big Dipper"
          },
          "intlDes": {
            "description": "International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.",
            "maxLength": 45,
            "type": "string",
            "example": "2021123ABC"
          },
          "launchDate": {
            "format": "date",
            "description": "Date of launch.",
            "type": "string",
            "example": "2018-01-01"
          },
          "decayDate": {
            "format": "date-time",
            "description": "Date of decay.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "objectType": {
            "description": "Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.",
            "maxLength": 32,
            "enum": [
              "ROCKET BODY",
              "DEBRIS",
              "PAYLOAD",
              "PLATFORM",
              "MANNED",
              "UNKNOWN"
            ],
            "type": "string",
            "example": "PAYLOAD"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "missionNumber": {
            "description": "Mission number of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Expedition 1"
          },
          "category": {
            "description": "Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).",
            "maxLength": 45,
            "enum": [
              "Unknown",
              "On-Orbit",
              "Decayed",
              "Cataloged Without State",
              "Launch Nominal",
              "Analyst Satellite",
              "Cislunar",
              "Lunar",
              "Hyperbolic",
              "Heliocentric",
              "Interplanetary",
              "Lagrangian",
              "Docked"
            ],
            "type": "string",
            "example": "Lunar"
          },
          "lifetimeYears": {
            "format": "int32",
            "description": "Estimated lifetime of the on-orbit payload, if known.",
            "type": "integer",
            "example": 10
          },
          "altName": {
            "description": "Alternate name of the on-orbit object.",
            "maxLength": 64,
            "type": "string",
            "example": "Alternate Name"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "launchSiteId": {
            "description": "Id of the associated launchSite entity.",
            "maxLength": 36,
            "type": "string",
            "example": "LAUNCHSITE-ID"
          },
          "entityCollection": {
            "description": "Read-only entity details (only returned/used on detail queries).",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "description": "An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.",
              "required": [
                "name",
                "classificationMarking",
                "type",
                "source",
                "dataMode"
              ],
              "type": "object",
              "properties": {
                "idEntity": {
                  "description": "Unique identifier of the record.",
                  "maxLength": 36,
                  "minLength": 1,
                  "type": "string",
                  "example": "ENTITY-ID"
                },
                "name": {
                  "description": "Unique entity name.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "example": "Example name"
                },
                "classificationMarking": {
                  "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "example": "U"
                },
                "terrestrialId": {
                  "description": "Terrestrial identifier of this entity, if applicable.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "TERRESTRIAL-ID"
                },
                "type": {
                  "description": "The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).",
                  "maxLength": 45,
                  "minLength": 1,
                  "enum": [
                    "AIRCRAFT",
                    "BUS",
                    "COMM",
                    "IR",
                    "NAVIGATION",
                    "ONORBIT",
                    "RFEMITTER",
                    "SCIENTIFIC",
                    "SENSOR",
                    "SITE",
                    "VESSEL"
                  ],
                  "type": "string",
                  "example": "ONORBIT"
                },
                "idLocation": {
                  "description": "Unique identifier of the entity location, if terrestrial/fixed.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "LOCATION-ID"
                },
                "countryCode": {
                  "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
                  "maxLength": 4,
                  "type": "string",
                  "example": "US"
                },
                "ownerType": {
                  "description": "Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).",
                  "maxLength": 32,
                  "enum": [
                    "Commercial",
                    "Government",
                    "Academic",
                    "Consortium",
                    "Other"
                  ],
                  "type": "string",
                  "example": "Commercial"
                },
                "taskable": {
                  "description": "Boolean indicating if this entity is taskable.",
                  "type": "boolean",
                  "example": false
                },
                "urls": {
                  "description": "List of URLs to additional details/documents for this entity.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "URL1",
                    "URL2"
                  ]
                },
                "createdAt": {
                  "format": "date-time",
                  "description": "Time the row was created in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "createdBy": {
                  "description": "Application user who created the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "updatedAt": {
                  "format": "date-time",
                  "description": "Time the row was last updated in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "updatedBy": {
                  "description": "Application user who updated the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "source": {
                  "description": "Source of the data.",
                  "maxLength": 64,
                  "minLength": 1,
                  "type": "string",
                  "example": "Bluestaq"
                },
                "origin": {
                  "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                  "maxLength": 64,
                  "type": "string",
                  "example": "THIRD_PARTY_DATASOURCE"
                },
                "dataMode": {
                  "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                  "maxLength": 32,
                  "minLength": 1,
                  "enum": [
                    "REAL",
                    "TEST",
                    "SIMULATED",
                    "EXERCISE"
                  ],
                  "type": "string",
                  "example": "TEST"
                },
                "location": {
                  "$ref": "#/components/schemas/Location_Full"
                },
                "idOnOrbit": {
                  "description": "Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "ONORBIT-ID"
                },
                "operatingUnit": {
                  "$ref": "#/components/schemas/Operatingunit_Full"
                },
                "idOperatingUnit": {
                  "description": "Unique identifier of the associated operating unit object.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "OPERATINGUNIT-ID"
                },
                "origNetwork": {
                  "description": "The originating source network on which this record was created, auto-populated by the system.",
                  "maxLength": 32,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "OPS1"
                },
                "statusCollection": {
                  "description": "Read-only collection of statuses which can be collected by multiple sources.",
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Status_Full"
                  },
                  "readOnly": true
                },
                "rfBands": {
                  "description": "Read-only collection of RF bands utilized by this entity for communication and/or operation.",
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFBand_Full"
                  },
                  "readOnly": true
                }
              }
            },
            "readOnly": true
          },
          "antennas": {
            "description": "Read-only collection of antennas on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitAntenna_Full"
            },
            "readOnly": true
          },
          "batteries": {
            "description": "Read-only collection of batteries on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitBattery_Full"
            },
            "readOnly": true
          },
          "solarArrays": {
            "description": "Read-only collection of solar arrays on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitSolarArray_Full"
            },
            "readOnly": true
          },
          "thrusters": {
            "description": "Read-only collection of thrusters (engines) on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitThruster_Full"
            },
            "readOnly": true
          },
          "onorbitDetails": {
            "description": "Read-only collection of details for this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitDetails_Full"
            },
            "readOnly": true
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitAntenna_Full": {
        "required": [
          "idOnOrbit",
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITANTENNA-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idAntenna": {
            "description": "ID of the antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "antenna": {
            "$ref": "#/components/schemas/Antenna_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitBattery_Full": {
        "required": [
          "idOnOrbit",
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITBATTERY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idBattery": {
            "description": "ID of the battery.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of batteries on the spacecraft of the type identified by idBattery.",
            "type": "integer",
            "example": 5
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "battery": {
            "$ref": "#/components/schemas/Battery_Full"
          }
        }
      },
      "OnorbitDetails_Full": {
        "description": "Contains details of the OnOrbit object.",
        "required": [
          "idOnOrbit",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITDETAILS-ID"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "lastObTime": {
            "format": "date-time",
            "description": "Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "vismag": {
            "format": "double",
            "description": "Current/latest visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "vismagMin": {
            "format": "double",
            "description": "Minimum visual magnitude in M.",
            "type": "number",
            "example": 5.23
          },
          "vismagMax": {
            "format": "double",
            "description": "Maximum visual magnitude in M.",
            "type": "number",
            "example": 15.23
          },
          "vismagMean": {
            "format": "double",
            "description": "Mean visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "rcs": {
            "format": "double",
            "description": "Current/latest radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "rcsMin": {
            "format": "double",
            "description": "Minimum radar cross section in meters squared.",
            "type": "number",
            "example": 5.23
          },
          "rcsMax": {
            "format": "double",
            "description": "Maximum radar cross section in meters squared.",
            "type": "number",
            "example": 15.23
          },
          "rcsMean": {
            "format": "double",
            "description": "Mean radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "bolDeltaV": {
            "format": "double",
            "description": "The total beginning of life delta V of the spacecraft, in meters per second.",
            "type": "number",
            "example": 1000.1
          },
          "maxDeltaV": {
            "format": "double",
            "description": "Maximum delta V available for this on-orbit spacecraft, in meters per second.",
            "type": "number",
            "example": 10.23
          },
          "deltaVUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.",
            "type": "number",
            "example": 50.1
          },
          "estDeltaVDuration": {
            "format": "double",
            "description": "Estimated maximum burn duration for the object, in seconds.",
            "type": "number",
            "example": 10.23
          },
          "numMission": {
            "format": "int32",
            "description": "The number of distinct missions the spacecraft performs.",
            "type": "integer",
            "example": 2
          },
          "missionTypes": {
            "description": "Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Weather",
              "Space Weather"
            ]
          },
          "busType": {
            "description": "Type of the bus on the spacecraft.",
            "maxLength": 32,
            "type": "string",
            "example": "A2100"
          },
          "geoSlot": {
            "format": "double",
            "description": "GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 90.23
          },
          "driftRate": {
            "format": "double",
            "description": "GEO drift rate, if applicable in degrees per day.",
            "type": "number",
            "example": 1.23
          },
          "dryMass": {
            "format": "double",
            "description": "Spacecraft dry mass (without fuel or disposables) in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "additionalMass": {
            "format": "double",
            "description": "Mass of fuel and disposables at launch time in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMin": {
            "format": "double",
            "description": "Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 5.23
          },
          "launchMass": {
            "format": "double",
            "description": "Nominal mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMax": {
            "format": "double",
            "description": "Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 15.23
          },
          "bolFuelMass": {
            "format": "double",
            "description": "Spacecraft beginning of life fuel mass, in orbit, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "currentMass": {
            "format": "double",
            "description": "The estimated total current mass of the spacecraft, in kilograms.",
            "type": "number",
            "example": 500
          },
          "totalMassUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft mass, in kilograms.",
            "type": "number",
            "example": 50.1
          },
          "solarArrayArea": {
            "format": "double",
            "description": "Spacecraft deployed area of solar array in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maneuverable": {
            "description": "Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.",
            "type": "boolean",
            "example": false
          },
          "fuelRemaining": {
            "format": "double",
            "description": "Estimated remaining fuel for the object in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "crossSection": {
            "format": "double",
            "description": "Average cross sectional area in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "busCrossSection": {
            "format": "double",
            "description": "Average cross sectional area of the bus in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maxRadius": {
            "format": "double",
            "description": "Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.",
            "type": "number",
            "example": 10.23
          },
          "colaRadius": {
            "format": "double",
            "description": "Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.",
            "type": "number",
            "example": 10.23
          },
          "adeptRadius": {
            "format": "double",
            "description": "The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.",
            "type": "number",
            "example": 10.23
          },
          "numDeployable": {
            "format": "int32",
            "description": "The number of sub-satellites or deployable objects on the spacecraft.",
            "type": "integer",
            "example": 2
          },
          "depNames": {
            "description": "Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GOES-18A",
              "GOES-18B"
            ]
          },
          "depEstMasses": {
            "description": "Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              20,
              21
            ]
          },
          "depMassUncs": {
            "description": "Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              10,
              5
            ]
          },
          "refSource": {
            "description": "The reference source, sources, or URL from which the data in this record was obtained.",
            "maxLength": 256,
            "type": "string",
            "example": "Wikipedia"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "lastObSource": {
            "description": "The name of the source who last provided an observation for this idOnOrbit.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitSolarArray_Full": {
        "required": [
          "idOnOrbit",
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITSOLARARRAY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idSolarArray": {
            "description": "ID of the SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of solar arrays on the spacecraft of the type identified by idSolarArray.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "solarArray": {
            "$ref": "#/components/schemas/SolarArray_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitThruster_Full": {
        "required": [
          "idOnOrbit",
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITTHRUSTER-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idEngine": {
            "description": "ID of the Engine.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "The type of thruster associated with this record (e.g. LAE, Hydrazine REA, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Hydrazine REA"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of engines/thrusters on the spacecraft of the type identified by idEngine.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engine": {
            "$ref": "#/components/schemas/Engine_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Operatingunit_Full": {
        "description": "Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idOperatingUnit": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OPERATINGUNIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "altOperatingUnitId": {
            "description": "Unique identifier of the operating unit record from the originating system.",
            "maxLength": 36,
            "type": "string",
            "example": "32100000000021"
          },
          "name": {
            "description": "Name of the operating unit.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "SOME_NAME"
          },
          "description": {
            "description": "Description of the operating unit.",
            "maxLength": 256,
            "type": "string",
            "example": "Description of unit"
          },
          "idLocation": {
            "description": "Unique identifier of the location record for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "idContact": {
            "description": "Unique identifier of the contact for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "CONTACT-ID"
          },
          "idOrganization": {
            "description": "Unique identifier of the organization record for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "unitIdentifier": {
            "description": "An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.",
            "maxLength": 10,
            "type": "string",
            "example": "AZXAZ12345"
          },
          "countryCode": {
            "description": "The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to \"OTHR\" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).",
            "maxLength": 4,
            "type": "string",
            "example": "IQ"
          },
          "altCountryCode": {
            "description": "Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.",
            "maxLength": 4,
            "type": "string",
            "example": "IZ"
          },
          "wac": {
            "description": "World Aeronautical Chart identifier for the area in which a designated operating unit is located.",
            "maxLength": 4,
            "type": "string",
            "example": "0427"
          },
          "operStatus": {
            "description": "The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 3,
            "type": "string",
            "example": "OPR"
          },
          "condition": {
            "description": "The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "RDY"
          },
          "conditionAvail": {
            "description": "Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "A"
          },
          "eval": {
            "format": "int32",
            "description": "The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.",
            "type": "integer",
            "example": 7
          },
          "fpa": {
            "description": "Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 5,
            "type": "string",
            "example": "EOB"
          },
          "ident": {
            "description": "Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): \n\nASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.\n\nFRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.\n\nHOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.\n\nFAKER: Friendly track, object, or entity acting as an exercise hostile.\n\nJOKER: Friendly track, object, or entity acting as an exercise suspect.\n\nNEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.\n\nPENDING: Track object which has not been evaluated.\n\nSUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.\n\nUNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.",
            "maxLength": 32,
            "type": "string",
            "example": "FRIEND"
          },
          "allegiance": {
            "description": "The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to \"OTHR\" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).",
            "maxLength": 4,
            "type": "string",
            "example": "OTHR"
          },
          "altAllegiance": {
            "description": "Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.",
            "maxLength": 4,
            "type": "string",
            "example": "HL"
          },
          "locName": {
            "description": "Location name for the coordinates.",
            "maxLength": 54,
            "type": "string",
            "example": "LOCATION_NAME"
          },
          "locReason": {
            "description": "Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 9,
            "type": "string",
            "example": "GR"
          },
          "force": {
            "description": "An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "NV"
          },
          "forceName": {
            "description": "The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.",
            "maxLength": 54,
            "type": "string",
            "example": "FORCE-NAME"
          },
          "functRole": {
            "description": "Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 3,
            "type": "string",
            "example": "MIL"
          },
          "msnPrimary": {
            "description": "Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "W6"
          },
          "msnPrimarySpecialty": {
            "description": "Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "QK"
          },
          "masterUnit": {
            "description": "This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.",
            "type": "boolean",
            "example": true
          },
          "stylizedUnit": {
            "description": "This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.",
            "type": "boolean",
            "example": true
          },
          "divCat": {
            "description": "Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 1,
            "type": "string",
            "example": "5"
          },
          "echelon": {
            "description": "Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "SHIP"
          },
          "echelonTier": {
            "description": "Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 2,
            "type": "string",
            "example": "68"
          },
          "fleetId": {
            "description": "Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 1,
            "type": "string",
            "example": "A"
          },
          "deployStatus": {
            "description": "A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 2,
            "type": "string",
            "example": "ND"
          },
          "flagFlown": {
            "description": "The country code of the observed flag flown.",
            "maxLength": 4,
            "type": "string",
            "example": "IZ"
          },
          "coordDatum": {
            "description": "A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 16,
            "type": "string",
            "example": "WGS"
          },
          "coord": {
            "description": "\"Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.\nPos. 1-2.  Latitude Degrees     [00-90]\nPos. 3-4.  Latitude Minutes     [00-59]\nPos. 5-6.  Latitude Seconds     [00-59]\nPos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  \nPos. 10. Latitude Hemisphere       [NS] \nPos. 11-13. Longitude Degrees     [00-180] \nPos. 14-15. Longitude Minutes     [00-59] \nPos. 16-17. Longitude Seconds     [00-59] \nPos. 18-20. Longitude Thousandths Of Seconds      [000-999]\nPos. 21. Longitude Hemisphere     [EW]\nPos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]\".\n",
            "maxLength": 21,
            "type": "string",
            "example": "340000000N0430000000E"
          },
          "coordDerivAcc": {
            "format": "double",
            "description": "Indicates the plus or minus error assessed against the method used to derive the coordinate.",
            "type": "number",
            "example": 12.345
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 179.1
          },
          "elevMsl": {
            "format": "double",
            "description": "Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.",
            "type": "number",
            "example": 123.45
          },
          "elevMslConfLvl": {
            "format": "int32",
            "description": "Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.",
            "type": "integer",
            "example": 50
          },
          "elevMslDerivAcc": {
            "format": "double",
            "description": "Indicates the plus or minus error assessed against the method used to derive the elevation.",
            "type": "number",
            "example": 12.34
          },
          "geoidalMslSep": {
            "format": "double",
            "description": "The distance between Mean Sea Level and a referenced ellipsoid.",
            "type": "number",
            "example": 12.34
          },
          "milGridSys": {
            "description": "\"Indicates the grid system used in the development of the milGrid coordinates. Values are:\nUPS - Universal Polar System\nUTM - Universal Transverse Mercator\".",
            "maxLength": 3,
            "type": "string",
            "example": "UTM"
          },
          "milGrid": {
            "description": "The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:\n4Q (grid zone designator, GZD)\nFJ (the 100,000-meter square identifier)\n12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).",
            "maxLength": 15,
            "type": "string",
            "example": "4QFJ12345678"
          },
          "utm": {
            "description": "Universal Transverse Mercator (UTM) grid coordinates.\nPos. 1-2, UTM Zone Column   [01-60\nPos. 3, UTM Zone Row   [C-HJ-NP-X]\nPos. 4, UTM False Easting   [0-9]\nPos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]\nPos. 10-11, UTM False Northing    [0-9][0-9]\nPos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].",
            "maxLength": 16,
            "type": "string",
            "example": "19P4390691376966"
          },
          "airDefArea": {
            "description": "Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.",
            "maxLength": 5,
            "type": "string",
            "example": "AL006"
          },
          "polSubdiv": {
            "description": "Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 7,
            "type": "string",
            "example": "IZ07"
          },
          "symCode": {
            "description": "A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.",
            "maxLength": 15,
            "type": "string",
            "example": "SOGPU----------"
          },
          "classRating": {
            "description": "Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:\n0 - Does not meet criteria above\n1 - Primary importance to system\n2 - Secondary importance to system\n3 - Tertiary importance to system\nO - Other. Explain in Remarks.",
            "maxLength": 1,
            "type": "string",
            "example": "1"
          },
          "recStatus": {
            "description": "Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:\nA - Active\nI - Inactive\nK - Acknowledged\nL - Local\nQ - A nominated (NOM) or Data Change Request (DCR) record\nR - Production reduced by CMD decision\nW - Working Record.",
            "maxLength": 1,
            "type": "string",
            "example": "A"
          },
          "reviewDate": {
            "format": "date",
            "description": "Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.",
            "type": "string",
            "example": "2008-06-10"
          },
          "resProd": {
            "description": "Responsible Producer - Organization that is responsible for the maintenance of the record.",
            "maxLength": 4,
            "type": "string",
            "example": "RT"
          },
          "referenceDoc": {
            "description": "The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 128,
            "type": "string",
            "example": "Provider Reference Documentation"
          },
          "operatingUnitRemarks": {
            "description": "Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperatingUnitRemark_Full"
            },
            "readOnly": true
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization_Full"
          },
          "location": {
            "$ref": "#/components/schemas/Location_Full"
          }
        }
      },
      "OperatingUnitRemark_Full": {
        "description": "Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.",
        "required": [
          "classificationMarking",
          "idOperatingUnit",
          "text",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "0167f577-e06c-358e-85aa-0a07a730bdd0"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOperatingUnit": {
            "description": "The ID of the operating unit to which this remark applies.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OperatingUnit-ID"
          },
          "altRmkId": {
            "description": "Unique identifier of the unit remark record from the originating system.",
            "maxLength": 36,
            "type": "string",
            "example": "123456ABC"
          },
          "name": {
            "description": "The name of the remark.",
            "maxLength": 64,
            "type": "string",
            "example": "Remark name"
          },
          "type": {
            "description": "The remark type (e.g. Caution, Information, Misc, Restriction, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Restriction"
          },
          "text": {
            "description": "The text of the remark.",
            "maxLength": 16384,
            "minLength": 1,
            "type": "string",
            "example": "This is a remark"
          },
          "code": {
            "description": "The remark type identifier. For example, the Mobility Air Forces (MAF) remark code, defined in the Airfield Suitability and Restriction Report (ASRR).",
            "maxLength": 16,
            "type": "string",
            "example": "M"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Organization_Full": {
        "description": "An organization such as a corporation, manufacturer, consortium, government, etc. An organization may have parent and child organizations as well as link to a former organization if this org previously existed as another organization.",
        "required": [
          "classificationMarking",
          "name",
          "type",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Organization name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "type": {
            "description": "Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "GOVERNMENT"
          },
          "category": {
            "description": "Subtype or category of the organization (e.g. Private company, stock market quoted company, subsidiary, goverment department/agency, etc).",
            "maxLength": 128,
            "type": "string",
            "example": "Private company"
          },
          "externalId": {
            "description": "Optional externally provided identifier for this row.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "description": {
            "description": "Organization description.",
            "maxLength": 256,
            "type": "string",
            "example": "Example description"
          },
          "countryCode": {
            "description": "Country of the physical location of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code. However, it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "nationality": {
            "description": "Country of registration or ownership of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "active": {
            "description": "Boolean indicating if this organization is currently active.",
            "type": "boolean",
            "example": false
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "some.user"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "organizationDetails": {
            "description": "Read-only collection of additional OrganizationDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/organizationdetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationDetails_Full"
            },
            "readOnly": true
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OrganizationDetails_Full": {
        "description": "Model representation of additional detailed organization data as collected by a particular source.",
        "required": [
          "idOrganization",
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATIONDETAILS-ID"
          },
          "idOrganization": {
            "description": "Unique identifier of the parent organization.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Organization details name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "email": {
            "description": "Listed contact email address for the organization.",
            "maxLength": 320,
            "type": "string",
            "example": "some_organization@organization.com"
          },
          "address1": {
            "description": "Street number of the organization.",
            "maxLength": 120,
            "type": "string",
            "example": "123 Main Street"
          },
          "address2": {
            "description": "Field for additional organization address information such as PO Box and unit number.",
            "maxLength": 120,
            "type": "string",
            "example": "Apt 4B"
          },
          "address3": {
            "description": "Contains the third line of address information for an organization.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado Springs CO, 80903"
          },
          "geoAdminLevel1": {
            "description": "Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado"
          },
          "geoAdminLevel2": {
            "description": "Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.",
            "maxLength": 120,
            "type": "string",
            "example": "El Paso County"
          },
          "geoAdminLevel3": {
            "description": "Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado Springs"
          },
          "postalCode": {
            "description": "A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.",
            "maxLength": 32,
            "type": "string",
            "example": "80903"
          },
          "description": {
            "description": "Organization description.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example description"
          },
          "formerOrgId": {
            "description": "Former organization ID (if this organization previously existed as another organization).",
            "maxLength": 36,
            "type": "string",
            "example": "FORMERORG-ID"
          },
          "parentOrgId": {
            "description": "Parent organization ID of this organization if it is a child organization.",
            "maxLength": 36,
            "type": "string",
            "example": "PARENTORG-ID"
          },
          "financialYearEndDate": {
            "format": "date-time",
            "description": "For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "revenue": {
            "format": "double",
            "description": "For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "profit": {
            "format": "double",
            "description": "For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "ebitda": {
            "format": "double",
            "description": "For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "ftes": {
            "format": "int32",
            "description": "Total number of FTEs in this organization.",
            "type": "integer",
            "example": 123
          },
          "broker": {
            "description": "Designated broker for this organization.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "ceo": {
            "description": "For organizations of type CORPORATION, the name of the Chief Executive Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "cfo": {
            "description": "For organizations of type CORPORATION, the name of the Chief Financial Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "cto": {
            "description": "For organizations of type CORPORATION, the name of the Chief Technology Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "riskManager": {
            "description": "The name of the risk manager for the organization.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "massRanking": {
            "format": "int32",
            "description": "Mass ranking for this organization.",
            "type": "integer",
            "example": 123
          },
          "revenueRanking": {
            "format": "int32",
            "description": "Revenue ranking for this organization.",
            "type": "integer",
            "example": 123
          },
          "financialNotes": {
            "description": "For organizations of type CORPORATION, notes on company financials.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "servicesNotes": {
            "description": "Notes on the services provided by the organization.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "fleetPlanNotes": {
            "description": "Satellite fleet planning notes for this organization.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "some.user"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "RFBand_Full": {
        "description": "Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.",
        "required": [
          "idEntity",
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RFBAND-ID"
          },
          "idEntity": {
            "description": "Unique identifier of the parent Entity which uses this band.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENTITY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "RF Band name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "BAND_NAME"
          },
          "band": {
            "description": "Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.",
            "maxLength": 5,
            "type": "string",
            "example": "Ku"
          },
          "mode": {
            "description": "RF Band mode (e.g. TX, RX).",
            "maxLength": 4,
            "enum": [
              "TX",
              "RX"
            ],
            "type": "string",
            "example": "TX"
          },
          "purpose": {
            "description": "Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).",
            "maxLength": 16,
            "enum": [
              "COMM",
              "TTC",
              "OPS",
              "OTHER"
            ],
            "type": "string",
            "example": "TTC"
          },
          "freqMin": {
            "format": "double",
            "description": "Start/minimum of transmit RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 50.23
          },
          "freqMax": {
            "format": "double",
            "description": "End/maximum of transmit RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 2000.23
          },
          "centerFreq": {
            "format": "double",
            "description": "Center frequency of RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 1000.23
          },
          "peakGain": {
            "format": "double",
            "description": "RF Range maximum gain, in dBi.",
            "type": "number",
            "example": 120.23
          },
          "edgeGain": {
            "format": "double",
            "description": "RF Range edge gain, in dBi.",
            "type": "number",
            "example": 100.23
          },
          "bandwidth": {
            "format": "double",
            "description": "RF Band frequency range bandwidth in Mhz.",
            "type": "number",
            "example": 100.23
          },
          "beamwidth": {
            "format": "double",
            "description": "Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.",
            "type": "number",
            "example": 45.23
          },
          "polarization": {
            "description": "Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.",
            "maxLength": 4,
            "enum": [
              "H",
              "V",
              "R",
              "L"
            ],
            "type": "string",
            "example": "H"
          },
          "erp": {
            "format": "double",
            "description": "Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the \"main lobe\") of its radiation pattern.",
            "type": "number",
            "example": 2.23
          },
          "eirp": {
            "format": "double",
            "description": "EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the \"main lobe\") of its radiation pattern.",
            "type": "number",
            "example": 2.23
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "SensorPlan_Abridged": {
        "description": "A Plan is used to aggregate two or more of the same type of record to a parent entity, with the planId (UUID) being included in all of the subordinate records, enabling resolution back to the parent.",
        "required": [
          "classificationMarking",
          "type",
          "recType",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SENSORPLAN-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).",
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "example": "PLAN"
          },
          "recType": {
            "description": "The type of records that comprise this parent set (COLLECT, CONTACT).",
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "example": "COLLECT"
          },
          "startTime": {
            "format": "date-time",
            "description": "The start time of the plan or schedule, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The end time of the plan or schedule, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "name": {
            "description": "Name associated with this plan or schedule.",
            "maxLength": 24,
            "type": "string",
            "example": "EXAMPLE NAME"
          },
          "idSensor": {
            "description": "Unique identifier of the requested/schedule/planned sensor associated with this request.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "purpose": {
            "description": "The purpose/description of this plan or schedule.",
            "maxLength": 256,
            "type": "string",
            "example": "Example purpose"
          },
          "senNetwork": {
            "description": "The sensor or ground network associated with this plan or schedule.",
            "maxLength": 24,
            "type": "string",
            "example": "NETWORK"
          },
          "reqTotal": {
            "format": "int32",
            "description": "The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.",
            "type": "integer",
            "example": 2
          },
          "customer": {
            "description": "The customer for this plan or schedule.",
            "maxLength": 64,
            "type": "string",
            "example": "CUSTOMER"
          },
          "status": {
            "description": "The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).",
            "maxLength": 24,
            "type": "string",
            "example": "ACCEPTED"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "SensorPlan_Full": {
        "description": "A Plan is used to aggregate two or more of the same type of record to a parent entity, with the planId (UUID) being included in all of the subordinate records, enabling resolution back to the parent.",
        "required": [
          "classificationMarking",
          "type",
          "recType",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SENSORPLAN-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).",
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "example": "PLAN"
          },
          "recType": {
            "description": "The type of records that comprise this parent set (COLLECT, CONTACT).",
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "example": "COLLECT"
          },
          "startTime": {
            "format": "date-time",
            "description": "The start time of the plan or schedule, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The end time of the plan or schedule, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "name": {
            "description": "Name associated with this plan or schedule.",
            "maxLength": 24,
            "type": "string",
            "example": "EXAMPLE NAME"
          },
          "idSensor": {
            "description": "Unique identifier of the requested/schedule/planned sensor associated with this request.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "purpose": {
            "description": "The purpose/description of this plan or schedule.",
            "maxLength": 256,
            "type": "string",
            "example": "Example purpose"
          },
          "senNetwork": {
            "description": "The sensor or ground network associated with this plan or schedule.",
            "maxLength": 24,
            "type": "string",
            "example": "NETWORK"
          },
          "reqTotal": {
            "format": "int32",
            "description": "The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.",
            "type": "integer",
            "example": 2
          },
          "customer": {
            "description": "The customer for this plan or schedule.",
            "maxLength": 64,
            "type": "string",
            "example": "CUSTOMER"
          },
          "status": {
            "description": "The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).",
            "maxLength": 24,
            "type": "string",
            "example": "ACCEPTED"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "collectRequests": {
            "description": "The list of collect requests belonging to the SensorPlan. Each collect request is associated with a parent SensorPlan via the IdPlan. If provided, the list must have the same size as reqTotal.",
            "type": "array",
            "items": {
              "description": "Collect Requests support several types of individual requests, or planned/scheduled tasks on sensors and/or orbital objects. Options are provided to accomodate most common sensor contact and collection applications, including single sensor-object tasking, search operations, and TT&C support. Multiple requests originating from a plan or schedule may be associated to a sensor plan if desired.",
              "required": [
                "classificationMarking",
                "type",
                "startTime",
                "source",
                "dataMode"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Unique identifier of the record, auto-generated by the system.",
                  "maxLength": 36,
                  "minLength": 1,
                  "type": "string",
                  "example": "COLLECTREQUEST-ID"
                },
                "classificationMarking": {
                  "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "example": "U"
                },
                "idParentReq": {
                  "description": "The unique ID of the collect request record from which this request originated. This may be used for cases of sensor-to-sensor tasking, such as tip/cue operations.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "da98671b-34db-47bf-8c8d-7c668b92c800"
                },
                "msgType": {
                  "description": "The type of external message from which this request originated.",
                  "maxLength": 16,
                  "type": "string",
                  "example": "SU67"
                },
                "msgCreateDate": {
                  "format": "date-time",
                  "description": "The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.",
                  "type": "string",
                  "example": "2024-04-25T08:17:01.346Z"
                },
                "type": {
                  "description": "The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT, POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).",
                  "maxLength": 36,
                  "minLength": 1,
                  "type": "string",
                  "example": "DWELL"
                },
                "idPlan": {
                  "description": "Unique identifier of the parent plan or schedule associated with this request.  If null, this request is assumed not associated with a plan or schedule.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "REF-PLAN-ID"
                },
                "planIndex": {
                  "format": "int32",
                  "description": "Index number (integer) for records within a collection plan or schedule.",
                  "type": "integer",
                  "example": 8
                },
                "taskId": {
                  "description": "Task ID associated with this request.  A task ID may be associated with a single collect request or may be used to tie together the sub-requests of a full collect, for example a DWELL consisting of many dwell points.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "TASK-ID"
                },
                "dwellId": {
                  "description": "The dwell ID associated with this request.  A dwell ID is dwell point specific and a DWELL request consist of many dwell point requests.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "DWELL-ID"
                },
                "externalId": {
                  "description": "Optional ID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "EXTERNAL-ID"
                },
                "idSensor": {
                  "description": "Unique identifier of the requested/scheduled/planned sensor associated with this request.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "REF-SENSOR-ID"
                },
                "origSensorId": {
                  "description": "Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.",
                  "maxLength": 64,
                  "type": "string",
                  "example": "ORIGSENSOR-ID"
                },
                "obType": {
                  "description": "Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER) requested.  This field may correspond to a request of a specific sensor, or to a general non sensor specific request.",
                  "maxLength": 24,
                  "type": "string",
                  "example": "RADAR"
                },
                "priority": {
                  "description": "The priority of the collect request  (EMERGENCY, FLASH, IMMEDIATE, PRIORITY, ROUTINE).",
                  "maxLength": 24,
                  "type": "string",
                  "example": "EMERGENCY"
                },
                "taskCategory": {
                  "format": "int32",
                  "description": "The (SSN) tasking category (1-5) associated with this request.  The tasking category defines the priority of gathering and transmitting the requested observational data.  Note that category definitions are sensor type specific.",
                  "type": "integer",
                  "example": 4
                },
                "suffix": {
                  "description": "The (SSN) tasking suffix (A-Z) associated with this request.  The suffix defines the amount of observational data and the frequency of collection.  Note that suffix definitions are sensor type specific.",
                  "maxLength": 1,
                  "type": "string",
                  "example": "T"
                },
                "uctFollowUp": {
                  "description": "Boolean indicating that this collect request is UCT follow-up.",
                  "type": "boolean",
                  "example": false
                },
                "startTime": {
                  "format": "date-time",
                  "description": "The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format.",
                  "type": "string",
                  "example": "2018-01-01T16:00:00.123456Z"
                },
                "endTime": {
                  "format": "date-time",
                  "description": "The end time of the collect or contact request window, in ISO 8601 UTC format.  If no endTime or duration is provided it is assumed the request is either ongoing or that the request is for a specified number of tracks (numTracks).  If both duration and endTime are provided, the endTime is assumed to take precedence.",
                  "type": "string",
                  "example": "2018-01-01T18:00:00.123456Z"
                },
                "idOnOrbit": {
                  "description": "Unique identifier of the target on-orbit object for this request.",
                  "maxLength": 36,
                  "type": "string",
                  "readOnly": true,
                  "example": "REF-ONORBIT-ID"
                },
                "satNo": {
                  "format": "int32",
                  "description": "Satellite/catalog number of the target on-orbit object for this request.",
                  "type": "integer",
                  "example": 101
                },
                "origObjectId": {
                  "description": "Optional identifier provided by the data source to indicate the target object of this request. This may be an internal identifier and not necessarily map to a valid satellite number.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "ORIGOBJECT-ID"
                },
                "taskGroup": {
                  "description": "The tasking group to which the target object is assigned.",
                  "maxLength": 16,
                  "type": "string",
                  "example": "729"
                },
                "iron": {
                  "format": "int32",
                  "description": "Inter-Range Operations Number.  Four-digit identifier used to schedule and identify AFSCN contact support for booster, launch, and on-orbit operations.",
                  "type": "integer",
                  "example": 3
                },
                "orbitRegime": {
                  "description": "The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER).",
                  "maxLength": 12,
                  "type": "string",
                  "example": "GEO"
                },
                "targetSize": {
                  "format": "double",
                  "description": "The minimum object (diameter) size, in meters, to be reported.",
                  "type": "number",
                  "example": 1.1
                },
                "rcsMin": {
                  "format": "double",
                  "description": "The minimum Radar Cross-Section of the target, in m^2.  If only minimum RCS is provided it is assumed to be minimum reportable RCS.",
                  "type": "number",
                  "example": 1.1
                },
                "rcs": {
                  "format": "double",
                  "description": "The Radar Cross-Section of the target, in m^2.",
                  "type": "number",
                  "example": 1.1
                },
                "rcsMax": {
                  "format": "double",
                  "description": "The maximum Radar Cross-Section of the target, in m^2.",
                  "type": "number",
                  "example": 1.1
                },
                "freqMin": {
                  "format": "double",
                  "description": "The minimum frequency of interest, in MHz.  If only minimum frequency is provided it is assumed to be minimum reportable frequency.",
                  "type": "number",
                  "example": 1.1
                },
                "freq": {
                  "format": "double",
                  "description": "The estimated or expected emission frequency of the target, in MHz.",
                  "type": "number",
                  "example": 1.1
                },
                "freqMax": {
                  "format": "double",
                  "description": "The maximum frequency of interest, in MHz.",
                  "type": "number",
                  "example": 1.1
                },
                "polarization": {
                  "description": "The RF polarization (H, LHC, RHC, V).",
                  "maxLength": 4,
                  "type": "string",
                  "example": "H"
                },
                "visMagMin": {
                  "format": "double",
                  "description": "The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).  If only minimum vismag is provided it is assumed to be minimum reportable vismag.",
                  "type": "number",
                  "example": 1.1
                },
                "visMag": {
                  "format": "double",
                  "description": "The estimated or expected visual magnitude of the target, in Magnitudes (M).",
                  "type": "number",
                  "example": 1.1
                },
                "visMagMax": {
                  "format": "double",
                  "description": "The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).",
                  "type": "number",
                  "example": 1.1
                },
                "spectralModel": {
                  "description": "The spectral model used for the irradiance calculation.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "Example Model"
                },
                "reflectance": {
                  "format": "double",
                  "description": "The fraction of solar energy reflected from target.",
                  "type": "number",
                  "example": 1.1
                },
                "irradiance": {
                  "format": "double",
                  "description": "The target object irradiance value.",
                  "type": "number",
                  "example": 1.1
                },
                "numFrames": {
                  "format": "int32",
                  "description": "For optical sensors, the requested number of frames to capture at each sensor step.",
                  "type": "integer",
                  "example": 6
                },
                "frameRate": {
                  "format": "double",
                  "description": "For optical sensors, the frame rate of the camera, in Hz.",
                  "type": "number",
                  "example": 1.1
                },
                "integrationTime": {
                  "format": "double",
                  "description": "For optical sensors, the integration time per camera frame, in milliseconds.",
                  "type": "number",
                  "example": 1.1
                },
                "numTracks": {
                  "format": "int32",
                  "description": "The number of requested tracks on the target.  If numTracks is not provided it is assumed to indicate all possible observations every pass over the request duration or within the request start/end window.",
                  "type": "integer",
                  "example": 3
                },
                "numObs": {
                  "format": "int32",
                  "description": "The number of requested observations on the target.",
                  "minimum": 1,
                  "type": "integer",
                  "example": 9
                },
                "duration": {
                  "format": "int32",
                  "description": "The duration of the collect request, in seconds.  If both duration and endTime are provided, the endTime is assumed to take precedence.",
                  "type": "integer",
                  "example": 11
                },
                "srchPattern": {
                  "description": "The search pattern to be executed for this request (e.g. PICKET-FENCE, SCAN, etc.).",
                  "maxLength": 24,
                  "type": "string",
                  "example": "SCAN"
                },
                "scenario": {
                  "description": "Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.",
                  "maxLength": 24,
                  "type": "string",
                  "example": "Example direction"
                },
                "idElset": {
                  "description": "ID of the UDL Elset of the object associated with this request.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "REF-ELSET-ID"
                },
                "idManifold": {
                  "description": "ID of the UDL Manifold Elset of the object associated with this request.  A Manifold Elset provides theoretical Keplerian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "REF-MANIFOLD-ID"
                },
                "idStateVector": {
                  "description": "ID of the UDL State Vector of the object or central vector associated with this request.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "STATEVECTOR-ID"
                },
                "esId": {
                  "description": "ID of the UDL Ephemeris Set of the object associated with this request.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "ES-ID"
                },
                "epoch": {
                  "format": "date-time",
                  "description": "Epoch time, in ISO 8601 UTC format, of the orbital elements.",
                  "type": "string",
                  "example": "2018-01-01T16:00:00.123456Z"
                },
                "semiMajorAxis": {
                  "format": "double",
                  "description": "The average of the periapsis and apoapsis distances, in kilometers. For circular orbits, the semimajor axis is the distance between the centers of the bodies.",
                  "type": "number",
                  "example": 1.1
                },
                "eccentricity": {
                  "format": "double",
                  "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle.",
                  "type": "number",
                  "example": 1.1
                },
                "inclination": {
                  "format": "double",
                  "description": "The angle, in degrees, between the equator and the orbit plane when looking from the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90 representing posigrade orbits and 90-180 representing retrograde orbits.",
                  "type": "number",
                  "example": 1.1
                },
                "raan": {
                  "format": "double",
                  "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node.",
                  "type": "number",
                  "example": 1.1
                },
                "argOfPerigee": {
                  "format": "double",
                  "description": "The argument of perigee is the angle, in degrees, formed between the perigee and the ascending node.",
                  "type": "number",
                  "example": 1.1
                },
                "trueAnomoly": {
                  "format": "double",
                  "description": "The true anomaly defines the angular position, in degrees, of the object on it's orbital path as measured from the orbit focal point at epoch.  The true anomaly is referenced from perigee.",
                  "type": "number",
                  "example": 1.1
                },
                "ra": {
                  "format": "double",
                  "description": "The expected or directed right ascension angle, in degrees, for search or target acquisition.",
                  "type": "number",
                  "example": 1.1
                },
                "dec": {
                  "format": "double",
                  "description": "The expected or directed declination angle, in degrees, for search or target acquisition.",
                  "type": "number",
                  "example": 1.1
                },
                "az": {
                  "format": "double",
                  "description": "The expected or directed azimuth angle, in degrees, for search or target acquisition.",
                  "type": "number",
                  "example": 1.1
                },
                "el": {
                  "format": "double",
                  "description": "The expected or directed elevation angle, in degrees, for search or target acquisition.",
                  "type": "number",
                  "example": 1.1
                },
                "range": {
                  "format": "double",
                  "description": "The expected acquisition range or defined center range, in km.",
                  "type": "number",
                  "example": 1.1
                },
                "extentAz": {
                  "format": "double",
                  "description": "The extent of the azimuth angle, in degrees, from center azimuth to define a spatial volume.",
                  "type": "number",
                  "example": 1.1
                },
                "extentEl": {
                  "format": "double",
                  "description": "The extent of the elevation angle, in degrees, from center elevation to define a spatial volume.",
                  "type": "number",
                  "example": 1.1
                },
                "extentRange": {
                  "format": "double",
                  "description": "The extent of the range, in km, from center range to define a spatial volume.",
                  "type": "number",
                  "example": 1.1
                },
                "lat": {
                  "format": "double",
                  "description": "WGS-84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).  If an accompanying stopLat is provided, then the lat value can be assumed to be the starting latitude of a volume definition.",
                  "maximum": 90,
                  "minimum": -90,
                  "type": "number",
                  "example": 1.1
                },
                "lon": {
                  "format": "double",
                  "description": "WGS-84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).  If an accompanying stopLon is provided, then lon value can be assumed to be the starting longitude of a volume definition.",
                  "maximum": 180,
                  "minimum": -180,
                  "type": "number",
                  "example": 1.1
                },
                "alt": {
                  "format": "double",
                  "description": "Height above WGS-84 ellipsoid (HAE), in kilometers.  If an accompanying stopAlt is provided, then alt value can be assumed to be the starting altitude of a volume definition.",
                  "type": "number",
                  "example": 1.1
                },
                "stopLat": {
                  "format": "double",
                  "description": "The stopping WGS-84 latitude of a volume definition, in degrees.  -90 to 90 degrees (negative values south of equator).  The stopLat value is only meaningful if a (starting) lat value is provided.",
                  "maximum": 90,
                  "minimum": -90,
                  "type": "number",
                  "example": 1.1
                },
                "stopLon": {
                  "format": "double",
                  "description": "The stopping WGS-84 longitude of a volume definition, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).  The stopLon value is only meaningful if a (starting) lon value is provided.",
                  "maximum": 180,
                  "minimum": -180,
                  "type": "number",
                  "example": 1.1
                },
                "stopAlt": {
                  "format": "double",
                  "description": "The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in kilometers.  The stopAlt value is only meaningful if a (starting) alt value is provided.",
                  "type": "number",
                  "example": 1.1
                },
                "srchInc": {
                  "format": "double",
                  "description": "The maximum inclination, in degrees, to be used in search operations.",
                  "type": "number",
                  "example": 1.1
                },
                "xAngle": {
                  "format": "double",
                  "description": "The angular distance, in degrees, in the sensor-x direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.",
                  "type": "number",
                  "example": 1.1
                },
                "yAngle": {
                  "format": "double",
                  "description": "The angular distance, in degrees, in the sensor-y direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.",
                  "type": "number",
                  "example": 1.1
                },
                "orientAngle": {
                  "format": "double",
                  "description": "The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.  A positive value indicates clockwise rotation about the sensor boresight vector.",
                  "type": "number",
                  "example": 1.1
                },
                "customer": {
                  "description": "The customer for this request.",
                  "maxLength": 64,
                  "type": "string",
                  "example": "Bluestaq"
                },
                "transactionId": {
                  "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
                  "maxLength": 64,
                  "type": "string",
                  "example": "TRANSACTION-ID"
                },
                "notes": {
                  "description": "Notes or comments associated with this request.",
                  "maxLength": 512,
                  "type": "string",
                  "example": "Example notes"
                },
                "updatedAt": {
                  "format": "date-time",
                  "description": "Time the row was last updated in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "updatedBy": {
                  "description": "Application user who updated the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "createdAt": {
                  "format": "date-time",
                  "description": "Time the row was created in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "createdBy": {
                  "description": "Application user who created the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "source": {
                  "description": "Source of the data.",
                  "maxLength": 36,
                  "minLength": 1,
                  "type": "string",
                  "example": "Bluestaq"
                },
                "origin": {
                  "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                  "maxLength": 64,
                  "type": "string",
                  "example": "Example source"
                },
                "origNetwork": {
                  "description": "The originating source network on which this record was created, auto-populated by the system.",
                  "maxLength": 32,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "ORIG"
                },
                "dataMode": {
                  "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                  "maxLength": 32,
                  "minLength": 1,
                  "enum": [
                    "REAL",
                    "TEST",
                    "SIMULATED",
                    "EXERCISE"
                  ],
                  "type": "string",
                  "example": "TEST"
                },
                "stateVector": {
                  "description": "This service provides operations for querying and manipulation of state vectors for OnOrbit objects. State vectors are cartesian vectors of position (r) and velocity (v) that, together with their time (epoch) (t), uniquely determine the trajectory of the orbiting body in space. J2000 is the preferred coordinate frame for all state vector positions/velocities in UDL, but in some cases data may be in another frame depending on the provider and/or datatype. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
                  "required": [
                    "classificationMarking",
                    "epoch",
                    "source",
                    "dataMode"
                  ],
                  "type": "object",
                  "properties": {
                    "idStateVector": {
                      "description": "Unique identifier of the record, auto-generated by the system.",
                      "maxLength": 36,
                      "minLength": 1,
                      "type": "string",
                      "example": "STATEVECTOR-ID"
                    },
                    "classificationMarking": {
                      "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                      "maxLength": 128,
                      "minLength": 1,
                      "type": "string",
                      "example": "U"
                    },
                    "epoch": {
                      "format": "date-time",
                      "description": "Time of validity for state vector in ISO 8601 UTC datetime format, with microsecond precision.",
                      "type": "string",
                      "example": "2018-01-01T16:00:00.123456Z"
                    },
                    "pedigree": {
                      "description": "The pedigree of state vector, or methods used for its generation to include state update/orbit determination, propagation from another state, or a state from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION, CONJUNCTION, FLIGHT_PLAN).",
                      "maxLength": 32,
                      "type": "string",
                      "example": "CONJUNCTION"
                    },
                    "idOnOrbit": {
                      "description": "Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                      "maxLength": 36,
                      "type": "string",
                      "readOnly": true,
                      "example": "ONORBIT-ID"
                    },
                    "satNo": {
                      "format": "int32",
                      "description": "Satellite/Catalog number of the target OnOrbit object.",
                      "type": "integer",
                      "example": 12
                    },
                    "origObjectId": {
                      "description": "Optional identifier provided by state vector source to indicate the target onorbit object of this state vector. This may be an internal identifier and not necessarily map to a valid satellite number.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "ORIGOBJECT-ID"
                    },
                    "idOrbitDetermination": {
                      "description": "Unique identifier of the OD solution record that produced this state vector. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queries as /udl/orbitdetermination/abc.",
                      "maxLength": 36,
                      "type": "string",
                      "example": "026dd511-8ba5-47d3-9909-836149f87686"
                    },
                    "uct": {
                      "description": "Boolean indicating this state vector was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
                      "type": "boolean",
                      "example": true
                    },
                    "xpos": {
                      "format": "double",
                      "description": "Cartesian X position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": -1118.577381
                    },
                    "ypos": {
                      "format": "double",
                      "description": "Cartesian Y position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": 3026.231084
                    },
                    "zpos": {
                      "format": "double",
                      "description": "Cartesian Z position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": 6167.831808
                    },
                    "xvel": {
                      "format": "double",
                      "description": "Cartesian X velocity of target, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": -4.25242784
                    },
                    "yvel": {
                      "format": "double",
                      "description": "Cartesian Y velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": 5.291107434
                    },
                    "zvel": {
                      "format": "double",
                      "description": "Cartesian Z velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": -3.356493869
                    },
                    "xaccel": {
                      "format": "double",
                      "description": "Cartesian X acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": -2.12621392
                    },
                    "yaccel": {
                      "format": "double",
                      "description": "Cartesian Y acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": 2.645553717
                    },
                    "zaccel": {
                      "format": "double",
                      "description": "Cartesian Z acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": -1.06310696
                    },
                    "referenceFrame": {
                      "description": "The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.",
                      "maxLength": 24,
                      "enum": [
                        "J2000",
                        "EFG/TDR",
                        "ECR/ECEF",
                        "TEME",
                        "ITRF",
                        "GCRF"
                      ],
                      "type": "string",
                      "example": "J2000"
                    },
                    "cov": {
                      "description": "Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.  If the covReferenceFrame is null it is assumed to be J2000.\nThe array values (1-21) represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;\n\nx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3\n\nz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6\n\nx'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10\n\ny'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15\n\nz'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;\n\nThe cov array should contain only the lower left triangle values from top left down to bottom right, in order.\n\nIf additional covariance terms are included for DRAG, SRP, and/or THRUST, the matrix can be extended with the following order of elements:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR\n\nDRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;\n\nSRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;\n\nTHR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;\n\n\n",
                      "type": "array",
                      "items": {
                        "format": "double",
                        "type": "number"
                      },
                      "example": [
                        1.1,
                        2.4,
                        3.8,
                        4.2,
                        5.5,
                        6
                      ]
                    },
                    "covReferenceFrame": {
                      "description": "The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.",
                      "maxLength": 24,
                      "enum": [
                        "J2000",
                        "UVW"
                      ],
                      "type": "string",
                      "example": "J2000"
                    },
                    "covMethod": {
                      "description": "The method used to generate the covariance during the orbit determination (OD) that produced the state vector, or whether an arbitrary, non-calculated default value was used (CALCULATED, DEFAULT).",
                      "maxLength": 24,
                      "type": "string",
                      "example": "CALCULATED"
                    },
                    "eqCov": {
                      "description": "The covariance matrix values represent the lower triangular half of the covariance matrix in terms of equinoctial elements.&nbsp; The size of the covariance matrix is dynamic.&nbsp; The values are outputted in order across each row, i.e.:\n\n1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5\n\n6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n\n\n\nThe ordering of values is as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp; Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp; B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...\n\nAf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1\n\nAg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3\n\nL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6\n\nN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10\n\nChi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp; 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15\n\nPsi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp; 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21\n\nB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp; 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28\n\nBDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp; 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36\n\nAGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp; 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45\n\nT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp; 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp; 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55\n\nC1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp; 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp; 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66\n\nC2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp; 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp; 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78\n\n:\n\n:\n\nwhere C1, C2, etc, are the \"consider parameters\" that may be added to the covariance matrix.&nbsp; The covariance matrix will be as large as the last element/model parameter needed.&nbsp; In other words, if the DC solved for all 6 elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size will be set to 0x0, and no data will follow.&nbsp; The cov field should contain only the lower left triangle values from top left down to bottom right, in order.",
                      "type": "array",
                      "items": {
                        "format": "double",
                        "type": "number"
                      },
                      "example": [
                        1.1,
                        2.2
                      ]
                    },
                    "xposAlt1": {
                      "format": "double",
                      "description": "Cartesian X position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -1145.688502
                    },
                    "yposAlt1": {
                      "format": "double",
                      "description": "Cartesian Y position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": 3020.729572
                    },
                    "zposAlt1": {
                      "format": "double",
                      "description": "Cartesian Z position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": 6165.55187
                    },
                    "xvelAlt1": {
                      "format": "double",
                      "description": "Cartesian X velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -4.270832252
                    },
                    "yvelAlt1": {
                      "format": "double",
                      "description": "Cartesian Y velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": 5.27074276
                    },
                    "zvelAlt1": {
                      "format": "double",
                      "description": "Cartesian Z velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -3.365155181
                    },
                    "alt1ReferenceFrame": {
                      "description": "The reference frame of the alternate1 (Alt1) cartesian orbital state.",
                      "maxLength": 24,
                      "type": "string",
                      "example": "TEME"
                    },
                    "xposAlt2": {
                      "format": "double",
                      "description": "Cartesian X position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -1456.915926
                    },
                    "yposAlt2": {
                      "format": "double",
                      "description": "Cartesian Y position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -2883.540406
                    },
                    "zposAlt2": {
                      "format": "double",
                      "description": "Cartesian Z position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": 6165.55187
                    },
                    "xvelAlt2": {
                      "format": "double",
                      "description": "Cartesian X velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -1.219814294
                    },
                    "yvelAlt2": {
                      "format": "double",
                      "description": "Cartesian Y velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -6.602080212
                    },
                    "zvelAlt2": {
                      "format": "double",
                      "description": "Cartesian Z velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -3.365155181
                    },
                    "alt2ReferenceFrame": {
                      "description": "The reference frame of the alternate2 (Alt2) cartesian orbital state.",
                      "maxLength": 24,
                      "type": "string",
                      "example": "EFG/TDR"
                    },
                    "posUnc": {
                      "format": "double",
                      "description": "One sigma position uncertainty, in kilometers.",
                      "type": "number",
                      "example": 0.333399744452
                    },
                    "velUnc": {
                      "format": "double",
                      "description": "One sigma velocity uncertainty, in kilometers/second.",
                      "type": "number",
                      "example": 0.000004
                    },
                    "mass": {
                      "format": "double",
                      "description": "The mass of the object, in kilograms.",
                      "type": "number",
                      "example": 164.5
                    },
                    "area": {
                      "format": "double",
                      "description": "The actual area of the object at it's largest cross-section, expressed in meters^2.",
                      "type": "number",
                      "example": 5.065
                    },
                    "solarRadPressCoeff": {
                      "format": "double",
                      "description": "Area-to-mass ratio coefficient for solar radiation pressure.",
                      "type": "number",
                      "example": 0.0244394
                    },
                    "dragCoeff": {
                      "format": "double",
                      "description": "Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).",
                      "type": "number",
                      "example": 0.0224391269775
                    },
                    "dragArea": {
                      "format": "double",
                      "description": "The effective area of the object exposed to atmospheric drag, expressed in meters^2.",
                      "type": "number",
                      "example": 4.739
                    },
                    "revNo": {
                      "format": "int32",
                      "description": "Epoch revolution number.",
                      "type": "integer",
                      "example": 7205
                    },
                    "geopotentialModel": {
                      "description": "Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96 24Z,24T.",
                      "maxLength": 32,
                      "type": "string",
                      "example": "EGM-96"
                    },
                    "dragModel": {
                      "description": "The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).",
                      "maxLength": 32,
                      "type": "string",
                      "example": "JAC70"
                    },
                    "lunarSolar": {
                      "description": "Boolean indicating use of lunar/solar perturbations for this vector.",
                      "type": "boolean",
                      "example": true
                    },
                    "solarRadPress": {
                      "description": "Boolean indicating use of solar radiation pressure perturbations for this vector.",
                      "type": "boolean",
                      "example": true
                    },
                    "srpArea": {
                      "format": "double",
                      "description": "The effective area of the object exposed to solar radiation pressure, expressed in meters^2.",
                      "type": "number",
                      "example": 4.311
                    },
                    "solidEarthTides": {
                      "description": "Boolean indicating use of solid earth tide perturbations for this vector.",
                      "type": "boolean",
                      "example": true
                    },
                    "inTrackThrust": {
                      "description": "Boolean indicating use of in-track thrust perturbations for this vector.",
                      "type": "boolean",
                      "example": true
                    },
                    "bDot": {
                      "format": "double",
                      "description": "First derivative of drag/ballistic coefficient (m2/kg-s).",
                      "type": "number",
                      "example": 1.23
                    },
                    "edr": {
                      "format": "double",
                      "description": "Model parameter value for energy dissipation rate (EDR) (w/kg).",
                      "type": "number",
                      "example": 1.23
                    },
                    "thrustAccel": {
                      "format": "double",
                      "description": "Model parameter value for thrust acceleration (m/s2).",
                      "type": "number",
                      "example": 1.23
                    },
                    "cmOffset": {
                      "format": "double",
                      "description": "Model parameter value for center of mass offset (m).",
                      "type": "number",
                      "example": 1.23
                    },
                    "lastObStart": {
                      "format": "date-time",
                      "description": "The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.",
                      "type": "string",
                      "example": "2022-11-09T11:20:21.247192Z"
                    },
                    "lastObEnd": {
                      "format": "date-time",
                      "description": "The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.",
                      "type": "string",
                      "example": "2022-11-09T11:20:21.247192Z"
                    },
                    "obsAvailable": {
                      "format": "int32",
                      "description": "The number of observations available for the OD of the object.",
                      "type": "integer",
                      "example": 376
                    },
                    "obsUsed": {
                      "format": "int32",
                      "description": "The number of observations accepted for the OD of the object.",
                      "type": "integer",
                      "example": 374
                    },
                    "tracksAvail": {
                      "format": "int32",
                      "description": "The number of sensor tracks available for the OD of the object.",
                      "type": "integer",
                      "example": 163
                    },
                    "tracksUsed": {
                      "format": "int32",
                      "description": "The number of sensor tracks accepted for the OD of the object.",
                      "type": "integer",
                      "example": 163
                    },
                    "recODSpan": {
                      "format": "double",
                      "description": "The recommended OD time span calculated for the object, expressed in days.",
                      "type": "number",
                      "example": 3.5
                    },
                    "actualODSpan": {
                      "format": "double",
                      "description": "The actual time span used for the OD of the object, expressed in days.",
                      "type": "number",
                      "example": 3.5
                    },
                    "residualsAcc": {
                      "format": "double",
                      "description": "The percentage of residuals accepted in the OD of the object.",
                      "type": "number",
                      "example": 99.5
                    },
                    "solarFluxF10": {
                      "format": "double",
                      "description": "F10 (10.7 cm) solar flux value.",
                      "type": "number",
                      "example": 1.23
                    },
                    "solarFluxF10Avg": {
                      "format": "double",
                      "description": "F10 (10.7 cm) solar flux 81-day average value.",
                      "type": "number",
                      "example": 1.23
                    },
                    "solarFluxAPAvg": {
                      "format": "double",
                      "description": "Average solar flux geomagnetic index.",
                      "type": "number",
                      "example": 1.23
                    },
                    "taiUtc": {
                      "format": "double",
                      "description": "TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset in seconds.",
                      "type": "number",
                      "example": 1.23
                    },
                    "ut1Utc": {
                      "format": "double",
                      "description": "Universal Time-1 (UT1) minus UTC offset, in seconds.",
                      "type": "number",
                      "example": 1.23
                    },
                    "ut1Rate": {
                      "format": "double",
                      "description": "Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.",
                      "type": "number",
                      "example": 1.23
                    },
                    "polarMotionX": {
                      "format": "double",
                      "description": "Polar Wander Motion X (arc seconds).",
                      "type": "number",
                      "example": 1.23
                    },
                    "polarMotionY": {
                      "format": "double",
                      "description": "Polar Wander Motion Y (arc seconds).",
                      "type": "number",
                      "example": 1.23
                    },
                    "iau1980Terms": {
                      "format": "int32",
                      "description": "Number of terms used in the IAU 1980 nutation model (4, 50, or 106).",
                      "type": "integer",
                      "example": 4
                    },
                    "leapSecondTime": {
                      "format": "date-time",
                      "description": "Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap second is not known, the time of the previous leap second is used.",
                      "type": "string",
                      "example": "2021-01-01T01:01:01.123Z"
                    },
                    "integratorMode": {
                      "description": "Integrator Mode.",
                      "maxLength": 32,
                      "type": "string",
                      "example": "integratorMode"
                    },
                    "partials": {
                      "description": "Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).",
                      "maxLength": 16,
                      "type": "string",
                      "example": "ANALYTIC"
                    },
                    "stepMode": {
                      "description": "Integrator step mode (AUTO, TIME, or S).",
                      "maxLength": 16,
                      "type": "string",
                      "example": "AUTO"
                    },
                    "fixedStep": {
                      "description": "Boolean indicating use of fixed step size for this vector.",
                      "type": "boolean",
                      "example": true
                    },
                    "stepSizeSelection": {
                      "description": "Initial step size selection (AUTO or MANUAL).",
                      "maxLength": 16,
                      "type": "string",
                      "example": "AUTO"
                    },
                    "stepSize": {
                      "format": "double",
                      "description": "Initial integration step size (seconds).",
                      "type": "number",
                      "example": 1.23
                    },
                    "errorControl": {
                      "format": "double",
                      "description": "Integrator error control.",
                      "type": "number",
                      "example": 1.23
                    },
                    "sigmaPosUVW": {
                      "description": "Array containing the standard deviation of error in target object position, U, V and W direction respectively (km).",
                      "type": "array",
                      "items": {
                        "format": "double",
                        "type": "number"
                      },
                      "example": [
                        1.23,
                        4.56
                      ]
                    },
                    "sigmaVelUVW": {
                      "description": "Array containing the standard deviation of error in target object velocity, U, V and W direction respectively (km/sec).",
                      "type": "array",
                      "items": {
                        "format": "double",
                        "type": "number"
                      },
                      "example": [
                        1.23,
                        4.56
                      ]
                    },
                    "rms": {
                      "format": "double",
                      "description": "The Weighted Root Mean Squared (RMS) of the differential correction on the target object that produced this vector.  WRMS is a quality indicator of the state vector update, with a value of 1.00 being optimal.  WRMS applies to Batch Least Squares (BLS) processes.",
                      "type": "number",
                      "example": 0.991
                    },
                    "effectiveFrom": {
                      "format": "date-time",
                      "description": "Start time at which this state vector was the 'current' state vector for its satellite.",
                      "type": "string",
                      "readOnly": true,
                      "example": "2018-01-01T16:00:00.123Z"
                    },
                    "effectiveUntil": {
                      "format": "date-time",
                      "description": "End time at which this state vector was no longer the 'current' state vector for its satellite.",
                      "type": "string",
                      "readOnly": true,
                      "example": "2018-01-01T16:00:00.123Z"
                    },
                    "rawFileURI": {
                      "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
                      "maxLength": 256,
                      "type": "string",
                      "example": "rawFileURI"
                    },
                    "source": {
                      "description": "Source of the data.",
                      "maxLength": 64,
                      "minLength": 1,
                      "type": "string",
                      "example": "Bluestaq"
                    },
                    "origin": {
                      "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "THIRD_PARTY_DATASOURCE"
                    },
                    "dataMode": {
                      "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                      "maxLength": 32,
                      "minLength": 1,
                      "enum": [
                        "REAL",
                        "TEST",
                        "SIMULATED",
                        "EXERCISE"
                      ],
                      "type": "string",
                      "example": "TEST"
                    },
                    "tags": {
                      "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "TAG1",
                        "TAG2"
                      ]
                    },
                    "algorithm": {
                      "description": "Optional algorithm used to produce this record.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "SAMPLE_ALGORITHM"
                    },
                    "sourcedData": {
                      "description": "Optional array of UDL data (observation) UUIDs used to build this state vector. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "DATA1",
                        "DATA2"
                      ]
                    },
                    "sourcedDataTypes": {
                      "description": "Optional array of UDL observation data types used to build this state vector (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).",
                      "type": "array",
                      "items": {
                        "enum": [
                          "EO",
                          "RADAR",
                          "RF",
                          "DOA",
                          "ELSET",
                          "SV"
                        ],
                        "type": "string"
                      },
                      "example": [
                        "RADAR"
                      ]
                    },
                    "createdAt": {
                      "format": "date-time",
                      "description": "Time the row was created in the database, auto-populated by the system.",
                      "type": "string",
                      "readOnly": true,
                      "example": "2018-01-01T16:00:00.123Z"
                    },
                    "createdBy": {
                      "description": "Application user who created the row in the database, auto-populated by the system.",
                      "maxLength": 64,
                      "minLength": 1,
                      "type": "string",
                      "readOnly": true,
                      "example": "some.user"
                    },
                    "descriptor": {
                      "description": "Optional source-provided and searchable metadata or descriptor of the data.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "descriptor"
                    },
                    "transactionId": {
                      "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "transactionId"
                    },
                    "origNetwork": {
                      "description": "The originating source network on which this record was created, auto-populated by the system.",
                      "maxLength": 32,
                      "minLength": 1,
                      "type": "string",
                      "readOnly": true,
                      "example": "ORIG"
                    },
                    "sourceDL": {
                      "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
                      "maxLength": 64,
                      "type": "string",
                      "readOnly": true,
                      "example": "AXE"
                    }
                  }
                },
                "elset": {
                  "description": "An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.",
                  "required": [
                    "classificationMarking",
                    "epoch",
                    "source",
                    "dataMode"
                  ],
                  "type": "object",
                  "properties": {
                    "idElset": {
                      "description": "Unique identifier of the record, auto-generated by the system.",
                      "maxLength": 36,
                      "minLength": 1,
                      "type": "string",
                      "example": "ELSET-ID"
                    },
                    "classificationMarking": {
                      "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                      "maxLength": 128,
                      "minLength": 1,
                      "type": "string",
                      "example": "U"
                    },
                    "satNo": {
                      "format": "int32",
                      "description": "Satellite/catalog number of the target on-orbit object.",
                      "type": "integer",
                      "example": 12
                    },
                    "epoch": {
                      "format": "date-time",
                      "description": "Elset epoch time in ISO 8601 UTC format, with microsecond precision.",
                      "type": "string",
                      "example": "2018-01-01T16:00:00.123456Z"
                    },
                    "meanMotion": {
                      "format": "double",
                      "description": "Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.",
                      "type": "number",
                      "example": 1.1
                    },
                    "idOnOrbit": {
                      "description": "Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                      "maxLength": 36,
                      "type": "string",
                      "readOnly": true,
                      "example": "ONORBIT-ID"
                    },
                    "uct": {
                      "description": "Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
                      "type": "boolean",
                      "example": false
                    },
                    "eccentricity": {
                      "format": "double",
                      "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.",
                      "type": "number",
                      "example": 0.333
                    },
                    "inclination": {
                      "format": "double",
                      "description": "The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.",
                      "type": "number",
                      "example": 45.1
                    },
                    "raan": {
                      "format": "double",
                      "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.",
                      "type": "number",
                      "example": 1.1
                    },
                    "argOfPerigee": {
                      "format": "double",
                      "description": "The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.",
                      "type": "number",
                      "example": 1.1
                    },
                    "meanAnomaly": {
                      "format": "double",
                      "description": "Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.",
                      "type": "number",
                      "example": 179.1
                    },
                    "revNo": {
                      "format": "int32",
                      "description": "The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.",
                      "type": "integer",
                      "example": 111
                    },
                    "bStar": {
                      "format": "double",
                      "description": "The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.",
                      "type": "number",
                      "example": 1.1
                    },
                    "agom": {
                      "format": "double",
                      "description": "AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.",
                      "type": "number",
                      "example": 0.0126
                    },
                    "ballisticCoeff": {
                      "format": "double",
                      "description": "Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.",
                      "type": "number",
                      "example": 0.00815
                    },
                    "meanMotionDot": {
                      "format": "double",
                      "description": "1st derivative of the mean motion with respect to time. Units are revolutions per day squared.",
                      "type": "number",
                      "example": 1.1
                    },
                    "meanMotionDDot": {
                      "format": "double",
                      "description": "2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.",
                      "type": "number",
                      "example": 1.1
                    },
                    "semiMajorAxis": {
                      "format": "double",
                      "description": "The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.",
                      "type": "number",
                      "example": 1.1
                    },
                    "period": {
                      "format": "double",
                      "description": "Period of the orbit equal to inverse of mean motion, in minutes.",
                      "type": "number",
                      "example": 1.1
                    },
                    "apogee": {
                      "format": "double",
                      "description": "The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).",
                      "type": "number",
                      "example": 1.1
                    },
                    "perigee": {
                      "format": "double",
                      "description": "The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).",
                      "type": "number",
                      "example": 1.1
                    },
                    "origObjectId": {
                      "description": "Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "ORIGOBJECT-ID"
                    },
                    "idOrbitDetermination": {
                      "description": "Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.",
                      "maxLength": 36,
                      "type": "string",
                      "example": "026dd511-8ba5-47d3-9909-836149f87686"
                    },
                    "effectiveFrom": {
                      "format": "date-time",
                      "description": "Read-only start time at which this elset was the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.",
                      "type": "string",
                      "readOnly": true,
                      "example": "2018-01-01T16:00:00.123Z"
                    },
                    "effectiveUntil": {
                      "format": "date-time",
                      "description": "Read-only end time at which this elset was no longer the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.",
                      "type": "string",
                      "readOnly": true,
                      "example": "2018-01-01T16:00:00.123Z"
                    },
                    "line1": {
                      "description": "Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
                      "maxLength": 69,
                      "type": "string",
                      "readOnly": true,
                      "example": "Example line1"
                    },
                    "line2": {
                      "description": "Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
                      "maxLength": 69,
                      "type": "string",
                      "readOnly": true,
                      "example": "Example line2"
                    },
                    "descriptor": {
                      "description": "Optional source-provided and searchable metadata or descriptor of the data.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "Example description"
                    },
                    "createdAt": {
                      "format": "date-time",
                      "description": "Time the row was created in the database, auto-populated by the system.",
                      "type": "string",
                      "readOnly": true,
                      "example": "2018-01-01T16:00:00.123Z"
                    },
                    "createdBy": {
                      "description": "Application user who created the row in the database, auto-populated by the system.",
                      "maxLength": 64,
                      "minLength": 1,
                      "type": "string",
                      "readOnly": true,
                      "example": "some.user"
                    },
                    "rawFileURI": {
                      "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
                      "maxLength": 256,
                      "type": "string",
                      "example": "Example URI"
                    },
                    "origin": {
                      "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "THIRD_PARTY_DATASOURCE"
                    },
                    "sourceDL": {
                      "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
                      "maxLength": 64,
                      "type": "string",
                      "readOnly": true,
                      "example": "AXE"
                    },
                    "source": {
                      "description": "Source of the data.",
                      "maxLength": 64,
                      "minLength": 1,
                      "type": "string",
                      "example": "Bluestaq"
                    },
                    "dataMode": {
                      "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                      "maxLength": 32,
                      "minLength": 1,
                      "enum": [
                        "REAL",
                        "TEST",
                        "SIMULATED",
                        "EXERCISE"
                      ],
                      "type": "string",
                      "example": "TEST"
                    },
                    "tags": {
                      "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "PROVIDER_TAG1",
                        "PROVIDER_TAG2"
                      ]
                    },
                    "algorithm": {
                      "description": "Optional algorithm used to produce this record.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "Example algorithm"
                    },
                    "sourcedData": {
                      "description": "Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "OBSERVATION_UUID1",
                        "OBSERVATION_UUID2"
                      ]
                    },
                    "sourcedDataTypes": {
                      "description": "Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).",
                      "type": "array",
                      "items": {
                        "enum": [
                          "EO",
                          "RADAR",
                          "RF",
                          "DOA",
                          "ELSET",
                          "SV"
                        ],
                        "type": "string"
                      },
                      "example": [
                        "RADAR",
                        "RF"
                      ]
                    },
                    "transactionId": {
                      "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "TRANSACTION-ID"
                    },
                    "ephemType": {
                      "format": "int16",
                      "description": "The ephemeris type associated with this TLE:\n\n0:&nbsp;SGP (or SGP4 with Kozai mean motion)\n\n1:&nbsp;SGP (Kozai mean motion)\n\n2:&nbsp;SGP4 (Brouver mean motion)\n\n3:&nbsp;SDP4\n\n4:&nbsp;SGP4-XP\n\n5:&nbsp;SDP8\n\n6:&nbsp;SP (osculating mean motion)\n\n",
                      "type": "integer",
                      "example": 1
                    },
                    "origNetwork": {
                      "description": "The originating source network on which this record was created, auto-populated by the system.",
                      "maxLength": 32,
                      "minLength": 1,
                      "type": "string",
                      "readOnly": true,
                      "example": "ORIG"
                    }
                  }
                },
                "tags": {
                  "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "PROVIDER_TAG1",
                    "PROVIDER_TAG2"
                  ]
                },
                "collectResponse": {
                  "description": "CollectResponses associated to request id. Read-only details (only used on detail queries, not to be provided on create/update operations).",
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CollectResponse_Full"
                  },
                  "readOnly": true
                }
              }
            }
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "SensorPlan_Ingest": {
        "description": "A Plan is used to aggregate two or more of the same type of record to a parent entity, with the planId (UUID) being included in all of the subordinate records, enabling resolution back to the parent.",
        "required": [
          "classificationMarking",
          "type",
          "recType",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SENSORPLAN-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).",
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "example": "PLAN"
          },
          "recType": {
            "description": "The type of records that comprise this parent set (COLLECT, CONTACT).",
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "example": "COLLECT"
          },
          "startTime": {
            "format": "date-time",
            "description": "The start time of the plan or schedule, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The end time of the plan or schedule, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "name": {
            "description": "Name associated with this plan or schedule.",
            "maxLength": 24,
            "type": "string",
            "example": "EXAMPLE NAME"
          },
          "idSensor": {
            "description": "Unique identifier of the requested/schedule/planned sensor associated with this request.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "purpose": {
            "description": "The purpose/description of this plan or schedule.",
            "maxLength": 256,
            "type": "string",
            "example": "Example purpose"
          },
          "senNetwork": {
            "description": "The sensor or ground network associated with this plan or schedule.",
            "maxLength": 24,
            "type": "string",
            "example": "NETWORK"
          },
          "reqTotal": {
            "format": "int32",
            "description": "The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.",
            "type": "integer",
            "example": 2
          },
          "customer": {
            "description": "The customer for this plan or schedule.",
            "maxLength": 64,
            "type": "string",
            "example": "CUSTOMER"
          },
          "status": {
            "description": "The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).",
            "maxLength": 24,
            "type": "string",
            "example": "ACCEPTED"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "collectRequests": {
            "description": "The list of collect requests belonging to the SensorPlan. Each collect request is associated with a parent SensorPlan via the IdPlan. If provided, the list must have the same size as reqTotal.",
            "type": "array",
            "items": {
              "description": "Collect Requests support several types of individual requests, or planned/scheduled tasks on sensors and/or orbital objects. Options are provided to accomodate most common sensor contact and collection applications, including single sensor-object tasking, search operations, and TT&C support. Multiple requests originating from a plan or schedule may be associated to a sensor plan if desired.",
              "required": [
                "classificationMarking",
                "type",
                "startTime",
                "source",
                "dataMode"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Unique identifier of the record, auto-generated by the system.",
                  "maxLength": 36,
                  "minLength": 1,
                  "type": "string",
                  "example": "COLLECTREQUEST-ID"
                },
                "classificationMarking": {
                  "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "example": "U"
                },
                "idParentReq": {
                  "description": "The unique ID of the collect request record from which this request originated. This may be used for cases of sensor-to-sensor tasking, such as tip/cue operations.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "da98671b-34db-47bf-8c8d-7c668b92c800"
                },
                "msgType": {
                  "description": "The type of external message from which this request originated.",
                  "maxLength": 16,
                  "type": "string",
                  "example": "SU67"
                },
                "msgCreateDate": {
                  "format": "date-time",
                  "description": "The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.",
                  "type": "string",
                  "example": "2024-04-25T08:17:01.346Z"
                },
                "type": {
                  "description": "The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT, POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).",
                  "maxLength": 36,
                  "minLength": 1,
                  "type": "string",
                  "example": "DWELL"
                },
                "idPlan": {
                  "description": "Unique identifier of the parent plan or schedule associated with this request.  If null, this request is assumed not associated with a plan or schedule.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "REF-PLAN-ID"
                },
                "planIndex": {
                  "format": "int32",
                  "description": "Index number (integer) for records within a collection plan or schedule.",
                  "type": "integer",
                  "example": 8
                },
                "taskId": {
                  "description": "Task ID associated with this request.  A task ID may be associated with a single collect request or may be used to tie together the sub-requests of a full collect, for example a DWELL consisting of many dwell points.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "TASK-ID"
                },
                "dwellId": {
                  "description": "The dwell ID associated with this request.  A dwell ID is dwell point specific and a DWELL request consist of many dwell point requests.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "DWELL-ID"
                },
                "externalId": {
                  "description": "Optional ID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "EXTERNAL-ID"
                },
                "idSensor": {
                  "description": "Unique identifier of the requested/scheduled/planned sensor associated with this request.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "REF-SENSOR-ID"
                },
                "origSensorId": {
                  "description": "Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.",
                  "maxLength": 64,
                  "type": "string",
                  "example": "ORIGSENSOR-ID"
                },
                "obType": {
                  "description": "Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER) requested.  This field may correspond to a request of a specific sensor, or to a general non sensor specific request.",
                  "maxLength": 24,
                  "type": "string",
                  "example": "RADAR"
                },
                "priority": {
                  "description": "The priority of the collect request  (EMERGENCY, FLASH, IMMEDIATE, PRIORITY, ROUTINE).",
                  "maxLength": 24,
                  "type": "string",
                  "example": "EMERGENCY"
                },
                "taskCategory": {
                  "format": "int32",
                  "description": "The (SSN) tasking category (1-5) associated with this request.  The tasking category defines the priority of gathering and transmitting the requested observational data.  Note that category definitions are sensor type specific.",
                  "type": "integer",
                  "example": 4
                },
                "suffix": {
                  "description": "The (SSN) tasking suffix (A-Z) associated with this request.  The suffix defines the amount of observational data and the frequency of collection.  Note that suffix definitions are sensor type specific.",
                  "maxLength": 1,
                  "type": "string",
                  "example": "T"
                },
                "uctFollowUp": {
                  "description": "Boolean indicating that this collect request is UCT follow-up.",
                  "type": "boolean",
                  "example": false
                },
                "startTime": {
                  "format": "date-time",
                  "description": "The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format.",
                  "type": "string",
                  "example": "2018-01-01T16:00:00.123456Z"
                },
                "endTime": {
                  "format": "date-time",
                  "description": "The end time of the collect or contact request window, in ISO 8601 UTC format.  If no endTime or duration is provided it is assumed the request is either ongoing or that the request is for a specified number of tracks (numTracks).  If both duration and endTime are provided, the endTime is assumed to take precedence.",
                  "type": "string",
                  "example": "2018-01-01T18:00:00.123456Z"
                },
                "idOnOrbit": {
                  "description": "Unique identifier of the target on-orbit object for this request.",
                  "maxLength": 36,
                  "type": "string",
                  "readOnly": true,
                  "example": "REF-ONORBIT-ID"
                },
                "satNo": {
                  "format": "int32",
                  "description": "Satellite/catalog number of the target on-orbit object for this request.",
                  "type": "integer",
                  "example": 101
                },
                "origObjectId": {
                  "description": "Optional identifier provided by the data source to indicate the target object of this request. This may be an internal identifier and not necessarily map to a valid satellite number.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "ORIGOBJECT-ID"
                },
                "taskGroup": {
                  "description": "The tasking group to which the target object is assigned.",
                  "maxLength": 16,
                  "type": "string",
                  "example": "729"
                },
                "iron": {
                  "format": "int32",
                  "description": "Inter-Range Operations Number.  Four-digit identifier used to schedule and identify AFSCN contact support for booster, launch, and on-orbit operations.",
                  "type": "integer",
                  "example": 3
                },
                "orbitRegime": {
                  "description": "The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER).",
                  "maxLength": 12,
                  "type": "string",
                  "example": "GEO"
                },
                "targetSize": {
                  "format": "double",
                  "description": "The minimum object (diameter) size, in meters, to be reported.",
                  "type": "number",
                  "example": 1.1
                },
                "rcsMin": {
                  "format": "double",
                  "description": "The minimum Radar Cross-Section of the target, in m^2.  If only minimum RCS is provided it is assumed to be minimum reportable RCS.",
                  "type": "number",
                  "example": 1.1
                },
                "rcs": {
                  "format": "double",
                  "description": "The Radar Cross-Section of the target, in m^2.",
                  "type": "number",
                  "example": 1.1
                },
                "rcsMax": {
                  "format": "double",
                  "description": "The maximum Radar Cross-Section of the target, in m^2.",
                  "type": "number",
                  "example": 1.1
                },
                "freqMin": {
                  "format": "double",
                  "description": "The minimum frequency of interest, in MHz.  If only minimum frequency is provided it is assumed to be minimum reportable frequency.",
                  "type": "number",
                  "example": 1.1
                },
                "freq": {
                  "format": "double",
                  "description": "The estimated or expected emission frequency of the target, in MHz.",
                  "type": "number",
                  "example": 1.1
                },
                "freqMax": {
                  "format": "double",
                  "description": "The maximum frequency of interest, in MHz.",
                  "type": "number",
                  "example": 1.1
                },
                "polarization": {
                  "description": "The RF polarization (H, LHC, RHC, V).",
                  "maxLength": 4,
                  "type": "string",
                  "example": "H"
                },
                "visMagMin": {
                  "format": "double",
                  "description": "The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).  If only minimum vismag is provided it is assumed to be minimum reportable vismag.",
                  "type": "number",
                  "example": 1.1
                },
                "visMag": {
                  "format": "double",
                  "description": "The estimated or expected visual magnitude of the target, in Magnitudes (M).",
                  "type": "number",
                  "example": 1.1
                },
                "visMagMax": {
                  "format": "double",
                  "description": "The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).",
                  "type": "number",
                  "example": 1.1
                },
                "spectralModel": {
                  "description": "The spectral model used for the irradiance calculation.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "Example Model"
                },
                "reflectance": {
                  "format": "double",
                  "description": "The fraction of solar energy reflected from target.",
                  "type": "number",
                  "example": 1.1
                },
                "irradiance": {
                  "format": "double",
                  "description": "The target object irradiance value.",
                  "type": "number",
                  "example": 1.1
                },
                "numFrames": {
                  "format": "int32",
                  "description": "For optical sensors, the requested number of frames to capture at each sensor step.",
                  "type": "integer",
                  "example": 6
                },
                "frameRate": {
                  "format": "double",
                  "description": "For optical sensors, the frame rate of the camera, in Hz.",
                  "type": "number",
                  "example": 1.1
                },
                "integrationTime": {
                  "format": "double",
                  "description": "For optical sensors, the integration time per camera frame, in milliseconds.",
                  "type": "number",
                  "example": 1.1
                },
                "numTracks": {
                  "format": "int32",
                  "description": "The number of requested tracks on the target.  If numTracks is not provided it is assumed to indicate all possible observations every pass over the request duration or within the request start/end window.",
                  "type": "integer",
                  "example": 3
                },
                "numObs": {
                  "format": "int32",
                  "description": "The number of requested observations on the target.",
                  "minimum": 1,
                  "type": "integer",
                  "example": 9
                },
                "duration": {
                  "format": "int32",
                  "description": "The duration of the collect request, in seconds.  If both duration and endTime are provided, the endTime is assumed to take precedence.",
                  "type": "integer",
                  "example": 11
                },
                "srchPattern": {
                  "description": "The search pattern to be executed for this request (e.g. PICKET-FENCE, SCAN, etc.).",
                  "maxLength": 24,
                  "type": "string",
                  "example": "SCAN"
                },
                "scenario": {
                  "description": "Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.",
                  "maxLength": 24,
                  "type": "string",
                  "example": "Example direction"
                },
                "idElset": {
                  "description": "ID of the UDL Elset of the object associated with this request.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "REF-ELSET-ID"
                },
                "idManifold": {
                  "description": "ID of the UDL Manifold Elset of the object associated with this request.  A Manifold Elset provides theoretical Keplerian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "REF-MANIFOLD-ID"
                },
                "idStateVector": {
                  "description": "ID of the UDL State Vector of the object or central vector associated with this request.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "STATEVECTOR-ID"
                },
                "esId": {
                  "description": "ID of the UDL Ephemeris Set of the object associated with this request.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "ES-ID"
                },
                "epoch": {
                  "format": "date-time",
                  "description": "Epoch time, in ISO 8601 UTC format, of the orbital elements.",
                  "type": "string",
                  "example": "2018-01-01T16:00:00.123456Z"
                },
                "semiMajorAxis": {
                  "format": "double",
                  "description": "The average of the periapsis and apoapsis distances, in kilometers. For circular orbits, the semimajor axis is the distance between the centers of the bodies.",
                  "type": "number",
                  "example": 1.1
                },
                "eccentricity": {
                  "format": "double",
                  "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle.",
                  "type": "number",
                  "example": 1.1
                },
                "inclination": {
                  "format": "double",
                  "description": "The angle, in degrees, between the equator and the orbit plane when looking from the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90 representing posigrade orbits and 90-180 representing retrograde orbits.",
                  "type": "number",
                  "example": 1.1
                },
                "raan": {
                  "format": "double",
                  "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node.",
                  "type": "number",
                  "example": 1.1
                },
                "argOfPerigee": {
                  "format": "double",
                  "description": "The argument of perigee is the angle, in degrees, formed between the perigee and the ascending node.",
                  "type": "number",
                  "example": 1.1
                },
                "trueAnomoly": {
                  "format": "double",
                  "description": "The true anomaly defines the angular position, in degrees, of the object on it's orbital path as measured from the orbit focal point at epoch.  The true anomaly is referenced from perigee.",
                  "type": "number",
                  "example": 1.1
                },
                "ra": {
                  "format": "double",
                  "description": "The expected or directed right ascension angle, in degrees, for search or target acquisition.",
                  "type": "number",
                  "example": 1.1
                },
                "dec": {
                  "format": "double",
                  "description": "The expected or directed declination angle, in degrees, for search or target acquisition.",
                  "type": "number",
                  "example": 1.1
                },
                "az": {
                  "format": "double",
                  "description": "The expected or directed azimuth angle, in degrees, for search or target acquisition.",
                  "type": "number",
                  "example": 1.1
                },
                "el": {
                  "format": "double",
                  "description": "The expected or directed elevation angle, in degrees, for search or target acquisition.",
                  "type": "number",
                  "example": 1.1
                },
                "range": {
                  "format": "double",
                  "description": "The expected acquisition range or defined center range, in km.",
                  "type": "number",
                  "example": 1.1
                },
                "extentAz": {
                  "format": "double",
                  "description": "The extent of the azimuth angle, in degrees, from center azimuth to define a spatial volume.",
                  "type": "number",
                  "example": 1.1
                },
                "extentEl": {
                  "format": "double",
                  "description": "The extent of the elevation angle, in degrees, from center elevation to define a spatial volume.",
                  "type": "number",
                  "example": 1.1
                },
                "extentRange": {
                  "format": "double",
                  "description": "The extent of the range, in km, from center range to define a spatial volume.",
                  "type": "number",
                  "example": 1.1
                },
                "lat": {
                  "format": "double",
                  "description": "WGS-84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).  If an accompanying stopLat is provided, then the lat value can be assumed to be the starting latitude of a volume definition.",
                  "maximum": 90,
                  "minimum": -90,
                  "type": "number",
                  "example": 1.1
                },
                "lon": {
                  "format": "double",
                  "description": "WGS-84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).  If an accompanying stopLon is provided, then lon value can be assumed to be the starting longitude of a volume definition.",
                  "maximum": 180,
                  "minimum": -180,
                  "type": "number",
                  "example": 1.1
                },
                "alt": {
                  "format": "double",
                  "description": "Height above WGS-84 ellipsoid (HAE), in kilometers.  If an accompanying stopAlt is provided, then alt value can be assumed to be the starting altitude of a volume definition.",
                  "type": "number",
                  "example": 1.1
                },
                "stopLat": {
                  "format": "double",
                  "description": "The stopping WGS-84 latitude of a volume definition, in degrees.  -90 to 90 degrees (negative values south of equator).  The stopLat value is only meaningful if a (starting) lat value is provided.",
                  "maximum": 90,
                  "minimum": -90,
                  "type": "number",
                  "example": 1.1
                },
                "stopLon": {
                  "format": "double",
                  "description": "The stopping WGS-84 longitude of a volume definition, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).  The stopLon value is only meaningful if a (starting) lon value is provided.",
                  "maximum": 180,
                  "minimum": -180,
                  "type": "number",
                  "example": 1.1
                },
                "stopAlt": {
                  "format": "double",
                  "description": "The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in kilometers.  The stopAlt value is only meaningful if a (starting) alt value is provided.",
                  "type": "number",
                  "example": 1.1
                },
                "srchInc": {
                  "format": "double",
                  "description": "The maximum inclination, in degrees, to be used in search operations.",
                  "type": "number",
                  "example": 1.1
                },
                "xAngle": {
                  "format": "double",
                  "description": "The angular distance, in degrees, in the sensor-x direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.",
                  "type": "number",
                  "example": 1.1
                },
                "yAngle": {
                  "format": "double",
                  "description": "The angular distance, in degrees, in the sensor-y direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.",
                  "type": "number",
                  "example": 1.1
                },
                "orientAngle": {
                  "format": "double",
                  "description": "The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.  A positive value indicates clockwise rotation about the sensor boresight vector.",
                  "type": "number",
                  "example": 1.1
                },
                "customer": {
                  "description": "The customer for this request.",
                  "maxLength": 64,
                  "type": "string",
                  "example": "Bluestaq"
                },
                "transactionId": {
                  "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
                  "maxLength": 64,
                  "type": "string",
                  "example": "TRANSACTION-ID"
                },
                "notes": {
                  "description": "Notes or comments associated with this request.",
                  "maxLength": 512,
                  "type": "string",
                  "example": "Example notes"
                },
                "createdAt": {
                  "format": "date-time",
                  "description": "Time the row was created in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "createdBy": {
                  "description": "Application user who created the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "source": {
                  "description": "Source of the data.",
                  "maxLength": 36,
                  "minLength": 1,
                  "type": "string",
                  "example": "Bluestaq"
                },
                "origin": {
                  "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                  "maxLength": 64,
                  "type": "string",
                  "example": "Example source"
                },
                "origNetwork": {
                  "description": "The originating source network on which this record was created, auto-populated by the system.",
                  "maxLength": 32,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "ORIG"
                },
                "dataMode": {
                  "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                  "maxLength": 32,
                  "minLength": 1,
                  "enum": [
                    "REAL",
                    "TEST",
                    "SIMULATED",
                    "EXERCISE"
                  ],
                  "type": "string",
                  "example": "TEST"
                },
                "stateVector": {
                  "description": "This service provides operations for querying and manipulation of state vectors for OnOrbit objects. State vectors are cartesian vectors of position (r) and velocity (v) that, together with their time (epoch) (t), uniquely determine the trajectory of the orbiting body in space. J2000 is the preferred coordinate frame for all state vector positions/velocities in UDL, but in some cases data may be in another frame depending on the provider and/or datatype. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
                  "required": [
                    "classificationMarking",
                    "epoch",
                    "source",
                    "dataMode"
                  ],
                  "type": "object",
                  "properties": {
                    "idStateVector": {
                      "description": "Unique identifier of the record, auto-generated by the system.",
                      "maxLength": 36,
                      "minLength": 1,
                      "type": "string",
                      "example": "STATEVECTOR-ID"
                    },
                    "classificationMarking": {
                      "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                      "maxLength": 128,
                      "minLength": 1,
                      "type": "string",
                      "example": "U"
                    },
                    "epoch": {
                      "format": "date-time",
                      "description": "Time of validity for state vector in ISO 8601 UTC datetime format, with microsecond precision.",
                      "type": "string",
                      "example": "2018-01-01T16:00:00.123456Z"
                    },
                    "pedigree": {
                      "description": "The pedigree of state vector, or methods used for its generation to include state update/orbit determination, propagation from another state, or a state from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION, CONJUNCTION, FLIGHT_PLAN).",
                      "maxLength": 32,
                      "type": "string",
                      "example": "CONJUNCTION"
                    },
                    "idOnOrbit": {
                      "description": "Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                      "maxLength": 36,
                      "type": "string",
                      "readOnly": true,
                      "example": "ONORBIT-ID"
                    },
                    "satNo": {
                      "format": "int32",
                      "description": "Satellite/Catalog number of the target OnOrbit object.",
                      "type": "integer",
                      "example": 12
                    },
                    "origObjectId": {
                      "description": "Optional identifier provided by state vector source to indicate the target onorbit object of this state vector. This may be an internal identifier and not necessarily map to a valid satellite number.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "ORIGOBJECT-ID"
                    },
                    "idOrbitDetermination": {
                      "description": "Unique identifier of the OD solution record that produced this state vector. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queries as /udl/orbitdetermination/abc.",
                      "maxLength": 36,
                      "type": "string",
                      "example": "026dd511-8ba5-47d3-9909-836149f87686"
                    },
                    "uct": {
                      "description": "Boolean indicating this state vector was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
                      "type": "boolean",
                      "example": true
                    },
                    "xpos": {
                      "format": "double",
                      "description": "Cartesian X position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": -1118.577381
                    },
                    "ypos": {
                      "format": "double",
                      "description": "Cartesian Y position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": 3026.231084
                    },
                    "zpos": {
                      "format": "double",
                      "description": "Cartesian Z position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": 6167.831808
                    },
                    "xvel": {
                      "format": "double",
                      "description": "Cartesian X velocity of target, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": -4.25242784
                    },
                    "yvel": {
                      "format": "double",
                      "description": "Cartesian Y velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": 5.291107434
                    },
                    "zvel": {
                      "format": "double",
                      "description": "Cartesian Z velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": -3.356493869
                    },
                    "xaccel": {
                      "format": "double",
                      "description": "Cartesian X acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": -2.12621392
                    },
                    "yaccel": {
                      "format": "double",
                      "description": "Cartesian Y acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": 2.645553717
                    },
                    "zaccel": {
                      "format": "double",
                      "description": "Cartesian Z acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
                      "type": "number",
                      "example": -1.06310696
                    },
                    "referenceFrame": {
                      "description": "The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.",
                      "maxLength": 24,
                      "enum": [
                        "J2000",
                        "EFG/TDR",
                        "ECR/ECEF",
                        "TEME",
                        "ITRF",
                        "GCRF"
                      ],
                      "type": "string",
                      "example": "J2000"
                    },
                    "cov": {
                      "description": "Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.  If the covReferenceFrame is null it is assumed to be J2000.\nThe array values (1-21) represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;\n\nx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3\n\nz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6\n\nx'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10\n\ny'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15\n\nz'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;\n\nThe cov array should contain only the lower left triangle values from top left down to bottom right, in order.\n\nIf additional covariance terms are included for DRAG, SRP, and/or THRUST, the matrix can be extended with the following order of elements:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR\n\nDRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;\n\nSRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;\n\nTHR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;\n\n\n",
                      "type": "array",
                      "items": {
                        "format": "double",
                        "type": "number"
                      },
                      "example": [
                        1.1,
                        2.4,
                        3.8,
                        4.2,
                        5.5,
                        6
                      ]
                    },
                    "covReferenceFrame": {
                      "description": "The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.",
                      "maxLength": 24,
                      "enum": [
                        "J2000",
                        "UVW"
                      ],
                      "type": "string",
                      "example": "J2000"
                    },
                    "covMethod": {
                      "description": "The method used to generate the covariance during the orbit determination (OD) that produced the state vector, or whether an arbitrary, non-calculated default value was used (CALCULATED, DEFAULT).",
                      "maxLength": 24,
                      "type": "string",
                      "example": "CALCULATED"
                    },
                    "eqCov": {
                      "description": "The covariance matrix values represent the lower triangular half of the covariance matrix in terms of equinoctial elements.&nbsp; The size of the covariance matrix is dynamic.&nbsp; The values are outputted in order across each row, i.e.:\n\n1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5\n\n6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n\n\n\nThe ordering of values is as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp; Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp; B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...\n\nAf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1\n\nAg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3\n\nL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6\n\nN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10\n\nChi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp; 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15\n\nPsi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp; 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21\n\nB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp; 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28\n\nBDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp; 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36\n\nAGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp; 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45\n\nT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp; 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp; 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55\n\nC1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp; 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp; 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66\n\nC2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp; 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp; 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78\n\n:\n\n:\n\nwhere C1, C2, etc, are the \"consider parameters\" that may be added to the covariance matrix.&nbsp; The covariance matrix will be as large as the last element/model parameter needed.&nbsp; In other words, if the DC solved for all 6 elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size will be set to 0x0, and no data will follow.&nbsp; The cov field should contain only the lower left triangle values from top left down to bottom right, in order.",
                      "type": "array",
                      "items": {
                        "format": "double",
                        "type": "number"
                      },
                      "example": [
                        1.1,
                        2.2
                      ]
                    },
                    "xposAlt1": {
                      "format": "double",
                      "description": "Cartesian X position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -1145.688502
                    },
                    "yposAlt1": {
                      "format": "double",
                      "description": "Cartesian Y position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": 3020.729572
                    },
                    "zposAlt1": {
                      "format": "double",
                      "description": "Cartesian Z position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": 6165.55187
                    },
                    "xvelAlt1": {
                      "format": "double",
                      "description": "Cartesian X velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -4.270832252
                    },
                    "yvelAlt1": {
                      "format": "double",
                      "description": "Cartesian Y velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": 5.27074276
                    },
                    "zvelAlt1": {
                      "format": "double",
                      "description": "Cartesian Z velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -3.365155181
                    },
                    "alt1ReferenceFrame": {
                      "description": "The reference frame of the alternate1 (Alt1) cartesian orbital state.",
                      "maxLength": 24,
                      "type": "string",
                      "example": "TEME"
                    },
                    "xposAlt2": {
                      "format": "double",
                      "description": "Cartesian X position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -1456.915926
                    },
                    "yposAlt2": {
                      "format": "double",
                      "description": "Cartesian Y position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -2883.540406
                    },
                    "zposAlt2": {
                      "format": "double",
                      "description": "Cartesian Z position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": 6165.55187
                    },
                    "xvelAlt2": {
                      "format": "double",
                      "description": "Cartesian X velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -1.219814294
                    },
                    "yvelAlt2": {
                      "format": "double",
                      "description": "Cartesian Y velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -6.602080212
                    },
                    "zvelAlt2": {
                      "format": "double",
                      "description": "Cartesian Z velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
                      "type": "number",
                      "example": -3.365155181
                    },
                    "alt2ReferenceFrame": {
                      "description": "The reference frame of the alternate2 (Alt2) cartesian orbital state.",
                      "maxLength": 24,
                      "type": "string",
                      "example": "EFG/TDR"
                    },
                    "posUnc": {
                      "format": "double",
                      "description": "One sigma position uncertainty, in kilometers.",
                      "type": "number",
                      "example": 0.333399744452
                    },
                    "velUnc": {
                      "format": "double",
                      "description": "One sigma velocity uncertainty, in kilometers/second.",
                      "type": "number",
                      "example": 0.000004
                    },
                    "mass": {
                      "format": "double",
                      "description": "The mass of the object, in kilograms.",
                      "type": "number",
                      "example": 164.5
                    },
                    "area": {
                      "format": "double",
                      "description": "The actual area of the object at it's largest cross-section, expressed in meters^2.",
                      "type": "number",
                      "example": 5.065
                    },
                    "solarRadPressCoeff": {
                      "format": "double",
                      "description": "Area-to-mass ratio coefficient for solar radiation pressure.",
                      "type": "number",
                      "example": 0.0244394
                    },
                    "dragCoeff": {
                      "format": "double",
                      "description": "Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).",
                      "type": "number",
                      "example": 0.0224391269775
                    },
                    "dragArea": {
                      "format": "double",
                      "description": "The effective area of the object exposed to atmospheric drag, expressed in meters^2.",
                      "type": "number",
                      "example": 4.739
                    },
                    "revNo": {
                      "format": "int32",
                      "description": "Epoch revolution number.",
                      "type": "integer",
                      "example": 7205
                    },
                    "geopotentialModel": {
                      "description": "Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96 24Z,24T.",
                      "maxLength": 32,
                      "type": "string",
                      "example": "EGM-96"
                    },
                    "dragModel": {
                      "description": "The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).",
                      "maxLength": 32,
                      "type": "string",
                      "example": "JAC70"
                    },
                    "lunarSolar": {
                      "description": "Boolean indicating use of lunar/solar perturbations for this vector.",
                      "type": "boolean",
                      "example": true
                    },
                    "solarRadPress": {
                      "description": "Boolean indicating use of solar radiation pressure perturbations for this vector.",
                      "type": "boolean",
                      "example": true
                    },
                    "srpArea": {
                      "format": "double",
                      "description": "The effective area of the object exposed to solar radiation pressure, expressed in meters^2.",
                      "type": "number",
                      "example": 4.311
                    },
                    "solidEarthTides": {
                      "description": "Boolean indicating use of solid earth tide perturbations for this vector.",
                      "type": "boolean",
                      "example": true
                    },
                    "inTrackThrust": {
                      "description": "Boolean indicating use of in-track thrust perturbations for this vector.",
                      "type": "boolean",
                      "example": true
                    },
                    "bDot": {
                      "format": "double",
                      "description": "First derivative of drag/ballistic coefficient (m2/kg-s).",
                      "type": "number",
                      "example": 1.23
                    },
                    "edr": {
                      "format": "double",
                      "description": "Model parameter value for energy dissipation rate (EDR) (w/kg).",
                      "type": "number",
                      "example": 1.23
                    },
                    "thrustAccel": {
                      "format": "double",
                      "description": "Model parameter value for thrust acceleration (m/s2).",
                      "type": "number",
                      "example": 1.23
                    },
                    "cmOffset": {
                      "format": "double",
                      "description": "Model parameter value for center of mass offset (m).",
                      "type": "number",
                      "example": 1.23
                    },
                    "lastObStart": {
                      "format": "date-time",
                      "description": "The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.",
                      "type": "string",
                      "example": "2022-11-09T11:20:21.247192Z"
                    },
                    "lastObEnd": {
                      "format": "date-time",
                      "description": "The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.",
                      "type": "string",
                      "example": "2022-11-09T11:20:21.247192Z"
                    },
                    "obsAvailable": {
                      "format": "int32",
                      "description": "The number of observations available for the OD of the object.",
                      "type": "integer",
                      "example": 376
                    },
                    "obsUsed": {
                      "format": "int32",
                      "description": "The number of observations accepted for the OD of the object.",
                      "type": "integer",
                      "example": 374
                    },
                    "tracksAvail": {
                      "format": "int32",
                      "description": "The number of sensor tracks available for the OD of the object.",
                      "type": "integer",
                      "example": 163
                    },
                    "tracksUsed": {
                      "format": "int32",
                      "description": "The number of sensor tracks accepted for the OD of the object.",
                      "type": "integer",
                      "example": 163
                    },
                    "recODSpan": {
                      "format": "double",
                      "description": "The recommended OD time span calculated for the object, expressed in days.",
                      "type": "number",
                      "example": 3.5
                    },
                    "actualODSpan": {
                      "format": "double",
                      "description": "The actual time span used for the OD of the object, expressed in days.",
                      "type": "number",
                      "example": 3.5
                    },
                    "residualsAcc": {
                      "format": "double",
                      "description": "The percentage of residuals accepted in the OD of the object.",
                      "type": "number",
                      "example": 99.5
                    },
                    "solarFluxF10": {
                      "format": "double",
                      "description": "F10 (10.7 cm) solar flux value.",
                      "type": "number",
                      "example": 1.23
                    },
                    "solarFluxF10Avg": {
                      "format": "double",
                      "description": "F10 (10.7 cm) solar flux 81-day average value.",
                      "type": "number",
                      "example": 1.23
                    },
                    "solarFluxAPAvg": {
                      "format": "double",
                      "description": "Average solar flux geomagnetic index.",
                      "type": "number",
                      "example": 1.23
                    },
                    "taiUtc": {
                      "format": "double",
                      "description": "TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset in seconds.",
                      "type": "number",
                      "example": 1.23
                    },
                    "ut1Utc": {
                      "format": "double",
                      "description": "Universal Time-1 (UT1) minus UTC offset, in seconds.",
                      "type": "number",
                      "example": 1.23
                    },
                    "ut1Rate": {
                      "format": "double",
                      "description": "Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.",
                      "type": "number",
                      "example": 1.23
                    },
                    "polarMotionX": {
                      "format": "double",
                      "description": "Polar Wander Motion X (arc seconds).",
                      "type": "number",
                      "example": 1.23
                    },
                    "polarMotionY": {
                      "format": "double",
                      "description": "Polar Wander Motion Y (arc seconds).",
                      "type": "number",
                      "example": 1.23
                    },
                    "iau1980Terms": {
                      "format": "int32",
                      "description": "Number of terms used in the IAU 1980 nutation model (4, 50, or 106).",
                      "type": "integer",
                      "example": 4
                    },
                    "leapSecondTime": {
                      "format": "date-time",
                      "description": "Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap second is not known, the time of the previous leap second is used.",
                      "type": "string",
                      "example": "2021-01-01T01:01:01.123Z"
                    },
                    "integratorMode": {
                      "description": "Integrator Mode.",
                      "maxLength": 32,
                      "type": "string",
                      "example": "integratorMode"
                    },
                    "partials": {
                      "description": "Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).",
                      "maxLength": 16,
                      "type": "string",
                      "example": "ANALYTIC"
                    },
                    "stepMode": {
                      "description": "Integrator step mode (AUTO, TIME, or S).",
                      "maxLength": 16,
                      "type": "string",
                      "example": "AUTO"
                    },
                    "fixedStep": {
                      "description": "Boolean indicating use of fixed step size for this vector.",
                      "type": "boolean",
                      "example": true
                    },
                    "stepSizeSelection": {
                      "description": "Initial step size selection (AUTO or MANUAL).",
                      "maxLength": 16,
                      "type": "string",
                      "example": "AUTO"
                    },
                    "stepSize": {
                      "format": "double",
                      "description": "Initial integration step size (seconds).",
                      "type": "number",
                      "example": 1.23
                    },
                    "errorControl": {
                      "format": "double",
                      "description": "Integrator error control.",
                      "type": "number",
                      "example": 1.23
                    },
                    "sigmaPosUVW": {
                      "description": "Array containing the standard deviation of error in target object position, U, V and W direction respectively (km).",
                      "type": "array",
                      "items": {
                        "format": "double",
                        "type": "number"
                      },
                      "example": [
                        1.23,
                        4.56
                      ]
                    },
                    "sigmaVelUVW": {
                      "description": "Array containing the standard deviation of error in target object velocity, U, V and W direction respectively (km/sec).",
                      "type": "array",
                      "items": {
                        "format": "double",
                        "type": "number"
                      },
                      "example": [
                        1.23,
                        4.56
                      ]
                    },
                    "rms": {
                      "format": "double",
                      "description": "The Weighted Root Mean Squared (RMS) of the differential correction on the target object that produced this vector.  WRMS is a quality indicator of the state vector update, with a value of 1.00 being optimal.  WRMS applies to Batch Least Squares (BLS) processes.",
                      "type": "number",
                      "example": 0.991
                    },
                    "rawFileURI": {
                      "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
                      "maxLength": 256,
                      "type": "string",
                      "example": "rawFileURI"
                    },
                    "source": {
                      "description": "Source of the data.",
                      "maxLength": 64,
                      "minLength": 1,
                      "type": "string",
                      "example": "Bluestaq"
                    },
                    "origin": {
                      "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "THIRD_PARTY_DATASOURCE"
                    },
                    "dataMode": {
                      "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                      "maxLength": 32,
                      "minLength": 1,
                      "enum": [
                        "REAL",
                        "TEST",
                        "SIMULATED",
                        "EXERCISE"
                      ],
                      "type": "string",
                      "example": "TEST"
                    },
                    "tags": {
                      "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "TAG1",
                        "TAG2"
                      ]
                    },
                    "algorithm": {
                      "description": "Optional algorithm used to produce this record.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "SAMPLE_ALGORITHM"
                    },
                    "sourcedData": {
                      "description": "Optional array of UDL data (observation) UUIDs used to build this state vector. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "DATA1",
                        "DATA2"
                      ]
                    },
                    "sourcedDataTypes": {
                      "description": "Optional array of UDL observation data types used to build this state vector (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).",
                      "type": "array",
                      "items": {
                        "enum": [
                          "EO",
                          "RADAR",
                          "RF",
                          "DOA",
                          "ELSET",
                          "SV"
                        ],
                        "type": "string"
                      },
                      "example": [
                        "RADAR"
                      ]
                    },
                    "createdAt": {
                      "format": "date-time",
                      "description": "Time the row was created in the database, auto-populated by the system.",
                      "type": "string",
                      "readOnly": true,
                      "example": "2018-01-01T16:00:00.123Z"
                    },
                    "createdBy": {
                      "description": "Application user who created the row in the database, auto-populated by the system.",
                      "maxLength": 64,
                      "minLength": 1,
                      "type": "string",
                      "readOnly": true,
                      "example": "some.user"
                    },
                    "descriptor": {
                      "description": "Optional source-provided and searchable metadata or descriptor of the data.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "descriptor"
                    },
                    "transactionId": {
                      "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "transactionId"
                    },
                    "origNetwork": {
                      "description": "The originating source network on which this record was created, auto-populated by the system.",
                      "maxLength": 32,
                      "minLength": 1,
                      "type": "string",
                      "readOnly": true,
                      "example": "ORIG"
                    },
                    "sourceDL": {
                      "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
                      "maxLength": 64,
                      "type": "string",
                      "readOnly": true,
                      "example": "AXE"
                    }
                  }
                },
                "elset": {
                  "description": "An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.",
                  "required": [
                    "classificationMarking",
                    "epoch",
                    "source",
                    "dataMode"
                  ],
                  "type": "object",
                  "properties": {
                    "idElset": {
                      "description": "Unique identifier of the record, auto-generated by the system.",
                      "maxLength": 36,
                      "minLength": 1,
                      "type": "string",
                      "example": "ELSET-ID"
                    },
                    "classificationMarking": {
                      "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                      "maxLength": 128,
                      "minLength": 1,
                      "type": "string",
                      "example": "U"
                    },
                    "satNo": {
                      "format": "int32",
                      "description": "Satellite/catalog number of the target on-orbit object.",
                      "type": "integer",
                      "example": 12
                    },
                    "epoch": {
                      "format": "date-time",
                      "description": "Elset epoch time in ISO 8601 UTC format, with microsecond precision.",
                      "type": "string",
                      "example": "2018-01-01T16:00:00.123456Z"
                    },
                    "meanMotion": {
                      "format": "double",
                      "description": "Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.",
                      "type": "number",
                      "example": 1.1
                    },
                    "idOnOrbit": {
                      "description": "Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                      "maxLength": 36,
                      "type": "string",
                      "readOnly": true,
                      "example": "ONORBIT-ID"
                    },
                    "uct": {
                      "description": "Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
                      "type": "boolean",
                      "example": false
                    },
                    "eccentricity": {
                      "format": "double",
                      "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.",
                      "type": "number",
                      "example": 0.333
                    },
                    "inclination": {
                      "format": "double",
                      "description": "The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.",
                      "type": "number",
                      "example": 45.1
                    },
                    "raan": {
                      "format": "double",
                      "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.",
                      "type": "number",
                      "example": 1.1
                    },
                    "argOfPerigee": {
                      "format": "double",
                      "description": "The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.",
                      "type": "number",
                      "example": 1.1
                    },
                    "meanAnomaly": {
                      "format": "double",
                      "description": "Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.",
                      "type": "number",
                      "example": 179.1
                    },
                    "revNo": {
                      "format": "int32",
                      "description": "The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.",
                      "type": "integer",
                      "example": 111
                    },
                    "bStar": {
                      "format": "double",
                      "description": "The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.",
                      "type": "number",
                      "example": 1.1
                    },
                    "agom": {
                      "format": "double",
                      "description": "AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.",
                      "type": "number",
                      "example": 0.0126
                    },
                    "ballisticCoeff": {
                      "format": "double",
                      "description": "Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.",
                      "type": "number",
                      "example": 0.00815
                    },
                    "meanMotionDot": {
                      "format": "double",
                      "description": "1st derivative of the mean motion with respect to time. Units are revolutions per day squared.",
                      "type": "number",
                      "example": 1.1
                    },
                    "meanMotionDDot": {
                      "format": "double",
                      "description": "2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.",
                      "type": "number",
                      "example": 1.1
                    },
                    "semiMajorAxis": {
                      "format": "double",
                      "description": "The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.",
                      "type": "number",
                      "example": 1.1
                    },
                    "period": {
                      "format": "double",
                      "description": "Period of the orbit equal to inverse of mean motion, in minutes.",
                      "type": "number",
                      "example": 1.1
                    },
                    "apogee": {
                      "format": "double",
                      "description": "The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).",
                      "type": "number",
                      "example": 1.1
                    },
                    "perigee": {
                      "format": "double",
                      "description": "The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).",
                      "type": "number",
                      "example": 1.1
                    },
                    "origObjectId": {
                      "description": "Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "ORIGOBJECT-ID"
                    },
                    "idOrbitDetermination": {
                      "description": "Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.",
                      "maxLength": 36,
                      "type": "string",
                      "example": "026dd511-8ba5-47d3-9909-836149f87686"
                    },
                    "line1": {
                      "description": "Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
                      "maxLength": 69,
                      "type": "string",
                      "readOnly": true,
                      "example": "Example line1"
                    },
                    "line2": {
                      "description": "Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
                      "maxLength": 69,
                      "type": "string",
                      "readOnly": true,
                      "example": "Example line2"
                    },
                    "descriptor": {
                      "description": "Optional source-provided and searchable metadata or descriptor of the data.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "Example description"
                    },
                    "createdAt": {
                      "format": "date-time",
                      "description": "Time the row was created in the database, auto-populated by the system.",
                      "type": "string",
                      "readOnly": true,
                      "example": "2018-01-01T16:00:00.123Z"
                    },
                    "createdBy": {
                      "description": "Application user who created the row in the database, auto-populated by the system.",
                      "maxLength": 64,
                      "minLength": 1,
                      "type": "string",
                      "readOnly": true,
                      "example": "some.user"
                    },
                    "rawFileURI": {
                      "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
                      "maxLength": 256,
                      "type": "string",
                      "example": "Example URI"
                    },
                    "origin": {
                      "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "THIRD_PARTY_DATASOURCE"
                    },
                    "sourceDL": {
                      "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
                      "maxLength": 64,
                      "type": "string",
                      "readOnly": true,
                      "example": "AXE"
                    },
                    "source": {
                      "description": "Source of the data.",
                      "maxLength": 64,
                      "minLength": 1,
                      "type": "string",
                      "example": "Bluestaq"
                    },
                    "dataMode": {
                      "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                      "maxLength": 32,
                      "minLength": 1,
                      "enum": [
                        "REAL",
                        "TEST",
                        "SIMULATED",
                        "EXERCISE"
                      ],
                      "type": "string",
                      "example": "TEST"
                    },
                    "tags": {
                      "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "PROVIDER_TAG1",
                        "PROVIDER_TAG2"
                      ]
                    },
                    "algorithm": {
                      "description": "Optional algorithm used to produce this record.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "Example algorithm"
                    },
                    "sourcedData": {
                      "description": "Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "OBSERVATION_UUID1",
                        "OBSERVATION_UUID2"
                      ]
                    },
                    "sourcedDataTypes": {
                      "description": "Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).",
                      "type": "array",
                      "items": {
                        "enum": [
                          "EO",
                          "RADAR",
                          "RF",
                          "DOA",
                          "ELSET",
                          "SV"
                        ],
                        "type": "string"
                      },
                      "example": [
                        "RADAR",
                        "RF"
                      ]
                    },
                    "transactionId": {
                      "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
                      "maxLength": 64,
                      "type": "string",
                      "example": "TRANSACTION-ID"
                    },
                    "ephemType": {
                      "format": "int16",
                      "description": "The ephemeris type associated with this TLE:\n\n0:&nbsp;SGP (or SGP4 with Kozai mean motion)\n\n1:&nbsp;SGP (Kozai mean motion)\n\n2:&nbsp;SGP4 (Brouver mean motion)\n\n3:&nbsp;SDP4\n\n4:&nbsp;SGP4-XP\n\n5:&nbsp;SDP8\n\n6:&nbsp;SP (osculating mean motion)\n\n",
                      "type": "integer",
                      "example": 1
                    },
                    "origNetwork": {
                      "description": "The originating source network on which this record was created, auto-populated by the system.",
                      "maxLength": 32,
                      "minLength": 1,
                      "type": "string",
                      "readOnly": true,
                      "example": "ORIG"
                    }
                  }
                },
                "tags": {
                  "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "PROVIDER_TAG1",
                    "PROVIDER_TAG2"
                  ]
                }
              }
            }
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "SolarArray_Full": {
        "description": "Model representation of information on on-orbit/spacecraft solar arrays. A spacecraft may have multiple solar arrays and each solar array can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "name": {
            "description": "Solar Array name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Solar1"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "solarArrayDetails": {
            "description": "Read-only collection of additional SolarArrayDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/solararraydetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolarArrayDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "SolarArrayDetails_Full": {
        "description": "Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.",
        "required": [
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAYDETAILS-ID"
          },
          "idSolarArray": {
            "description": "Unique identifier of the parent SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of solar array (e.g. U Shaped).",
            "maxLength": 64,
            "type": "string",
            "example": "U Shaped"
          },
          "technology": {
            "description": "Solar array technology (e.g. Ga-As).",
            "maxLength": 64,
            "type": "string",
            "example": "Ga-As"
          },
          "junctionTechnology": {
            "description": "Solar array junction technology (e.g. Triple).",
            "maxLength": 64,
            "type": "string",
            "example": "Triple"
          },
          "manufacturerOrgId": {
            "description": "Unique identifier of the organization that manufactures the solar array.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "span": {
            "format": "double",
            "description": "Solar Array span in meters.",
            "type": "number",
            "example": 123.4
          },
          "area": {
            "format": "double",
            "description": "Solar Array area in square meters.",
            "type": "number",
            "example": 123.4
          },
          "description": {
            "description": "Solar array description/notes.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "Status_Full": {
        "description": "Status for a particular Entity. An entity may have multiple status records collected by various sources.",
        "required": [
          "classificationMarking",
          "idEntity",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "STATUS-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "derivedFrom": {
            "description": "The sources or SCG references from which the classification of this data is derived.",
            "maxLength": 128,
            "type": "string",
            "example": "SOME_SOURCE"
          },
          "declassificationDate": {
            "format": "date-time",
            "description": "The declassification date of this data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:02.123Z"
          },
          "declassificationString": {
            "description": "Declassification string of this data.",
            "maxLength": 256,
            "type": "string",
            "example": "U"
          },
          "idEntity": {
            "description": "Unique identifier of the parent entity.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENTITY-ID"
          },
          "state": {
            "description": "Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).",
            "maxLength": 16,
            "enum": [
              "UNKNOWN",
              "DEAD",
              "ACTIVE",
              "RF ACTIVE",
              "STANDBY"
            ],
            "type": "string",
            "example": "ACTIVE"
          },
          "sysCap": {
            "description": "System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).",
            "maxLength": 3,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "opsCap": {
            "description": "Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).",
            "maxLength": 3,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "subStatusCollection": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubStatus_Full"
            }
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "notes": {
            "description": "Comments describing the status creation and or updates to an entity.",
            "type": "string",
            "example": "Example Notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          }
        }
      },
      "SubStatus_Full": {
        "description": "Additional sub-system or capability status for the parent entity.",
        "required": [
          "type",
          "classificationMarking",
          "statusId",
          "status",
          "notes",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SUBSTATUS-ID"
          },
          "type": {
            "description": "Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "mwCap",
              "ssCap",
              "mdCap"
            ],
            "type": "string",
            "example": "mdCap"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "statusId": {
            "description": "Id of the parent status.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-STATUS-ID"
          },
          "status": {
            "description": "Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "notes": {
            "description": "Descriptions and/or comments associated with the sub-status.",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "example": "Sample Notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      }
    }
  }
}