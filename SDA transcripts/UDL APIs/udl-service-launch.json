{
  "openapi": "3.0.3",
  "info": {
    "title": "Unified Data Library Services API",
    "version": "1.30.0 Daiquiri",
    "description": "Unified Data Library Services OpenAPI v3 documentation.",
    "termsOfService": "storefront/storefront/appConfig/useragreement.html",
    "contact": {
      "name": "Sage Andorka, Deputy, Cross-Mission Ground",
      "email": "unifieddatalibrary@bluestaq.com"
    }
  },
  "tags": [
    {
      "name": "Launch",
      "description": "Collection of launch related services which provide operations for querying and manipulation of launch site data and detailed information on launch vehicles including engines, stages, and manufacturers. Sites, engines, and stages can each have multiple 'detail' records which may be compiled by different sources."
    }
  ],
  "externalDocs": {
    "url": "udl/openapi.json"
  },
  "servers": [
    {
      "url": "https://unifieddatalibrary.com"
    }
  ],
  "paths": {
    "/udl/engine": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Engine_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single Engine as a POST body and ingest into the database. An Engine represents launch engine/booster information to include performance characteristics and limits.  A launch vehicle has 1 to many engines per stage. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "requestBody": {
          "description": "JSON representation of one Engine.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Engine_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/engine/{id}": {
      "delete": {
        "description": "Service operation to delete a Engine object specified by the passed ID path parameter. An Engine represents launch engine/booster information to include performance characteristics and limits.  A launch vehicle has 1 to many engines per stage. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the Engine to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single Engine record by its unique ID passed as a path parameter. An Engine represents launch engine/booster information to include performance characteristics and limits.  A launch vehicle has 1 to many engines per stage.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the Engine to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Engine_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single Engine. An Engine represents launch engine/booster information to include performance characteristics and limits.  A launch vehicle has 1 to many engines per stage. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the Engine to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one Engine.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Engine_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/engine/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/engine/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/engine/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Engine_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/enginedetails": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EngineDetails_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single EngineDetails as a POST body and ingest into the database. EngineDetails are launch vehicle engine details and performance characteristics/limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "requestBody": {
          "description": "JSON representation of one EngineDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EngineDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/enginedetails/{id}": {
      "delete": {
        "description": "Service operation to delete a EngineDetails object specified by the passed ID path parameter. EngineDetails are launch vehicle engine details and performance characteristics/limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the EngineDetails to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single EngineDetails record by its unique ID passed as a path parameter. EngineDetails are launch vehicle engine details and performance characteristics/limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the EngineDetails to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EngineDetails_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single EngineDetails. EngineDetails are launch vehicle engine details and performance characteristics/limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the EngineDetails to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one EngineDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EngineDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchdetection": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LaunchDetection_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single launch detection as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "requestBody": {
          "description": "JSON representation of one Launch Detection.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchDetection_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchdetection/{id}": {
      "delete": {
        "description": "Service operation to delete a launch detection object specified by the passed ID path parameter. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the launch detection to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single launch detection record by its unique ID passed as a path parameter.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the launch detection to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LaunchDetection_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single launch detection. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the launch detection to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one launch detection.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchDetection_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchdetection/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/launchdetection/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchdetection/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LaunchDetection_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchsite": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LaunchSite_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single launch site as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "requestBody": {
          "description": "JSON representation of one LaunchSite.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchSite_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchsite/{id}": {
      "delete": {
        "description": "Service operation to delete a launch site specified by the passed ID path parameter. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the LaunchSite to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single launch site by its unique ID passed as a path parameter.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the LaunchSite to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LaunchSite_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a launch. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the LaunchSite to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one LaunchSite.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchSite_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchsite/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/launchsite/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchsite/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LaunchSite_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchsitedetails": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LaunchSiteDetails_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single LaunchSiteDetails as a POST body and ingest into the database. A LaunchSiteDetails represents details compiled/collected on a launch site by a particular source. A launch site may have several details records. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "requestBody": {
          "description": "JSON representation of one LaunchSiteDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchSiteDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchsitedetails/{id}": {
      "delete": {
        "description": "Service operation to delete a LaunchSiteDetails specified by the passed ID path parameter. A LaunchSiteDetails represents details compiled/collected on a launch site by a particular source. A launch site may have several details records. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the LaunchSiteDetails to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single LaunchSiteDetails by its unique ID passed as a path parameter. A LaunchSiteDetails represents details compiled/collected on a launch site by a particular source. A launch site may have several details records.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the LaunchSiteDetails to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LaunchSiteDetails_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a LaunchSiteDetails. A LaunchSiteDetails represents details compiled/collected on a launch site by a particular source. A launch site may have several details records. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the LaunchSiteDetails to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one LaunchSiteDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchSiteDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchsitedetails/findBySource": {
      "get": {
        "description": "Service operation to get a single LaunchSiteDetails by a source passed as a query parameter. A LaunchSiteDetails represents details compiled/collected on a launch site by a particular source. A launch site may have several details records.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The source of the LaunchSiteDetails records to find.",
            "required": true,
            "name": "source",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LaunchSiteDetails_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchvehicle": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LaunchVehicle_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single LaunchVehicle as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "requestBody": {
          "description": "JSON representation of one LaunchVehicle.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchVehicle_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchvehicle/{id}": {
      "delete": {
        "description": "Service operation to delete a LaunchVehicle object specified by the passed ID path parameter. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the LaunchVehicle to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single LaunchVehicle record by its unique ID passed as a path parameter.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the LaunchVehicle to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LaunchVehicle_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single LaunchVehicle. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the LaunchVehicle to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one LaunchVehicle.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchVehicle_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchvehicle/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/launchvehicle/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchvehicle/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LaunchVehicle_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchvehicledetails": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LaunchVehicleDetails_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single LaunchVehicleDetails as a POST body and ingest into the database. LaunchVehicleDetails represents launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "requestBody": {
          "description": "JSON representation of one LaunchVehicleDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchVehicleDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/launchvehicledetails/{id}": {
      "delete": {
        "description": "Service operation to delete a LaunchVehicleDetails object specified by the passed ID path parameter. LaunchVehicleDetails represents launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the LaunchVehicleDetails to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single LaunchVehicleDetails record by its unique ID passed as a path parameter. LaunchVehicleDetails represents launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the LaunchVehicleDetails to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LaunchVehicleDetails_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single LaunchVehicleDetails. LaunchVehicleDetails represents launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the LaunchVehicleDetails to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one LaunchVehicleDetails.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchVehicleDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/stage": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Stage_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      },
      "post": {
        "description": "Service operation to take a single Stage as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance. A Stage represents various stages of a particular launch vehicle, compiled by a particular source. A vehicle may have multiple stage records.",
        "tags": [
          "Launch"
        ],
        "requestBody": {
          "description": "JSON representation of one Stage.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Stage_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/stage/{id}": {
      "delete": {
        "description": "Service operation to delete a Stage object specified by the passed ID path parameter. A specific role is required to perform this service operation. Please contact the UDL team for assistance. A Stage represents various stages of a particular launch vehicle, compiled by a particular source. A vehicle may have multiple stage records.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the Stage to delete.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "description": "Service operation to get a single Stage record by its unique ID passed as a path parameter. A Stage represents various stages of a particular launch vehicle, compiled by a particular source. A vehicle may have multiple stage records.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the Stage to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stage_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Service operation to update a single Stage. A specific role is required to perform this service operation. Please contact the UDL team for assistance. A Stage represents various stages of a particular launch vehicle, compiled by a particular source. A vehicle may have multiple stage records.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "The ID of the Stage to update.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON representation of one Stage.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Stage_Ingest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/stage/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": []
      }
    },
    "/udl/stage/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Launch"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/stage/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Launch"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Stage_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Engine_Abridged": {
        "description": "Known launch vehicle engines and their performance characteristics and limits.  A launch vehicle has 1 to many engines per stage.",
        "required": [
          "name",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "name": {
            "description": "Engine name/variant.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE_VARIANT1"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Engine_Full": {
        "description": "Known launch vehicle engines and their performance characteristics and limits.  A launch vehicle has 1 to many engines per stage.",
        "required": [
          "name",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "name": {
            "description": "Engine name/variant.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE_VARIANT1"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engineDetails": {
            "description": "Read-only collection of additional EngineDetails by various sources for this engine, ignored on create/update. These details must be created separately via the /udl/enginedetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EngineDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "Engine_Ingest": {
        "description": "Known launch vehicle engines and their performance characteristics and limits.  A launch vehicle has 1 to many engines per stage.",
        "required": [
          "name",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "name": {
            "description": "Engine name/variant.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE_VARIANT1"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "EngineDetails_Abridged": {
        "description": "Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.",
        "required": [
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINEDETAILS-ID"
          },
          "idEngine": {
            "description": "Identifier of the parent engine record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "family": {
            "description": "Engine type or family.",
            "maxLength": 64,
            "type": "string",
            "example": "ENGINE_TYPE1"
          },
          "cycleType": {
            "description": "Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Pressure Fed"
          },
          "characteristicType": {
            "description": "Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Electric"
          },
          "manufacturerOrgId": {
            "description": "Organization ID of the engine manufacturer.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "specificImpulse": {
            "format": "double",
            "description": "Launch engine specific impulse in seconds.",
            "type": "number",
            "example": 1.1
          },
          "burnTime": {
            "format": "double",
            "description": "Launch engine maximum burn time in seconds.",
            "type": "number",
            "example": 1.1
          },
          "seaLevelThrust": {
            "format": "double",
            "description": "Engine maximum thrust at sea level in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "vacuumThrust": {
            "format": "double",
            "description": "Engine maximum thrust in a vacuum in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "chamberPressure": {
            "format": "double",
            "description": "Engine chamber pressure in bars.",
            "type": "number",
            "example": 1.1
          },
          "nozzleExpansionRatio": {
            "format": "double",
            "description": "Engine nozzle expansion ratio.",
            "type": "number",
            "example": 1.1
          },
          "maxFirings": {
            "format": "int32",
            "description": "Engine maximum number of firings.",
            "type": "integer",
            "example": 5
          },
          "propellant": {
            "description": "Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid"
          },
          "oxidizer": {
            "description": "Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid Oxygen"
          },
          "notes": {
            "description": "Notes/Description of the engine.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "EngineDetails_Full": {
        "description": "Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.",
        "required": [
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINEDETAILS-ID"
          },
          "idEngine": {
            "description": "Identifier of the parent engine record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "family": {
            "description": "Engine type or family.",
            "maxLength": 64,
            "type": "string",
            "example": "ENGINE_TYPE1"
          },
          "cycleType": {
            "description": "Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Pressure Fed"
          },
          "characteristicType": {
            "description": "Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Electric"
          },
          "manufacturerOrgId": {
            "description": "Organization ID of the engine manufacturer.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "specificImpulse": {
            "format": "double",
            "description": "Launch engine specific impulse in seconds.",
            "type": "number",
            "example": 1.1
          },
          "burnTime": {
            "format": "double",
            "description": "Launch engine maximum burn time in seconds.",
            "type": "number",
            "example": 1.1
          },
          "seaLevelThrust": {
            "format": "double",
            "description": "Engine maximum thrust at sea level in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "vacuumThrust": {
            "format": "double",
            "description": "Engine maximum thrust in a vacuum in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "chamberPressure": {
            "format": "double",
            "description": "Engine chamber pressure in bars.",
            "type": "number",
            "example": 1.1
          },
          "nozzleExpansionRatio": {
            "format": "double",
            "description": "Engine nozzle expansion ratio.",
            "type": "number",
            "example": 1.1
          },
          "maxFirings": {
            "format": "int32",
            "description": "Engine maximum number of firings.",
            "type": "integer",
            "example": 5
          },
          "propellant": {
            "description": "Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid"
          },
          "oxidizer": {
            "description": "Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid Oxygen"
          },
          "notes": {
            "description": "Notes/Description of the engine.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "EngineDetails_Ingest": {
        "description": "Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.",
        "required": [
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINEDETAILS-ID"
          },
          "idEngine": {
            "description": "Identifier of the parent engine record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "family": {
            "description": "Engine type or family.",
            "maxLength": 64,
            "type": "string",
            "example": "ENGINE_TYPE1"
          },
          "cycleType": {
            "description": "Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Pressure Fed"
          },
          "characteristicType": {
            "description": "Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Electric"
          },
          "manufacturerOrgId": {
            "description": "Organization ID of the engine manufacturer.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "specificImpulse": {
            "format": "double",
            "description": "Launch engine specific impulse in seconds.",
            "type": "number",
            "example": 1.1
          },
          "burnTime": {
            "format": "double",
            "description": "Launch engine maximum burn time in seconds.",
            "type": "number",
            "example": 1.1
          },
          "seaLevelThrust": {
            "format": "double",
            "description": "Engine maximum thrust at sea level in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "vacuumThrust": {
            "format": "double",
            "description": "Engine maximum thrust in a vacuum in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "chamberPressure": {
            "format": "double",
            "description": "Engine chamber pressure in bars.",
            "type": "number",
            "example": 1.1
          },
          "nozzleExpansionRatio": {
            "format": "double",
            "description": "Engine nozzle expansion ratio.",
            "type": "number",
            "example": 1.1
          },
          "maxFirings": {
            "format": "int32",
            "description": "Engine maximum number of firings.",
            "type": "integer",
            "example": 5
          },
          "propellant": {
            "description": "Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid"
          },
          "oxidizer": {
            "description": "Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid Oxygen"
          },
          "notes": {
            "description": "Notes/Description of the engine.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "LaunchDetection_Abridged": {
        "description": "Data to analyze launch detections.",
        "required": [
          "classificationMarking",
          "messageType",
          "observationTime",
          "observationLatitude",
          "observationLongitude",
          "sequenceNumber",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHDETECTION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "launchTime": {
            "format": "date-time",
            "description": "Time of Launch.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "messageType": {
            "description": "Type of message for the data.",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "Example-Msg-Type"
          },
          "launchLatitude": {
            "format": "double",
            "description": "Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 1.23
          },
          "launchLongitude": {
            "format": "double",
            "description": "Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 1.23
          },
          "launchAzimuth": {
            "format": "double",
            "description": "Angle measured clockwise from North for the launch heading (in Degrees).",
            "type": "number",
            "example": 1.23
          },
          "raan": {
            "format": "double",
            "description": "Orbit Right Ascension of Ascending Node (in Degrees).",
            "type": "number",
            "example": 1.23
          },
          "inclination": {
            "format": "double",
            "description": "Orbit Inclination (in Degrees).",
            "type": "number",
            "example": 1.23
          },
          "observationTime": {
            "format": "date-time",
            "description": "Time of observation.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "observationLatitude": {
            "format": "double",
            "description": "Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "observationLongitude": {
            "format": "double",
            "description": "Longitude of launch vehicle at observation time (in Degrees).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 1.23
          },
          "observationAltitude": {
            "format": "double",
            "description": "Altitude of launch vehicle at observation time (in KM).",
            "type": "number",
            "example": 1.23
          },
          "stereoFlag": {
            "description": "Flag indicating multiple observers were used.",
            "type": "boolean",
            "example": false
          },
          "highZenithAzimuth": {
            "description": "Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.",
            "type": "boolean",
            "example": false
          },
          "sequenceNumber": {
            "format": "int32",
            "description": "Integer indicating how messages should be sequenced for a specific event.",
            "type": "integer",
            "example": 5
          },
          "eventId": {
            "description": "Id to be able to correlate different messages to a specific event.",
            "maxLength": 36,
            "type": "string",
            "example": "EVENT-ID"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "Example descriptor"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Read-only time the row was updated in the database, set automatically by the system on update.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "LaunchDetection_Full": {
        "description": "Data to analyze launch detections.",
        "required": [
          "classificationMarking",
          "messageType",
          "observationTime",
          "observationLatitude",
          "observationLongitude",
          "sequenceNumber",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHDETECTION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "launchTime": {
            "format": "date-time",
            "description": "Time of Launch.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "messageType": {
            "description": "Type of message for the data.",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "Example-Msg-Type"
          },
          "launchLatitude": {
            "format": "double",
            "description": "Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 1.23
          },
          "launchLongitude": {
            "format": "double",
            "description": "Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 1.23
          },
          "launchAzimuth": {
            "format": "double",
            "description": "Angle measured clockwise from North for the launch heading (in Degrees).",
            "type": "number",
            "example": 1.23
          },
          "raan": {
            "format": "double",
            "description": "Orbit Right Ascension of Ascending Node (in Degrees).",
            "type": "number",
            "example": 1.23
          },
          "inclination": {
            "format": "double",
            "description": "Orbit Inclination (in Degrees).",
            "type": "number",
            "example": 1.23
          },
          "observationTime": {
            "format": "date-time",
            "description": "Time of observation.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "observationLatitude": {
            "format": "double",
            "description": "Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "observationLongitude": {
            "format": "double",
            "description": "Longitude of launch vehicle at observation time (in Degrees).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 1.23
          },
          "observationAltitude": {
            "format": "double",
            "description": "Altitude of launch vehicle at observation time (in KM).",
            "type": "number",
            "example": 1.23
          },
          "stereoFlag": {
            "description": "Flag indicating multiple observers were used.",
            "type": "boolean",
            "example": false
          },
          "highZenithAzimuth": {
            "description": "Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.",
            "type": "boolean",
            "example": false
          },
          "sequenceNumber": {
            "format": "int32",
            "description": "Integer indicating how messages should be sequenced for a specific event.",
            "type": "integer",
            "example": 5
          },
          "eventId": {
            "description": "Id to be able to correlate different messages to a specific event.",
            "maxLength": 36,
            "type": "string",
            "example": "EVENT-ID"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "Example descriptor"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Read-only time the row was updated in the database, set automatically by the system on update.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "LaunchDetection_Ingest": {
        "description": "Data to analyze launch detections.",
        "required": [
          "classificationMarking",
          "messageType",
          "observationTime",
          "observationLatitude",
          "observationLongitude",
          "sequenceNumber",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHDETECTION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "launchTime": {
            "format": "date-time",
            "description": "Time of Launch.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "messageType": {
            "description": "Type of message for the data.",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "Example-Msg-Type"
          },
          "launchLatitude": {
            "format": "double",
            "description": "Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 1.23
          },
          "launchLongitude": {
            "format": "double",
            "description": "Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 1.23
          },
          "launchAzimuth": {
            "format": "double",
            "description": "Angle measured clockwise from North for the launch heading (in Degrees).",
            "type": "number",
            "example": 1.23
          },
          "raan": {
            "format": "double",
            "description": "Orbit Right Ascension of Ascending Node (in Degrees).",
            "type": "number",
            "example": 1.23
          },
          "inclination": {
            "format": "double",
            "description": "Orbit Inclination (in Degrees).",
            "type": "number",
            "example": 1.23
          },
          "observationTime": {
            "format": "date-time",
            "description": "Time of observation.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "observationLatitude": {
            "format": "double",
            "description": "Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "observationLongitude": {
            "format": "double",
            "description": "Longitude of launch vehicle at observation time (in Degrees).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 1.23
          },
          "observationAltitude": {
            "format": "double",
            "description": "Altitude of launch vehicle at observation time (in KM).",
            "type": "number",
            "example": 1.23
          },
          "stereoFlag": {
            "description": "Flag indicating multiple observers were used.",
            "type": "boolean",
            "example": false
          },
          "highZenithAzimuth": {
            "description": "Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.",
            "type": "boolean",
            "example": false
          },
          "sequenceNumber": {
            "format": "int32",
            "description": "Integer indicating how messages should be sequenced for a specific event.",
            "type": "integer",
            "example": 5
          },
          "eventId": {
            "description": "Id to be able to correlate different messages to a specific event.",
            "maxLength": 36,
            "type": "string",
            "example": "EVENT-ID"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "Example descriptor"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Read-only time the row was updated in the database, set automatically by the system on update.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "LaunchSite_Abridged": {
        "description": "Model representation of known launch sites.",
        "required": [
          "classificationMarking",
          "code",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHSITE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "code": {
            "description": "Launch site code.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "SAN MARCO"
          },
          "shortCode": {
            "description": "Abbreviated short name for the launch site.",
            "maxLength": 16,
            "type": "string",
            "example": "SNMLP"
          },
          "altCode": {
            "description": "Alternate launch site code.",
            "maxLength": 64,
            "type": "string",
            "example": "35"
          },
          "idSite": {
            "description": "Unique identifier of the parent site associated with this launch site.",
            "maxLength": 36,
            "type": "string",
            "example": "a150b3ee-884b-b9ac-60a0-6408b4b16088"
          },
          "name": {
            "description": "Launch site name.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Example launch site name"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "LaunchSite_Full": {
        "description": "Model representation of known launch sites.",
        "required": [
          "classificationMarking",
          "code",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHSITE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "code": {
            "description": "Launch site code.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "SAN MARCO"
          },
          "shortCode": {
            "description": "Abbreviated short name for the launch site.",
            "maxLength": 16,
            "type": "string",
            "example": "SNMLP"
          },
          "altCode": {
            "description": "Alternate launch site code.",
            "maxLength": 64,
            "type": "string",
            "example": "35"
          },
          "idSite": {
            "description": "Unique identifier of the parent site associated with this launch site.",
            "maxLength": 36,
            "type": "string",
            "example": "a150b3ee-884b-b9ac-60a0-6408b4b16088"
          },
          "name": {
            "description": "Launch site name.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Example launch site name"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "launchSiteDetails": {
            "description": "Read-only collection of additional LaunchSiteDetails by various sources for this launch site, ignored on create/update. These details must be created separately via the /udl/launchsitedetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LaunchSiteDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "LaunchSite_Ingest": {
        "description": "Model representation of known launch sites.",
        "required": [
          "classificationMarking",
          "code",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHSITE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "code": {
            "description": "Launch site code.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "SAN MARCO"
          },
          "shortCode": {
            "description": "Abbreviated short name for the launch site.",
            "maxLength": 16,
            "type": "string",
            "example": "SNMLP"
          },
          "altCode": {
            "description": "Alternate launch site code.",
            "maxLength": 64,
            "type": "string",
            "example": "35"
          },
          "idSite": {
            "description": "Unique identifier of the parent site associated with this launch site.",
            "maxLength": 36,
            "type": "string",
            "example": "a150b3ee-884b-b9ac-60a0-6408b4b16088"
          },
          "name": {
            "description": "Launch site name.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Example launch site name"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "LaunchSiteDetails_Abridged": {
        "description": "Model representation of details compiled/collected on a launch site by a particular source. A launch site may have several details records.",
        "required": [
          "idLaunchSite",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHSITEDETAILS-ID"
          },
          "idLaunchSite": {
            "description": "Identifier of the parent launch site record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHSITE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idLocation": {
            "description": "ID of the location data for the launch site, or null if mobile (e.g. sea launch platform in international waters).",
            "maxLength": 36,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "launchGroup": {
            "description": "Launch site group name. Multiple launch sites may be colocated within a launch ''group''.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-group-name"
          },
          "availableInclinations": {
            "description": "Array of supported launch inclinations known for this site. The array is always sized as a multiple of two and includes start/end values to support ranges.  For example, if a site support inclinations of 10 and 12-14, the array would have the following values: [10,10, 12,14].",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              10.23,
              10.23,
              12.23,
              14.23
            ]
          },
          "description": {
            "description": "Notes/description of the launch site.",
            "maxLength": 256,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "location": {
            "$ref": "#/components/schemas/Location_Abridged"
          }
        }
      },
      "LaunchSiteDetails_Full": {
        "description": "Model representation of details compiled/collected on a launch site by a particular source. A launch site may have several details records.",
        "required": [
          "idLaunchSite",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHSITEDETAILS-ID"
          },
          "idLaunchSite": {
            "description": "Identifier of the parent launch site record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHSITE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idLocation": {
            "description": "ID of the location data for the launch site, or null if mobile (e.g. sea launch platform in international waters).",
            "maxLength": 36,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "launchGroup": {
            "description": "Launch site group name. Multiple launch sites may be colocated within a launch ''group''.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-group-name"
          },
          "availableInclinations": {
            "description": "Array of supported launch inclinations known for this site. The array is always sized as a multiple of two and includes start/end values to support ranges.  For example, if a site support inclinations of 10 and 12-14, the array would have the following values: [10,10, 12,14].",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              10.23,
              10.23,
              12.23,
              14.23
            ]
          },
          "description": {
            "description": "Notes/description of the launch site.",
            "maxLength": 256,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "location": {
            "$ref": "#/components/schemas/Location_Full"
          }
        }
      },
      "LaunchSiteDetails_Ingest": {
        "description": "Model representation of details compiled/collected on a launch site by a particular source. A launch site may have several details records.",
        "required": [
          "idLaunchSite",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHSITEDETAILS-ID"
          },
          "idLaunchSite": {
            "description": "Identifier of the parent launch site record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHSITE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idLocation": {
            "description": "ID of the location data for the launch site, or null if mobile (e.g. sea launch platform in international waters).",
            "maxLength": 36,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "launchGroup": {
            "description": "Launch site group name. Multiple launch sites may be colocated within a launch ''group''.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-group-name"
          },
          "availableInclinations": {
            "description": "Array of supported launch inclinations known for this site. The array is always sized as a multiple of two and includes start/end values to support ranges.  For example, if a site support inclinations of 10 and 12-14, the array would have the following values: [10,10, 12,14].",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              10.23,
              10.23,
              12.23,
              14.23
            ]
          },
          "description": {
            "description": "Notes/description of the launch site.",
            "maxLength": 256,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "location": {
            "$ref": "#/components/schemas/Location_Ingest"
          }
        }
      },
      "LaunchVehicle_Abridged": {
        "description": "Model representation of basic information about known launch vehicles. A launch vehicle may have several details records including characteristics and information compiled by a particular source.",
        "required": [
          "name",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHVEHICLE-ID"
          },
          "name": {
            "description": "Launch vehicle name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Example-name"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Vehicle type.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-vehicle-type"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "LaunchVehicle_Full": {
        "description": "Model representation of basic information about known launch vehicles. A launch vehicle may have several details records including characteristics and information compiled by a particular source.",
        "required": [
          "name",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHVEHICLE-ID"
          },
          "name": {
            "description": "Launch vehicle name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Example-name"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Vehicle type.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-vehicle-type"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "launchVehicleDetails": {
            "description": "Read-only collection of additional LaunchVehicleDetails by various sources for this launch vehicle, ignored on create/update. These details must be created separately via the /udl/launchvehicledetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LaunchVehicleDetails_Full"
            },
            "readOnly": true
          },
          "stages": {
            "description": "Read-only collection of stages for this launch vehicle, ignored on create/update.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Stage_Full"
            },
            "readOnly": true
          }
        }
      },
      "LaunchVehicle_Ingest": {
        "description": "Model representation of basic information about known launch vehicles. A launch vehicle may have several details records including characteristics and information compiled by a particular source.",
        "required": [
          "name",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHVEHICLE-ID"
          },
          "name": {
            "description": "Launch vehicle name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Example-name"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Vehicle type.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-vehicle-type"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "LaunchVehicleDetails_Abridged": {
        "description": "Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.",
        "required": [
          "idLaunchVehicle",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHVEHICLEDETAILS-ID"
          },
          "idLaunchVehicle": {
            "description": "Identifier of the parent launch vehicle record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHVEHICLE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "variant": {
            "description": "Vehicle variant.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-variant"
          },
          "minorVariant": {
            "description": "Vehicle minor variant.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-minor-variant"
          },
          "category": {
            "description": "Vehicle category.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-category"
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the launch vehicle.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "launchPrefix": {
            "description": "Vehicle launch prefix.",
            "maxLength": 8,
            "type": "string",
            "example": "AX011"
          },
          "family": {
            "description": "Vehicle family.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-family"
          },
          "propellant": {
            "description": "Propellant type.",
            "maxLength": 64,
            "type": "string",
            "example": "Nitrogen"
          },
          "oxidizer": {
            "description": "Oxidizer type.",
            "maxLength": 64,
            "type": "string",
            "example": "Bromine"
          },
          "length": {
            "format": "double",
            "description": "Vehicle length in meters.",
            "type": "number",
            "example": 10.23
          },
          "diameter": {
            "format": "double",
            "description": "Vehicle diameter in meters.",
            "type": "number",
            "example": 10.23
          },
          "launchMass": {
            "format": "double",
            "description": "Vehicle total mass at launch time in kg (including all boosters).",
            "type": "number",
            "example": 10.23
          },
          "geoPayloadMass": {
            "format": "double",
            "description": "Maximum vehicle payload mass to GEO orbit in kg.",
            "type": "number",
            "example": 10.23
          },
          "gtoPayloadMass": {
            "format": "double",
            "description": "Max vehicle payload mass to Geo-Transfer Orbit in kg.",
            "type": "number",
            "example": 10.23
          },
          "leoPayloadMass": {
            "format": "double",
            "description": "Max vehicle payload mass to LEO orbit in kg.",
            "type": "number",
            "example": 10.23
          },
          "ssoPayloadMass": {
            "format": "double",
            "description": "Max vehicle payload mass to Sun-Synchronous Orbit in kg.",
            "type": "number",
            "example": 10.23
          },
          "fairingLength": {
            "format": "double",
            "description": "Vehicle fairing length in meters.",
            "type": "number",
            "example": 10.23
          },
          "fairingName": {
            "description": "Name of the fairing.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-fairing-name"
          },
          "fairingExternalDiameter": {
            "format": "double",
            "description": "Vehicle fairing maximum external diameter in meters.",
            "type": "number",
            "example": 10.23
          },
          "fairingInternalDiameter": {
            "format": "double",
            "description": "Vehicle fairing maximum internal diameter in meters.",
            "type": "number",
            "example": 10.23
          },
          "fairingMass": {
            "format": "double",
            "description": "Vehicle fairing mass in kg.",
            "type": "number",
            "example": 10.23
          },
          "fairingMaterial": {
            "description": "Fairing material.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-fairing-material"
          },
          "maxAccelLoad": {
            "format": "double",
            "description": "Vehicle maximum acceleration load in g.",
            "type": "number",
            "example": 10.23
          },
          "maxPayloadFreqLat": {
            "format": "double",
            "description": "Vehicle maximum payload lateral frequency in Hz.",
            "type": "number",
            "example": 10.23
          },
          "maxPayloadFreqLon": {
            "format": "double",
            "description": "Vehicle maximum payload longitudinal frequency in Hz.",
            "type": "number",
            "example": 10.23
          },
          "maxAcousticLevel": {
            "format": "double",
            "description": "Vehicle maximum acoustic level in dB.",
            "type": "number",
            "example": 10.23
          },
          "maxAcousticLevelRange": {
            "format": "double",
            "description": "Vehicle maximum acoustic level range in Hz.",
            "type": "number",
            "example": 10.23
          },
          "soundPressureLevel": {
            "format": "double",
            "description": "Vehicle overall sound pressure level in dB.",
            "type": "number",
            "example": 10.23
          },
          "maxFlightShockForce": {
            "format": "double",
            "description": "Vehicle maximum flight shock force in g.",
            "type": "number",
            "example": 10.23
          },
          "maxFlightShockFreq": {
            "format": "double",
            "description": "Vehicle maximum flight shock frequency in Hz.",
            "type": "number",
            "example": 10.23
          },
          "maxFairingPressureChange": {
            "format": "double",
            "description": "Vehicle fairing maximum pressure change in kPa/sec.",
            "type": "number",
            "example": 10.23
          },
          "estLaunchPrice": {
            "format": "double",
            "description": "Launch vehicle estimated launch price in US dollars.",
            "type": "number",
            "example": 10.23
          },
          "estLaunchPriceTypical": {
            "format": "double",
            "description": "Launch vehicle typical estimated launch price in US dollars.",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyApogeeTarget": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyApogeeMargin": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyPerigeeTarget": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyPerigeeMargin": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyInclinationTarget": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyInclinationMargin": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).",
            "type": "number",
            "example": 10.23
          },
          "attitudeAccuracy": {
            "format": "double",
            "description": "Launch vehicle attitude accuracy (degrees).",
            "type": "number",
            "example": 10.23
          },
          "payloadSeparationRate": {
            "format": "double",
            "description": "Launch vehicle payload separation rate in m/s.",
            "type": "number",
            "example": 10.23
          },
          "deploymentRotationRate": {
            "format": "double",
            "description": "Launch vehicle deployment rotation rate in RPM.",
            "type": "number",
            "example": 10.23
          },
          "sourceURL": {
            "description": "Optional URL for additional information on the vehicle.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URL"
          },
          "notes": {
            "description": "Notes/Description of the launch vehicle.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "fairingNotes": {
            "description": "Notes/Description of the launch vehicle fairing.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "payloadNotes": {
            "description": "Notes/Description of the launch vehicle payload.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "LaunchVehicleDetails_Full": {
        "description": "Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.",
        "required": [
          "idLaunchVehicle",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHVEHICLEDETAILS-ID"
          },
          "idLaunchVehicle": {
            "description": "Identifier of the parent launch vehicle record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHVEHICLE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "variant": {
            "description": "Vehicle variant.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-variant"
          },
          "minorVariant": {
            "description": "Vehicle minor variant.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-minor-variant"
          },
          "category": {
            "description": "Vehicle category.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-category"
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the launch vehicle.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "launchPrefix": {
            "description": "Vehicle launch prefix.",
            "maxLength": 8,
            "type": "string",
            "example": "AX011"
          },
          "family": {
            "description": "Vehicle family.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-family"
          },
          "propellant": {
            "description": "Propellant type.",
            "maxLength": 64,
            "type": "string",
            "example": "Nitrogen"
          },
          "oxidizer": {
            "description": "Oxidizer type.",
            "maxLength": 64,
            "type": "string",
            "example": "Bromine"
          },
          "length": {
            "format": "double",
            "description": "Vehicle length in meters.",
            "type": "number",
            "example": 10.23
          },
          "diameter": {
            "format": "double",
            "description": "Vehicle diameter in meters.",
            "type": "number",
            "example": 10.23
          },
          "launchMass": {
            "format": "double",
            "description": "Vehicle total mass at launch time in kg (including all boosters).",
            "type": "number",
            "example": 10.23
          },
          "geoPayloadMass": {
            "format": "double",
            "description": "Maximum vehicle payload mass to GEO orbit in kg.",
            "type": "number",
            "example": 10.23
          },
          "gtoPayloadMass": {
            "format": "double",
            "description": "Max vehicle payload mass to Geo-Transfer Orbit in kg.",
            "type": "number",
            "example": 10.23
          },
          "leoPayloadMass": {
            "format": "double",
            "description": "Max vehicle payload mass to LEO orbit in kg.",
            "type": "number",
            "example": 10.23
          },
          "ssoPayloadMass": {
            "format": "double",
            "description": "Max vehicle payload mass to Sun-Synchronous Orbit in kg.",
            "type": "number",
            "example": 10.23
          },
          "fairingLength": {
            "format": "double",
            "description": "Vehicle fairing length in meters.",
            "type": "number",
            "example": 10.23
          },
          "fairingName": {
            "description": "Name of the fairing.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-fairing-name"
          },
          "fairingExternalDiameter": {
            "format": "double",
            "description": "Vehicle fairing maximum external diameter in meters.",
            "type": "number",
            "example": 10.23
          },
          "fairingInternalDiameter": {
            "format": "double",
            "description": "Vehicle fairing maximum internal diameter in meters.",
            "type": "number",
            "example": 10.23
          },
          "fairingMass": {
            "format": "double",
            "description": "Vehicle fairing mass in kg.",
            "type": "number",
            "example": 10.23
          },
          "fairingMaterial": {
            "description": "Fairing material.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-fairing-material"
          },
          "maxAccelLoad": {
            "format": "double",
            "description": "Vehicle maximum acceleration load in g.",
            "type": "number",
            "example": 10.23
          },
          "maxPayloadFreqLat": {
            "format": "double",
            "description": "Vehicle maximum payload lateral frequency in Hz.",
            "type": "number",
            "example": 10.23
          },
          "maxPayloadFreqLon": {
            "format": "double",
            "description": "Vehicle maximum payload longitudinal frequency in Hz.",
            "type": "number",
            "example": 10.23
          },
          "maxAcousticLevel": {
            "format": "double",
            "description": "Vehicle maximum acoustic level in dB.",
            "type": "number",
            "example": 10.23
          },
          "maxAcousticLevelRange": {
            "format": "double",
            "description": "Vehicle maximum acoustic level range in Hz.",
            "type": "number",
            "example": 10.23
          },
          "soundPressureLevel": {
            "format": "double",
            "description": "Vehicle overall sound pressure level in dB.",
            "type": "number",
            "example": 10.23
          },
          "maxFlightShockForce": {
            "format": "double",
            "description": "Vehicle maximum flight shock force in g.",
            "type": "number",
            "example": 10.23
          },
          "maxFlightShockFreq": {
            "format": "double",
            "description": "Vehicle maximum flight shock frequency in Hz.",
            "type": "number",
            "example": 10.23
          },
          "maxFairingPressureChange": {
            "format": "double",
            "description": "Vehicle fairing maximum pressure change in kPa/sec.",
            "type": "number",
            "example": 10.23
          },
          "estLaunchPrice": {
            "format": "double",
            "description": "Launch vehicle estimated launch price in US dollars.",
            "type": "number",
            "example": 10.23
          },
          "estLaunchPriceTypical": {
            "format": "double",
            "description": "Launch vehicle typical estimated launch price in US dollars.",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyApogeeTarget": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyApogeeMargin": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyPerigeeTarget": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyPerigeeMargin": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyInclinationTarget": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyInclinationMargin": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).",
            "type": "number",
            "example": 10.23
          },
          "attitudeAccuracy": {
            "format": "double",
            "description": "Launch vehicle attitude accuracy (degrees).",
            "type": "number",
            "example": 10.23
          },
          "payloadSeparationRate": {
            "format": "double",
            "description": "Launch vehicle payload separation rate in m/s.",
            "type": "number",
            "example": 10.23
          },
          "deploymentRotationRate": {
            "format": "double",
            "description": "Launch vehicle deployment rotation rate in RPM.",
            "type": "number",
            "example": 10.23
          },
          "sourceURL": {
            "description": "Optional URL for additional information on the vehicle.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URL"
          },
          "notes": {
            "description": "Notes/Description of the launch vehicle.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "fairingNotes": {
            "description": "Notes/Description of the launch vehicle fairing.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "payloadNotes": {
            "description": "Notes/Description of the launch vehicle payload.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "LaunchVehicleDetails_Ingest": {
        "description": "Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.",
        "required": [
          "idLaunchVehicle",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHVEHICLEDETAILS-ID"
          },
          "idLaunchVehicle": {
            "description": "Identifier of the parent launch vehicle record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHVEHICLE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "variant": {
            "description": "Vehicle variant.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-variant"
          },
          "minorVariant": {
            "description": "Vehicle minor variant.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-minor-variant"
          },
          "category": {
            "description": "Vehicle category.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-category"
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the launch vehicle.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "launchPrefix": {
            "description": "Vehicle launch prefix.",
            "maxLength": 8,
            "type": "string",
            "example": "AX011"
          },
          "family": {
            "description": "Vehicle family.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-family"
          },
          "propellant": {
            "description": "Propellant type.",
            "maxLength": 64,
            "type": "string",
            "example": "Nitrogen"
          },
          "oxidizer": {
            "description": "Oxidizer type.",
            "maxLength": 64,
            "type": "string",
            "example": "Bromine"
          },
          "length": {
            "format": "double",
            "description": "Vehicle length in meters.",
            "type": "number",
            "example": 10.23
          },
          "diameter": {
            "format": "double",
            "description": "Vehicle diameter in meters.",
            "type": "number",
            "example": 10.23
          },
          "launchMass": {
            "format": "double",
            "description": "Vehicle total mass at launch time in kg (including all boosters).",
            "type": "number",
            "example": 10.23
          },
          "geoPayloadMass": {
            "format": "double",
            "description": "Maximum vehicle payload mass to GEO orbit in kg.",
            "type": "number",
            "example": 10.23
          },
          "gtoPayloadMass": {
            "format": "double",
            "description": "Max vehicle payload mass to Geo-Transfer Orbit in kg.",
            "type": "number",
            "example": 10.23
          },
          "leoPayloadMass": {
            "format": "double",
            "description": "Max vehicle payload mass to LEO orbit in kg.",
            "type": "number",
            "example": 10.23
          },
          "ssoPayloadMass": {
            "format": "double",
            "description": "Max vehicle payload mass to Sun-Synchronous Orbit in kg.",
            "type": "number",
            "example": 10.23
          },
          "fairingLength": {
            "format": "double",
            "description": "Vehicle fairing length in meters.",
            "type": "number",
            "example": 10.23
          },
          "fairingName": {
            "description": "Name of the fairing.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-fairing-name"
          },
          "fairingExternalDiameter": {
            "format": "double",
            "description": "Vehicle fairing maximum external diameter in meters.",
            "type": "number",
            "example": 10.23
          },
          "fairingInternalDiameter": {
            "format": "double",
            "description": "Vehicle fairing maximum internal diameter in meters.",
            "type": "number",
            "example": 10.23
          },
          "fairingMass": {
            "format": "double",
            "description": "Vehicle fairing mass in kg.",
            "type": "number",
            "example": 10.23
          },
          "fairingMaterial": {
            "description": "Fairing material.",
            "maxLength": 64,
            "type": "string",
            "example": "Example-fairing-material"
          },
          "maxAccelLoad": {
            "format": "double",
            "description": "Vehicle maximum acceleration load in g.",
            "type": "number",
            "example": 10.23
          },
          "maxPayloadFreqLat": {
            "format": "double",
            "description": "Vehicle maximum payload lateral frequency in Hz.",
            "type": "number",
            "example": 10.23
          },
          "maxPayloadFreqLon": {
            "format": "double",
            "description": "Vehicle maximum payload longitudinal frequency in Hz.",
            "type": "number",
            "example": 10.23
          },
          "maxAcousticLevel": {
            "format": "double",
            "description": "Vehicle maximum acoustic level in dB.",
            "type": "number",
            "example": 10.23
          },
          "maxAcousticLevelRange": {
            "format": "double",
            "description": "Vehicle maximum acoustic level range in Hz.",
            "type": "number",
            "example": 10.23
          },
          "soundPressureLevel": {
            "format": "double",
            "description": "Vehicle overall sound pressure level in dB.",
            "type": "number",
            "example": 10.23
          },
          "maxFlightShockForce": {
            "format": "double",
            "description": "Vehicle maximum flight shock force in g.",
            "type": "number",
            "example": 10.23
          },
          "maxFlightShockFreq": {
            "format": "double",
            "description": "Vehicle maximum flight shock frequency in Hz.",
            "type": "number",
            "example": 10.23
          },
          "maxFairingPressureChange": {
            "format": "double",
            "description": "Vehicle fairing maximum pressure change in kPa/sec.",
            "type": "number",
            "example": 10.23
          },
          "estLaunchPrice": {
            "format": "double",
            "description": "Launch vehicle estimated launch price in US dollars.",
            "type": "number",
            "example": 10.23
          },
          "estLaunchPriceTypical": {
            "format": "double",
            "description": "Launch vehicle typical estimated launch price in US dollars.",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyApogeeTarget": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyApogeeMargin": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyPerigeeTarget": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyPerigeeMargin": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyInclinationTarget": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).",
            "type": "number",
            "example": 10.23
          },
          "gtoInj3SigAccuracyInclinationMargin": {
            "format": "double",
            "description": "Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).",
            "type": "number",
            "example": 10.23
          },
          "attitudeAccuracy": {
            "format": "double",
            "description": "Launch vehicle attitude accuracy (degrees).",
            "type": "number",
            "example": 10.23
          },
          "payloadSeparationRate": {
            "format": "double",
            "description": "Launch vehicle payload separation rate in m/s.",
            "type": "number",
            "example": 10.23
          },
          "deploymentRotationRate": {
            "format": "double",
            "description": "Launch vehicle deployment rotation rate in RPM.",
            "type": "number",
            "example": 10.23
          },
          "sourceURL": {
            "description": "Optional URL for additional information on the vehicle.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URL"
          },
          "notes": {
            "description": "Notes/Description of the launch vehicle.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "fairingNotes": {
            "description": "Notes/Description of the launch vehicle fairing.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "payloadNotes": {
            "description": "Notes/Description of the launch vehicle payload.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "Location_Abridged": {
        "description": "Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idLocation": {
            "description": "Unique identifier of the location, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Location name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Example location"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 16,
            "type": "string",
            "example": "US"
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "altitude": {
            "format": "double",
            "description": "Altitude of the location, in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Location_Full": {
        "description": "Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idLocation": {
            "description": "Unique identifier of the location, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Location name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Example location"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 16,
            "type": "string",
            "example": "US"
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "altitude": {
            "format": "double",
            "description": "Altitude of the location, in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Location_Ingest": {
        "description": "Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idLocation": {
            "description": "Unique identifier of the location, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Location name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Example location"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 16,
            "type": "string",
            "example": "US"
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "altitude": {
            "format": "double",
            "description": "Altitude of the location, in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Organization_Full": {
        "description": "An organization such as a corporation, manufacturer, consortium, government, etc. An organization may have parent and child organizations as well as link to a former organization if this org previously existed as another organization.",
        "required": [
          "classificationMarking",
          "name",
          "type",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Organization name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "type": {
            "description": "Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "GOVERNMENT"
          },
          "category": {
            "description": "Subtype or category of the organization (e.g. Private company, stock market quoted company, subsidiary, goverment department/agency, etc).",
            "maxLength": 128,
            "type": "string",
            "example": "Private company"
          },
          "externalId": {
            "description": "Optional externally provided identifier for this row.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "description": {
            "description": "Organization description.",
            "maxLength": 256,
            "type": "string",
            "example": "Example description"
          },
          "countryCode": {
            "description": "Country of the physical location of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code. However, it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "nationality": {
            "description": "Country of registration or ownership of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "active": {
            "description": "Boolean indicating if this organization is currently active.",
            "type": "boolean",
            "example": false
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "some.user"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "organizationDetails": {
            "description": "Read-only collection of additional OrganizationDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/organizationdetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationDetails_Full"
            },
            "readOnly": true
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OrganizationDetails_Full": {
        "description": "Model representation of additional detailed organization data as collected by a particular source.",
        "required": [
          "idOrganization",
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATIONDETAILS-ID"
          },
          "idOrganization": {
            "description": "Unique identifier of the parent organization.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Organization details name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "email": {
            "description": "Listed contact email address for the organization.",
            "maxLength": 320,
            "type": "string",
            "example": "some_organization@organization.com"
          },
          "address1": {
            "description": "Street number of the organization.",
            "maxLength": 120,
            "type": "string",
            "example": "123 Main Street"
          },
          "address2": {
            "description": "Field for additional organization address information such as PO Box and unit number.",
            "maxLength": 120,
            "type": "string",
            "example": "Apt 4B"
          },
          "address3": {
            "description": "Contains the third line of address information for an organization.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado Springs CO, 80903"
          },
          "geoAdminLevel1": {
            "description": "Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado"
          },
          "geoAdminLevel2": {
            "description": "Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.",
            "maxLength": 120,
            "type": "string",
            "example": "El Paso County"
          },
          "geoAdminLevel3": {
            "description": "Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado Springs"
          },
          "postalCode": {
            "description": "A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.",
            "maxLength": 32,
            "type": "string",
            "example": "80903"
          },
          "description": {
            "description": "Organization description.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example description"
          },
          "formerOrgId": {
            "description": "Former organization ID (if this organization previously existed as another organization).",
            "maxLength": 36,
            "type": "string",
            "example": "FORMERORG-ID"
          },
          "parentOrgId": {
            "description": "Parent organization ID of this organization if it is a child organization.",
            "maxLength": 36,
            "type": "string",
            "example": "PARENTORG-ID"
          },
          "financialYearEndDate": {
            "format": "date-time",
            "description": "For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "revenue": {
            "format": "double",
            "description": "For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "profit": {
            "format": "double",
            "description": "For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "ebitda": {
            "format": "double",
            "description": "For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "ftes": {
            "format": "int32",
            "description": "Total number of FTEs in this organization.",
            "type": "integer",
            "example": 123
          },
          "broker": {
            "description": "Designated broker for this organization.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "ceo": {
            "description": "For organizations of type CORPORATION, the name of the Chief Executive Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "cfo": {
            "description": "For organizations of type CORPORATION, the name of the Chief Financial Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "cto": {
            "description": "For organizations of type CORPORATION, the name of the Chief Technology Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "riskManager": {
            "description": "The name of the risk manager for the organization.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "massRanking": {
            "format": "int32",
            "description": "Mass ranking for this organization.",
            "type": "integer",
            "example": 123
          },
          "revenueRanking": {
            "format": "int32",
            "description": "Revenue ranking for this organization.",
            "type": "integer",
            "example": 123
          },
          "financialNotes": {
            "description": "For organizations of type CORPORATION, notes on company financials.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "servicesNotes": {
            "description": "Notes on the services provided by the organization.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "fleetPlanNotes": {
            "description": "Satellite fleet planning notes for this organization.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "some.user"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Stage_Abridged": {
        "description": "Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.",
        "required": [
          "idLaunchVehicle",
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "STAGE-ID"
          },
          "idLaunchVehicle": {
            "description": "Identifier of the launch vehicle record for this stage.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHVEHICLE-ID"
          },
          "idEngine": {
            "description": "Identifier of the Engine record for this stage.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "stageNumber": {
            "format": "int32",
            "description": "The stage number of this launch stage.",
            "type": "integer",
            "example": 2
          },
          "type": {
            "description": "Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Electrostatic Ion"
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures this launch stage.",
            "maxLength": 36,
            "type": "string",
            "example": "5feed5d7-d131-57e5-a3fd-acc173bca736"
          },
          "numEngines": {
            "format": "int32",
            "description": "The number of the specified engines on this launch stage.",
            "type": "integer",
            "example": 1
          },
          "length": {
            "format": "double",
            "description": "Stage length in meters.",
            "type": "number",
            "example": 25.13
          },
          "diameter": {
            "format": "double",
            "description": "Stage maximum external diameter in meters.",
            "type": "number",
            "example": 3.95
          },
          "mass": {
            "format": "double",
            "description": "Stage gross mass in kg.",
            "type": "number",
            "example": 9956.1
          },
          "vernier": {
            "description": "Engine vernier or additional engine type.",
            "maxLength": 32,
            "type": "string",
            "example": "vernier"
          },
          "numVernier": {
            "format": "int32",
            "description": "Number of vernier or additional engines.",
            "type": "integer",
            "example": 3
          },
          "mainEngineThrustSeaLevel": {
            "format": "double",
            "description": "Thrust of the stage main engine at sea level in kN.",
            "type": "number",
            "example": 733.4
          },
          "mainEngineThrustVacuum": {
            "format": "double",
            "description": "Thrust of the stage main engine in a vacuum in kN.",
            "type": "number",
            "example": 733.4
          },
          "thrustSeaLevel": {
            "format": "double",
            "description": "Total thrust of the stage at sea level in kN.",
            "type": "number",
            "example": 733.4
          },
          "thrustVacuum": {
            "format": "double",
            "description": "Total thrust of the stage in a vacuum in kN.",
            "type": "number",
            "example": 733.4
          },
          "burnTime": {
            "format": "double",
            "description": "Total burn time of the stage engines in seconds.",
            "type": "number",
            "example": 256.3
          },
          "numBurns": {
            "format": "int32",
            "description": "Number of burns for the stage engines.",
            "type": "integer",
            "example": 1
          },
          "vernierBurnTime": {
            "format": "double",
            "description": "Total burn time of the vernier or additional stage engines in seconds.",
            "type": "number",
            "example": 1.1
          },
          "vernierNumBurns": {
            "format": "int32",
            "description": "Total number of burns of the vernier or additional stage engines.",
            "type": "integer",
            "example": 4
          },
          "vernierThrustSeaLevel": {
            "format": "double",
            "description": "Total thrust of one of the vernier or additional engines at sea level in kN.",
            "type": "number",
            "example": 4.1
          },
          "vernierThrustVacuum": {
            "format": "double",
            "description": "Total thrust of one of the vernier or additional engines in a vacuum in kN.",
            "type": "number",
            "example": 3.2
          },
          "numStageElements": {
            "format": "int32",
            "description": "Number of launch stage elements used in this stage.",
            "type": "integer",
            "example": 2
          },
          "reusable": {
            "description": "Boolean indicating if this launch stage is reusable.",
            "type": "boolean",
            "example": true
          },
          "restartable": {
            "description": "Boolean indicating if this launch stage can be restarted.",
            "type": "boolean",
            "example": true
          },
          "controlThruster1": {
            "description": "Control thruster 1 type.",
            "maxLength": 64,
            "type": "string",
            "example": "controlThruster1"
          },
          "numControlThruster1": {
            "format": "int32",
            "description": "Number of type control thruster 1.",
            "type": "integer",
            "example": 1
          },
          "controlThruster2": {
            "description": "Control thruster 2 type.",
            "maxLength": 64,
            "type": "string",
            "example": "controlThruster2"
          },
          "numControlThruster2": {
            "format": "int32",
            "description": "Number of type control thruster 2.",
            "type": "integer",
            "example": 1
          },
          "photoURLs": {
            "description": "Array of URLs of photos of the stage.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "photoURL"
            ]
          },
          "notes": {
            "description": "Description/notes of the stage.",
            "maxLength": 256,
            "type": "string",
            "example": "Sample Notes"
          },
          "avionicsNotes": {
            "description": "Description/notes of the stage avionics.",
            "maxLength": 256,
            "type": "string",
            "example": "Sample Notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Stage_Full": {
        "description": "Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.",
        "required": [
          "idLaunchVehicle",
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "STAGE-ID"
          },
          "idLaunchVehicle": {
            "description": "Identifier of the launch vehicle record for this stage.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHVEHICLE-ID"
          },
          "idEngine": {
            "description": "Identifier of the Engine record for this stage.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "stageNumber": {
            "format": "int32",
            "description": "The stage number of this launch stage.",
            "type": "integer",
            "example": 2
          },
          "type": {
            "description": "Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Electrostatic Ion"
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures this launch stage.",
            "maxLength": 36,
            "type": "string",
            "example": "5feed5d7-d131-57e5-a3fd-acc173bca736"
          },
          "numEngines": {
            "format": "int32",
            "description": "The number of the specified engines on this launch stage.",
            "type": "integer",
            "example": 1
          },
          "length": {
            "format": "double",
            "description": "Stage length in meters.",
            "type": "number",
            "example": 25.13
          },
          "diameter": {
            "format": "double",
            "description": "Stage maximum external diameter in meters.",
            "type": "number",
            "example": 3.95
          },
          "mass": {
            "format": "double",
            "description": "Stage gross mass in kg.",
            "type": "number",
            "example": 9956.1
          },
          "vernier": {
            "description": "Engine vernier or additional engine type.",
            "maxLength": 32,
            "type": "string",
            "example": "vernier"
          },
          "numVernier": {
            "format": "int32",
            "description": "Number of vernier or additional engines.",
            "type": "integer",
            "example": 3
          },
          "mainEngineThrustSeaLevel": {
            "format": "double",
            "description": "Thrust of the stage main engine at sea level in kN.",
            "type": "number",
            "example": 733.4
          },
          "mainEngineThrustVacuum": {
            "format": "double",
            "description": "Thrust of the stage main engine in a vacuum in kN.",
            "type": "number",
            "example": 733.4
          },
          "thrustSeaLevel": {
            "format": "double",
            "description": "Total thrust of the stage at sea level in kN.",
            "type": "number",
            "example": 733.4
          },
          "thrustVacuum": {
            "format": "double",
            "description": "Total thrust of the stage in a vacuum in kN.",
            "type": "number",
            "example": 733.4
          },
          "burnTime": {
            "format": "double",
            "description": "Total burn time of the stage engines in seconds.",
            "type": "number",
            "example": 256.3
          },
          "numBurns": {
            "format": "int32",
            "description": "Number of burns for the stage engines.",
            "type": "integer",
            "example": 1
          },
          "vernierBurnTime": {
            "format": "double",
            "description": "Total burn time of the vernier or additional stage engines in seconds.",
            "type": "number",
            "example": 1.1
          },
          "vernierNumBurns": {
            "format": "int32",
            "description": "Total number of burns of the vernier or additional stage engines.",
            "type": "integer",
            "example": 4
          },
          "vernierThrustSeaLevel": {
            "format": "double",
            "description": "Total thrust of one of the vernier or additional engines at sea level in kN.",
            "type": "number",
            "example": 4.1
          },
          "vernierThrustVacuum": {
            "format": "double",
            "description": "Total thrust of one of the vernier or additional engines in a vacuum in kN.",
            "type": "number",
            "example": 3.2
          },
          "numStageElements": {
            "format": "int32",
            "description": "Number of launch stage elements used in this stage.",
            "type": "integer",
            "example": 2
          },
          "reusable": {
            "description": "Boolean indicating if this launch stage is reusable.",
            "type": "boolean",
            "example": true
          },
          "restartable": {
            "description": "Boolean indicating if this launch stage can be restarted.",
            "type": "boolean",
            "example": true
          },
          "controlThruster1": {
            "description": "Control thruster 1 type.",
            "maxLength": 64,
            "type": "string",
            "example": "controlThruster1"
          },
          "numControlThruster1": {
            "format": "int32",
            "description": "Number of type control thruster 1.",
            "type": "integer",
            "example": 1
          },
          "controlThruster2": {
            "description": "Control thruster 2 type.",
            "maxLength": 64,
            "type": "string",
            "example": "controlThruster2"
          },
          "numControlThruster2": {
            "format": "int32",
            "description": "Number of type control thruster 2.",
            "type": "integer",
            "example": 1
          },
          "photoURLs": {
            "description": "Array of URLs of photos of the stage.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "photoURL"
            ]
          },
          "notes": {
            "description": "Description/notes of the stage.",
            "maxLength": 256,
            "type": "string",
            "example": "Sample Notes"
          },
          "avionicsNotes": {
            "description": "Description/notes of the stage avionics.",
            "maxLength": 256,
            "type": "string",
            "example": "Sample Notes"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engine": {
            "$ref": "#/components/schemas/Engine_Full"
          }
        }
      },
      "Stage_Ingest": {
        "description": "Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.",
        "required": [
          "idLaunchVehicle",
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "STAGE-ID"
          },
          "idLaunchVehicle": {
            "description": "Identifier of the launch vehicle record for this stage.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCHVEHICLE-ID"
          },
          "idEngine": {
            "description": "Identifier of the Engine record for this stage.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "stageNumber": {
            "format": "int32",
            "description": "The stage number of this launch stage.",
            "type": "integer",
            "example": 2
          },
          "type": {
            "description": "Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Electrostatic Ion"
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures this launch stage.",
            "maxLength": 36,
            "type": "string",
            "example": "5feed5d7-d131-57e5-a3fd-acc173bca736"
          },
          "numEngines": {
            "format": "int32",
            "description": "The number of the specified engines on this launch stage.",
            "type": "integer",
            "example": 1
          },
          "length": {
            "format": "double",
            "description": "Stage length in meters.",
            "type": "number",
            "example": 25.13
          },
          "diameter": {
            "format": "double",
            "description": "Stage maximum external diameter in meters.",
            "type": "number",
            "example": 3.95
          },
          "mass": {
            "format": "double",
            "description": "Stage gross mass in kg.",
            "type": "number",
            "example": 9956.1
          },
          "vernier": {
            "description": "Engine vernier or additional engine type.",
            "maxLength": 32,
            "type": "string",
            "example": "vernier"
          },
          "numVernier": {
            "format": "int32",
            "description": "Number of vernier or additional engines.",
            "type": "integer",
            "example": 3
          },
          "mainEngineThrustSeaLevel": {
            "format": "double",
            "description": "Thrust of the stage main engine at sea level in kN.",
            "type": "number",
            "example": 733.4
          },
          "mainEngineThrustVacuum": {
            "format": "double",
            "description": "Thrust of the stage main engine in a vacuum in kN.",
            "type": "number",
            "example": 733.4
          },
          "thrustSeaLevel": {
            "format": "double",
            "description": "Total thrust of the stage at sea level in kN.",
            "type": "number",
            "example": 733.4
          },
          "thrustVacuum": {
            "format": "double",
            "description": "Total thrust of the stage in a vacuum in kN.",
            "type": "number",
            "example": 733.4
          },
          "burnTime": {
            "format": "double",
            "description": "Total burn time of the stage engines in seconds.",
            "type": "number",
            "example": 256.3
          },
          "numBurns": {
            "format": "int32",
            "description": "Number of burns for the stage engines.",
            "type": "integer",
            "example": 1
          },
          "vernierBurnTime": {
            "format": "double",
            "description": "Total burn time of the vernier or additional stage engines in seconds.",
            "type": "number",
            "example": 1.1
          },
          "vernierNumBurns": {
            "format": "int32",
            "description": "Total number of burns of the vernier or additional stage engines.",
            "type": "integer",
            "example": 4
          },
          "vernierThrustSeaLevel": {
            "format": "double",
            "description": "Total thrust of one of the vernier or additional engines at sea level in kN.",
            "type": "number",
            "example": 4.1
          },
          "vernierThrustVacuum": {
            "format": "double",
            "description": "Total thrust of one of the vernier or additional engines in a vacuum in kN.",
            "type": "number",
            "example": 3.2
          },
          "numStageElements": {
            "format": "int32",
            "description": "Number of launch stage elements used in this stage.",
            "type": "integer",
            "example": 2
          },
          "reusable": {
            "description": "Boolean indicating if this launch stage is reusable.",
            "type": "boolean",
            "example": true
          },
          "restartable": {
            "description": "Boolean indicating if this launch stage can be restarted.",
            "type": "boolean",
            "example": true
          },
          "controlThruster1": {
            "description": "Control thruster 1 type.",
            "maxLength": 64,
            "type": "string",
            "example": "controlThruster1"
          },
          "numControlThruster1": {
            "format": "int32",
            "description": "Number of type control thruster 1.",
            "type": "integer",
            "example": 1
          },
          "controlThruster2": {
            "description": "Control thruster 2 type.",
            "maxLength": 64,
            "type": "string",
            "example": "controlThruster2"
          },
          "numControlThruster2": {
            "format": "int32",
            "description": "Number of type control thruster 2.",
            "type": "integer",
            "example": 1
          },
          "photoURLs": {
            "description": "Array of URLs of photos of the stage.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "photoURL"
            ]
          },
          "notes": {
            "description": "Description/notes of the stage.",
            "maxLength": 256,
            "type": "string",
            "example": "Sample Notes"
          },
          "avionicsNotes": {
            "description": "Description/notes of the stage avionics.",
            "maxLength": 256,
            "type": "string",
            "example": "Sample Notes"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      }
    }
  }
}