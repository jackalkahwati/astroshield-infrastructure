{
  "openapi": "3.0.3",
  "info": {
    "title": "Unified Data Library Services API",
    "version": "1.30.0 Daiquiri",
    "description": "Unified Data Library Services OpenAPI v3 documentation.",
    "termsOfService": "storefront/storefront/appConfig/useragreement.html",
    "contact": {
      "name": "Sage Andorka, Deputy, Cross-Mission Ground",
      "email": "unifieddatalibrary@bluestaq.com"
    }
  },
  "tags": [
    {
      "name": "Weather",
      "description": "These services provide for posting and querying terrestrial weather conditions over a target area or region and raw sensor data used to produce condition reports. Weather Reports describe current weather conditions over a target point or region to include general temperatures, pressures, and moisture accumulation, as well as navigational considerations such as altimeter settings, visibility, wind speeds, and cloud heights etc. Weather Data contains algorithmic parameters and dynamic, raw measurements collected by individual sensors such as signal power, noise level, etc., which are generally processed across multiple sensors to produce weather reports."
    }
  ],
  "externalDocs": {
    "url": "udl/openapi.json"
  },
  "servers": [
    {
      "url": "https://unifieddatalibrary.com"
    }
  ],
  "paths": {
    "/filedrop/udl-weatherdata": {
      "post": {
        "tags": [
          "Weather"
        ],
        "description": "Service operation to take a list of WeatherData as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_weatherdata_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WeatherData_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-weatherreport": {
      "post": {
        "tags": [
          "Weather"
        ],
        "description": "Service operation to take a list of WeatherReports as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_weatherreport_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WeatherReport_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/weatherdata": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Weather"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherData_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single WeatherData as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Weather"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WeatherData_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/weatherdata/{id}": {
      "get": {
        "description": "Service operation to get a single WeatherData by its unique ID passed as a path parameter.",
        "tags": [
          "Weather"
        ],
        "parameters": [
          {
            "description": "The ID of the WeatherData to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeatherData_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/weatherdata/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Weather"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/weatherdata/createBulk": {
      "post": {
        "description": "Service operation to take multiple WeatherData as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Weather"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WeatherData_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/weatherdata/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Weather"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherData_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/weatherdata/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Weather"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/weatherdata/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Weather"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/weatherdata/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Weather"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/weatherdata/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Weather"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherData_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/weatherreport": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Weather"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherReport_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single WeatherReport as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Weather"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WeatherReport_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/weatherreport/{id}": {
      "get": {
        "description": "Service operation to get a single WeatherReport by its unique ID passed as a path parameter.",
        "tags": [
          "Weather"
        ],
        "parameters": [
          {
            "description": "The ID of the WeatherReport to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeatherReport_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/weatherreport/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Weather"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/weatherreport/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Weather"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherReport_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/weatherreport/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Weather"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/weatherreport/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Weather"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/weatherreport/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Weather"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/weatherreport/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Weather"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherReport_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "WeatherData_Abridged": {
        "description": "These services provide for posting and querying Weather Data. Weather Data integrates dynamic data measured by Doppler/CG such as signal power and noise levels, to produce useful weather information.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "WEATHER-DATA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idSensor": {
            "description": "Unique identifier of the sensor making the weather measurement.",
            "maxLength": 36,
            "type": "string",
            "example": "0129f577-e04c-441e-65ca-0a04a750bed9"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "obTime": {
            "format": "date-time",
            "description": "Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "sigPwrs": {
            "description": "Array of signal power(s) measured by the sensor, in decibels. Users should consult the data provider for information on the signal powers array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              116.5,
              121.6
            ]
          },
          "noiseLvls": {
            "description": "Array of noise level(s) measured by radar, in decibels. Users should consult the data provider for information on the noise levels array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              58.2,
              58.3
            ]
          },
          "specWidths": {
            "description": "Array of width(s) of the distribution in Doppler velocity measured by radar, in meters/second. Spectral width depends on the particle size distribution, the wind shear across the radar beam, and turbulence. Users should consult the data provider for information on the spectral widths array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.3,
              0.6
            ]
          },
          "firstGuessAvgs": {
            "description": "Array of average maximum number(s) of consecutive instances in which the same first guess velocity is used in radar data processing to estimate wind speed. Users should consult the data provider for information on the first guess averages array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              16,
              1
            ]
          },
          "qcValue": {
            "format": "int32",
            "description": "Quality control flag value, as defined by the data provider.",
            "type": "integer",
            "example": 4
          },
          "fileCreation": {
            "format": "date-time",
            "description": "Datetime the system files were created.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "termAlt": {
            "format": "double",
            "description": "Last altitude with recorded measurements in this record, in meters.",
            "type": "number",
            "example": 19505.1
          },
          "avgTxPwr": {
            "format": "double",
            "description": "Average transmitted power of the radar, in kilowatts.",
            "type": "number",
            "example": 20.23
          },
          "avgRefPwr": {
            "format": "double",
            "description": "Average power of the reflected signal received by the radar, in Watts.",
            "type": "number",
            "example": 714.9
          },
          "sectorNum": {
            "format": "int32",
            "description": "Number of sectors within the radar coverage area, each containing a number of antennas.",
            "type": "integer",
            "example": 20
          },
          "numElements": {
            "format": "int32",
            "description": "Number of antennas across all sectors within the radar coverage area.",
            "type": "integer",
            "example": 640
          },
          "tdAvgSampleNums": {
            "description": "Array of the number(s) of radar samples used in time domain averaging for radar data processing. Time domain averaging improves the quality of the measured signal by reducing random noise and enhancing the signal-to-noise ratio. Users should consult the data provider for information on the time domain sample numbers array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              32,
              30
            ]
          },
          "checksum": {
            "format": "int32",
            "description": "Checksum value for the data.",
            "type": "integer",
            "example": 133
          },
          "coIntegs": {
            "description": "Array of the number(s) of measurements used in coherent integrations used for radar data processing. Users should consult the data provider for information on the coherent integrations array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              4,
              3
            ]
          },
          "specAvgs": {
            "description": "Array of the number(s) of spectral averages used in radar data processing. Users should consult the data provider for information on the spectral averages array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              4,
              3
            ]
          },
          "interpulsePeriods": {
            "description": "Array of the elapsed time(s) from the beginning of one pulse to the beginning of the next pulse for a radar beam, in microseconds. Users should consult the data provider for information on the interpulse periods array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1000.3,
              1000.2
            ]
          },
          "doppVels": {
            "description": "Array of full scale Nyquist Doppler velocities measured by radar, in meters per second. Nyquist velocity refers to the maximum velocity magnitude that the radar system can unambiguously detect. Doppler velocities with absolute values exceeding the Nyquist threshold suffer from aliasing at the time of collection. Users should consult the data provider for information on the doppler velocities array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              44.4,
              467.3
            ]
          },
          "consRecs": {
            "description": "Array of the number(s) of records in consensus for a radar beam. Users should consult the data provider for information on the consensus records array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              5,
              2
            ]
          },
          "snrs": {
            "description": "Array of signal to noise ratio(s) for a radar beam, in decibels. Users should consult the data provider for information on the signal to noise ratios array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              14.5,
              -16.2
            ]
          },
          "sigStrength": {
            "format": "double",
            "description": "Signal strength of the electromagnetic energy received due to a lightning event, in kiloamps.",
            "type": "number",
            "example": 163.7
          },
          "semiMajorAxis": {
            "format": "double",
            "description": "Semi-major axis of the 50% positional confidence ellipse, in kilometers.",
            "type": "number",
            "example": 3.4
          },
          "semiMinorAxis": {
            "format": "double",
            "description": "Semi-minor axis of the 50% positional confidence ellipse, in kilometers.",
            "type": "number",
            "example": 0.3
          },
          "angleOrientation": {
            "format": "double",
            "description": "Angle of orientation of the 50% positional confidence ellipse, in degrees clockwise from true north.",
            "type": "number",
            "example": 75.7
          },
          "lightEventNum": {
            "format": "int32",
            "description": "Number of sensors used in the lightning event location solution.",
            "type": "integer",
            "example": 9
          },
          "lightDetSensors": {
            "description": "Array of sensor(s) that participated in the lightning event location determination.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              11,
              28,
              190
            ]
          },
          "posConfidence": {
            "format": "double",
            "description": "The positional confidence of the calculated lightning event location using the chi-square statistical method.",
            "type": "number",
            "example": 0.1
          },
          "srcTyps": {
            "description": "Array of UDL record types (SENSOR, WEATHERREPORT) that are related to this WeatherData record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SENSOR",
              "WEATHERREPORT"
            ]
          },
          "srcIds": {
            "description": "Array of UUID(s) of the UDL data record(s) that are related to this WeatherData record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "1b23ba93-0957-4654-b5ca-8c3703f3ec57",
              "32944ee4-0437-4d94-95ce-2f2823ffa001"
            ]
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "WeatherData_Full": {
        "description": "These services provide for posting and querying Weather Data. Weather Data integrates dynamic data measured by Doppler/CG such as signal power and noise levels, to produce useful weather information.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "WEATHER-DATA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idSensor": {
            "description": "Unique identifier of the sensor making the weather measurement.",
            "maxLength": 36,
            "type": "string",
            "example": "0129f577-e04c-441e-65ca-0a04a750bed9"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "obTime": {
            "format": "date-time",
            "description": "Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "sigPwrs": {
            "description": "Array of signal power(s) measured by the sensor, in decibels. Users should consult the data provider for information on the signal powers array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              116.5,
              121.6
            ]
          },
          "noiseLvls": {
            "description": "Array of noise level(s) measured by radar, in decibels. Users should consult the data provider for information on the noise levels array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              58.2,
              58.3
            ]
          },
          "specWidths": {
            "description": "Array of width(s) of the distribution in Doppler velocity measured by radar, in meters/second. Spectral width depends on the particle size distribution, the wind shear across the radar beam, and turbulence. Users should consult the data provider for information on the spectral widths array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.3,
              0.6
            ]
          },
          "firstGuessAvgs": {
            "description": "Array of average maximum number(s) of consecutive instances in which the same first guess velocity is used in radar data processing to estimate wind speed. Users should consult the data provider for information on the first guess averages array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              16,
              1
            ]
          },
          "qcValue": {
            "format": "int32",
            "description": "Quality control flag value, as defined by the data provider.",
            "type": "integer",
            "example": 4
          },
          "fileCreation": {
            "format": "date-time",
            "description": "Datetime the system files were created.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "termAlt": {
            "format": "double",
            "description": "Last altitude with recorded measurements in this record, in meters.",
            "type": "number",
            "example": 19505.1
          },
          "avgTxPwr": {
            "format": "double",
            "description": "Average transmitted power of the radar, in kilowatts.",
            "type": "number",
            "example": 20.23
          },
          "avgRefPwr": {
            "format": "double",
            "description": "Average power of the reflected signal received by the radar, in Watts.",
            "type": "number",
            "example": 714.9
          },
          "sectorNum": {
            "format": "int32",
            "description": "Number of sectors within the radar coverage area, each containing a number of antennas.",
            "type": "integer",
            "example": 20
          },
          "numElements": {
            "format": "int32",
            "description": "Number of antennas across all sectors within the radar coverage area.",
            "type": "integer",
            "example": 640
          },
          "tdAvgSampleNums": {
            "description": "Array of the number(s) of radar samples used in time domain averaging for radar data processing. Time domain averaging improves the quality of the measured signal by reducing random noise and enhancing the signal-to-noise ratio. Users should consult the data provider for information on the time domain sample numbers array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              32,
              30
            ]
          },
          "checksum": {
            "format": "int32",
            "description": "Checksum value for the data.",
            "type": "integer",
            "example": 133
          },
          "coIntegs": {
            "description": "Array of the number(s) of measurements used in coherent integrations used for radar data processing. Users should consult the data provider for information on the coherent integrations array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              4,
              3
            ]
          },
          "specAvgs": {
            "description": "Array of the number(s) of spectral averages used in radar data processing. Users should consult the data provider for information on the spectral averages array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              4,
              3
            ]
          },
          "interpulsePeriods": {
            "description": "Array of the elapsed time(s) from the beginning of one pulse to the beginning of the next pulse for a radar beam, in microseconds. Users should consult the data provider for information on the interpulse periods array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1000.3,
              1000.2
            ]
          },
          "doppVels": {
            "description": "Array of full scale Nyquist Doppler velocities measured by radar, in meters per second. Nyquist velocity refers to the maximum velocity magnitude that the radar system can unambiguously detect. Doppler velocities with absolute values exceeding the Nyquist threshold suffer from aliasing at the time of collection. Users should consult the data provider for information on the doppler velocities array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              44.4,
              467.3
            ]
          },
          "consRecs": {
            "description": "Array of the number(s) of records in consensus for a radar beam. Users should consult the data provider for information on the consensus records array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              5,
              2
            ]
          },
          "snrs": {
            "description": "Array of signal to noise ratio(s) for a radar beam, in decibels. Users should consult the data provider for information on the signal to noise ratios array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              14.5,
              -16.2
            ]
          },
          "sigStrength": {
            "format": "double",
            "description": "Signal strength of the electromagnetic energy received due to a lightning event, in kiloamps.",
            "type": "number",
            "example": 163.7
          },
          "semiMajorAxis": {
            "format": "double",
            "description": "Semi-major axis of the 50% positional confidence ellipse, in kilometers.",
            "type": "number",
            "example": 3.4
          },
          "semiMinorAxis": {
            "format": "double",
            "description": "Semi-minor axis of the 50% positional confidence ellipse, in kilometers.",
            "type": "number",
            "example": 0.3
          },
          "angleOrientation": {
            "format": "double",
            "description": "Angle of orientation of the 50% positional confidence ellipse, in degrees clockwise from true north.",
            "type": "number",
            "example": 75.7
          },
          "lightEventNum": {
            "format": "int32",
            "description": "Number of sensors used in the lightning event location solution.",
            "type": "integer",
            "example": 9
          },
          "lightDetSensors": {
            "description": "Array of sensor(s) that participated in the lightning event location determination.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              11,
              28,
              190
            ]
          },
          "posConfidence": {
            "format": "double",
            "description": "The positional confidence of the calculated lightning event location using the chi-square statistical method.",
            "type": "number",
            "example": 0.1
          },
          "srcTyps": {
            "description": "Array of UDL record types (SENSOR, WEATHERREPORT) that are related to this WeatherData record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SENSOR",
              "WEATHERREPORT"
            ]
          },
          "srcIds": {
            "description": "Array of UUID(s) of the UDL data record(s) that are related to this WeatherData record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "1b23ba93-0957-4654-b5ca-8c3703f3ec57",
              "32944ee4-0437-4d94-95ce-2f2823ffa001"
            ]
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "WeatherData_Ingest": {
        "description": "These services provide for posting and querying Weather Data. Weather Data integrates dynamic data measured by Doppler/CG such as signal power and noise levels, to produce useful weather information.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "WEATHER-DATA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idSensor": {
            "description": "Unique identifier of the sensor making the weather measurement.",
            "maxLength": 36,
            "type": "string",
            "example": "0129f577-e04c-441e-65ca-0a04a750bed9"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "obTime": {
            "format": "date-time",
            "description": "Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "sigPwrs": {
            "description": "Array of signal power(s) measured by the sensor, in decibels. Users should consult the data provider for information on the signal powers array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              116.5,
              121.6
            ]
          },
          "noiseLvls": {
            "description": "Array of noise level(s) measured by radar, in decibels. Users should consult the data provider for information on the noise levels array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              58.2,
              58.3
            ]
          },
          "specWidths": {
            "description": "Array of width(s) of the distribution in Doppler velocity measured by radar, in meters/second. Spectral width depends on the particle size distribution, the wind shear across the radar beam, and turbulence. Users should consult the data provider for information on the spectral widths array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.3,
              0.6
            ]
          },
          "firstGuessAvgs": {
            "description": "Array of average maximum number(s) of consecutive instances in which the same first guess velocity is used in radar data processing to estimate wind speed. Users should consult the data provider for information on the first guess averages array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              16,
              1
            ]
          },
          "qcValue": {
            "format": "int32",
            "description": "Quality control flag value, as defined by the data provider.",
            "type": "integer",
            "example": 4
          },
          "fileCreation": {
            "format": "date-time",
            "description": "Datetime the system files were created.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "termAlt": {
            "format": "double",
            "description": "Last altitude with recorded measurements in this record, in meters.",
            "type": "number",
            "example": 19505.1
          },
          "avgTxPwr": {
            "format": "double",
            "description": "Average transmitted power of the radar, in kilowatts.",
            "type": "number",
            "example": 20.23
          },
          "avgRefPwr": {
            "format": "double",
            "description": "Average power of the reflected signal received by the radar, in Watts.",
            "type": "number",
            "example": 714.9
          },
          "sectorNum": {
            "format": "int32",
            "description": "Number of sectors within the radar coverage area, each containing a number of antennas.",
            "type": "integer",
            "example": 20
          },
          "numElements": {
            "format": "int32",
            "description": "Number of antennas across all sectors within the radar coverage area.",
            "type": "integer",
            "example": 640
          },
          "tdAvgSampleNums": {
            "description": "Array of the number(s) of radar samples used in time domain averaging for radar data processing. Time domain averaging improves the quality of the measured signal by reducing random noise and enhancing the signal-to-noise ratio. Users should consult the data provider for information on the time domain sample numbers array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              32,
              30
            ]
          },
          "checksum": {
            "format": "int32",
            "description": "Checksum value for the data.",
            "type": "integer",
            "example": 133
          },
          "coIntegs": {
            "description": "Array of the number(s) of measurements used in coherent integrations used for radar data processing. Users should consult the data provider for information on the coherent integrations array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              4,
              3
            ]
          },
          "specAvgs": {
            "description": "Array of the number(s) of spectral averages used in radar data processing. Users should consult the data provider for information on the spectral averages array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              4,
              3
            ]
          },
          "interpulsePeriods": {
            "description": "Array of the elapsed time(s) from the beginning of one pulse to the beginning of the next pulse for a radar beam, in microseconds. Users should consult the data provider for information on the interpulse periods array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1000.3,
              1000.2
            ]
          },
          "doppVels": {
            "description": "Array of full scale Nyquist Doppler velocities measured by radar, in meters per second. Nyquist velocity refers to the maximum velocity magnitude that the radar system can unambiguously detect. Doppler velocities with absolute values exceeding the Nyquist threshold suffer from aliasing at the time of collection. Users should consult the data provider for information on the doppler velocities array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              44.4,
              467.3
            ]
          },
          "consRecs": {
            "description": "Array of the number(s) of records in consensus for a radar beam. Users should consult the data provider for information on the consensus records array structure.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              5,
              2
            ]
          },
          "snrs": {
            "description": "Array of signal to noise ratio(s) for a radar beam, in decibels. Users should consult the data provider for information on the signal to noise ratios array structure.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              14.5,
              -16.2
            ]
          },
          "sigStrength": {
            "format": "double",
            "description": "Signal strength of the electromagnetic energy received due to a lightning event, in kiloamps.",
            "type": "number",
            "example": 163.7
          },
          "semiMajorAxis": {
            "format": "double",
            "description": "Semi-major axis of the 50% positional confidence ellipse, in kilometers.",
            "type": "number",
            "example": 3.4
          },
          "semiMinorAxis": {
            "format": "double",
            "description": "Semi-minor axis of the 50% positional confidence ellipse, in kilometers.",
            "type": "number",
            "example": 0.3
          },
          "angleOrientation": {
            "format": "double",
            "description": "Angle of orientation of the 50% positional confidence ellipse, in degrees clockwise from true north.",
            "type": "number",
            "example": 75.7
          },
          "lightEventNum": {
            "format": "int32",
            "description": "Number of sensors used in the lightning event location solution.",
            "type": "integer",
            "example": 9
          },
          "lightDetSensors": {
            "description": "Array of sensor(s) that participated in the lightning event location determination.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              11,
              28,
              190
            ]
          },
          "posConfidence": {
            "format": "double",
            "description": "The positional confidence of the calculated lightning event location using the chi-square statistical method.",
            "type": "number",
            "example": 0.1
          },
          "srcTyps": {
            "description": "Array of UDL record types (SENSOR, WEATHERREPORT) that are related to this WeatherData record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SENSOR",
              "WEATHERREPORT"
            ]
          },
          "srcIds": {
            "description": "Array of UUID(s) of the UDL data record(s) that are related to this WeatherData record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "1b23ba93-0957-4654-b5ca-8c3703f3ec57",
              "32944ee4-0437-4d94-95ce-2f2823ffa001"
            ]
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "WeatherReport_Abridged": {
        "description": "These services provide for posting and querying Weather Over Target information. The information contained within describes the current weather conditions over a target area or region to include navigational considerations such as altimeter settings, visibility, cloud heights etc.",
        "required": [
          "classificationMarking",
          "reportType",
          "obTime",
          "lat",
          "lon",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "WEATHER-REPORT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idSensor": {
            "description": "Unique identifier of the sensor making the weather measurement.",
            "maxLength": 36,
            "type": "string",
            "example": "0129f577-e04c-441e-65ca-0a04a750bed9"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "weatherId": {
            "description": "Identifier of the weather over target, which should remain the same on subsequent Weather Over Target records.",
            "maxLength": 128,
            "type": "string",
            "example": "WEATHER-ID"
          },
          "idGroundImagery": {
            "description": "Identifier of the ground imagery associated for this weather over target report.",
            "maxLength": 36,
            "type": "string",
            "example": "GROUND-IMAGERY-ID"
          },
          "idSite": {
            "description": "Identifier of the Site that is associated with this weather report.",
            "maxLength": 36,
            "type": "string",
            "example": "AIRFIELD-ID"
          },
          "idAirfield": {
            "description": "Identifier of the Airfield associated with this weather report.",
            "maxLength": 36,
            "type": "string",
            "example": "8fb38d6d-a3de-45dd-8974-4e3ed73e9449"
          },
          "icao": {
            "description": "The International Civil Aviation Organization (ICAO) code of the airfield associated with this weather report.",
            "maxLength": 4,
            "type": "string",
            "example": "KAFF"
          },
          "externalId": {
            "description": "Optional observation or forecast ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "GDSSMB022408301601304517"
          },
          "externalLocationId": {
            "description": "Optional location ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "TMDS060AD4OG03CC"
          },
          "reportType": {
            "description": "Identifies the type of weather report (e.g. OBSERVATION, FORECAST, etc.).",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "example": "FORECAST"
          },
          "obTime": {
            "format": "date-time",
            "description": "Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "forecastStartTime": {
            "format": "date-time",
            "description": "Valid start time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.",
            "type": "string",
            "example": "2024-01-01T16:00:00.123Z"
          },
          "forecastEndTime": {
            "format": "date-time",
            "description": "Valid end time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.",
            "type": "string",
            "example": "2024-01-01T18:00:00.123Z"
          },
          "lat": {
            "format": "double",
            "description": "The central WGS-84 latitude of the weather report, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 56.12
          },
          "lon": {
            "format": "double",
            "description": "The central WGS-84 longitude of the weather report, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": -156.6
          },
          "alt": {
            "format": "double",
            "description": "Point height above ellipsoid (WGS-84), in meters.",
            "type": "number",
            "example": 123.12
          },
          "geoPotentialAlt": {
            "format": "double",
            "description": "Altitude of a pressure surface in the atmosphere above mean sea level, in meters.",
            "type": "number",
            "example": 1000
          },
          "dataLevel": {
            "description": "Specific pressures or heights where measurements are taken, labeled as either MANDATORY or SIGNIFICANT levels. Mandatory levels are at particular pressures at geopotential heights. Significant levels are at particular geometric heights.",
            "maxLength": 16,
            "type": "string",
            "example": "MANDATORY"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "ST_Polygon"
          },
          "andims": {
            "format": "int16",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 2
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 4326
          },
          "windSpd": {
            "format": "double",
            "description": "Expresses the speed of the wind in meters/second.",
            "type": "number",
            "example": 1.23
          },
          "windSpdAvg": {
            "format": "double",
            "description": "Average wind speed over a 1 minute period, in meters/second.",
            "type": "number",
            "example": 12.1
          },
          "windGust": {
            "format": "double",
            "description": "Expresses the max gust speed of the wind, in meters/second.",
            "type": "number",
            "example": 10.23
          },
          "windGust10": {
            "format": "double",
            "description": "Expresses the max gust speed of the wind recorded in a 10 minute period, in meters/second.",
            "type": "number",
            "example": 13.2
          },
          "vshear": {
            "format": "double",
            "description": "The change in wind speed between two different altitudes divided by the vertical distance between them, in units of 1/sec.",
            "type": "number",
            "example": 3.8
          },
          "hshear": {
            "format": "double",
            "description": "The change in wind speed between two different lateral positions at a given altitude divided by the horizontal distance between them, in units of 1/sec.",
            "type": "number",
            "example": 3.8
          },
          "radVel": {
            "format": "double",
            "description": "Average radial velocity of wind as measured by radar with multi-beam configurations. Radial velocity is the component of wind velocity moving directly toward or away from a sensor's radar beam, in meters per second. Values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar).",
            "type": "number",
            "example": -0.04
          },
          "radVelBeam1": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 1, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": 4.4
          },
          "radVelBeam2": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 2, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": -0.2
          },
          "radVelBeam3": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 3, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": -0.2
          },
          "radVelBeam4": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 4, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": 11.4
          },
          "radVelBeam5": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 5, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": 4.1
          },
          "windDir": {
            "format": "double",
            "description": "Direction the wind is blowing, in degrees clockwise from true north.",
            "type": "number",
            "example": 75.1234
          },
          "windDirAvg": {
            "format": "double",
            "description": "Average wind direction over a 1 minute period, in degrees clockwise from true north.",
            "type": "number",
            "example": 57.1
          },
          "windDirPeak": {
            "format": "double",
            "description": "Wind direction corresponding to the peak wind speed during a 1 minute period, in degrees clockwise from true north.",
            "type": "number",
            "example": 78.4
          },
          "windDirPeak10": {
            "format": "double",
            "description": "Wind direction corresponding to the peak wind speed during a 10 minute period, in degrees clockwise from true north.",
            "type": "number",
            "example": 44.5
          },
          "windChill": {
            "format": "double",
            "description": "The perceived temperature in degrees C.",
            "type": "number",
            "example": 15.6
          },
          "dirDev": {
            "format": "double",
            "description": "The difference in wind direction recorded over a period of time, in degrees.",
            "type": "number",
            "example": 9.1
          },
          "windVar": {
            "description": "Boolean describing whether or not the wind direction and/or speed is variable.",
            "type": "boolean",
            "example": false
          },
          "windCov": {
            "description": "Covariance matrix, in knots and second based units.  The array values represent the lower triangular half of the covariance matrix. The size of the covariance matrix is 2x2.  The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y\n\nx&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3\n\n\nThe cov array should contain only the lower left triangle values from top left down to bottom right, in order.\n\n",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "cloudCover": {
            "description": "Array of cloud cover descriptions - each element can be maximum of 16 characters long. Intended as, but not constrained to, MIL-STD-6016 cloud cover designations (e.g. SKY CLEAR, SCATTERED, BROKEN, OVERCAST, SKY OBSCURED). Each element of the array corresponds to the elements in the cloudHght array specified respectively.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "OVERCAST",
              "BROKEN"
            ]
          },
          "cloudHght": {
            "description": "Array of cloud base heights in meters described by the cloudHght array. Each element of the array corresponds to the elements in the cloudCover array specified respectively.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.2,
              2.2
            ]
          },
          "actWeather": {
            "description": "Describes the actual weather at position. Intended as, but not constrained to, MIL-STD-6016 actual weather (e.g. NO STATEMENT, NO SIGNIFICANT WEATHER, DRIZZLE, RAIN, SNOW, SNOW GRAINS, DIAMOND DUST, ICE PELLETS, HAIL, SMALL HAIL, MIST, FOG, SMOKE, VOLCANIC ASH, WIDESPREAD DUST, SAND, HAZE, WELL DEVELOPED DUST, SQUALLS, FUNNEL CLOUDS, SANDSTORM, DUSTSTORM, LOW CLOUDS, CLOUDY, GROUND FOG, DUST, HEAVY RAIN, THUNDERSTORMS AWT, HEAVY THUNDERSTORMS, HURRICANE TYPHOON CYCLONE, TROPICAL STORM, TORNADO, HIGH WINDS, LIGHTNING, FREEZING DRIZZLE, FREEZING RAIN, HEAVY SNOW, ICING, SNOW OR RAIN AND SNOW MIXED, SHOWERS, CLEAR).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "weatherDesc": {
            "description": "Used in conjunction with actWeather and weatherInt. Intended as, but not constrained to, MIL-STD-6016 actual weather descriptor (e.g. NO STATEMENT, SHALLOW, PATCHES, LOW DRIFTING, BLOWING, SHOWERS, THUNDERSTORMS, SUPERCOOLED).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "weatherInt": {
            "description": "Weather Intensity. Used in conjunction with actWeather and weatherDesc. Intended as, but not constrained to, MIL-STD-6016 weather intensity (e.g. NO STATEMENT, LIGHT, MODERATE, HEAVY, IN VICINITY).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "rawMETAR": {
            "description": "The Raw Meteorological Aerodrome Report (METAR) string.",
            "maxLength": 512,
            "type": "string",
            "example": "KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015"
          },
          "rawTAF": {
            "description": "Terminal Aerodrome Forecast (TAF) containing detailed weather predictions for a specific airport or aerodrome.",
            "maxLength": 1024,
            "type": "string",
            "example": "KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z="
          },
          "qnh": {
            "format": "double",
            "description": "Altimeter set to read zero at mean sea level in kilopascals.",
            "type": "number",
            "example": 1234.456
          },
          "visibility": {
            "format": "double",
            "description": "Visual distance in meters.",
            "type": "number",
            "example": 1234.456
          },
          "temperature": {
            "format": "double",
            "description": "The measurement of air temperature in degrees C.",
            "type": "number",
            "example": 23.45
          },
          "soilTemp": {
            "format": "double",
            "description": "The measurement of soil temperature in degrees C.",
            "type": "number",
            "example": 22.4
          },
          "barPress": {
            "format": "double",
            "description": "The measurement of air pressure in the atmosphere in kilopascals.",
            "type": "number",
            "example": 101.2
          },
          "precipRate": {
            "format": "double",
            "description": "The speed at which water is being applied to a specific area in millimeters per hour.",
            "type": "number",
            "example": 3.4
          },
          "rainHour": {
            "format": "double",
            "description": "The amount of rain that has fallen in the past hour, in centimeters.",
            "type": "number",
            "example": 1.2
          },
          "solarRad": {
            "format": "double",
            "description": "The power per unit area received from the Sun in the form of electromagnetic radiation as measured in the wavelength range of the measuring instrument. The solar irradiance is measured in watt per square meter (W/m2).",
            "type": "number",
            "example": 1234.456
          },
          "difRad": {
            "format": "double",
            "description": "The amount of radiation that reaches earth's surface after being scattered by the atmosphere, in Watts per square meter.",
            "type": "number",
            "example": 234.5
          },
          "refRad": {
            "format": "double",
            "description": "The amount of radiation that changes direction as a function of atmospheric density, in Watts per square meter.",
            "type": "number",
            "example": 56.7
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at obTime in degrees. -90 to 90 degrees (negative values south of equator). This includes pilot reports or other means of weather observation.",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 12.456
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at obTime in degrees. -180 to 180 degrees (negative values west of Prime Meridian). This includes pilot reports or other means of weather observation.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 123.456
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at obTime in km. This includes pilot reports or other means of weather observation.",
            "type": "number",
            "example": 1.23
          },
          "dewPoint": {
            "format": "double",
            "description": "The temperature at which air is saturated with water vapor, in degrees C.",
            "type": "number",
            "example": 15.6
          },
          "relHumidity": {
            "format": "double",
            "description": "The percentage of water vapor in the atmosphere.",
            "type": "number",
            "example": 34.456
          },
          "indexRefraction": {
            "format": "double",
            "description": "An indication of how much the atmosphere refracts light.",
            "type": "number",
            "example": 1.1
          },
          "soilMoisture": {
            "format": "double",
            "description": "The volumetric percentage of soil water contained in a given volume of soil.",
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "example": 3.5
          },
          "surroundingWeather": {
            "description": "Describes in which direction (if any) that better weather conditions exist. Intended as, but not constrained to, MIL-STD-6016 surrounding weather designations (e.g. NO STATEMENT, BETTER TO NORTH, BETTER TO EAST, BETTER TO SOUTH, BETTER TO WEST).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "weatherAmp": {
            "description": "Amplifies the actual weather being reported. Intended as, but not constrained to, MIL-STD-6016 weather amplification designations (e.g. NO STATEMENT, NO SCATTERED BROKEN MEDIUM CLOUD, SCATTERED BROKEN MEDIUM CLOUDS, GUSTY WINDS AT SERVICE, FOG IN VALLEYS, HIGHER TERRAIN OBSCURED, SURFACE CONDITIONS VARIABLE, SURFACE WIND NE, SURFACE WIND SE, SURFACE WIND SW, SURFACE WIND NW, PRESENCE OF CUMULONIMBUS).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "contrailHghtLower": {
            "format": "double",
            "description": "Reports the lowest altitude at which contrails are occurring, in meters.",
            "type": "number",
            "example": 123.123
          },
          "contrailHghtUpper": {
            "format": "double",
            "description": "Reports the highest altitude at which contrails are occurring, in meters.",
            "type": "number",
            "example": 123.123
          },
          "icingUpperLimit": {
            "format": "double",
            "description": "Reports the highest altitude at which icing or freezing rain is occurring, in meters.",
            "type": "number",
            "example": 123.123
          },
          "icingLowerLimit": {
            "format": "double",
            "description": "Reports the lowest altitude at which icing or freezing rain is occurring, in meters.",
            "type": "number",
            "example": 123.123
          },
          "enRouteWeather": {
            "description": "Describes the flight conditions in route to the target  (NO STATEMENT, MAINLY IFR, MAINLY VFR, THUNDERSTORMS).\n\nMAINLY IFR:&nbsp;&nbsp;Predominantly Instrument Flight Rules.\n\nMAINLY VFR:&nbsp;&nbsp;Predominantly Visual Flight Rules.\n\nTHUNDERSTORMS:&nbsp;&nbsp;Thunderstorms expected in route.\n\n",
            "maxLength": 32,
            "type": "string",
            "example": "THUNDERSTORMS"
          },
          "ccEvent": {
            "description": "Flag indicating detection of a cloud-to-cloud lightning event.",
            "type": "boolean",
            "example": true
          },
          "srcTyps": {
            "description": "Array of UDL record types (SENSOR, WEATHERDATA) that are related to this WeatherReport record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SENSOR",
              "WEATHERDATA"
            ]
          },
          "srcIds": {
            "description": "Array of UUID(s) of the UDL data record(s) that are related to this WeatherReport record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "e609a90d-4059-4043-9f1a-fd7b49a3e1d0",
              "c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52"
            ]
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "WeatherReport_Full": {
        "description": "These services provide for posting and querying Weather Over Target information. The information contained within describes the current weather conditions over a target area or region to include navigational considerations such as altimeter settings, visibility, cloud heights etc.",
        "required": [
          "classificationMarking",
          "reportType",
          "obTime",
          "lat",
          "lon",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "WEATHER-REPORT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idSensor": {
            "description": "Unique identifier of the sensor making the weather measurement.",
            "maxLength": 36,
            "type": "string",
            "example": "0129f577-e04c-441e-65ca-0a04a750bed9"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "weatherId": {
            "description": "Identifier of the weather over target, which should remain the same on subsequent Weather Over Target records.",
            "maxLength": 128,
            "type": "string",
            "example": "WEATHER-ID"
          },
          "idGroundImagery": {
            "description": "Identifier of the ground imagery associated for this weather over target report.",
            "maxLength": 36,
            "type": "string",
            "example": "GROUND-IMAGERY-ID"
          },
          "idSite": {
            "description": "Identifier of the Site that is associated with this weather report.",
            "maxLength": 36,
            "type": "string",
            "example": "AIRFIELD-ID"
          },
          "idAirfield": {
            "description": "Identifier of the Airfield associated with this weather report.",
            "maxLength": 36,
            "type": "string",
            "example": "8fb38d6d-a3de-45dd-8974-4e3ed73e9449"
          },
          "icao": {
            "description": "The International Civil Aviation Organization (ICAO) code of the airfield associated with this weather report.",
            "maxLength": 4,
            "type": "string",
            "example": "KAFF"
          },
          "externalId": {
            "description": "Optional observation or forecast ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "GDSSMB022408301601304517"
          },
          "externalLocationId": {
            "description": "Optional location ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "TMDS060AD4OG03CC"
          },
          "reportType": {
            "description": "Identifies the type of weather report (e.g. OBSERVATION, FORECAST, etc.).",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "example": "FORECAST"
          },
          "obTime": {
            "format": "date-time",
            "description": "Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "forecastStartTime": {
            "format": "date-time",
            "description": "Valid start time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.",
            "type": "string",
            "example": "2024-01-01T16:00:00.123Z"
          },
          "forecastEndTime": {
            "format": "date-time",
            "description": "Valid end time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.",
            "type": "string",
            "example": "2024-01-01T18:00:00.123Z"
          },
          "lat": {
            "format": "double",
            "description": "The central WGS-84 latitude of the weather report, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 56.12
          },
          "lon": {
            "format": "double",
            "description": "The central WGS-84 longitude of the weather report, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": -156.6
          },
          "alt": {
            "format": "double",
            "description": "Point height above ellipsoid (WGS-84), in meters.",
            "type": "number",
            "example": 123.12
          },
          "geoPotentialAlt": {
            "format": "double",
            "description": "Altitude of a pressure surface in the atmosphere above mean sea level, in meters.",
            "type": "number",
            "example": 1000
          },
          "dataLevel": {
            "description": "Specific pressures or heights where measurements are taken, labeled as either MANDATORY or SIGNIFICANT levels. Mandatory levels are at particular pressures at geopotential heights. Significant levels are at particular geometric heights.",
            "maxLength": 16,
            "type": "string",
            "example": "MANDATORY"
          },
          "area": {
            "description": "Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "ST_Polygon"
          },
          "andims": {
            "format": "int16",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 2
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 4326
          },
          "windSpd": {
            "format": "double",
            "description": "Expresses the speed of the wind in meters/second.",
            "type": "number",
            "example": 1.23
          },
          "windSpdAvg": {
            "format": "double",
            "description": "Average wind speed over a 1 minute period, in meters/second.",
            "type": "number",
            "example": 12.1
          },
          "windGust": {
            "format": "double",
            "description": "Expresses the max gust speed of the wind, in meters/second.",
            "type": "number",
            "example": 10.23
          },
          "windGust10": {
            "format": "double",
            "description": "Expresses the max gust speed of the wind recorded in a 10 minute period, in meters/second.",
            "type": "number",
            "example": 13.2
          },
          "vshear": {
            "format": "double",
            "description": "The change in wind speed between two different altitudes divided by the vertical distance between them, in units of 1/sec.",
            "type": "number",
            "example": 3.8
          },
          "hshear": {
            "format": "double",
            "description": "The change in wind speed between two different lateral positions at a given altitude divided by the horizontal distance between them, in units of 1/sec.",
            "type": "number",
            "example": 3.8
          },
          "radVel": {
            "format": "double",
            "description": "Average radial velocity of wind as measured by radar with multi-beam configurations. Radial velocity is the component of wind velocity moving directly toward or away from a sensor's radar beam, in meters per second. Values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar).",
            "type": "number",
            "example": -0.04
          },
          "radVelBeam1": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 1, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": 4.4
          },
          "radVelBeam2": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 2, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": -0.2
          },
          "radVelBeam3": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 3, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": -0.2
          },
          "radVelBeam4": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 4, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": 11.4
          },
          "radVelBeam5": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 5, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": 4.1
          },
          "windDir": {
            "format": "double",
            "description": "Direction the wind is blowing, in degrees clockwise from true north.",
            "type": "number",
            "example": 75.1234
          },
          "windDirAvg": {
            "format": "double",
            "description": "Average wind direction over a 1 minute period, in degrees clockwise from true north.",
            "type": "number",
            "example": 57.1
          },
          "windDirPeak": {
            "format": "double",
            "description": "Wind direction corresponding to the peak wind speed during a 1 minute period, in degrees clockwise from true north.",
            "type": "number",
            "example": 78.4
          },
          "windDirPeak10": {
            "format": "double",
            "description": "Wind direction corresponding to the peak wind speed during a 10 minute period, in degrees clockwise from true north.",
            "type": "number",
            "example": 44.5
          },
          "windChill": {
            "format": "double",
            "description": "The perceived temperature in degrees C.",
            "type": "number",
            "example": 15.6
          },
          "dirDev": {
            "format": "double",
            "description": "The difference in wind direction recorded over a period of time, in degrees.",
            "type": "number",
            "example": 9.1
          },
          "windVar": {
            "description": "Boolean describing whether or not the wind direction and/or speed is variable.",
            "type": "boolean",
            "example": false
          },
          "windCov": {
            "description": "Covariance matrix, in knots and second based units.  The array values represent the lower triangular half of the covariance matrix. The size of the covariance matrix is 2x2.  The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y\n\nx&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3\n\n\nThe cov array should contain only the lower left triangle values from top left down to bottom right, in order.\n\n",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "cloudCover": {
            "description": "Array of cloud cover descriptions - each element can be maximum of 16 characters long. Intended as, but not constrained to, MIL-STD-6016 cloud cover designations (e.g. SKY CLEAR, SCATTERED, BROKEN, OVERCAST, SKY OBSCURED). Each element of the array corresponds to the elements in the cloudHght array specified respectively.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "OVERCAST",
              "BROKEN"
            ]
          },
          "cloudHght": {
            "description": "Array of cloud base heights in meters described by the cloudHght array. Each element of the array corresponds to the elements in the cloudCover array specified respectively.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.2,
              2.2
            ]
          },
          "actWeather": {
            "description": "Describes the actual weather at position. Intended as, but not constrained to, MIL-STD-6016 actual weather (e.g. NO STATEMENT, NO SIGNIFICANT WEATHER, DRIZZLE, RAIN, SNOW, SNOW GRAINS, DIAMOND DUST, ICE PELLETS, HAIL, SMALL HAIL, MIST, FOG, SMOKE, VOLCANIC ASH, WIDESPREAD DUST, SAND, HAZE, WELL DEVELOPED DUST, SQUALLS, FUNNEL CLOUDS, SANDSTORM, DUSTSTORM, LOW CLOUDS, CLOUDY, GROUND FOG, DUST, HEAVY RAIN, THUNDERSTORMS AWT, HEAVY THUNDERSTORMS, HURRICANE TYPHOON CYCLONE, TROPICAL STORM, TORNADO, HIGH WINDS, LIGHTNING, FREEZING DRIZZLE, FREEZING RAIN, HEAVY SNOW, ICING, SNOW OR RAIN AND SNOW MIXED, SHOWERS, CLEAR).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "weatherDesc": {
            "description": "Used in conjunction with actWeather and weatherInt. Intended as, but not constrained to, MIL-STD-6016 actual weather descriptor (e.g. NO STATEMENT, SHALLOW, PATCHES, LOW DRIFTING, BLOWING, SHOWERS, THUNDERSTORMS, SUPERCOOLED).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "weatherInt": {
            "description": "Weather Intensity. Used in conjunction with actWeather and weatherDesc. Intended as, but not constrained to, MIL-STD-6016 weather intensity (e.g. NO STATEMENT, LIGHT, MODERATE, HEAVY, IN VICINITY).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "rawMETAR": {
            "description": "The Raw Meteorological Aerodrome Report (METAR) string.",
            "maxLength": 512,
            "type": "string",
            "example": "KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015"
          },
          "rawTAF": {
            "description": "Terminal Aerodrome Forecast (TAF) containing detailed weather predictions for a specific airport or aerodrome.",
            "maxLength": 1024,
            "type": "string",
            "example": "KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z="
          },
          "qnh": {
            "format": "double",
            "description": "Altimeter set to read zero at mean sea level in kilopascals.",
            "type": "number",
            "example": 1234.456
          },
          "visibility": {
            "format": "double",
            "description": "Visual distance in meters.",
            "type": "number",
            "example": 1234.456
          },
          "temperature": {
            "format": "double",
            "description": "The measurement of air temperature in degrees C.",
            "type": "number",
            "example": 23.45
          },
          "soilTemp": {
            "format": "double",
            "description": "The measurement of soil temperature in degrees C.",
            "type": "number",
            "example": 22.4
          },
          "barPress": {
            "format": "double",
            "description": "The measurement of air pressure in the atmosphere in kilopascals.",
            "type": "number",
            "example": 101.2
          },
          "precipRate": {
            "format": "double",
            "description": "The speed at which water is being applied to a specific area in millimeters per hour.",
            "type": "number",
            "example": 3.4
          },
          "rainHour": {
            "format": "double",
            "description": "The amount of rain that has fallen in the past hour, in centimeters.",
            "type": "number",
            "example": 1.2
          },
          "solarRad": {
            "format": "double",
            "description": "The power per unit area received from the Sun in the form of electromagnetic radiation as measured in the wavelength range of the measuring instrument. The solar irradiance is measured in watt per square meter (W/m2).",
            "type": "number",
            "example": 1234.456
          },
          "difRad": {
            "format": "double",
            "description": "The amount of radiation that reaches earth's surface after being scattered by the atmosphere, in Watts per square meter.",
            "type": "number",
            "example": 234.5
          },
          "refRad": {
            "format": "double",
            "description": "The amount of radiation that changes direction as a function of atmospheric density, in Watts per square meter.",
            "type": "number",
            "example": 56.7
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at obTime in degrees. -90 to 90 degrees (negative values south of equator). This includes pilot reports or other means of weather observation.",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 12.456
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at obTime in degrees. -180 to 180 degrees (negative values west of Prime Meridian). This includes pilot reports or other means of weather observation.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 123.456
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at obTime in km. This includes pilot reports or other means of weather observation.",
            "type": "number",
            "example": 1.23
          },
          "dewPoint": {
            "format": "double",
            "description": "The temperature at which air is saturated with water vapor, in degrees C.",
            "type": "number",
            "example": 15.6
          },
          "relHumidity": {
            "format": "double",
            "description": "The percentage of water vapor in the atmosphere.",
            "type": "number",
            "example": 34.456
          },
          "indexRefraction": {
            "format": "double",
            "description": "An indication of how much the atmosphere refracts light.",
            "type": "number",
            "example": 1.1
          },
          "soilMoisture": {
            "format": "double",
            "description": "The volumetric percentage of soil water contained in a given volume of soil.",
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "example": 3.5
          },
          "surroundingWeather": {
            "description": "Describes in which direction (if any) that better weather conditions exist. Intended as, but not constrained to, MIL-STD-6016 surrounding weather designations (e.g. NO STATEMENT, BETTER TO NORTH, BETTER TO EAST, BETTER TO SOUTH, BETTER TO WEST).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "weatherAmp": {
            "description": "Amplifies the actual weather being reported. Intended as, but not constrained to, MIL-STD-6016 weather amplification designations (e.g. NO STATEMENT, NO SCATTERED BROKEN MEDIUM CLOUD, SCATTERED BROKEN MEDIUM CLOUDS, GUSTY WINDS AT SERVICE, FOG IN VALLEYS, HIGHER TERRAIN OBSCURED, SURFACE CONDITIONS VARIABLE, SURFACE WIND NE, SURFACE WIND SE, SURFACE WIND SW, SURFACE WIND NW, PRESENCE OF CUMULONIMBUS).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "contrailHghtLower": {
            "format": "double",
            "description": "Reports the lowest altitude at which contrails are occurring, in meters.",
            "type": "number",
            "example": 123.123
          },
          "contrailHghtUpper": {
            "format": "double",
            "description": "Reports the highest altitude at which contrails are occurring, in meters.",
            "type": "number",
            "example": 123.123
          },
          "icingUpperLimit": {
            "format": "double",
            "description": "Reports the highest altitude at which icing or freezing rain is occurring, in meters.",
            "type": "number",
            "example": 123.123
          },
          "icingLowerLimit": {
            "format": "double",
            "description": "Reports the lowest altitude at which icing or freezing rain is occurring, in meters.",
            "type": "number",
            "example": 123.123
          },
          "enRouteWeather": {
            "description": "Describes the flight conditions in route to the target  (NO STATEMENT, MAINLY IFR, MAINLY VFR, THUNDERSTORMS).\n\nMAINLY IFR:&nbsp;&nbsp;Predominantly Instrument Flight Rules.\n\nMAINLY VFR:&nbsp;&nbsp;Predominantly Visual Flight Rules.\n\nTHUNDERSTORMS:&nbsp;&nbsp;Thunderstorms expected in route.\n\n",
            "maxLength": 32,
            "type": "string",
            "example": "THUNDERSTORMS"
          },
          "ccEvent": {
            "description": "Flag indicating detection of a cloud-to-cloud lightning event.",
            "type": "boolean",
            "example": true
          },
          "srcTyps": {
            "description": "Array of UDL record types (SENSOR, WEATHERDATA) that are related to this WeatherReport record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SENSOR",
              "WEATHERDATA"
            ]
          },
          "srcIds": {
            "description": "Array of UUID(s) of the UDL data record(s) that are related to this WeatherReport record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "e609a90d-4059-4043-9f1a-fd7b49a3e1d0",
              "c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52"
            ]
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "WeatherReport_Ingest": {
        "description": "These services provide for posting and querying Weather Over Target information. The information contained within describes the current weather conditions over a target area or region to include navigational considerations such as altimeter settings, visibility, cloud heights etc.",
        "required": [
          "classificationMarking",
          "reportType",
          "obTime",
          "lat",
          "lon",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "WEATHER-REPORT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idSensor": {
            "description": "Unique identifier of the sensor making the weather measurement.",
            "maxLength": 36,
            "type": "string",
            "example": "0129f577-e04c-441e-65ca-0a04a750bed9"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "weatherId": {
            "description": "Identifier of the weather over target, which should remain the same on subsequent Weather Over Target records.",
            "maxLength": 128,
            "type": "string",
            "example": "WEATHER-ID"
          },
          "idGroundImagery": {
            "description": "Identifier of the ground imagery associated for this weather over target report.",
            "maxLength": 36,
            "type": "string",
            "example": "GROUND-IMAGERY-ID"
          },
          "idSite": {
            "description": "Identifier of the Site that is associated with this weather report.",
            "maxLength": 36,
            "type": "string",
            "example": "AIRFIELD-ID"
          },
          "idAirfield": {
            "description": "Identifier of the Airfield associated with this weather report.",
            "maxLength": 36,
            "type": "string",
            "example": "8fb38d6d-a3de-45dd-8974-4e3ed73e9449"
          },
          "icao": {
            "description": "The International Civil Aviation Organization (ICAO) code of the airfield associated with this weather report.",
            "maxLength": 4,
            "type": "string",
            "example": "KAFF"
          },
          "externalId": {
            "description": "Optional observation or forecast ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "GDSSMB022408301601304517"
          },
          "externalLocationId": {
            "description": "Optional location ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "TMDS060AD4OG03CC"
          },
          "reportType": {
            "description": "Identifies the type of weather report (e.g. OBSERVATION, FORECAST, etc.).",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "example": "FORECAST"
          },
          "obTime": {
            "format": "date-time",
            "description": "Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "forecastStartTime": {
            "format": "date-time",
            "description": "Valid start time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.",
            "type": "string",
            "example": "2024-01-01T16:00:00.123Z"
          },
          "forecastEndTime": {
            "format": "date-time",
            "description": "Valid end time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.",
            "type": "string",
            "example": "2024-01-01T18:00:00.123Z"
          },
          "lat": {
            "format": "double",
            "description": "The central WGS-84 latitude of the weather report, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 56.12
          },
          "lon": {
            "format": "double",
            "description": "The central WGS-84 longitude of the weather report, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": -156.6
          },
          "alt": {
            "format": "double",
            "description": "Point height above ellipsoid (WGS-84), in meters.",
            "type": "number",
            "example": 123.12
          },
          "geoPotentialAlt": {
            "format": "double",
            "description": "Altitude of a pressure surface in the atmosphere above mean sea level, in meters.",
            "type": "number",
            "example": 1000
          },
          "dataLevel": {
            "description": "Specific pressures or heights where measurements are taken, labeled as either MANDATORY or SIGNIFICANT levels. Mandatory levels are at particular pressures at geopotential heights. Significant levels are at particular geometric heights.",
            "maxLength": 16,
            "type": "string",
            "example": "MANDATORY"
          },
          "area": {
            "description": "Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground.",
            "maxLength": 128,
            "type": "string",
            "example": "ST_Polygon"
          },
          "andims": {
            "format": "int16",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 2
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 4326
          },
          "windSpd": {
            "format": "double",
            "description": "Expresses the speed of the wind in meters/second.",
            "type": "number",
            "example": 1.23
          },
          "windSpdAvg": {
            "format": "double",
            "description": "Average wind speed over a 1 minute period, in meters/second.",
            "type": "number",
            "example": 12.1
          },
          "windGust": {
            "format": "double",
            "description": "Expresses the max gust speed of the wind, in meters/second.",
            "type": "number",
            "example": 10.23
          },
          "windGust10": {
            "format": "double",
            "description": "Expresses the max gust speed of the wind recorded in a 10 minute period, in meters/second.",
            "type": "number",
            "example": 13.2
          },
          "vshear": {
            "format": "double",
            "description": "The change in wind speed between two different altitudes divided by the vertical distance between them, in units of 1/sec.",
            "type": "number",
            "example": 3.8
          },
          "hshear": {
            "format": "double",
            "description": "The change in wind speed between two different lateral positions at a given altitude divided by the horizontal distance between them, in units of 1/sec.",
            "type": "number",
            "example": 3.8
          },
          "radVel": {
            "format": "double",
            "description": "Average radial velocity of wind as measured by radar with multi-beam configurations. Radial velocity is the component of wind velocity moving directly toward or away from a sensor's radar beam, in meters per second. Values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar).",
            "type": "number",
            "example": -0.04
          },
          "radVelBeam1": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 1, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": 4.4
          },
          "radVelBeam2": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 2, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": -0.2
          },
          "radVelBeam3": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 3, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": -0.2
          },
          "radVelBeam4": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 4, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": 11.4
          },
          "radVelBeam5": {
            "format": "double",
            "description": "Component of wind velocity moving directly toward or away from radar beam 5, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.",
            "type": "number",
            "example": 4.1
          },
          "windDir": {
            "format": "double",
            "description": "Direction the wind is blowing, in degrees clockwise from true north.",
            "type": "number",
            "example": 75.1234
          },
          "windDirAvg": {
            "format": "double",
            "description": "Average wind direction over a 1 minute period, in degrees clockwise from true north.",
            "type": "number",
            "example": 57.1
          },
          "windDirPeak": {
            "format": "double",
            "description": "Wind direction corresponding to the peak wind speed during a 1 minute period, in degrees clockwise from true north.",
            "type": "number",
            "example": 78.4
          },
          "windDirPeak10": {
            "format": "double",
            "description": "Wind direction corresponding to the peak wind speed during a 10 minute period, in degrees clockwise from true north.",
            "type": "number",
            "example": 44.5
          },
          "windChill": {
            "format": "double",
            "description": "The perceived temperature in degrees C.",
            "type": "number",
            "example": 15.6
          },
          "dirDev": {
            "format": "double",
            "description": "The difference in wind direction recorded over a period of time, in degrees.",
            "type": "number",
            "example": 9.1
          },
          "windVar": {
            "description": "Boolean describing whether or not the wind direction and/or speed is variable.",
            "type": "boolean",
            "example": false
          },
          "windCov": {
            "description": "Covariance matrix, in knots and second based units.  The array values represent the lower triangular half of the covariance matrix. The size of the covariance matrix is 2x2.  The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y\n\nx&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3\n\n\nThe cov array should contain only the lower left triangle values from top left down to bottom right, in order.\n\n",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "cloudCover": {
            "description": "Array of cloud cover descriptions - each element can be maximum of 16 characters long. Intended as, but not constrained to, MIL-STD-6016 cloud cover designations (e.g. SKY CLEAR, SCATTERED, BROKEN, OVERCAST, SKY OBSCURED). Each element of the array corresponds to the elements in the cloudHght array specified respectively.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "OVERCAST",
              "BROKEN"
            ]
          },
          "cloudHght": {
            "description": "Array of cloud base heights in meters described by the cloudHght array. Each element of the array corresponds to the elements in the cloudCover array specified respectively.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.2,
              2.2
            ]
          },
          "actWeather": {
            "description": "Describes the actual weather at position. Intended as, but not constrained to, MIL-STD-6016 actual weather (e.g. NO STATEMENT, NO SIGNIFICANT WEATHER, DRIZZLE, RAIN, SNOW, SNOW GRAINS, DIAMOND DUST, ICE PELLETS, HAIL, SMALL HAIL, MIST, FOG, SMOKE, VOLCANIC ASH, WIDESPREAD DUST, SAND, HAZE, WELL DEVELOPED DUST, SQUALLS, FUNNEL CLOUDS, SANDSTORM, DUSTSTORM, LOW CLOUDS, CLOUDY, GROUND FOG, DUST, HEAVY RAIN, THUNDERSTORMS AWT, HEAVY THUNDERSTORMS, HURRICANE TYPHOON CYCLONE, TROPICAL STORM, TORNADO, HIGH WINDS, LIGHTNING, FREEZING DRIZZLE, FREEZING RAIN, HEAVY SNOW, ICING, SNOW OR RAIN AND SNOW MIXED, SHOWERS, CLEAR).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "weatherDesc": {
            "description": "Used in conjunction with actWeather and weatherInt. Intended as, but not constrained to, MIL-STD-6016 actual weather descriptor (e.g. NO STATEMENT, SHALLOW, PATCHES, LOW DRIFTING, BLOWING, SHOWERS, THUNDERSTORMS, SUPERCOOLED).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "weatherInt": {
            "description": "Weather Intensity. Used in conjunction with actWeather and weatherDesc. Intended as, but not constrained to, MIL-STD-6016 weather intensity (e.g. NO STATEMENT, LIGHT, MODERATE, HEAVY, IN VICINITY).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "rawMETAR": {
            "description": "The Raw Meteorological Aerodrome Report (METAR) string.",
            "maxLength": 512,
            "type": "string",
            "example": "KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015"
          },
          "rawTAF": {
            "description": "Terminal Aerodrome Forecast (TAF) containing detailed weather predictions for a specific airport or aerodrome.",
            "maxLength": 1024,
            "type": "string",
            "example": "KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z="
          },
          "qnh": {
            "format": "double",
            "description": "Altimeter set to read zero at mean sea level in kilopascals.",
            "type": "number",
            "example": 1234.456
          },
          "visibility": {
            "format": "double",
            "description": "Visual distance in meters.",
            "type": "number",
            "example": 1234.456
          },
          "temperature": {
            "format": "double",
            "description": "The measurement of air temperature in degrees C.",
            "type": "number",
            "example": 23.45
          },
          "soilTemp": {
            "format": "double",
            "description": "The measurement of soil temperature in degrees C.",
            "type": "number",
            "example": 22.4
          },
          "barPress": {
            "format": "double",
            "description": "The measurement of air pressure in the atmosphere in kilopascals.",
            "type": "number",
            "example": 101.2
          },
          "precipRate": {
            "format": "double",
            "description": "The speed at which water is being applied to a specific area in millimeters per hour.",
            "type": "number",
            "example": 3.4
          },
          "rainHour": {
            "format": "double",
            "description": "The amount of rain that has fallen in the past hour, in centimeters.",
            "type": "number",
            "example": 1.2
          },
          "solarRad": {
            "format": "double",
            "description": "The power per unit area received from the Sun in the form of electromagnetic radiation as measured in the wavelength range of the measuring instrument. The solar irradiance is measured in watt per square meter (W/m2).",
            "type": "number",
            "example": 1234.456
          },
          "difRad": {
            "format": "double",
            "description": "The amount of radiation that reaches earth's surface after being scattered by the atmosphere, in Watts per square meter.",
            "type": "number",
            "example": 234.5
          },
          "refRad": {
            "format": "double",
            "description": "The amount of radiation that changes direction as a function of atmospheric density, in Watts per square meter.",
            "type": "number",
            "example": 56.7
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at obTime in degrees. -90 to 90 degrees (negative values south of equator). This includes pilot reports or other means of weather observation.",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 12.456
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at obTime in degrees. -180 to 180 degrees (negative values west of Prime Meridian). This includes pilot reports or other means of weather observation.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 123.456
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at obTime in km. This includes pilot reports or other means of weather observation.",
            "type": "number",
            "example": 1.23
          },
          "dewPoint": {
            "format": "double",
            "description": "The temperature at which air is saturated with water vapor, in degrees C.",
            "type": "number",
            "example": 15.6
          },
          "relHumidity": {
            "format": "double",
            "description": "The percentage of water vapor in the atmosphere.",
            "type": "number",
            "example": 34.456
          },
          "indexRefraction": {
            "format": "double",
            "description": "An indication of how much the atmosphere refracts light.",
            "type": "number",
            "example": 1.1
          },
          "soilMoisture": {
            "format": "double",
            "description": "The volumetric percentage of soil water contained in a given volume of soil.",
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "example": 3.5
          },
          "surroundingWeather": {
            "description": "Describes in which direction (if any) that better weather conditions exist. Intended as, but not constrained to, MIL-STD-6016 surrounding weather designations (e.g. NO STATEMENT, BETTER TO NORTH, BETTER TO EAST, BETTER TO SOUTH, BETTER TO WEST).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "weatherAmp": {
            "description": "Amplifies the actual weather being reported. Intended as, but not constrained to, MIL-STD-6016 weather amplification designations (e.g. NO STATEMENT, NO SCATTERED BROKEN MEDIUM CLOUD, SCATTERED BROKEN MEDIUM CLOUDS, GUSTY WINDS AT SERVICE, FOG IN VALLEYS, HIGHER TERRAIN OBSCURED, SURFACE CONDITIONS VARIABLE, SURFACE WIND NE, SURFACE WIND SE, SURFACE WIND SW, SURFACE WIND NW, PRESENCE OF CUMULONIMBUS).",
            "maxLength": 32,
            "type": "string",
            "example": "NO STATEMENT"
          },
          "contrailHghtLower": {
            "format": "double",
            "description": "Reports the lowest altitude at which contrails are occurring, in meters.",
            "type": "number",
            "example": 123.123
          },
          "contrailHghtUpper": {
            "format": "double",
            "description": "Reports the highest altitude at which contrails are occurring, in meters.",
            "type": "number",
            "example": 123.123
          },
          "icingUpperLimit": {
            "format": "double",
            "description": "Reports the highest altitude at which icing or freezing rain is occurring, in meters.",
            "type": "number",
            "example": 123.123
          },
          "icingLowerLimit": {
            "format": "double",
            "description": "Reports the lowest altitude at which icing or freezing rain is occurring, in meters.",
            "type": "number",
            "example": 123.123
          },
          "enRouteWeather": {
            "description": "Describes the flight conditions in route to the target  (NO STATEMENT, MAINLY IFR, MAINLY VFR, THUNDERSTORMS).\n\nMAINLY IFR:&nbsp;&nbsp;Predominantly Instrument Flight Rules.\n\nMAINLY VFR:&nbsp;&nbsp;Predominantly Visual Flight Rules.\n\nTHUNDERSTORMS:&nbsp;&nbsp;Thunderstorms expected in route.\n\n",
            "maxLength": 32,
            "type": "string",
            "example": "THUNDERSTORMS"
          },
          "ccEvent": {
            "description": "Flag indicating detection of a cloud-to-cloud lightning event.",
            "type": "boolean",
            "example": true
          },
          "srcTyps": {
            "description": "Array of UDL record types (SENSOR, WEATHERDATA) that are related to this WeatherReport record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SENSOR",
              "WEATHERDATA"
            ]
          },
          "srcIds": {
            "description": "Array of UUID(s) of the UDL data record(s) that are related to this WeatherReport record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "e609a90d-4059-4043-9f1a-fd7b49a3e1d0",
              "c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52"
            ]
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      }
    }
  }
}