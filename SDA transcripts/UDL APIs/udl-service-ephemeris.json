{
  "openapi": "3.0.3",
  "info": {
    "title": "Unified Data Library Services API",
    "version": "1.30.0 Daiquiri",
    "description": "Unified Data Library Services OpenAPI v3 documentation.",
    "termsOfService": "storefront/storefront/appConfig/useragreement.html",
    "contact": {
      "name": "Sage Andorka, Deputy, Cross-Mission Ground",
      "email": "unifieddatalibrary@bluestaq.com"
    }
  },
  "tags": [
    {
      "name": "Ephemeris",
      "description": "These services provide operations for the posting and querying of satellite Ephemeris Point data. Each point contains a position and velocity vector and optionally, an acceleration vector and/or covariance matrix at a specified time. ECI J2K is the preferred reference frame for ephemeris and covariance, however, several user specified reference frames are accommodated. The EphemerisSet ID (esId) identifies the 'EphemerisSet' record which contains details of the underlying data and models used in the generation of the ephemeris as well as a collection of ephemeris points. Points must be retrieved by first identifying a desired EphemerisSet and pulling its points by that EphemerisSet 'esId'."
    }
  ],
  "externalDocs": {
    "url": "udl/openapi.json"
  },
  "servers": [
    {
      "url": "https://unifieddatalibrary.com"
    }
  ],
  "paths": {
    "/filedrop/ephem": {
      "post": {
        "tags": [
          "Ephemeris"
        ],
        "description": "Service operation to post/store Ephemeris data. This operation is  intended to be used for automated feeds into UDL. The payload is in Ephemeris format as described by the \"Flight Safety Handbook\" published by 18th Space Command. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n\n</br>\n**Example:** /filedrop/ephem?classification=U&dataMode=TEST&source=Bluestaq&satNo=25544&ephemFormatType=NASA&hasMnvr=false&type=ROUTINE&category=EXTERNAL&origin=NASA&tags=tag1,tag2\n",
        "operationId": "filedrop_ephem_post_id",
        "parameters": [
          {
            "name": "satNo",
            "in": "query",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "classification",
            "in": "query",
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "example": "U",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataMode",
            "in": "query",
            "description": "Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DataMode"
            },
            "example": "TEST"
          },
          {
            "name": "hasMnvr",
            "in": "query",
            "description": "Boolean indicating whether maneuver(s) are incorporated into the ephemeris.",
            "example": false,
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Ephemeris type.",
            "example": "ROUTINE",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Ephemeris category.",
            "example": "EXTERNAL",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ephemFormatType",
            "in": "query",
            "description": "Ephemeris format as documented in Flight Safety Handbook.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EphemFormatType"
            },
            "example": "NASA"
          },
          {
            "name": "origin",
            "in": "query",
            "description": "Optional origin of the Ephemeris.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Source of the Ephemeris data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              },
              "example": "20090183552.438 854.324972 -806.523053 7049.922417 6.895812284 -2.628367346 -1.133733106\n20090183652.438 1266.133860 -962.545669 6968.125830 6.826675764 -2.570691008 -1.591933762\n20090183752.438 1672.992049 -1114.804860 6859.014485 6.730841878 -2.502960267 -2.043929218\n20090183852.438 2073.308235 -1262.705018 6723.013691 6.608678828 -2.425436636 -2.487957283\n20090183952.437 2465.516236 -1405.667354 6560.653649 6.460655493 -2.338419085 -2.922284617\n20090184052.437 2848.081001 -1543.132119 6372.567559 6.287340800 -2.242243249 -3.345212234\n20090184152.437 3219.504606 -1674.560790 6159.489368 6.089403061 -2.137280899 -3.755082127\n20090184252.437 3578.332160 -1799.438213 5922.251081 5.867608030 -2.023938998 -4.150285005\n20090184352.437 3923.157564 -1917.274669 5661.779621 5.622815776 -1.902658091 -4.529267262\n20090184452.437 4252.629072 -2027.607829 5379.093303 5.355977415 -1.773910426 -4.890537084\n20090184552.438 4565.454650 -2130.004610 5075.297949 5.068131657 -1.638198207 -5.232670449\n20090184652.438 4860.407121 -2224.062913 4751.582647 4.760401074 -1.496051826 -5.554316609\n20090184752.438 5136.329082 -2309.413262 4409.215191 4.433988183 -1.348027904 -5.854203792\n20090184852.438 5392.137572 -2385.720309 4049.537176 4.090171063 -1.194707051 -6.131144712\n20090184952.438 5626.828455 -2452.684200 3673.958773 3.730298408 -1.036691459 -6.384041406\n20090185052.438 5839.480522 -2510.041810 3283.953237 3.355784875 -0.874602755 -6.611889945\n20090185152.437 6029.259294 -2557.567834 2881.051109 2.968105821 -0.709079671 -6.813785484\n20090185252.437 6195.420471 -2595.075738 2466.834134 2.568790899 -0.540775331 -6.988926806\n20090185352.437 6337.313006 -2622.418539 2042.928930 2.159417590 -0.370354527 -7.136619912\n20090185452.437 6454.381765 -2639.489420 1611.000461 1.741604556 -0.198490869 -7.256280983\n20090185552.437 6546.169804 -2646.222176 1172.745350 1.317005015 -0.025863968 -7.347439001\n20090185652.438 6612.320241 -2642.591488 729.885039 0.887299878 0.146843350 -7.409738011\n20090185752.438 6652.577694 -2628.613029 284.158834 0.454190412 0.318947964 -7.442938697\n20090185852.438 6666.789294 -2604.343401 -162.683130 0.019391281 0.489769322 -7.446919583\n20090185952.438 6654.905265 -2569.879881 -608.886984 -0.415377036 0.658632454 -7.421677795\n20090190052.438 6616.979042 -2525.360006 -1052.702244 -0.848395994 0.824870985 -7.367328894\n20090190152.438 6553.166929 -2470.960963 -1492.388894 -1.277956388 0.987829985 -7.284105998\n20090190252.437 6463.727309 -2406.898823 -1926.224391 -1.702365928 1.146868752 -7.172358262\n20090190352.437 6349.019420 -2333.427607 -2352.510575 -2.119956347 1.301363455 -7.032548726\n20090190452.437 6209.501706 -2250.838192 -2769.580415 -2.529090096 1.450709724 -6.865251656\n20090190552.437 6045.729775 -2159.457075 -3175.804606 -2.928166964 1.594325073 -6.671149694\n20090190652.437 5858.353970 -2059.644985 -3569.597966 -3.315630505 1.731651201 -6.451030430\n20090190752.438 5648.116549 -1951.795371 -3949.425615 -3.689974155 1.862156222 -6.205782298\n20090190852.438 5415.848532 -1836.332754 -4313.808907 -4.049746799 1.985336490 -5.936390547\n20090190952.438 5162.466198 -1713.710980 -4661.331101 -4.393558446 2.100718445 -5.643932730\n20090191052.438 4888.967258 -1584.411363 -4990.642753 -4.720085507 2.207860388 -5.329573539\n20090191152.438 4596.426732 -1448.940726 -5300.466778 -5.028075349 2.306353880 -4.994559465\n20090191252.438 4285.992562 -1307.829369 -5589.603199 -5.316350511 2.395824993 -4.640213267\n20090191352.437 3958.880990 -1161.628964 -5856.933556 -5.583812443 2.475935445 -4.267928575\n20090191452.437 3616.371712 -1010.910385 -6101.425000 -5.829445081 2.546383684 -3.879164465\n20090191552.437 3259.802822 -856.261467 -6322.134041 -6.052318610 2.606905964 -3.475439590"
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "429": {
            "description": "Rate Limit Exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-attitudeset": {
      "post": {
        "tags": [
          "Ephemeris"
        ],
        "description": "Service operation to take a single Attitude Set and many associated Onorbit Attitude records as a POST body for ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n</br>\nThe following rules apply to this operation:\n<h3>\n  * Attitude Set numPoints value must correspond exactly to the number of Onorbit Attitude states associated with that Attitude Set. The numPoints value is checked against the actual posted number of states and mismatch will result in the post being rejected.\n  * Attitude Set startTime and endTime must correspond to the earliest and latest state times, respectively, of the associated Onorbit Attitude states.\n  * Either satNo, idOnOrbit, or origObjectId must be provided. The preferred option is to post with satNo for a cataloged object, and with (only) origObjectId for an unknown, uncatalogued, or internal/test object.  There are several cases for the logic associated with these fields:\n    + If satNo is provided and correlates to a known UDL sat number then the idOnOrbit will be populated appropriately in addition to the satNo.\n    + If satNo is provided and does not correlate to a known UDL sat number then the provided satNo value will be moved to the origObjectId field and satNo left null.\n    + If origObjectId and a valid satNo or idOnOrbit are provided then both the satNo/idOnOrbit and origObjectId will maintain the provided values.\n    + If only origObjectId is provided then origObjectId will be populated with the posted value.  In this case, no checks are made against existing UDL sat numbers.\n</h3>\n",
        "operationId": "filedrop_udl_attitudeset_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttitudeSet_Ingest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-ephset": {
      "post": {
        "tags": [
          "Ephemeris"
        ],
        "description": "Service operation to take a single EphemerisSet and many associated Ephemeris records as a POST body for ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n</br>\nThe following rules apply to this operation:\n<h3>\n  * Ephemeris Set numPoints value must correspond exactly to the number of Ephemeris states associated with that Ephemeris Set.  The numPoints value is checked against the actual posted number of states and mismatch will result in the post being rejected.\n  * Ephemeris Set pointStartTime and pointEndTime must correspond to the earliest and latest state times, respectively, of the associated Ephemeris states.\n  * Either satNo, idOnOrbit, or origObjectId must be provided.  The preferred option is to post with satNo for a cataloged object, and with (only) origObjectId for an unknown, uncatalogued, or internal/test object.  There are several cases for the logic associated with these fields:\n    + If satNo is provided and correlates to a known UDL sat number then the idOnOrbit will be populated appropriately in addition to the satNo.\n    + If satNo is provided and does not correlate to a known UDL sat number then the provided satNo value will be moved to the origObjectId field and satNo left null.\n    + If origObjectId and a valid satNo or idOnOrbit are provided then both the satNo/idOnOrbit and origObjectId will maintain the provided values.\n    + If only origObjectId is provided then origObjectId will be populated with the posted value.  In this case, no checks are made against existing UDL sat numbers.\n</h3>\n",
        "operationId": "filedrop_udl_ephset_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EphemerisSet_Ingest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "429": {
            "description": "Rate Limit Exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/attitudedata": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttitudeData_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "asId",
            "description": "Unique identifier of the parent AttitudeSet associated with this record. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/attitudedata/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "asId",
            "description": "Unique identifier of the parent AttitudeSet associated with this record. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/attitudedata/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asId",
            "description": "Unique identifier of the parent AttitudeSet associated with this record. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttitudeData_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/attitudedata/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asId",
            "description": "Unique identifier of the parent AttitudeSet associated with this record. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/attitudedata/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "asId",
            "description": "Unique identifier of the parent AttitudeSet associated with this record. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/attitudedata/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/attitudedata/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asId",
            "description": "Unique identifier of the parent AttitudeSet associated with this record. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttitudeData_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/attitudeset": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttitudeSet_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation intended for initial integration only. Takes a single AttitudeSet as a POST body and ingest into the database. This operation does not persist any Onorbit Attitude points that may be present in the body of the request. This operation is not intended to be used for automated feeds into UDL. A specific role is required to perform this service operation.  Please contact the UDL team for assistance.\n</br>\nThe following rules apply to this operation:\n<h3>\n * Attitude Set numPoints value must correspond exactly to the number of Onorbit Attitude states associated with that Attitude Set.  The numPoints value is checked against the actual posted number of states and mismatch will result in the post being rejected.\n * Attitude Set startTime and endTime must correspond to the earliest and latest state times, respectively, of the associated Onorbit Attitude states.\n * Either satNo, idOnOrbit, or origObjectId must be provided.  The preferred option is to post with satNo for a cataloged object with (only) origObjectId for an unknown, uncatalogued, or internal/test object.  There are several cases for the logic associated with these fields:\n   + If satNo is provided and correlates to a known UDL sat number then the idOnOrbit will be populated appropriately in addition to the satNo.\n   + If satNo is provided and does not correlate to a known UDL sat number then the provided satNo value will be moved to the origObjectId field and satNo left null.\n   + If origObjectId and a valid satNo or idOnOrbit are provided then both the satNo/idOnOrbit and origObjectId will maintain the provided values.\n   + If only origObjectId is provided then origObjectId will be populated with the posted value.  In this case, no checks are made against existing UDL sat numbers.\n</h3>\n",
        "tags": [
          "Ephemeris"
        ],
        "requestBody": {
          "description": "JSON representation of one AttitudeSet.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttitudeSet_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/attitudeset/{id}": {
      "get": {
        "description": "Service operation to get a single AttitudeSet record by its unique ID passed as a path parameter.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "The ID of the AttitudeSet to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttitudeSet_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/attitudeset/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/attitudeset/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttitudeSet_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/attitudeset/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/attitudeset/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/attitudeset/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/attitudeset/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttitudeSet_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ephemeris": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ephemeris_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "esId",
            "description": "Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/ephemeris/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "esId",
            "description": "Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/ephemeris/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "esId",
            "description": "Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ephemeris_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ephemeris/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "esId",
            "description": "Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ephemeris/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "esId",
            "description": "Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/ephemeris/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ephemeris/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "esId",
            "description": "Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet. (uuid)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ephemeris_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ephemerisset": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EphemerisSet_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "pointEndTime",
            "description": "(One or more of fields 'pointEndTime, pointStartTime' are required.) End time/last time point of the ephemeris, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "pointStartTime",
            "description": "(One or more of fields 'pointEndTime, pointStartTime' are required.) Start time/first time point of the ephemeris, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation intended for initial integration only. Takes a single EphemerisSet as a POST body and ingest into the database. This operation does not persist any Ephemeris Points that may be present in the body of the request. This operation is not intended to be used for automated feeds into UDL.A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n</br>\nThe following rules apply to this operation:\n<h3>\n * Ephemeris Set numPoints value must correspond exactly to the number of Ephemeris states associated with that Ephemeris Set.  The numPoints value is checked against the actual posted number of states and mismatch will result in the post being rejected.\n * Ephemeris Set pointStartTime and pointEndTime must correspond to the earliest and latest state times, respectively, of the associated Ephemeris states.\n * Either satNo, idOnOrbit, or origObjectId must be provided.  The preferred option is to post with satNo for a cataloged object, and with (only) origObjectId for an unknown, uncatalogued, or internal/test object.  There are several cases for the logic associated with these fields:\n   + If satNo is provided and correlates to a known UDL sat number then the idOnOrbit will be populated appropriately in addition to the satNo.\n   + If satNo is provided and does not correlate to a known UDL sat number then the provided satNo value will be moved to the origObjectId field and satNo left null.\n   + If origObjectId and a valid satNo or idOnOrbit are provided then both the satNo/idOnOrbit and origObjectId will maintain the provided values.\n   + If only origObjectId is provided then origObjectId will be populated with the posted value.  In this case, no checks are made against existing UDL sat numbers.\n</h3>\n",
        "tags": [
          "Ephemeris"
        ],
        "requestBody": {
          "description": "JSON representation of one EphemerisSet.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EphemerisSet_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ephemerisset/{id}": {
      "get": {
        "description": "Service operation to get a single Ephemeris Set by its unique ID passed as a path parameter.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "The ID of the Ephemeris Set to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EphemerisSet_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ephemerisset/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "pointEndTime",
            "description": "(One or more of fields 'pointEndTime, pointStartTime' are required.) End time/last time point of the ephemeris, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "pointStartTime",
            "description": "(One or more of fields 'pointEndTime, pointStartTime' are required.) Start time/first time point of the ephemeris, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/ephemerisset/getFile/{id}": {
      "get": {
        "description": "Service operation to get the original raw flat file, if any, associated with the EphemerisSet. The file is returned as an attachment Content-Disposition.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "The ID of the EphemerisSet.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ephemerisset/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pointEndTime",
            "description": "(One or more of fields 'pointEndTime, pointStartTime' are required.) End time/last time point of the ephemeris, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "pointStartTime",
            "description": "(One or more of fields 'pointEndTime, pointStartTime' are required.) Start time/first time point of the ephemeris, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EphemerisSet_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ephemerisset/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pointEndTime",
            "description": "(One or more of fields 'pointEndTime, pointStartTime' are required.) End time/last time point of the ephemeris, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "pointStartTime",
            "description": "(One or more of fields 'pointEndTime, pointStartTime' are required.) Start time/first time point of the ephemeris, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ephemerisset/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "pointEndTime",
            "description": "(One or more of fields 'pointEndTime, pointStartTime' are required.) End time/last time point of the ephemeris, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "pointStartTime",
            "description": "(One or more of fields 'pointEndTime, pointStartTime' are required.) Start time/first time point of the ephemeris, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/ephemerisset/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Ephemeris"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ephemerisset/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Ephemeris"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pointEndTime",
            "description": "(One or more of fields 'pointEndTime, pointStartTime' are required.) End time/last time point of the ephemeris, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "pointStartTime",
            "description": "(One or more of fields 'pointEndTime, pointStartTime' are required.) Start time/first time point of the ephemeris, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EphemerisSet_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Antenna_Full": {
        "description": "Model representation of information on on-orbit/spacecraft communication antennas. A spacecraft may have multiple antennas and each antenna can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "name": {
            "description": "Antenna name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "IRIDIUM NEXT 121-ANTENNA-10075"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "antennaDetails": {
            "description": "Read-only collection of additional AntennaDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/antennadetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AntennaDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "AntennaDetails_Full": {
        "description": "Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.",
        "required": [
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNADETAILS-ID"
          },
          "idAntenna": {
            "description": "Unique identifier of the parent Antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Reflector"
          },
          "position": {
            "description": "Antenna position (e.g. Top, Nadir, Side).",
            "maxLength": 128,
            "type": "string",
            "example": "Top"
          },
          "mode": {
            "description": "Antenna mode (e.g. TX,RX).",
            "maxLength": 4,
            "enum": [
              "TX",
              "RX"
            ],
            "type": "string",
            "example": "TX"
          },
          "steerable": {
            "description": "Boolean indicating if this antenna is steerable.",
            "type": "boolean",
            "example": false
          },
          "beamForming": {
            "description": "Boolean indicating if this is a beam forming antenna.",
            "type": "boolean",
            "example": false
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the antenna.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTUREORG-ID"
          },
          "diameter": {
            "format": "double",
            "description": "Antenna diameter in meters.",
            "type": "number",
            "example": 0.01
          },
          "size": {
            "description": "Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.05
            ]
          },
          "startFrequency": {
            "format": "double",
            "description": "Antenna start of frequency range in Mhz.",
            "type": "number",
            "example": 2.1
          },
          "endFrequency": {
            "format": "double",
            "description": "Antenna end of frequency range in Mhz.",
            "type": "number",
            "example": 3.3
          },
          "beamwidth": {
            "format": "double",
            "description": "Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.",
            "type": "number",
            "example": 14.1
          },
          "gain": {
            "format": "double",
            "description": "Antenna maximum gain in dBi.",
            "type": "number",
            "example": 20.1
          },
          "gainTolerance": {
            "format": "double",
            "description": "Antenna gain tolerance in dB.",
            "type": "number",
            "example": 5.1
          },
          "polarization": {
            "format": "double",
            "description": "Antenna polarization in degrees.",
            "type": "number",
            "example": 45.1
          },
          "description": {
            "description": "Antenna description.",
            "maxLength": 512,
            "type": "string",
            "example": "Description of antenna A"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "AttitudeData_Abridged": {
        "description": "These services provide operations for posting and querying attitude of on-orbit objects.  Attitude describes the orientation of an object, which can be represented by quaternions or euler angles.  The AttitudeSet ID (asId) identifies the 'AttitudeSet' record which contains details of the underlying data as well as a collection of attitude points. Points must be retrieved by first identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID 'asId'.",
        "required": [
          "classificationMarking",
          "ts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ATTITUDEDATA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "asId": {
            "description": "Unique identifier of the parent AttitudeSet associated with this record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "773c9887-e931-42eb-8155-f0fbd227b235"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite to which this attitude record applies.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "41947"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the on-orbit object to which this attitude record applies.",
            "type": "integer",
            "example": 41947
          },
          "origObjectId": {
            "description": "Optional identifier provided by the record source to indicate the target object of this attitude record. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "D6593"
          },
          "ts": {
            "format": "date-time",
            "description": "Time associated with this attitude record, in ISO 8601 UTC format, with microsecond precision.",
            "type": "string",
            "example": "2022-03-07T14:51:39.653043Z"
          },
          "motionType": {
            "description": "Label specifying type of rotational motion of target.",
            "maxLength": 36,
            "type": "string",
            "example": "PROSOL_MOTION"
          },
          "q1": {
            "format": "double",
            "description": "Quaternion vector component 1.",
            "type": "number",
            "example": 0.0312
          },
          "q2": {
            "format": "double",
            "description": "Quaternion vector component 2.",
            "type": "number",
            "example": 0.7854
          },
          "q3": {
            "format": "double",
            "description": "Quaternion vector component 3.",
            "type": "number",
            "example": 0.3916
          },
          "qc": {
            "format": "double",
            "description": "Quaternion scalar component.",
            "type": "number",
            "example": 0.4783
          },
          "q1Dot": {
            "format": "double",
            "description": "Derivative of quaternion vector component 1.",
            "type": "number",
            "example": 0.0043
          },
          "q2Dot": {
            "format": "double",
            "description": "Derivative of quaternion vector component 2.",
            "type": "number",
            "example": 0.06
          },
          "q3Dot": {
            "format": "double",
            "description": "Derivative of quaternion vector component 3.",
            "type": "number",
            "example": 0.499
          },
          "qcDot": {
            "format": "double",
            "description": "Derivative of quaternion scalar component.",
            "type": "number",
            "example": 0.011
          },
          "xAngle": {
            "description": "Array of X body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              139.753
            ]
          },
          "yAngle": {
            "description": "Array of Y body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              25.066
            ]
          },
          "zAngle": {
            "description": "Array of Z body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -53.368
            ]
          },
          "xRate": {
            "description": "Array of X body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.105
            ]
          },
          "yRate": {
            "description": "Array of Y body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.032
            ]
          },
          "zRate": {
            "description": "Array of Z body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence  Attitude rates are expressed in frame1 with respect to frame2.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.022
            ]
          },
          "ra": {
            "format": "double",
            "description": "Precession axis right ascension (ECI J2000 frame) in degrees.",
            "type": "number",
            "example": -173.75
          },
          "declination": {
            "format": "double",
            "description": "Precession axis declination (ECI J2000 frame) in degrees.",
            "type": "number",
            "example": 0.799
          },
          "coningAngle": {
            "format": "double",
            "description": "Coning angle in degrees.",
            "type": "number",
            "example": 0.1
          },
          "precPeriod": {
            "format": "double",
            "description": "Precession period in seconds.",
            "type": "number",
            "example": 36.1
          },
          "spinPeriod": {
            "format": "double",
            "description": "Spin period in seconds.",
            "type": "number",
            "example": 0.1
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2022-07-05T12:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "AttitudeData_Full": {
        "description": "These services provide operations for posting and querying attitude of on-orbit objects.  Attitude describes the orientation of an object, which can be represented by quaternions or euler angles.  The AttitudeSet ID (asId) identifies the 'AttitudeSet' record which contains details of the underlying data as well as a collection of attitude points. Points must be retrieved by first identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID 'asId'.",
        "required": [
          "classificationMarking",
          "ts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ATTITUDEDATA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "asId": {
            "description": "Unique identifier of the parent AttitudeSet associated with this record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "773c9887-e931-42eb-8155-f0fbd227b235"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite to which this attitude record applies.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "41947"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the on-orbit object to which this attitude record applies.",
            "type": "integer",
            "example": 41947
          },
          "origObjectId": {
            "description": "Optional identifier provided by the record source to indicate the target object of this attitude record. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "D6593"
          },
          "ts": {
            "format": "date-time",
            "description": "Time associated with this attitude record, in ISO 8601 UTC format, with microsecond precision.",
            "type": "string",
            "example": "2022-03-07T14:51:39.653043Z"
          },
          "motionType": {
            "description": "Label specifying type of rotational motion of target.",
            "maxLength": 36,
            "type": "string",
            "example": "PROSOL_MOTION"
          },
          "q1": {
            "format": "double",
            "description": "Quaternion vector component 1.",
            "type": "number",
            "example": 0.0312
          },
          "q2": {
            "format": "double",
            "description": "Quaternion vector component 2.",
            "type": "number",
            "example": 0.7854
          },
          "q3": {
            "format": "double",
            "description": "Quaternion vector component 3.",
            "type": "number",
            "example": 0.3916
          },
          "qc": {
            "format": "double",
            "description": "Quaternion scalar component.",
            "type": "number",
            "example": 0.4783
          },
          "q1Dot": {
            "format": "double",
            "description": "Derivative of quaternion vector component 1.",
            "type": "number",
            "example": 0.0043
          },
          "q2Dot": {
            "format": "double",
            "description": "Derivative of quaternion vector component 2.",
            "type": "number",
            "example": 0.06
          },
          "q3Dot": {
            "format": "double",
            "description": "Derivative of quaternion vector component 3.",
            "type": "number",
            "example": 0.499
          },
          "qcDot": {
            "format": "double",
            "description": "Derivative of quaternion scalar component.",
            "type": "number",
            "example": 0.011
          },
          "xAngle": {
            "description": "Array of X body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              139.753
            ]
          },
          "yAngle": {
            "description": "Array of Y body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              25.066
            ]
          },
          "zAngle": {
            "description": "Array of Z body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -53.368
            ]
          },
          "xRate": {
            "description": "Array of X body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.105
            ]
          },
          "yRate": {
            "description": "Array of Y body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.032
            ]
          },
          "zRate": {
            "description": "Array of Z body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence  Attitude rates are expressed in frame1 with respect to frame2.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.022
            ]
          },
          "ra": {
            "format": "double",
            "description": "Precession axis right ascension (ECI J2000 frame) in degrees.",
            "type": "number",
            "example": -173.75
          },
          "declination": {
            "format": "double",
            "description": "Precession axis declination (ECI J2000 frame) in degrees.",
            "type": "number",
            "example": 0.799
          },
          "coningAngle": {
            "format": "double",
            "description": "Coning angle in degrees.",
            "type": "number",
            "example": 0.1
          },
          "precPeriod": {
            "format": "double",
            "description": "Precession period in seconds.",
            "type": "number",
            "example": 36.1
          },
          "spinPeriod": {
            "format": "double",
            "description": "Spin period in seconds.",
            "type": "number",
            "example": 0.1
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2022-07-05T12:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "AttitudeData_Ingest": {
        "description": "These services provide operations for posting and querying attitude of on-orbit objects.  Attitude describes the orientation of an object, which can be represented by quaternions or euler angles.  The AttitudeSet ID (asId) identifies the 'AttitudeSet' record which contains details of the underlying data as well as a collection of attitude points. Points must be retrieved by first identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID 'asId'.",
        "required": [
          "classificationMarking",
          "ts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ATTITUDEDATA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "asId": {
            "description": "Unique identifier of the parent AttitudeSet associated with this record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "773c9887-e931-42eb-8155-f0fbd227b235"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite to which this attitude record applies.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "41947"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the on-orbit object to which this attitude record applies.",
            "type": "integer",
            "example": 41947
          },
          "origObjectId": {
            "description": "Optional identifier provided by the record source to indicate the target object of this attitude record. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "D6593"
          },
          "ts": {
            "format": "date-time",
            "description": "Time associated with this attitude record, in ISO 8601 UTC format, with microsecond precision.",
            "type": "string",
            "example": "2022-03-07T14:51:39.653043Z"
          },
          "motionType": {
            "description": "Label specifying type of rotational motion of target.",
            "maxLength": 36,
            "type": "string",
            "example": "PROSOL_MOTION"
          },
          "q1": {
            "format": "double",
            "description": "Quaternion vector component 1.",
            "type": "number",
            "example": 0.0312
          },
          "q2": {
            "format": "double",
            "description": "Quaternion vector component 2.",
            "type": "number",
            "example": 0.7854
          },
          "q3": {
            "format": "double",
            "description": "Quaternion vector component 3.",
            "type": "number",
            "example": 0.3916
          },
          "qc": {
            "format": "double",
            "description": "Quaternion scalar component.",
            "type": "number",
            "example": 0.4783
          },
          "q1Dot": {
            "format": "double",
            "description": "Derivative of quaternion vector component 1.",
            "type": "number",
            "example": 0.0043
          },
          "q2Dot": {
            "format": "double",
            "description": "Derivative of quaternion vector component 2.",
            "type": "number",
            "example": 0.06
          },
          "q3Dot": {
            "format": "double",
            "description": "Derivative of quaternion vector component 3.",
            "type": "number",
            "example": 0.499
          },
          "qcDot": {
            "format": "double",
            "description": "Derivative of quaternion scalar component.",
            "type": "number",
            "example": 0.011
          },
          "xAngle": {
            "description": "Array of X body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              139.753
            ]
          },
          "yAngle": {
            "description": "Array of Y body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              25.066
            ]
          },
          "zAngle": {
            "description": "Array of Z body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -53.368
            ]
          },
          "xRate": {
            "description": "Array of X body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.105
            ]
          },
          "yRate": {
            "description": "Array of Y body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.032
            ]
          },
          "zRate": {
            "description": "Array of Z body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence  Attitude rates are expressed in frame1 with respect to frame2.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.022
            ]
          },
          "ra": {
            "format": "double",
            "description": "Precession axis right ascension (ECI J2000 frame) in degrees.",
            "type": "number",
            "example": -173.75
          },
          "declination": {
            "format": "double",
            "description": "Precession axis declination (ECI J2000 frame) in degrees.",
            "type": "number",
            "example": 0.799
          },
          "coningAngle": {
            "format": "double",
            "description": "Coning angle in degrees.",
            "type": "number",
            "example": 0.1
          },
          "precPeriod": {
            "format": "double",
            "description": "Precession period in seconds.",
            "type": "number",
            "example": 36.1
          },
          "spinPeriod": {
            "format": "double",
            "description": "Spin period in seconds.",
            "type": "number",
            "example": 0.1
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2022-07-05T12:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "AttitudeSet_Abridged": {
        "description": "AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.",
        "required": [
          "classificationMarking",
          "type",
          "startTime",
          "endTime",
          "frame1",
          "frame2",
          "numPoints",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ATTITUDESET-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite to which this attitude set applies.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "41947"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the on-orbit object to which this attitude set applies.",
            "type": "integer",
            "example": 41947
          },
          "origObjectId": {
            "description": "Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "D6593"
          },
          "type": {
            "description": "The type of attitude message or messages associated with this set.\n\nAEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.\n\nAPM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.",
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "example": "AEM"
          },
          "esId": {
            "description": "Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.",
            "maxLength": 36,
            "type": "string",
            "example": "60f7a241-b7be-48d8-acf3-786670af53f9"
          },
          "idSensor": {
            "description": "Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.",
            "maxLength": 36,
            "type": "string",
            "example": "a7e99418-b6d6-29ab-e767-440a989cce26"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "startTime": {
            "format": "date-time",
            "description": "The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.",
            "type": "string",
            "example": "2022-07-07T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.",
            "type": "string",
            "example": "2022-07-07T18:00:00.654321Z"
          },
          "frame1": {
            "description": "Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SCBODY"
          },
          "frame2": {
            "description": "Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "J2000"
          },
          "numPoints": {
            "format": "int32",
            "description": "Number of attitude records contained in this set.",
            "type": "integer",
            "example": 120
          },
          "stepSize": {
            "format": "int32",
            "description": "Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.",
            "type": "integer",
            "example": 60
          },
          "precAngleInit": {
            "format": "double",
            "description": "Initial precession angle (ECI J2000 frame) in degrees.",
            "type": "number",
            "example": 30.5
          },
          "spinAngleInit": {
            "format": "double",
            "description": "Initial spin angle (ECI J2000 frame) in degrees.",
            "type": "number",
            "example": 25.5
          },
          "eulerRotSeq": {
            "description": "The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. \n\n\n\nThe following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.",
            "maxLength": 3,
            "type": "string",
            "example": "123"
          },
          "interpolator": {
            "description": "Recommended interpolation method for estimating attitude ephemeris data.",
            "maxLength": 16,
            "type": "string",
            "example": "LINEAR"
          },
          "interpolatorDegree": {
            "format": "int32",
            "description": "Recommended polynomial interpolation degree.",
            "type": "integer",
            "example": 2
          },
          "notes": {
            "description": "Optional notes/comments for this attitude set.",
            "maxLength": 1024,
            "type": "string",
            "example": "Notes for this attitude set"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2022-07-05T12:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "AttitudeSet_Full": {
        "description": "AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.",
        "required": [
          "classificationMarking",
          "type",
          "startTime",
          "endTime",
          "frame1",
          "frame2",
          "numPoints",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ATTITUDESET-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite to which this attitude set applies.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "41947"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the on-orbit object to which this attitude set applies.",
            "type": "integer",
            "example": 41947
          },
          "origObjectId": {
            "description": "Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "D6593"
          },
          "type": {
            "description": "The type of attitude message or messages associated with this set.\n\nAEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.\n\nAPM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.",
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "example": "AEM"
          },
          "esId": {
            "description": "Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.",
            "maxLength": 36,
            "type": "string",
            "example": "60f7a241-b7be-48d8-acf3-786670af53f9"
          },
          "asRef": {
            "description": "Array of UDL UUIDs of one or more AttitudeSet records associated with this set.  For example, a spacecraft Attitude Ephemeris Set might include a reference to an Attitude Parameter Message defining the sensor to body frame transformation for a sensor onboard the spacecraft, which allows for calculation of the sensor orientation in frame2 of the attitude ephemeris.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "2ea97de6-4680-4767-a07e-35d16398ef60"
            ]
          },
          "idSensor": {
            "description": "Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.",
            "maxLength": 36,
            "type": "string",
            "example": "a7e99418-b6d6-29ab-e767-440a989cce26"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "startTime": {
            "format": "date-time",
            "description": "The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.",
            "type": "string",
            "example": "2022-07-07T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.",
            "type": "string",
            "example": "2022-07-07T18:00:00.654321Z"
          },
          "frame1": {
            "description": "Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SCBODY"
          },
          "frame2": {
            "description": "Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "J2000"
          },
          "numPoints": {
            "format": "int32",
            "description": "Number of attitude records contained in this set.",
            "type": "integer",
            "example": 120
          },
          "stepSize": {
            "format": "int32",
            "description": "Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.",
            "type": "integer",
            "example": 60
          },
          "precAngleInit": {
            "format": "double",
            "description": "Initial precession angle (ECI J2000 frame) in degrees.",
            "type": "number",
            "example": 30.5
          },
          "spinAngleInit": {
            "format": "double",
            "description": "Initial spin angle (ECI J2000 frame) in degrees.",
            "type": "number",
            "example": 25.5
          },
          "eulerRotSeq": {
            "description": "The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. \n\n\n\nThe following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.",
            "maxLength": 3,
            "type": "string",
            "example": "123"
          },
          "attitudeList": {
            "description": "Collection of attitude data associated with this Attitude Set.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttitudeData_Full"
            }
          },
          "interpolator": {
            "description": "Recommended interpolation method for estimating attitude ephemeris data.",
            "maxLength": 16,
            "type": "string",
            "example": "LINEAR"
          },
          "interpolatorDegree": {
            "format": "int32",
            "description": "Recommended polynomial interpolation degree.",
            "type": "integer",
            "example": 2
          },
          "notes": {
            "description": "Optional notes/comments for this attitude set.",
            "maxLength": 1024,
            "type": "string",
            "example": "Notes for this attitude set"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2022-07-05T12:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          }
        }
      },
      "AttitudeSet_Ingest": {
        "description": "AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.",
        "required": [
          "classificationMarking",
          "type",
          "startTime",
          "endTime",
          "frame1",
          "frame2",
          "numPoints",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ATTITUDESET-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite to which this attitude set applies.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "41947"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the on-orbit object to which this attitude set applies.",
            "type": "integer",
            "example": 41947
          },
          "origObjectId": {
            "description": "Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "D6593"
          },
          "type": {
            "description": "The type of attitude message or messages associated with this set.\n\nAEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.\n\nAPM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.",
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "example": "AEM"
          },
          "esId": {
            "description": "Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.",
            "maxLength": 36,
            "type": "string",
            "example": "60f7a241-b7be-48d8-acf3-786670af53f9"
          },
          "asRef": {
            "description": "Array of UDL UUIDs of one or more AttitudeSet records associated with this set.  For example, a spacecraft Attitude Ephemeris Set might include a reference to an Attitude Parameter Message defining the sensor to body frame transformation for a sensor onboard the spacecraft, which allows for calculation of the sensor orientation in frame2 of the attitude ephemeris.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "2ea97de6-4680-4767-a07e-35d16398ef60"
            ]
          },
          "idSensor": {
            "description": "Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.",
            "maxLength": 36,
            "type": "string",
            "example": "a7e99418-b6d6-29ab-e767-440a989cce26"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "startTime": {
            "format": "date-time",
            "description": "The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.",
            "type": "string",
            "example": "2022-07-07T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.",
            "type": "string",
            "example": "2022-07-07T18:00:00.654321Z"
          },
          "frame1": {
            "description": "Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SCBODY"
          },
          "frame2": {
            "description": "Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "J2000"
          },
          "numPoints": {
            "format": "int32",
            "description": "Number of attitude records contained in this set.",
            "type": "integer",
            "example": 120
          },
          "stepSize": {
            "format": "int32",
            "description": "Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.",
            "type": "integer",
            "example": 60
          },
          "precAngleInit": {
            "format": "double",
            "description": "Initial precession angle (ECI J2000 frame) in degrees.",
            "type": "number",
            "example": 30.5
          },
          "spinAngleInit": {
            "format": "double",
            "description": "Initial spin angle (ECI J2000 frame) in degrees.",
            "type": "number",
            "example": 25.5
          },
          "eulerRotSeq": {
            "description": "The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. \n\n\n\nThe following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.",
            "maxLength": 3,
            "type": "string",
            "example": "123"
          },
          "attitudeList": {
            "description": "Collection of attitude data associated with this Attitude Set.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttitudeData_Ingest"
            }
          },
          "interpolator": {
            "description": "Recommended interpolation method for estimating attitude ephemeris data.",
            "maxLength": 16,
            "type": "string",
            "example": "LINEAR"
          },
          "interpolatorDegree": {
            "format": "int32",
            "description": "Recommended polynomial interpolation degree.",
            "type": "integer",
            "example": 2
          },
          "notes": {
            "description": "Optional notes/comments for this attitude set.",
            "maxLength": 1024,
            "type": "string",
            "example": "Notes for this attitude set"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2022-07-05T12:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "Battery_Full": {
        "description": "Model representation of specific spacecraft battery types.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "name": {
            "description": "Battery name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "JAK-BATTERY-1479"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "batteryDetails": {
            "description": "Read-only collection of additional BatteryDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/batterydetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatteryDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "BatteryDetails_Full": {
        "description": "Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.",
        "required": [
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERYDETAILS-ID"
          },
          "idBattery": {
            "description": "Identifier of the parent battery type record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "technology": {
            "description": "Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Ni-Cd"
          },
          "capacity": {
            "format": "double",
            "description": "Battery capacity in Ah.",
            "type": "number",
            "example": 10.1
          },
          "dischargeDepth": {
            "format": "double",
            "description": "Depth of discharge as a percentage/fraction.",
            "type": "number",
            "example": 0.2
          },
          "model": {
            "description": "Battery model number or name.",
            "maxLength": 128,
            "type": "string",
            "example": "11212"
          },
          "description": {
            "description": "Battery description/notes.",
            "maxLength": 1024,
            "type": "string",
            "example": "example notes"
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the battery.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "DataMode": {
        "enum": [
          "REAL",
          "TEST",
          "SIMULATED",
          "EXERCISE"
        ],
        "type": "string"
      },
      "Engine_Full": {
        "description": "Known launch vehicle engines and their performance characteristics and limits.  A launch vehicle has 1 to many engines per stage.",
        "required": [
          "name",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "name": {
            "description": "Engine name/variant.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE_VARIANT1"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engineDetails": {
            "description": "Read-only collection of additional EngineDetails by various sources for this engine, ignored on create/update. These details must be created separately via the /udl/enginedetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EngineDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "EngineDetails_Full": {
        "description": "Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.",
        "required": [
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINEDETAILS-ID"
          },
          "idEngine": {
            "description": "Identifier of the parent engine record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "family": {
            "description": "Engine type or family.",
            "maxLength": 64,
            "type": "string",
            "example": "ENGINE_TYPE1"
          },
          "cycleType": {
            "description": "Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Pressure Fed"
          },
          "characteristicType": {
            "description": "Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Electric"
          },
          "manufacturerOrgId": {
            "description": "Organization ID of the engine manufacturer.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "specificImpulse": {
            "format": "double",
            "description": "Launch engine specific impulse in seconds.",
            "type": "number",
            "example": 1.1
          },
          "burnTime": {
            "format": "double",
            "description": "Launch engine maximum burn time in seconds.",
            "type": "number",
            "example": 1.1
          },
          "seaLevelThrust": {
            "format": "double",
            "description": "Engine maximum thrust at sea level in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "vacuumThrust": {
            "format": "double",
            "description": "Engine maximum thrust in a vacuum in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "chamberPressure": {
            "format": "double",
            "description": "Engine chamber pressure in bars.",
            "type": "number",
            "example": 1.1
          },
          "nozzleExpansionRatio": {
            "format": "double",
            "description": "Engine nozzle expansion ratio.",
            "type": "number",
            "example": 1.1
          },
          "maxFirings": {
            "format": "int32",
            "description": "Engine maximum number of firings.",
            "type": "integer",
            "example": 5
          },
          "propellant": {
            "description": "Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid"
          },
          "oxidizer": {
            "description": "Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid Oxygen"
          },
          "notes": {
            "description": "Notes/Description of the engine.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "Ephemeris_Abridged": {
        "description": "An ephemeris record is a position and velocity vector identifying the location and trajectory of an on-orbit object at a specified time. Ephemeris points, including covariance, are in kilometer and second based units in a user specified reference frame, with ECI J2K being preferred. The EphemerisSet ID (esId) links all points associated with an ephemeris set. The 'EphemerisSet' record contains details of the underlying data and propagation models used in the generation of the ephemeris. Ephemeris points must be retrieved by specifying the parent EphemerisSet ID (esId).",
        "required": [
          "classificationMarking",
          "ts",
          "xpos",
          "ypos",
          "zpos",
          "xvel",
          "yvel",
          "zvel",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EPHEMERIS-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "esId": {
            "description": "Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ES-ID"
          },
          "ts": {
            "format": "date-time",
            "description": "Time associated with the Ephemeris Point, in ISO8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "xpos": {
            "format": "double",
            "description": "Cartesian X position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "ypos": {
            "format": "double",
            "description": "Cartesian Y position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "zpos": {
            "format": "double",
            "description": "Cartesian Z position of target, in km, in the specified EphemerisSet referenceFrame. If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "xvel": {
            "format": "double",
            "description": "Cartesian X velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "yvel": {
            "format": "double",
            "description": "Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "zvel": {
            "format": "double",
            "description": "Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "xaccel": {
            "format": "double",
            "description": "Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "yaccel": {
            "format": "double",
            "description": "Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "zaccel": {
            "format": "double",
            "description": "Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "cov": {
            "description": "Covariance matrix, in kilometer and second based units, in the specified Ephemeris Set covReferenceFrame.  If the covReferenceFrame from the EphemerisSet table is null it is assumed to be J2000.\nThe array values represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;\n\nx&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3\n\nz&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6\n\nx'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10\n\ny'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15\n\nz'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21\n\n\n\n\n\nThe array containing the covariance matrix elements will be of length 6 for position only covariance, or length 21 for position-velocity covariance.  The cov array should contain only the lower left triangle values from top left down to bottom right, in order.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.4,
              3.8,
              4.2,
              5.5,
              6
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite object.",
            "maxLength": 36,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          }
        }
      },
      "Ephemeris_Full": {
        "description": "An ephemeris record is a position and velocity vector identifying the location and trajectory of an on-orbit object at a specified time. Ephemeris points, including covariance, are in kilometer and second based units in a user specified reference frame, with ECI J2K being preferred. The EphemerisSet ID (esId) links all points associated with an ephemeris set. The 'EphemerisSet' record contains details of the underlying data and propagation models used in the generation of the ephemeris. Ephemeris points must be retrieved by specifying the parent EphemerisSet ID (esId).",
        "required": [
          "classificationMarking",
          "ts",
          "xpos",
          "ypos",
          "zpos",
          "xvel",
          "yvel",
          "zvel",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EPHEMERIS-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "esId": {
            "description": "Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ES-ID"
          },
          "ts": {
            "format": "date-time",
            "description": "Time associated with the Ephemeris Point, in ISO8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "xpos": {
            "format": "double",
            "description": "Cartesian X position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "ypos": {
            "format": "double",
            "description": "Cartesian Y position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "zpos": {
            "format": "double",
            "description": "Cartesian Z position of target, in km, in the specified EphemerisSet referenceFrame. If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "xvel": {
            "format": "double",
            "description": "Cartesian X velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "yvel": {
            "format": "double",
            "description": "Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "zvel": {
            "format": "double",
            "description": "Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "xaccel": {
            "format": "double",
            "description": "Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "yaccel": {
            "format": "double",
            "description": "Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "zaccel": {
            "format": "double",
            "description": "Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "cov": {
            "description": "Covariance matrix, in kilometer and second based units, in the specified Ephemeris Set covReferenceFrame.  If the covReferenceFrame from the EphemerisSet table is null it is assumed to be J2000.\nThe array values represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;\n\nx&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3\n\nz&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6\n\nx'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10\n\ny'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15\n\nz'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21\n\n\n\n\n\nThe array containing the covariance matrix elements will be of length 6 for position only covariance, or length 21 for position-velocity covariance.  The cov array should contain only the lower left triangle values from top left down to bottom right, in order.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.4,
              3.8,
              4.2,
              5.5,
              6
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite object.",
            "maxLength": 36,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          }
        }
      },
      "Ephemeris_Ingest": {
        "description": "An ephemeris record is a position and velocity vector identifying the location and trajectory of an on-orbit object at a specified time. Ephemeris points, including covariance, are in kilometer and second based units in a user specified reference frame, with ECI J2K being preferred. The EphemerisSet ID (esId) links all points associated with an ephemeris set. The 'EphemerisSet' record contains details of the underlying data and propagation models used in the generation of the ephemeris. Ephemeris points must be retrieved by specifying the parent EphemerisSet ID (esId).",
        "required": [
          "classificationMarking",
          "ts",
          "xpos",
          "ypos",
          "zpos",
          "xvel",
          "yvel",
          "zvel",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EPHEMERIS-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "esId": {
            "description": "Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ES-ID"
          },
          "ts": {
            "format": "date-time",
            "description": "Time associated with the Ephemeris Point, in ISO8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "xpos": {
            "format": "double",
            "description": "Cartesian X position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "ypos": {
            "format": "double",
            "description": "Cartesian Y position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "zpos": {
            "format": "double",
            "description": "Cartesian Z position of target, in km, in the specified EphemerisSet referenceFrame. If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "xvel": {
            "format": "double",
            "description": "Cartesian X velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "yvel": {
            "format": "double",
            "description": "Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "zvel": {
            "format": "double",
            "description": "Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "xaccel": {
            "format": "double",
            "description": "Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "yaccel": {
            "format": "double",
            "description": "Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "zaccel": {
            "format": "double",
            "description": "Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "cov": {
            "description": "Covariance matrix, in kilometer and second based units, in the specified Ephemeris Set covReferenceFrame.  If the covReferenceFrame from the EphemerisSet table is null it is assumed to be J2000.\nThe array values represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;\n\nx&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3\n\nz&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6\n\nx'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10\n\ny'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15\n\nz'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21\n\n\n\n\n\nThe array containing the covariance matrix elements will be of length 6 for position only covariance, or length 21 for position-velocity covariance.  The cov array should contain only the lower left triangle values from top left down to bottom right, in order.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.4,
              3.8,
              4.2,
              5.5,
              6
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite object.",
            "maxLength": 36,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          }
        }
      },
      "EphemerisSet_Abridged": {
        "description": "EphemerisSet represents a wrapper or collection of Ephemeris 'points' and meta data indicating the specifics of the propagation of an on-orbit object. Ephemeris is typically distributed in a flat file containing details of the ephemeris generation as well as a large collection of individual points at varying time steps. EphemerisSet is analogous to this flat file.",
        "required": [
          "classificationMarking",
          "pointStartTime",
          "pointEndTime",
          "numPoints",
          "type",
          "category",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EPHEMERISSET-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the primary satellite on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "pointStartTime": {
            "format": "date-time",
            "description": "Start time/first time point of the ephemeris, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "usableStartTime": {
            "format": "date-time",
            "description": "Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:10:00.123456Z"
          },
          "pointEndTime": {
            "format": "date-time",
            "description": "End time/last time point of the ephemeris, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "usableEndTime": {
            "format": "date-time",
            "description": "Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T20:50:00.123456Z"
          },
          "stepSize": {
            "format": "int16",
            "description": "Ephemeris step size, in seconds.",
            "type": "integer",
            "example": 1
          },
          "numPoints": {
            "format": "int32",
            "description": "Number of points contained in the ephemeris.",
            "type": "integer",
            "example": 1
          },
          "type": {
            "description": "The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE, SCREENING).",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCH"
          },
          "pedigree": {
            "description": "The pedigree of the ephemeris or source data used for ephemeris generation (e.g. DOPPLER, GPS, HYBRID, PROPAGATED, RANGING, SLR).",
            "maxLength": 24,
            "type": "string",
            "example": "PROPAGATED"
          },
          "category": {
            "description": "The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL).",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "ANALYST"
          },
          "idStateVector": {
            "description": "ID of the State Vector used to generate the ephemeris.",
            "maxLength": 36,
            "type": "string",
            "example": "STATEVECTOR-ID"
          },
          "hasMnvr": {
            "description": "Boolean indicating whether maneuver(s) are incorporated into the ephemeris.",
            "type": "boolean",
            "example": false
          },
          "idManeuvers": {
            "description": "Array of the maneuver IDs of all maneuvers incorporated in the ephemeris.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "EXAMPLE_ID1",
              "EXAMPLE_ID2"
            ]
          },
          "hasCov": {
            "description": "Boolean indicating whether covariance data is provided with the ephemeris.",
            "type": "boolean",
            "example": false
          },
          "hasAccel": {
            "description": "Boolean indicating whether acceleration data is provided with the ephemeris.",
            "type": "boolean",
            "example": false
          },
          "centBody": {
            "description": "The Central Body of the ephemeris.  Assumed to be Earth, unless otherwise indicated.",
            "maxLength": 32,
            "type": "string",
            "example": "Earth"
          },
          "integrator": {
            "description": "Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY).",
            "maxLength": 24,
            "type": "string",
            "example": "COWELL"
          },
          "geopotentialModel": {
            "description": "Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2, GEM-T3), including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).",
            "maxLength": 32,
            "type": "string",
            "example": "GEM-T3"
          },
          "dragModel": {
            "description": "Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "JAC70"
          },
          "lunarSolar": {
            "description": "Boolean indicating use of lunar/solar data in ephemeris generation.",
            "type": "boolean",
            "example": false
          },
          "solidEarthTides": {
            "description": "Boolean indicating use of solid earth tide data in ephemeris generation.",
            "type": "boolean",
            "example": false
          },
          "bDot": {
            "format": "double",
            "description": "First derivative of ballistic coefficient (m^2/kg-s).",
            "type": "number",
            "example": 1.1
          },
          "edr": {
            "format": "double",
            "description": "Model parameter value for energy dissipation rate (EDR), expressed in w/kg.",
            "type": "number",
            "example": 1.1
          },
          "interpolation": {
            "description": "The recommended interpolation method for the ephemeris data.",
            "maxLength": 16,
            "type": "string",
            "example": "LINEAR"
          },
          "interpolationDegree": {
            "format": "int32",
            "description": "The recommended interpolation degree for the ephemeris data.",
            "type": "integer",
            "example": 5
          },
          "filename": {
            "description": "Filename of the raw file used to provide the ephemeris data including filetype extension, if applicable. This file may be retrieved using the 'getFile' operation as specified in the 'EphemerisSet' OpenAPI docs.",
            "maxLength": 128,
            "type": "string",
            "example": "Example file name"
          },
          "comments": {
            "description": "Additional source provided comments associated with the ephemeris.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "description": {
            "description": "Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris were generated using the last observation available.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "Example descriptor"
          },
          "referenceFrame": {
            "description": "The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "covReferenceFrame": {
            "description": "The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "UVW"
            ],
            "type": "string",
            "example": "J2000"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, in UTC.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 2
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "EphemerisSet_Full": {
        "description": "EphemerisSet represents a wrapper or collection of Ephemeris 'points' and meta data indicating the specifics of the propagation of an on-orbit object. Ephemeris is typically distributed in a flat file containing details of the ephemeris generation as well as a large collection of individual points at varying time steps. EphemerisSet is analogous to this flat file.",
        "required": [
          "classificationMarking",
          "pointStartTime",
          "pointEndTime",
          "numPoints",
          "type",
          "category",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EPHEMERISSET-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the primary satellite on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "pointStartTime": {
            "format": "date-time",
            "description": "Start time/first time point of the ephemeris, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "usableStartTime": {
            "format": "date-time",
            "description": "Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:10:00.123456Z"
          },
          "pointEndTime": {
            "format": "date-time",
            "description": "End time/last time point of the ephemeris, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "usableEndTime": {
            "format": "date-time",
            "description": "Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T20:50:00.123456Z"
          },
          "stepSize": {
            "format": "int16",
            "description": "Ephemeris step size, in seconds.",
            "type": "integer",
            "example": 1
          },
          "numPoints": {
            "format": "int32",
            "description": "Number of points contained in the ephemeris.",
            "type": "integer",
            "example": 1
          },
          "type": {
            "description": "The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE, SCREENING).",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCH"
          },
          "pedigree": {
            "description": "The pedigree of the ephemeris or source data used for ephemeris generation (e.g. DOPPLER, GPS, HYBRID, PROPAGATED, RANGING, SLR).",
            "maxLength": 24,
            "type": "string",
            "example": "PROPAGATED"
          },
          "category": {
            "description": "The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL).",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "ANALYST"
          },
          "idStateVector": {
            "description": "ID of the State Vector used to generate the ephemeris.",
            "maxLength": 36,
            "type": "string",
            "example": "STATEVECTOR-ID"
          },
          "hasMnvr": {
            "description": "Boolean indicating whether maneuver(s) are incorporated into the ephemeris.",
            "type": "boolean",
            "example": false
          },
          "idManeuvers": {
            "description": "Array of the maneuver IDs of all maneuvers incorporated in the ephemeris.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "EXAMPLE_ID1",
              "EXAMPLE_ID2"
            ]
          },
          "hasCov": {
            "description": "Boolean indicating whether covariance data is provided with the ephemeris.",
            "type": "boolean",
            "example": false
          },
          "hasAccel": {
            "description": "Boolean indicating whether acceleration data is provided with the ephemeris.",
            "type": "boolean",
            "example": false
          },
          "centBody": {
            "description": "The Central Body of the ephemeris.  Assumed to be Earth, unless otherwise indicated.",
            "maxLength": 32,
            "type": "string",
            "example": "Earth"
          },
          "integrator": {
            "description": "Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY).",
            "maxLength": 24,
            "type": "string",
            "example": "COWELL"
          },
          "geopotentialModel": {
            "description": "Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2, GEM-T3), including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).",
            "maxLength": 32,
            "type": "string",
            "example": "GEM-T3"
          },
          "dragModel": {
            "description": "Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "JAC70"
          },
          "lunarSolar": {
            "description": "Boolean indicating use of lunar/solar data in ephemeris generation.",
            "type": "boolean",
            "example": false
          },
          "solidEarthTides": {
            "description": "Boolean indicating use of solid earth tide data in ephemeris generation.",
            "type": "boolean",
            "example": false
          },
          "bDot": {
            "format": "double",
            "description": "First derivative of ballistic coefficient (m^2/kg-s).",
            "type": "number",
            "example": 1.1
          },
          "edr": {
            "format": "double",
            "description": "Model parameter value for energy dissipation rate (EDR), expressed in w/kg.",
            "type": "number",
            "example": 1.1
          },
          "interpolation": {
            "description": "The recommended interpolation method for the ephemeris data.",
            "maxLength": 16,
            "type": "string",
            "example": "LINEAR"
          },
          "interpolationDegree": {
            "format": "int32",
            "description": "The recommended interpolation degree for the ephemeris data.",
            "type": "integer",
            "example": 5
          },
          "filename": {
            "description": "Filename of the raw file used to provide the ephemeris data including filetype extension, if applicable. This file may be retrieved using the 'getFile' operation as specified in the 'EphemerisSet' OpenAPI docs.",
            "maxLength": 128,
            "type": "string",
            "example": "Example file name"
          },
          "comments": {
            "description": "Additional source provided comments associated with the ephemeris.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "description": {
            "description": "Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris were generated using the last observation available.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "Example descriptor"
          },
          "referenceFrame": {
            "description": "The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "covReferenceFrame": {
            "description": "The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "UVW"
            ],
            "type": "string",
            "example": "J2000"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, in UTC.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "stateVector": {
            "$ref": "#/components/schemas/StateVector_Full"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 2
          },
          "ephemerisList": {
            "description": "The list of ephemeris states belonging to the EphemerisSet. Each ephemeris point is associated with a parent Ephemeris Set via the EphemerisSet ID (esId).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ephemeris_Full"
            }
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "EphemerisSet_Ingest": {
        "description": "EphemerisSet represents a wrapper or collection of Ephemeris 'points' and meta data indicating the specifics of the propagation of an on-orbit object. Ephemeris is typically distributed in a flat file containing details of the ephemeris generation as well as a large collection of individual points at varying time steps. EphemerisSet is analogous to this flat file.",
        "required": [
          "classificationMarking",
          "pointStartTime",
          "pointEndTime",
          "numPoints",
          "type",
          "category",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EPHEMERISSET-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the primary satellite on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "pointStartTime": {
            "format": "date-time",
            "description": "Start time/first time point of the ephemeris, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "usableStartTime": {
            "format": "date-time",
            "description": "Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:10:00.123456Z"
          },
          "pointEndTime": {
            "format": "date-time",
            "description": "End time/last time point of the ephemeris, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "usableEndTime": {
            "format": "date-time",
            "description": "Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T20:50:00.123456Z"
          },
          "stepSize": {
            "format": "int16",
            "description": "Ephemeris step size, in seconds.",
            "type": "integer",
            "example": 1
          },
          "numPoints": {
            "format": "int32",
            "description": "Number of points contained in the ephemeris.",
            "type": "integer",
            "example": 1
          },
          "type": {
            "description": "The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE, SCREENING).",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "LAUNCH"
          },
          "pedigree": {
            "description": "The pedigree of the ephemeris or source data used for ephemeris generation (e.g. DOPPLER, GPS, HYBRID, PROPAGATED, RANGING, SLR).",
            "maxLength": 24,
            "type": "string",
            "example": "PROPAGATED"
          },
          "category": {
            "description": "The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL).",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "ANALYST"
          },
          "idStateVector": {
            "description": "ID of the State Vector used to generate the ephemeris.",
            "maxLength": 36,
            "type": "string",
            "example": "STATEVECTOR-ID"
          },
          "hasMnvr": {
            "description": "Boolean indicating whether maneuver(s) are incorporated into the ephemeris.",
            "type": "boolean",
            "example": false
          },
          "idManeuvers": {
            "description": "Array of the maneuver IDs of all maneuvers incorporated in the ephemeris.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "EXAMPLE_ID1",
              "EXAMPLE_ID2"
            ]
          },
          "hasCov": {
            "description": "Boolean indicating whether covariance data is provided with the ephemeris.",
            "type": "boolean",
            "example": false
          },
          "hasAccel": {
            "description": "Boolean indicating whether acceleration data is provided with the ephemeris.",
            "type": "boolean",
            "example": false
          },
          "centBody": {
            "description": "The Central Body of the ephemeris.  Assumed to be Earth, unless otherwise indicated.",
            "maxLength": 32,
            "type": "string",
            "example": "Earth"
          },
          "integrator": {
            "description": "Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY).",
            "maxLength": 24,
            "type": "string",
            "example": "COWELL"
          },
          "geopotentialModel": {
            "description": "Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2, GEM-T3), including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).",
            "maxLength": 32,
            "type": "string",
            "example": "GEM-T3"
          },
          "dragModel": {
            "description": "Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "JAC70"
          },
          "lunarSolar": {
            "description": "Boolean indicating use of lunar/solar data in ephemeris generation.",
            "type": "boolean",
            "example": false
          },
          "solidEarthTides": {
            "description": "Boolean indicating use of solid earth tide data in ephemeris generation.",
            "type": "boolean",
            "example": false
          },
          "bDot": {
            "format": "double",
            "description": "First derivative of ballistic coefficient (m^2/kg-s).",
            "type": "number",
            "example": 1.1
          },
          "edr": {
            "format": "double",
            "description": "Model parameter value for energy dissipation rate (EDR), expressed in w/kg.",
            "type": "number",
            "example": 1.1
          },
          "interpolation": {
            "description": "The recommended interpolation method for the ephemeris data.",
            "maxLength": 16,
            "type": "string",
            "example": "LINEAR"
          },
          "interpolationDegree": {
            "format": "int32",
            "description": "The recommended interpolation degree for the ephemeris data.",
            "type": "integer",
            "example": 5
          },
          "filename": {
            "description": "Filename of the raw file used to provide the ephemeris data including filetype extension, if applicable. This file may be retrieved using the 'getFile' operation as specified in the 'EphemerisSet' OpenAPI docs.",
            "maxLength": 128,
            "type": "string",
            "example": "Example file name"
          },
          "comments": {
            "description": "Additional source provided comments associated with the ephemeris.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "description": {
            "description": "Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris were generated using the last observation available.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "Example descriptor"
          },
          "referenceFrame": {
            "description": "The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "covReferenceFrame": {
            "description": "The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "UVW"
            ],
            "type": "string",
            "example": "J2000"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, in UTC.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 2
          },
          "ephemerisList": {
            "description": "The list of ephemeris states belonging to the EphemerisSet. Each ephemeris point is associated with a parent Ephemeris Set via the EphemerisSet ID (esId).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ephemeris_Ingest"
            }
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "EphemFormatType": {
        "enum": [
          "ModITC",
          "GOO",
          "NASA",
          "OEM",
          "OASYS"
        ],
        "type": "string"
      },
      "Location_Full": {
        "description": "Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idLocation": {
            "description": "Unique identifier of the location, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Location name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Example location"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 16,
            "type": "string",
            "example": "US"
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "altitude": {
            "format": "double",
            "description": "Altitude of the location, in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Onorbit_Full": {
        "description": "Model object representing on-orbit objects or satellites in the system.",
        "required": [
          "classificationMarking",
          "satNo",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idOnOrbit": {
            "description": "For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "commonName": {
            "description": "Common name of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Example common name"
          },
          "constellation": {
            "description": "Constellation to which this satellite belongs.",
            "maxLength": 128,
            "type": "string",
            "example": "Big Dipper"
          },
          "intlDes": {
            "description": "International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.",
            "maxLength": 45,
            "type": "string",
            "example": "2021123ABC"
          },
          "launchDate": {
            "format": "date",
            "description": "Date of launch.",
            "type": "string",
            "example": "2018-01-01"
          },
          "decayDate": {
            "format": "date-time",
            "description": "Date of decay.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "objectType": {
            "description": "Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.",
            "maxLength": 32,
            "enum": [
              "ROCKET BODY",
              "DEBRIS",
              "PAYLOAD",
              "PLATFORM",
              "MANNED",
              "UNKNOWN"
            ],
            "type": "string",
            "example": "PAYLOAD"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "missionNumber": {
            "description": "Mission number of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Expedition 1"
          },
          "category": {
            "description": "Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).",
            "maxLength": 45,
            "enum": [
              "Unknown",
              "On-Orbit",
              "Decayed",
              "Cataloged Without State",
              "Launch Nominal",
              "Analyst Satellite",
              "Cislunar",
              "Lunar",
              "Hyperbolic",
              "Heliocentric",
              "Interplanetary",
              "Lagrangian",
              "Docked"
            ],
            "type": "string",
            "example": "Lunar"
          },
          "lifetimeYears": {
            "format": "int32",
            "description": "Estimated lifetime of the on-orbit payload, if known.",
            "type": "integer",
            "example": 10
          },
          "altName": {
            "description": "Alternate name of the on-orbit object.",
            "maxLength": 64,
            "type": "string",
            "example": "Alternate Name"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "launchSiteId": {
            "description": "Id of the associated launchSite entity.",
            "maxLength": 36,
            "type": "string",
            "example": "LAUNCHSITE-ID"
          },
          "entityCollection": {
            "description": "Read-only entity details (only returned/used on detail queries).",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "description": "An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.",
              "required": [
                "name",
                "classificationMarking",
                "type",
                "source",
                "dataMode"
              ],
              "type": "object",
              "properties": {
                "idEntity": {
                  "description": "Unique identifier of the record.",
                  "maxLength": 36,
                  "minLength": 1,
                  "type": "string",
                  "example": "ENTITY-ID"
                },
                "name": {
                  "description": "Unique entity name.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "example": "Example name"
                },
                "classificationMarking": {
                  "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "example": "U"
                },
                "terrestrialId": {
                  "description": "Terrestrial identifier of this entity, if applicable.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "TERRESTRIAL-ID"
                },
                "type": {
                  "description": "The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).",
                  "maxLength": 45,
                  "minLength": 1,
                  "enum": [
                    "AIRCRAFT",
                    "BUS",
                    "COMM",
                    "IR",
                    "NAVIGATION",
                    "ONORBIT",
                    "RFEMITTER",
                    "SCIENTIFIC",
                    "SENSOR",
                    "SITE",
                    "VESSEL"
                  ],
                  "type": "string",
                  "example": "ONORBIT"
                },
                "idLocation": {
                  "description": "Unique identifier of the entity location, if terrestrial/fixed.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "LOCATION-ID"
                },
                "countryCode": {
                  "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
                  "maxLength": 4,
                  "type": "string",
                  "example": "US"
                },
                "ownerType": {
                  "description": "Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).",
                  "maxLength": 32,
                  "enum": [
                    "Commercial",
                    "Government",
                    "Academic",
                    "Consortium",
                    "Other"
                  ],
                  "type": "string",
                  "example": "Commercial"
                },
                "taskable": {
                  "description": "Boolean indicating if this entity is taskable.",
                  "type": "boolean",
                  "example": false
                },
                "urls": {
                  "description": "List of URLs to additional details/documents for this entity.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "URL1",
                    "URL2"
                  ]
                },
                "createdAt": {
                  "format": "date-time",
                  "description": "Time the row was created in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "createdBy": {
                  "description": "Application user who created the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "updatedAt": {
                  "format": "date-time",
                  "description": "Time the row was last updated in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "updatedBy": {
                  "description": "Application user who updated the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "source": {
                  "description": "Source of the data.",
                  "maxLength": 64,
                  "minLength": 1,
                  "type": "string",
                  "example": "Bluestaq"
                },
                "origin": {
                  "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                  "maxLength": 64,
                  "type": "string",
                  "example": "THIRD_PARTY_DATASOURCE"
                },
                "dataMode": {
                  "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                  "maxLength": 32,
                  "minLength": 1,
                  "enum": [
                    "REAL",
                    "TEST",
                    "SIMULATED",
                    "EXERCISE"
                  ],
                  "type": "string",
                  "example": "TEST"
                },
                "location": {
                  "$ref": "#/components/schemas/Location_Full"
                },
                "idOnOrbit": {
                  "description": "Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "ONORBIT-ID"
                },
                "operatingUnit": {
                  "$ref": "#/components/schemas/Operatingunit_Full"
                },
                "idOperatingUnit": {
                  "description": "Unique identifier of the associated operating unit object.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "OPERATINGUNIT-ID"
                },
                "origNetwork": {
                  "description": "The originating source network on which this record was created, auto-populated by the system.",
                  "maxLength": 32,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "OPS1"
                },
                "statusCollection": {
                  "description": "Read-only collection of statuses which can be collected by multiple sources.",
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Status_Full"
                  },
                  "readOnly": true
                },
                "rfBands": {
                  "description": "Read-only collection of RF bands utilized by this entity for communication and/or operation.",
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFBand_Full"
                  },
                  "readOnly": true
                }
              }
            },
            "readOnly": true
          },
          "antennas": {
            "description": "Read-only collection of antennas on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitAntenna_Full"
            },
            "readOnly": true
          },
          "batteries": {
            "description": "Read-only collection of batteries on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitBattery_Full"
            },
            "readOnly": true
          },
          "solarArrays": {
            "description": "Read-only collection of solar arrays on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitSolarArray_Full"
            },
            "readOnly": true
          },
          "thrusters": {
            "description": "Read-only collection of thrusters (engines) on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitThruster_Full"
            },
            "readOnly": true
          },
          "onorbitDetails": {
            "description": "Read-only collection of details for this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitDetails_Full"
            },
            "readOnly": true
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitAntenna_Full": {
        "required": [
          "idOnOrbit",
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITANTENNA-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idAntenna": {
            "description": "ID of the antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "antenna": {
            "$ref": "#/components/schemas/Antenna_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitBattery_Full": {
        "required": [
          "idOnOrbit",
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITBATTERY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idBattery": {
            "description": "ID of the battery.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of batteries on the spacecraft of the type identified by idBattery.",
            "type": "integer",
            "example": 5
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "battery": {
            "$ref": "#/components/schemas/Battery_Full"
          }
        }
      },
      "OnorbitDetails_Full": {
        "description": "Contains details of the OnOrbit object.",
        "required": [
          "idOnOrbit",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITDETAILS-ID"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "lastObTime": {
            "format": "date-time",
            "description": "Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "vismag": {
            "format": "double",
            "description": "Current/latest visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "vismagMin": {
            "format": "double",
            "description": "Minimum visual magnitude in M.",
            "type": "number",
            "example": 5.23
          },
          "vismagMax": {
            "format": "double",
            "description": "Maximum visual magnitude in M.",
            "type": "number",
            "example": 15.23
          },
          "vismagMean": {
            "format": "double",
            "description": "Mean visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "rcs": {
            "format": "double",
            "description": "Current/latest radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "rcsMin": {
            "format": "double",
            "description": "Minimum radar cross section in meters squared.",
            "type": "number",
            "example": 5.23
          },
          "rcsMax": {
            "format": "double",
            "description": "Maximum radar cross section in meters squared.",
            "type": "number",
            "example": 15.23
          },
          "rcsMean": {
            "format": "double",
            "description": "Mean radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "bolDeltaV": {
            "format": "double",
            "description": "The total beginning of life delta V of the spacecraft, in meters per second.",
            "type": "number",
            "example": 1000.1
          },
          "maxDeltaV": {
            "format": "double",
            "description": "Maximum delta V available for this on-orbit spacecraft, in meters per second.",
            "type": "number",
            "example": 10.23
          },
          "deltaVUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.",
            "type": "number",
            "example": 50.1
          },
          "estDeltaVDuration": {
            "format": "double",
            "description": "Estimated maximum burn duration for the object, in seconds.",
            "type": "number",
            "example": 10.23
          },
          "numMission": {
            "format": "int32",
            "description": "The number of distinct missions the spacecraft performs.",
            "type": "integer",
            "example": 2
          },
          "missionTypes": {
            "description": "Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Weather",
              "Space Weather"
            ]
          },
          "busType": {
            "description": "Type of the bus on the spacecraft.",
            "maxLength": 32,
            "type": "string",
            "example": "A2100"
          },
          "geoSlot": {
            "format": "double",
            "description": "GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 90.23
          },
          "driftRate": {
            "format": "double",
            "description": "GEO drift rate, if applicable in degrees per day.",
            "type": "number",
            "example": 1.23
          },
          "dryMass": {
            "format": "double",
            "description": "Spacecraft dry mass (without fuel or disposables) in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "additionalMass": {
            "format": "double",
            "description": "Mass of fuel and disposables at launch time in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMin": {
            "format": "double",
            "description": "Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 5.23
          },
          "launchMass": {
            "format": "double",
            "description": "Nominal mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMax": {
            "format": "double",
            "description": "Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 15.23
          },
          "bolFuelMass": {
            "format": "double",
            "description": "Spacecraft beginning of life fuel mass, in orbit, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "currentMass": {
            "format": "double",
            "description": "The estimated total current mass of the spacecraft, in kilograms.",
            "type": "number",
            "example": 500
          },
          "totalMassUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft mass, in kilograms.",
            "type": "number",
            "example": 50.1
          },
          "solarArrayArea": {
            "format": "double",
            "description": "Spacecraft deployed area of solar array in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maneuverable": {
            "description": "Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.",
            "type": "boolean",
            "example": false
          },
          "fuelRemaining": {
            "format": "double",
            "description": "Estimated remaining fuel for the object in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "crossSection": {
            "format": "double",
            "description": "Average cross sectional area in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "busCrossSection": {
            "format": "double",
            "description": "Average cross sectional area of the bus in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maxRadius": {
            "format": "double",
            "description": "Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.",
            "type": "number",
            "example": 10.23
          },
          "colaRadius": {
            "format": "double",
            "description": "Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.",
            "type": "number",
            "example": 10.23
          },
          "adeptRadius": {
            "format": "double",
            "description": "The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.",
            "type": "number",
            "example": 10.23
          },
          "numDeployable": {
            "format": "int32",
            "description": "The number of sub-satellites or deployable objects on the spacecraft.",
            "type": "integer",
            "example": 2
          },
          "depNames": {
            "description": "Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GOES-18A",
              "GOES-18B"
            ]
          },
          "depEstMasses": {
            "description": "Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              20,
              21
            ]
          },
          "depMassUncs": {
            "description": "Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              10,
              5
            ]
          },
          "refSource": {
            "description": "The reference source, sources, or URL from which the data in this record was obtained.",
            "maxLength": 256,
            "type": "string",
            "example": "Wikipedia"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "lastObSource": {
            "description": "The name of the source who last provided an observation for this idOnOrbit.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitSolarArray_Full": {
        "required": [
          "idOnOrbit",
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITSOLARARRAY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idSolarArray": {
            "description": "ID of the SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of solar arrays on the spacecraft of the type identified by idSolarArray.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "solarArray": {
            "$ref": "#/components/schemas/SolarArray_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitThruster_Full": {
        "required": [
          "idOnOrbit",
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITTHRUSTER-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idEngine": {
            "description": "ID of the Engine.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "The type of thruster associated with this record (e.g. LAE, Hydrazine REA, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Hydrazine REA"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of engines/thrusters on the spacecraft of the type identified by idEngine.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engine": {
            "$ref": "#/components/schemas/Engine_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Operatingunit_Full": {
        "description": "Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idOperatingUnit": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OPERATINGUNIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "altOperatingUnitId": {
            "description": "Unique identifier of the operating unit record from the originating system.",
            "maxLength": 36,
            "type": "string",
            "example": "32100000000021"
          },
          "name": {
            "description": "Name of the operating unit.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "SOME_NAME"
          },
          "description": {
            "description": "Description of the operating unit.",
            "maxLength": 256,
            "type": "string",
            "example": "Description of unit"
          },
          "idLocation": {
            "description": "Unique identifier of the location record for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "idContact": {
            "description": "Unique identifier of the contact for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "CONTACT-ID"
          },
          "idOrganization": {
            "description": "Unique identifier of the organization record for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "unitIdentifier": {
            "description": "An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.",
            "maxLength": 10,
            "type": "string",
            "example": "AZXAZ12345"
          },
          "countryCode": {
            "description": "The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to \"OTHR\" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).",
            "maxLength": 4,
            "type": "string",
            "example": "IQ"
          },
          "altCountryCode": {
            "description": "Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.",
            "maxLength": 4,
            "type": "string",
            "example": "IZ"
          },
          "wac": {
            "description": "World Aeronautical Chart identifier for the area in which a designated operating unit is located.",
            "maxLength": 4,
            "type": "string",
            "example": "0427"
          },
          "operStatus": {
            "description": "The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 3,
            "type": "string",
            "example": "OPR"
          },
          "condition": {
            "description": "The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "RDY"
          },
          "conditionAvail": {
            "description": "Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "A"
          },
          "eval": {
            "format": "int32",
            "description": "The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.",
            "type": "integer",
            "example": 7
          },
          "fpa": {
            "description": "Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 5,
            "type": "string",
            "example": "EOB"
          },
          "ident": {
            "description": "Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): \n\nASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.\n\nFRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.\n\nHOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.\n\nFAKER: Friendly track, object, or entity acting as an exercise hostile.\n\nJOKER: Friendly track, object, or entity acting as an exercise suspect.\n\nNEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.\n\nPENDING: Track object which has not been evaluated.\n\nSUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.\n\nUNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.",
            "maxLength": 32,
            "type": "string",
            "example": "FRIEND"
          },
          "allegiance": {
            "description": "The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to \"OTHR\" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).",
            "maxLength": 4,
            "type": "string",
            "example": "OTHR"
          },
          "altAllegiance": {
            "description": "Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.",
            "maxLength": 4,
            "type": "string",
            "example": "HL"
          },
          "locName": {
            "description": "Location name for the coordinates.",
            "maxLength": 54,
            "type": "string",
            "example": "LOCATION_NAME"
          },
          "locReason": {
            "description": "Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 9,
            "type": "string",
            "example": "GR"
          },
          "force": {
            "description": "An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "NV"
          },
          "forceName": {
            "description": "The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.",
            "maxLength": 54,
            "type": "string",
            "example": "FORCE-NAME"
          },
          "functRole": {
            "description": "Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 3,
            "type": "string",
            "example": "MIL"
          },
          "msnPrimary": {
            "description": "Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "W6"
          },
          "msnPrimarySpecialty": {
            "description": "Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "QK"
          },
          "masterUnit": {
            "description": "This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.",
            "type": "boolean",
            "example": true
          },
          "stylizedUnit": {
            "description": "This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.",
            "type": "boolean",
            "example": true
          },
          "divCat": {
            "description": "Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 1,
            "type": "string",
            "example": "5"
          },
          "echelon": {
            "description": "Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "SHIP"
          },
          "echelonTier": {
            "description": "Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 2,
            "type": "string",
            "example": "68"
          },
          "fleetId": {
            "description": "Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 1,
            "type": "string",
            "example": "A"
          },
          "deployStatus": {
            "description": "A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 2,
            "type": "string",
            "example": "ND"
          },
          "flagFlown": {
            "description": "The country code of the observed flag flown.",
            "maxLength": 4,
            "type": "string",
            "example": "IZ"
          },
          "coordDatum": {
            "description": "A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 16,
            "type": "string",
            "example": "WGS"
          },
          "coord": {
            "description": "\"Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.\nPos. 1-2.  Latitude Degrees     [00-90]\nPos. 3-4.  Latitude Minutes     [00-59]\nPos. 5-6.  Latitude Seconds     [00-59]\nPos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  \nPos. 10. Latitude Hemisphere       [NS] \nPos. 11-13. Longitude Degrees     [00-180] \nPos. 14-15. Longitude Minutes     [00-59] \nPos. 16-17. Longitude Seconds     [00-59] \nPos. 18-20. Longitude Thousandths Of Seconds      [000-999]\nPos. 21. Longitude Hemisphere     [EW]\nPos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]\".\n",
            "maxLength": 21,
            "type": "string",
            "example": "340000000N0430000000E"
          },
          "coordDerivAcc": {
            "format": "double",
            "description": "Indicates the plus or minus error assessed against the method used to derive the coordinate.",
            "type": "number",
            "example": 12.345
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 179.1
          },
          "elevMsl": {
            "format": "double",
            "description": "Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.",
            "type": "number",
            "example": 123.45
          },
          "elevMslConfLvl": {
            "format": "int32",
            "description": "Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.",
            "type": "integer",
            "example": 50
          },
          "elevMslDerivAcc": {
            "format": "double",
            "description": "Indicates the plus or minus error assessed against the method used to derive the elevation.",
            "type": "number",
            "example": 12.34
          },
          "geoidalMslSep": {
            "format": "double",
            "description": "The distance between Mean Sea Level and a referenced ellipsoid.",
            "type": "number",
            "example": 12.34
          },
          "milGridSys": {
            "description": "\"Indicates the grid system used in the development of the milGrid coordinates. Values are:\nUPS - Universal Polar System\nUTM - Universal Transverse Mercator\".",
            "maxLength": 3,
            "type": "string",
            "example": "UTM"
          },
          "milGrid": {
            "description": "The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:\n4Q (grid zone designator, GZD)\nFJ (the 100,000-meter square identifier)\n12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).",
            "maxLength": 15,
            "type": "string",
            "example": "4QFJ12345678"
          },
          "utm": {
            "description": "Universal Transverse Mercator (UTM) grid coordinates.\nPos. 1-2, UTM Zone Column   [01-60\nPos. 3, UTM Zone Row   [C-HJ-NP-X]\nPos. 4, UTM False Easting   [0-9]\nPos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]\nPos. 10-11, UTM False Northing    [0-9][0-9]\nPos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].",
            "maxLength": 16,
            "type": "string",
            "example": "19P4390691376966"
          },
          "airDefArea": {
            "description": "Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.",
            "maxLength": 5,
            "type": "string",
            "example": "AL006"
          },
          "polSubdiv": {
            "description": "Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 7,
            "type": "string",
            "example": "IZ07"
          },
          "symCode": {
            "description": "A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.",
            "maxLength": 15,
            "type": "string",
            "example": "SOGPU----------"
          },
          "classRating": {
            "description": "Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:\n0 - Does not meet criteria above\n1 - Primary importance to system\n2 - Secondary importance to system\n3 - Tertiary importance to system\nO - Other. Explain in Remarks.",
            "maxLength": 1,
            "type": "string",
            "example": "1"
          },
          "recStatus": {
            "description": "Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:\nA - Active\nI - Inactive\nK - Acknowledged\nL - Local\nQ - A nominated (NOM) or Data Change Request (DCR) record\nR - Production reduced by CMD decision\nW - Working Record.",
            "maxLength": 1,
            "type": "string",
            "example": "A"
          },
          "reviewDate": {
            "format": "date",
            "description": "Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.",
            "type": "string",
            "example": "2008-06-10"
          },
          "resProd": {
            "description": "Responsible Producer - Organization that is responsible for the maintenance of the record.",
            "maxLength": 4,
            "type": "string",
            "example": "RT"
          },
          "referenceDoc": {
            "description": "The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 128,
            "type": "string",
            "example": "Provider Reference Documentation"
          },
          "operatingUnitRemarks": {
            "description": "Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperatingUnitRemark_Full"
            },
            "readOnly": true
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization_Full"
          },
          "location": {
            "$ref": "#/components/schemas/Location_Full"
          }
        }
      },
      "OperatingUnitRemark_Full": {
        "description": "Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.",
        "required": [
          "classificationMarking",
          "idOperatingUnit",
          "text",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "0167f577-e06c-358e-85aa-0a07a730bdd0"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOperatingUnit": {
            "description": "The ID of the operating unit to which this remark applies.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OperatingUnit-ID"
          },
          "altRmkId": {
            "description": "Unique identifier of the unit remark record from the originating system.",
            "maxLength": 36,
            "type": "string",
            "example": "123456ABC"
          },
          "name": {
            "description": "The name of the remark.",
            "maxLength": 64,
            "type": "string",
            "example": "Remark name"
          },
          "type": {
            "description": "The remark type (e.g. Caution, Information, Misc, Restriction, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Restriction"
          },
          "text": {
            "description": "The text of the remark.",
            "maxLength": 16384,
            "minLength": 1,
            "type": "string",
            "example": "This is a remark"
          },
          "code": {
            "description": "The remark type identifier. For example, the Mobility Air Forces (MAF) remark code, defined in the Airfield Suitability and Restriction Report (ASRR).",
            "maxLength": 16,
            "type": "string",
            "example": "M"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Organization_Full": {
        "description": "An organization such as a corporation, manufacturer, consortium, government, etc. An organization may have parent and child organizations as well as link to a former organization if this org previously existed as another organization.",
        "required": [
          "classificationMarking",
          "name",
          "type",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Organization name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "type": {
            "description": "Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "GOVERNMENT"
          },
          "category": {
            "description": "Subtype or category of the organization (e.g. Private company, stock market quoted company, subsidiary, goverment department/agency, etc).",
            "maxLength": 128,
            "type": "string",
            "example": "Private company"
          },
          "externalId": {
            "description": "Optional externally provided identifier for this row.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "description": {
            "description": "Organization description.",
            "maxLength": 256,
            "type": "string",
            "example": "Example description"
          },
          "countryCode": {
            "description": "Country of the physical location of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code. However, it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "nationality": {
            "description": "Country of registration or ownership of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "active": {
            "description": "Boolean indicating if this organization is currently active.",
            "type": "boolean",
            "example": false
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "some.user"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "organizationDetails": {
            "description": "Read-only collection of additional OrganizationDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/organizationdetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationDetails_Full"
            },
            "readOnly": true
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OrganizationDetails_Full": {
        "description": "Model representation of additional detailed organization data as collected by a particular source.",
        "required": [
          "idOrganization",
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATIONDETAILS-ID"
          },
          "idOrganization": {
            "description": "Unique identifier of the parent organization.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Organization details name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "email": {
            "description": "Listed contact email address for the organization.",
            "maxLength": 320,
            "type": "string",
            "example": "some_organization@organization.com"
          },
          "address1": {
            "description": "Street number of the organization.",
            "maxLength": 120,
            "type": "string",
            "example": "123 Main Street"
          },
          "address2": {
            "description": "Field for additional organization address information such as PO Box and unit number.",
            "maxLength": 120,
            "type": "string",
            "example": "Apt 4B"
          },
          "address3": {
            "description": "Contains the third line of address information for an organization.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado Springs CO, 80903"
          },
          "geoAdminLevel1": {
            "description": "Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado"
          },
          "geoAdminLevel2": {
            "description": "Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.",
            "maxLength": 120,
            "type": "string",
            "example": "El Paso County"
          },
          "geoAdminLevel3": {
            "description": "Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado Springs"
          },
          "postalCode": {
            "description": "A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.",
            "maxLength": 32,
            "type": "string",
            "example": "80903"
          },
          "description": {
            "description": "Organization description.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example description"
          },
          "formerOrgId": {
            "description": "Former organization ID (if this organization previously existed as another organization).",
            "maxLength": 36,
            "type": "string",
            "example": "FORMERORG-ID"
          },
          "parentOrgId": {
            "description": "Parent organization ID of this organization if it is a child organization.",
            "maxLength": 36,
            "type": "string",
            "example": "PARENTORG-ID"
          },
          "financialYearEndDate": {
            "format": "date-time",
            "description": "For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "revenue": {
            "format": "double",
            "description": "For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "profit": {
            "format": "double",
            "description": "For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "ebitda": {
            "format": "double",
            "description": "For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "ftes": {
            "format": "int32",
            "description": "Total number of FTEs in this organization.",
            "type": "integer",
            "example": 123
          },
          "broker": {
            "description": "Designated broker for this organization.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "ceo": {
            "description": "For organizations of type CORPORATION, the name of the Chief Executive Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "cfo": {
            "description": "For organizations of type CORPORATION, the name of the Chief Financial Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "cto": {
            "description": "For organizations of type CORPORATION, the name of the Chief Technology Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "riskManager": {
            "description": "The name of the risk manager for the organization.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "massRanking": {
            "format": "int32",
            "description": "Mass ranking for this organization.",
            "type": "integer",
            "example": 123
          },
          "revenueRanking": {
            "format": "int32",
            "description": "Revenue ranking for this organization.",
            "type": "integer",
            "example": 123
          },
          "financialNotes": {
            "description": "For organizations of type CORPORATION, notes on company financials.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "servicesNotes": {
            "description": "Notes on the services provided by the organization.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "fleetPlanNotes": {
            "description": "Satellite fleet planning notes for this organization.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "some.user"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "RFBand_Full": {
        "description": "Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.",
        "required": [
          "idEntity",
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RFBAND-ID"
          },
          "idEntity": {
            "description": "Unique identifier of the parent Entity which uses this band.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENTITY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "RF Band name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "BAND_NAME"
          },
          "band": {
            "description": "Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.",
            "maxLength": 5,
            "type": "string",
            "example": "Ku"
          },
          "mode": {
            "description": "RF Band mode (e.g. TX, RX).",
            "maxLength": 4,
            "enum": [
              "TX",
              "RX"
            ],
            "type": "string",
            "example": "TX"
          },
          "purpose": {
            "description": "Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).",
            "maxLength": 16,
            "enum": [
              "COMM",
              "TTC",
              "OPS",
              "OTHER"
            ],
            "type": "string",
            "example": "TTC"
          },
          "freqMin": {
            "format": "double",
            "description": "Start/minimum of transmit RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 50.23
          },
          "freqMax": {
            "format": "double",
            "description": "End/maximum of transmit RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 2000.23
          },
          "centerFreq": {
            "format": "double",
            "description": "Center frequency of RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 1000.23
          },
          "peakGain": {
            "format": "double",
            "description": "RF Range maximum gain, in dBi.",
            "type": "number",
            "example": 120.23
          },
          "edgeGain": {
            "format": "double",
            "description": "RF Range edge gain, in dBi.",
            "type": "number",
            "example": 100.23
          },
          "bandwidth": {
            "format": "double",
            "description": "RF Band frequency range bandwidth in Mhz.",
            "type": "number",
            "example": 100.23
          },
          "beamwidth": {
            "format": "double",
            "description": "Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.",
            "type": "number",
            "example": 45.23
          },
          "polarization": {
            "description": "Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.",
            "maxLength": 4,
            "enum": [
              "H",
              "V",
              "R",
              "L"
            ],
            "type": "string",
            "example": "H"
          },
          "erp": {
            "format": "double",
            "description": "Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the \"main lobe\") of its radiation pattern.",
            "type": "number",
            "example": 2.23
          },
          "eirp": {
            "format": "double",
            "description": "EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the \"main lobe\") of its radiation pattern.",
            "type": "number",
            "example": 2.23
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "SolarArray_Full": {
        "description": "Model representation of information on on-orbit/spacecraft solar arrays. A spacecraft may have multiple solar arrays and each solar array can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "name": {
            "description": "Solar Array name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Solar1"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "solarArrayDetails": {
            "description": "Read-only collection of additional SolarArrayDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/solararraydetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolarArrayDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "SolarArrayDetails_Full": {
        "description": "Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.",
        "required": [
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAYDETAILS-ID"
          },
          "idSolarArray": {
            "description": "Unique identifier of the parent SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of solar array (e.g. U Shaped).",
            "maxLength": 64,
            "type": "string",
            "example": "U Shaped"
          },
          "technology": {
            "description": "Solar array technology (e.g. Ga-As).",
            "maxLength": 64,
            "type": "string",
            "example": "Ga-As"
          },
          "junctionTechnology": {
            "description": "Solar array junction technology (e.g. Triple).",
            "maxLength": 64,
            "type": "string",
            "example": "Triple"
          },
          "manufacturerOrgId": {
            "description": "Unique identifier of the organization that manufactures the solar array.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "span": {
            "format": "double",
            "description": "Solar Array span in meters.",
            "type": "number",
            "example": 123.4
          },
          "area": {
            "format": "double",
            "description": "Solar Array area in square meters.",
            "type": "number",
            "example": 123.4
          },
          "description": {
            "description": "Solar array description/notes.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "StateVector_Full": {
        "description": "This service provides operations for querying and manipulation of state vectors for OnOrbit objects. State vectors are cartesian vectors of position (r) and velocity (v) that, together with their time (epoch) (t), uniquely determine the trajectory of the orbiting body in space. J2000 is the preferred coordinate frame for all state vector positions/velocities in UDL, but in some cases data may be in another frame depending on the provider and/or datatype. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
        "required": [
          "classificationMarking",
          "epoch",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idStateVector": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "STATEVECTOR-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "epoch": {
            "format": "date-time",
            "description": "Time of validity for state vector in ISO 8601 UTC datetime format, with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "pedigree": {
            "description": "The pedigree of state vector, or methods used for its generation to include state update/orbit determination, propagation from another state, or a state from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION, CONJUNCTION, FLIGHT_PLAN).",
            "maxLength": 32,
            "type": "string",
            "example": "CONJUNCTION"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target OnOrbit object.",
            "type": "integer",
            "example": 12
          },
          "origObjectId": {
            "description": "Optional identifier provided by state vector source to indicate the target onorbit object of this state vector. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "idOrbitDetermination": {
            "description": "Unique identifier of the OD solution record that produced this state vector. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queries as /udl/orbitdetermination/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "uct": {
            "description": "Boolean indicating this state vector was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": true
          },
          "xpos": {
            "format": "double",
            "description": "Cartesian X position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": -1118.577381
          },
          "ypos": {
            "format": "double",
            "description": "Cartesian Y position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 3026.231084
          },
          "zpos": {
            "format": "double",
            "description": "Cartesian Z position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 6167.831808
          },
          "xvel": {
            "format": "double",
            "description": "Cartesian X velocity of target, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": -4.25242784
          },
          "yvel": {
            "format": "double",
            "description": "Cartesian Y velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 5.291107434
          },
          "zvel": {
            "format": "double",
            "description": "Cartesian Z velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": -3.356493869
          },
          "xaccel": {
            "format": "double",
            "description": "Cartesian X acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": -2.12621392
          },
          "yaccel": {
            "format": "double",
            "description": "Cartesian Y acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 2.645553717
          },
          "zaccel": {
            "format": "double",
            "description": "Cartesian Z acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": -1.06310696
          },
          "referenceFrame": {
            "description": "The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "cov": {
            "description": "Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.  If the covReferenceFrame is null it is assumed to be J2000.\nThe array values (1-21) represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;\n\nx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3\n\nz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6\n\nx'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10\n\ny'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15\n\nz'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;\n\nThe cov array should contain only the lower left triangle values from top left down to bottom right, in order.\n\nIf additional covariance terms are included for DRAG, SRP, and/or THRUST, the matrix can be extended with the following order of elements:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR\n\nDRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;\n\nSRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;\n\nTHR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;\n\n\n",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.4,
              3.8,
              4.2,
              5.5,
              6
            ]
          },
          "covReferenceFrame": {
            "description": "The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "UVW"
            ],
            "type": "string",
            "example": "J2000"
          },
          "covMethod": {
            "description": "The method used to generate the covariance during the orbit determination (OD) that produced the state vector, or whether an arbitrary, non-calculated default value was used (CALCULATED, DEFAULT).",
            "maxLength": 24,
            "type": "string",
            "example": "CALCULATED"
          },
          "eqCov": {
            "description": "The covariance matrix values represent the lower triangular half of the covariance matrix in terms of equinoctial elements.&nbsp; The size of the covariance matrix is dynamic.&nbsp; The values are outputted in order across each row, i.e.:\n\n1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5\n\n6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n\n\n\nThe ordering of values is as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp; Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp; B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...\n\nAf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1\n\nAg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3\n\nL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6\n\nN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10\n\nChi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp; 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15\n\nPsi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp; 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21\n\nB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp; 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28\n\nBDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp; 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36\n\nAGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp; 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45\n\nT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp; 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp; 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55\n\nC1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp; 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp; 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66\n\nC2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp; 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp; 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78\n\n:\n\n:\n\nwhere C1, C2, etc, are the \"consider parameters\" that may be added to the covariance matrix.&nbsp; The covariance matrix will be as large as the last element/model parameter needed.&nbsp; In other words, if the DC solved for all 6 elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size will be set to 0x0, and no data will follow.&nbsp; The cov field should contain only the lower left triangle values from top left down to bottom right, in order.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "xposAlt1": {
            "format": "double",
            "description": "Cartesian X position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
            "type": "number",
            "example": -1145.688502
          },
          "yposAlt1": {
            "format": "double",
            "description": "Cartesian Y position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
            "type": "number",
            "example": 3020.729572
          },
          "zposAlt1": {
            "format": "double",
            "description": "Cartesian Z position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
            "type": "number",
            "example": 6165.55187
          },
          "xvelAlt1": {
            "format": "double",
            "description": "Cartesian X velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
            "type": "number",
            "example": -4.270832252
          },
          "yvelAlt1": {
            "format": "double",
            "description": "Cartesian Y velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
            "type": "number",
            "example": 5.27074276
          },
          "zvelAlt1": {
            "format": "double",
            "description": "Cartesian Z velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
            "type": "number",
            "example": -3.365155181
          },
          "alt1ReferenceFrame": {
            "description": "The reference frame of the alternate1 (Alt1) cartesian orbital state.",
            "maxLength": 24,
            "type": "string",
            "example": "TEME"
          },
          "xposAlt2": {
            "format": "double",
            "description": "Cartesian X position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
            "type": "number",
            "example": -1456.915926
          },
          "yposAlt2": {
            "format": "double",
            "description": "Cartesian Y position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
            "type": "number",
            "example": -2883.540406
          },
          "zposAlt2": {
            "format": "double",
            "description": "Cartesian Z position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
            "type": "number",
            "example": 6165.55187
          },
          "xvelAlt2": {
            "format": "double",
            "description": "Cartesian X velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
            "type": "number",
            "example": -1.219814294
          },
          "yvelAlt2": {
            "format": "double",
            "description": "Cartesian Y velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
            "type": "number",
            "example": -6.602080212
          },
          "zvelAlt2": {
            "format": "double",
            "description": "Cartesian Z velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
            "type": "number",
            "example": -3.365155181
          },
          "alt2ReferenceFrame": {
            "description": "The reference frame of the alternate2 (Alt2) cartesian orbital state.",
            "maxLength": 24,
            "type": "string",
            "example": "EFG/TDR"
          },
          "posUnc": {
            "format": "double",
            "description": "One sigma position uncertainty, in kilometers.",
            "type": "number",
            "example": 0.333399744452
          },
          "velUnc": {
            "format": "double",
            "description": "One sigma velocity uncertainty, in kilometers/second.",
            "type": "number",
            "example": 0.000004
          },
          "mass": {
            "format": "double",
            "description": "The mass of the object, in kilograms.",
            "type": "number",
            "example": 164.5
          },
          "area": {
            "format": "double",
            "description": "The actual area of the object at it's largest cross-section, expressed in meters^2.",
            "type": "number",
            "example": 5.065
          },
          "solarRadPressCoeff": {
            "format": "double",
            "description": "Area-to-mass ratio coefficient for solar radiation pressure.",
            "type": "number",
            "example": 0.0244394
          },
          "dragCoeff": {
            "format": "double",
            "description": "Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).",
            "type": "number",
            "example": 0.0224391269775
          },
          "dragArea": {
            "format": "double",
            "description": "The effective area of the object exposed to atmospheric drag, expressed in meters^2.",
            "type": "number",
            "example": 4.739
          },
          "revNo": {
            "format": "int32",
            "description": "Epoch revolution number.",
            "type": "integer",
            "example": 7205
          },
          "geopotentialModel": {
            "description": "Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96 24Z,24T.",
            "maxLength": 32,
            "type": "string",
            "example": "EGM-96"
          },
          "dragModel": {
            "description": "The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "JAC70"
          },
          "lunarSolar": {
            "description": "Boolean indicating use of lunar/solar perturbations for this vector.",
            "type": "boolean",
            "example": true
          },
          "solarRadPress": {
            "description": "Boolean indicating use of solar radiation pressure perturbations for this vector.",
            "type": "boolean",
            "example": true
          },
          "srpArea": {
            "format": "double",
            "description": "The effective area of the object exposed to solar radiation pressure, expressed in meters^2.",
            "type": "number",
            "example": 4.311
          },
          "solidEarthTides": {
            "description": "Boolean indicating use of solid earth tide perturbations for this vector.",
            "type": "boolean",
            "example": true
          },
          "inTrackThrust": {
            "description": "Boolean indicating use of in-track thrust perturbations for this vector.",
            "type": "boolean",
            "example": true
          },
          "bDot": {
            "format": "double",
            "description": "First derivative of drag/ballistic coefficient (m2/kg-s).",
            "type": "number",
            "example": 1.23
          },
          "edr": {
            "format": "double",
            "description": "Model parameter value for energy dissipation rate (EDR) (w/kg).",
            "type": "number",
            "example": 1.23
          },
          "thrustAccel": {
            "format": "double",
            "description": "Model parameter value for thrust acceleration (m/s2).",
            "type": "number",
            "example": 1.23
          },
          "cmOffset": {
            "format": "double",
            "description": "Model parameter value for center of mass offset (m).",
            "type": "number",
            "example": 1.23
          },
          "lastObStart": {
            "format": "date-time",
            "description": "The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.",
            "type": "string",
            "example": "2022-11-09T11:20:21.247192Z"
          },
          "lastObEnd": {
            "format": "date-time",
            "description": "The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.",
            "type": "string",
            "example": "2022-11-09T11:20:21.247192Z"
          },
          "obsAvailable": {
            "format": "int32",
            "description": "The number of observations available for the OD of the object.",
            "type": "integer",
            "example": 376
          },
          "obsUsed": {
            "format": "int32",
            "description": "The number of observations accepted for the OD of the object.",
            "type": "integer",
            "example": 374
          },
          "tracksAvail": {
            "format": "int32",
            "description": "The number of sensor tracks available for the OD of the object.",
            "type": "integer",
            "example": 163
          },
          "tracksUsed": {
            "format": "int32",
            "description": "The number of sensor tracks accepted for the OD of the object.",
            "type": "integer",
            "example": 163
          },
          "recODSpan": {
            "format": "double",
            "description": "The recommended OD time span calculated for the object, expressed in days.",
            "type": "number",
            "example": 3.5
          },
          "actualODSpan": {
            "format": "double",
            "description": "The actual time span used for the OD of the object, expressed in days.",
            "type": "number",
            "example": 3.5
          },
          "residualsAcc": {
            "format": "double",
            "description": "The percentage of residuals accepted in the OD of the object.",
            "type": "number",
            "example": 99.5
          },
          "solarFluxF10": {
            "format": "double",
            "description": "F10 (10.7 cm) solar flux value.",
            "type": "number",
            "example": 1.23
          },
          "solarFluxF10Avg": {
            "format": "double",
            "description": "F10 (10.7 cm) solar flux 81-day average value.",
            "type": "number",
            "example": 1.23
          },
          "solarFluxAPAvg": {
            "format": "double",
            "description": "Average solar flux geomagnetic index.",
            "type": "number",
            "example": 1.23
          },
          "taiUtc": {
            "format": "double",
            "description": "TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset in seconds.",
            "type": "number",
            "example": 1.23
          },
          "ut1Utc": {
            "format": "double",
            "description": "Universal Time-1 (UT1) minus UTC offset, in seconds.",
            "type": "number",
            "example": 1.23
          },
          "ut1Rate": {
            "format": "double",
            "description": "Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.",
            "type": "number",
            "example": 1.23
          },
          "polarMotionX": {
            "format": "double",
            "description": "Polar Wander Motion X (arc seconds).",
            "type": "number",
            "example": 1.23
          },
          "polarMotionY": {
            "format": "double",
            "description": "Polar Wander Motion Y (arc seconds).",
            "type": "number",
            "example": 1.23
          },
          "iau1980Terms": {
            "format": "int32",
            "description": "Number of terms used in the IAU 1980 nutation model (4, 50, or 106).",
            "type": "integer",
            "example": 4
          },
          "leapSecondTime": {
            "format": "date-time",
            "description": "Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap second is not known, the time of the previous leap second is used.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "integratorMode": {
            "description": "Integrator Mode.",
            "maxLength": 32,
            "type": "string",
            "example": "integratorMode"
          },
          "partials": {
            "description": "Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).",
            "maxLength": 16,
            "type": "string",
            "example": "ANALYTIC"
          },
          "stepMode": {
            "description": "Integrator step mode (AUTO, TIME, or S).",
            "maxLength": 16,
            "type": "string",
            "example": "AUTO"
          },
          "fixedStep": {
            "description": "Boolean indicating use of fixed step size for this vector.",
            "type": "boolean",
            "example": true
          },
          "stepSizeSelection": {
            "description": "Initial step size selection (AUTO or MANUAL).",
            "maxLength": 16,
            "type": "string",
            "example": "AUTO"
          },
          "stepSize": {
            "format": "double",
            "description": "Initial integration step size (seconds).",
            "type": "number",
            "example": 1.23
          },
          "errorControl": {
            "format": "double",
            "description": "Integrator error control.",
            "type": "number",
            "example": 1.23
          },
          "sigmaPosUVW": {
            "description": "Array containing the standard deviation of error in target object position, U, V and W direction respectively (km).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              4.56
            ]
          },
          "sigmaVelUVW": {
            "description": "Array containing the standard deviation of error in target object velocity, U, V and W direction respectively (km/sec).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              4.56
            ]
          },
          "rms": {
            "format": "double",
            "description": "The Weighted Root Mean Squared (RMS) of the differential correction on the target object that produced this vector.  WRMS is a quality indicator of the state vector update, with a value of 1.00 being optimal.  WRMS applies to Batch Least Squares (BLS) processes.",
            "type": "number",
            "example": 0.991
          },
          "effectiveFrom": {
            "format": "date-time",
            "description": "Start time at which this state vector was the 'current' state vector for its satellite.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "effectiveUntil": {
            "format": "date-time",
            "description": "End time at which this state vector was no longer the 'current' state vector for its satellite.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "rawFileURI"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "algorithm": {
            "description": "Optional algorithm used to produce this record.",
            "maxLength": 64,
            "type": "string",
            "example": "SAMPLE_ALGORITHM"
          },
          "sourcedData": {
            "description": "Optional array of UDL data (observation) UUIDs used to build this state vector. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "DATA1",
              "DATA2"
            ]
          },
          "sourcedDataTypes": {
            "description": "Optional array of UDL observation data types used to build this state vector (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).",
            "type": "array",
            "items": {
              "enum": [
                "EO",
                "RADAR",
                "RF",
                "DOA",
                "ELSET",
                "SV"
              ],
              "type": "string"
            },
            "example": [
              "RADAR"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "descriptor"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "transactionId"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          }
        }
      },
      "Status_Full": {
        "description": "Status for a particular Entity. An entity may have multiple status records collected by various sources.",
        "required": [
          "classificationMarking",
          "idEntity",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "STATUS-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "derivedFrom": {
            "description": "The sources or SCG references from which the classification of this data is derived.",
            "maxLength": 128,
            "type": "string",
            "example": "SOME_SOURCE"
          },
          "declassificationDate": {
            "format": "date-time",
            "description": "The declassification date of this data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:02.123Z"
          },
          "declassificationString": {
            "description": "Declassification string of this data.",
            "maxLength": 256,
            "type": "string",
            "example": "U"
          },
          "idEntity": {
            "description": "Unique identifier of the parent entity.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENTITY-ID"
          },
          "state": {
            "description": "Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).",
            "maxLength": 16,
            "enum": [
              "UNKNOWN",
              "DEAD",
              "ACTIVE",
              "RF ACTIVE",
              "STANDBY"
            ],
            "type": "string",
            "example": "ACTIVE"
          },
          "sysCap": {
            "description": "System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).",
            "maxLength": 3,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "opsCap": {
            "description": "Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).",
            "maxLength": 3,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "subStatusCollection": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubStatus_Full"
            }
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "notes": {
            "description": "Comments describing the status creation and or updates to an entity.",
            "type": "string",
            "example": "Example Notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          }
        }
      },
      "SubStatus_Full": {
        "description": "Additional sub-system or capability status for the parent entity.",
        "required": [
          "type",
          "classificationMarking",
          "statusId",
          "status",
          "notes",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SUBSTATUS-ID"
          },
          "type": {
            "description": "Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "mwCap",
              "ssCap",
              "mdCap"
            ],
            "type": "string",
            "example": "mdCap"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "statusId": {
            "description": "Id of the parent status.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-STATUS-ID"
          },
          "status": {
            "description": "Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "notes": {
            "description": "Descriptions and/or comments associated with the sub-status.",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "example": "Sample Notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      }
    }
  }
}