{
  "openapi": "3.0.3",
  "info": {
    "title": "Unified Data Library Services API",
    "version": "1.30.0 Daiquiri",
    "description": "Unified Data Library Services OpenAPI v3 documentation.",
    "termsOfService": "storefront/storefront/appConfig/useragreement.html",
    "contact": {
      "name": "Sage Andorka, Deputy, Cross-Mission Ground",
      "email": "unifieddatalibrary@bluestaq.com"
    }
  },
  "tags": [
    {
      "name": "Observation",
      "description": "This collection of services provides operations for querying and manipulation of electro-optical (EO), radar, radio frequency (RF), Global Navigation Satellite Systems (GNSS), Ionospheric (IONO), Infrared (SWIR), and Space Environment observation data. The J2000 coordinate frame is the preferred frame for all observations, as applicable, but in some cases observations may be in an alternate frame depending on the provider and/or datatype."
    }
  ],
  "externalDocs": {
    "url": "udl/openapi.json"
  },
  "servers": [
    {
      "url": "https://unifieddatalibrary.com"
    }
  ],
  "paths": {
    "/filedrop/monoradar": {
      "post": {
        "tags": [
          "Observation"
        ],
        "description": "Service operation to take a list of MonoRadar records as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_monoradar_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MonoRadar_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/swir": {
      "post": {
        "tags": [
          "Observation"
        ],
        "description": "Service operation to take a list of SWIR records as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_swir_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SWIR_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-ecpsdr": {
      "post": {
        "tags": [
          "Observation"
        ],
        "description": "Service operation to take multiple ECPSDR as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_ecpsdr_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ECPSDR_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-eo": {
      "post": {
        "tags": [
          "Observation"
        ],
        "description": "Service operation to take multiple EO observations as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_eo_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EOObservation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "429": {
            "description": "Rate Limit Exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-gnssobset": {
      "post": {
        "tags": [
          "Observation"
        ],
        "description": "Service operation to accept one or more GNSSObservationSet(s) and associated GNSS Observation(s) as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_gnssobset_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GNSSObservationSet_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "429": {
            "description": "Rate Limit Exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-gnssrawif": {
      "post": {
        "tags": [
          "Observation"
        ],
        "description": "The GNSSRawIF service allows for contribution of raw GNSS IF data.. </br> This service operation requires a zip file in the body of the POST request.  The zip file must contain exactly two files. </br> <h3> 1) A json file with any file name that ends in .json  e.g. payload.json  The contents of the json file must be valid according to the schema for GNSSRawIF. </br> 2) A .hdf5 file for GNSSRawIF. </h3> The metadata and hdf5 files will be stored and associated with each other allowing queries of the data retrieval of the binary images. </br> This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_gnssrawif_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GNSSRawIF_Ingest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-ionoobs": {
      "post": {
        "tags": [
          "Observation"
        ],
        "description": "Service operation to take Ionospheric Observation entries as a POST body and ingest into the database with or without dupe detection. Default is no dupe checking. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_ionoobs_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IonoObservation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-onboardnavigation": {
      "post": {
        "tags": [
          "Observation"
        ],
        "description": "Service operation to take a list of onboard navigation records as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_onboardnavigation_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OnboardNavigation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-passiveradar": {
      "post": {
        "tags": [
          "Observation"
        ],
        "description": "Service operation to take multiple PassiveRadarObservation records as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_passive_radar_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PassiveRadarObservation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-radar": {
      "post": {
        "tags": [
          "Observation"
        ],
        "description": "Service operation to take multiple radar observations as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_radar_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RadarObservation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-rf": {
      "post": {
        "tags": [
          "Observation"
        ],
        "description": "Service operation to take multiple RF observations as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_rf_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RFObservationDetails_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "429": {
            "description": "Rate Limit Exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-sar": {
      "post": {
        "tags": [
          "Observation"
        ],
        "description": "Service operation to take SAR observations as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_sarobservation_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SARObservation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-soiobservationset": {
      "post": {
        "tags": [
          "Observation"
        ],
        "description": "Service operation to take multiple SOIObservationSet records as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_soiobservationset_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SOIObservationSet_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/filedrop/udl-spaceenvobs": {
      "post": {
        "tags": [
          "Observation"
        ],
        "description": "Service operation to accept one or more SpaceEnvObservation(s) as a POST body and ingest into the database. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_spaceenvobs_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SpaceEnvObservation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "429": {
            "description": "Rate Limit Exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ecpsdr": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ECPSDR_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "msgTime",
            "description": "Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single ECPSDR as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ECPSDR_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ecpsdr/{id}": {
      "get": {
        "description": "Service operation to get a single ECPSDR by its unique ID passed as a path parameter.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "The ID of the ECPSDR to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ECPSDR_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ecpsdr/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "msgTime",
            "description": "Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/ecpsdr/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of ECPSDR as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON array of ECPSDR.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ECPSDR_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ecpsdr/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ecpsdr/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msgTime",
            "description": "Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ECPSDR_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/eoobservation": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EOObservation_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should contact the provider for details on their obTime specifications. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single EO observation as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON representation of one observation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EOObservation_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/eoobservation/{id}": {
      "get": {
        "description": "Service operation to get a single EO observation by its unique ID passed as a path parameter.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "The ID of the observation to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EOObservation_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/eoobservation/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should contact the provider for details on their obTime specifications. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/eoobservation/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of EO observations as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Flag to convert observation reference frame into J2000.",
            "required": false,
            "name": "convertToJ2K",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "JSON array of observations.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EOObservation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/eoobservation/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "required": false,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should contact the provider for details on their obTime specifications. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EOObservation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/eoobservation/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "required": false,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "required": false,
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "required": false,
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "required": false,
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should contact the provider for details on their obTime specifications. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/eoobservation/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should contact the provider for details on their obTime specifications. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/eoobservation/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/eoobservation/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should contact the provider for details on their obTime specifications. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EOObservation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/gnssobservationset": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GNSSObservationSet_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "ts",
            "description": "Observation Time, in ISO8601 UTC format with microsecond precision. This timestamp applies to all observations within the set. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/gnssobservationset/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "ts",
            "description": "Observation Time, in ISO8601 UTC format with microsecond precision. This timestamp applies to all observations within the set. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/gnssobservationset/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of Track Details records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON representation of multiple UDL GNSSObservationSet.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GNSSObservationSet_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/gnssobservationset/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts",
            "description": "Observation Time, in ISO8601 UTC format with microsecond precision. This timestamp applies to all observations within the set. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GNSSObservationSet_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/gnssobservationset/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts",
            "description": "Observation Time, in ISO8601 UTC format with microsecond precision. This timestamp applies to all observations within the set. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/gnssobservationset/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "ts",
            "description": "Observation Time, in ISO8601 UTC format with microsecond precision. This timestamp applies to all observations within the set. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/gnssobservationset/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/gnssobservationset/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts",
            "description": "Observation Time, in ISO8601 UTC format with microsecond precision. This timestamp applies to all observations within the set. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GNSSObservationSet_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/gnssrawif": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GNSSRawIF_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/gnssrawif/{id}": {
      "get": {
        "description": "Service operation to get a single GNSSRawIF by its unique ID passed as a path parameter.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "The ID of the GNSSRawIF to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GNSSRawIF_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/gnssrawif/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/gnssrawif/getFile/{id}": {
      "get": {
        "description": "Service operation to get a single GNSSRAWIF hdf5 file by its unique ID passed as a path parameter. The file is returned as an attachment Content-Disposition.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "The ID of the binary GNSSRawIF file to return.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/gnssrawif/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GNSSRawIF_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/gnssrawif/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/gnssrawif/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/gnssrawif/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/gnssrawif/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GNSSRawIF_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ionoobservation": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IonoObservation_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTimeUTC",
            "description": "Sounding Start time in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/ionoobservation/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTimeUTC",
            "description": "Sounding Start time in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/ionoobservation/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of IonoObservation records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON representation of multiple Ionospheric Observation objects.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IonoObservation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ionoobservation/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTimeUTC",
            "description": "Sounding Start time in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IonoObservation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ionoobservation/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTimeUTC",
            "description": "Sounding Start time in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ionoobservation/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTimeUTC",
            "description": "Sounding Start time in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/ionoobservation/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/ionoobservation/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTimeUTC",
            "description": "Sounding Start time in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IonoObservation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/monoradar": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonoRadar_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "ts",
            "description": "Target detection time, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/monoradar/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "ts",
            "description": "Target detection time, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/monoradar/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of MonoRadar records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON representation of list of MonoRadar record.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MonoRadar_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/monoradar/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts",
            "description": "Target detection time, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonoRadar_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/monoradar/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts",
            "description": "Target detection time, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/monoradar/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "ts",
            "description": "Target detection time, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/monoradar/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/monoradar/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts",
            "description": "Target detection time, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonoRadar_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onboardnavigation": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnboardNavigation_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "Start time of the sensor data, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/onboardnavigation/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "Start time of the sensor data, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/onboardnavigation/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of OnboardNavigation records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON representation of list of OnboardNavigation record.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OnboardNavigation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onboardnavigation/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "Start time of the sensor data, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnboardNavigation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onboardnavigation/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "Start time of the sensor data, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onboardnavigation/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "Start time of the sensor data, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/onboardnavigation/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/onboardnavigation/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "Start time of the sensor data, in ISO 8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OnboardNavigation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/passiveradarobservation": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PassiveRadarObservation_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single PassiveRadarObservation as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassiveRadarObservation_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/passiveradarobservation/{id}": {
      "get": {
        "description": "Service operation to get a single PassiveRadarObservation record by its unique ID passed as a path parameter.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "The ID of the PassiveRadarObservation to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PassiveRadarObservation_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/passiveradarobservation/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/passiveradarobservation/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of PassiveRadarObservation records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PassiveRadarObservation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/passiveradarobservation/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PassiveRadarObservation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/passiveradarobservation/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/passiveradarobservation/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/passiveradarobservation/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/passiveradarobservation/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PassiveRadarObservation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/radarobservation": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RadarObservation_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single radar observation as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON representation of one observation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RadarObservation_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/radarobservation/{id}": {
      "get": {
        "description": "Service operation to get a single radar observations by its unique ID passed as a path parameter.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "The ID of the observation to get.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RadarObservation_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/radarobservation/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/radarobservation/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of radar observations as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON array of observations.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RadarObservation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/radarobservation/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RadarObservation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/radarobservation/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/radarobservation/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/radarobservation/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/radarobservation/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RadarObservation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/rfobservation": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFObservation_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single RF observation as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON representation of one observation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RFObservationDetails_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/rfobservation/{id}": {
      "get": {
        "description": "Service operation to get a single RF observation by its unique ID passed as a path parameter.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "The ID of the observation to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RFObservationDetails_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/rfobservation/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/rfobservation/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of RF observations as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON array of observations.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RFObservationDetails_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/rfobservation/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFObservationDetails_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/rfobservation/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/rfobservation/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/rfobservation/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/rfobservation/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFObservation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sarobservation": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SARObservation_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "collectionStart",
            "description": "Collection start time in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single SAR observation as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON representation of one observation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SARObservation_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sarobservation/{id}": {
      "get": {
        "description": "Service operation to get a single SAR observations by its unique ID passed as a path parameter.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "The ID of the observation to get.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SARObservation_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sarobservation/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "collectionStart",
            "description": "Collection start time in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/sarobservation/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of SAR observations as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON array of observations.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SARObservation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sarobservation/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collectionStart",
            "description": "Collection start time in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SARObservation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sarobservation/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collectionStart",
            "description": "Collection start time in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sarobservation/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "collectionStart",
            "description": "Collection start time in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/sarobservation/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/sarobservation/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collectionStart",
            "description": "Collection start time in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SARObservation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/soiobservationset": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters. The query will return the SOI Observation Sets and not the associated SOI Observations. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SOIObservationSet_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "Observation set detection start time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single SOIObservationSet record as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON representation of one SOIObservationSet.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SOIObservationSet_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/soiobservationset/{id}": {
      "get": {
        "description": "Service operation to get a single SOIObservationSet by its unique ID passed as a path parameter.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "The ID of the SOIObservationSet to retrieve.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SOIObservationSet_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/soiobservationset/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "Observation set detection start time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/soiobservationset/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of SOIObservationSet records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON representation of multiple UDL SOIObservationSet objects.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SOIObservationSet_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/soiobservationset/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "Observation set detection start time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SOIObservationSet_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/soiobservationset/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "Observation set detection start time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/soiobservationset/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "Observation set detection start time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/soiobservationset/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/soiobservationset/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "description": "Observation set detection start time in ISO 8601 UTC with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SOIObservationSet_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/spaceenvobservation": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpaceEnvObservation_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Time of the observation, in ISO 8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/spaceenvobservation/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Time of the observation, in ISO 8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/spaceenvobservation/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of SpaceEnvObservation records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON representation of multiple UDL SpaceEnvObservation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SpaceEnvObservation_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/spaceenvobservation/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Time of the observation, in ISO 8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpaceEnvObservation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/spaceenvobservation/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Time of the observation, in ISO 8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/spaceenvobservation/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "obTime",
            "description": "Time of the observation, in ISO 8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/spaceenvobservation/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/spaceenvobservation/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "obTime",
            "description": "Time of the observation, in ISO 8601 UTC format with millisecond precision. (YYYY-MM-DDTHH:MM:SS.sssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpaceEnvObservation_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/swir": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SWIR_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "ts",
            "description": "Data timestamp in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "Service operation to take a single SWIR record as a POST body and ingest into the database. A specific role is required to perform this service operation. Please contact the UDL team for assistance.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON representation of one SWIR record.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SWIR_Ingest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/swir/{id}": {
      "get": {
        "description": "Service operation to get a single SWIR record by its unique ID passed as a path parameter.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "The ID of the SWIR record to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SWIR_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/swir/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "ts",
            "description": "Data timestamp in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/swir/createBulk": {
      "post": {
        "description": "Service operation intended for initial integration only, to take a list of SWIR records as a POST body and ingest into the database. This operation is not intended to be used for automated feeds into UDL. Data providers should contact the UDL team for specific role assignments and for instructions on setting up a permanent feed through an alternate mechanism.",
        "tags": [
          "Observation"
        ],
        "requestBody": {
          "description": "JSON representation of list of SWIR record.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SWIR_Ingest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "415": {
            "description": "MediaType Unsupported"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/swir/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts",
            "description": "Data timestamp in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SWIR_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/swir/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts",
            "description": "Data timestamp in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/swir/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "ts",
            "description": "Data timestamp in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/swir/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Observation"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/swir/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Observation"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ts",
            "description": "Data timestamp in ISO8601 UTC format. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SWIR_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Antenna_Full": {
        "description": "Model representation of information on on-orbit/spacecraft communication antennas. A spacecraft may have multiple antennas and each antenna can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "name": {
            "description": "Antenna name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "IRIDIUM NEXT 121-ANTENNA-10075"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "antennaDetails": {
            "description": "Read-only collection of additional AntennaDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/antennadetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AntennaDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "AntennaDetails_Full": {
        "description": "Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.",
        "required": [
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNADETAILS-ID"
          },
          "idAntenna": {
            "description": "Unique identifier of the parent Antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Reflector"
          },
          "position": {
            "description": "Antenna position (e.g. Top, Nadir, Side).",
            "maxLength": 128,
            "type": "string",
            "example": "Top"
          },
          "mode": {
            "description": "Antenna mode (e.g. TX,RX).",
            "maxLength": 4,
            "enum": [
              "TX",
              "RX"
            ],
            "type": "string",
            "example": "TX"
          },
          "steerable": {
            "description": "Boolean indicating if this antenna is steerable.",
            "type": "boolean",
            "example": false
          },
          "beamForming": {
            "description": "Boolean indicating if this is a beam forming antenna.",
            "type": "boolean",
            "example": false
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the antenna.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTUREORG-ID"
          },
          "diameter": {
            "format": "double",
            "description": "Antenna diameter in meters.",
            "type": "number",
            "example": 0.01
          },
          "size": {
            "description": "Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.05
            ]
          },
          "startFrequency": {
            "format": "double",
            "description": "Antenna start of frequency range in Mhz.",
            "type": "number",
            "example": 2.1
          },
          "endFrequency": {
            "format": "double",
            "description": "Antenna end of frequency range in Mhz.",
            "type": "number",
            "example": 3.3
          },
          "beamwidth": {
            "format": "double",
            "description": "Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.",
            "type": "number",
            "example": 14.1
          },
          "gain": {
            "format": "double",
            "description": "Antenna maximum gain in dBi.",
            "type": "number",
            "example": 20.1
          },
          "gainTolerance": {
            "format": "double",
            "description": "Antenna gain tolerance in dB.",
            "type": "number",
            "example": 5.1
          },
          "polarization": {
            "format": "double",
            "description": "Antenna polarization in degrees.",
            "type": "number",
            "example": 45.1
          },
          "description": {
            "description": "Antenna description.",
            "maxLength": 512,
            "type": "string",
            "example": "Description of antenna A"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "Battery_Full": {
        "description": "Model representation of specific spacecraft battery types.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "name": {
            "description": "Battery name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "JAK-BATTERY-1479"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "batteryDetails": {
            "description": "Read-only collection of additional BatteryDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/batterydetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatteryDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "BatteryDetails_Full": {
        "description": "Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.",
        "required": [
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERYDETAILS-ID"
          },
          "idBattery": {
            "description": "Identifier of the parent battery type record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "technology": {
            "description": "Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Ni-Cd"
          },
          "capacity": {
            "format": "double",
            "description": "Battery capacity in Ah.",
            "type": "number",
            "example": 10.1
          },
          "dischargeDepth": {
            "format": "double",
            "description": "Depth of discharge as a percentage/fraction.",
            "type": "number",
            "example": 0.2
          },
          "model": {
            "description": "Battery model number or name.",
            "maxLength": 128,
            "type": "string",
            "example": "11212"
          },
          "description": {
            "description": "Battery description/notes.",
            "maxLength": 1024,
            "type": "string",
            "example": "example notes"
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the battery.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "ECPSDR_Abridged": {
        "description": "Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.",
        "required": [
          "classificationMarking",
          "type",
          "msgTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ECPSDR-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite hosting the sensor.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the on-orbit satellite hosting the sensor.",
            "type": "integer",
            "example": 101
          },
          "origObjectId": {
            "description": "Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "type": {
            "description": "The type of data associated with this record (STANDARD, TRANSIENT).",
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "example": "STANDARD"
          },
          "msgTime": {
            "format": "date-time",
            "description": "Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "obTime": {
            "format": "date-time",
            "description": "Time of the observation, in ISO 8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "retransmit": {
            "description": "Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).",
            "type": "boolean",
            "example": true
          },
          "senMode": {
            "description": "The sensor mode associated with this measurements (NORMAL, TEST).",
            "maxLength": 12,
            "type": "string",
            "example": "TEST"
          },
          "dosBias": {
            "format": "int32",
            "description": "Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.",
            "type": "integer",
            "example": 12
          },
          "asl5VCurrMon": {
            "format": "int32",
            "description": "Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.",
            "type": "integer",
            "example": 12
          },
          "dsl5VCurrMon": {
            "format": "int32",
            "description": "Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.",
            "type": "integer",
            "example": 12
          },
          "psTempMon": {
            "format": "int32",
            "description": "Power supply temperature monitor.  This is sensor status telemetry.",
            "type": "integer",
            "example": 12
          },
          "cdsPlateVMon": {
            "format": "int32",
            "description": "CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.",
            "type": "integer",
            "example": 12
          },
          "cdsRefVMon": {
            "format": "int32",
            "description": "CDS reference voltage monitor.  See vRef for conversion factor to Volts.",
            "type": "integer",
            "example": 12
          },
          "mpTemp": {
            "format": "int32",
            "description": "Unitless sensor mounting plate temperature.",
            "type": "integer",
            "example": 12
          },
          "vRef": {
            "format": "int32",
            "description": "Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.",
            "type": "integer",
            "example": 12
          },
          "pd1SigLev": {
            "format": "int32",
            "description": "Photodiode 1 signal level.",
            "type": "integer",
            "example": 12
          },
          "pd2SigLev": {
            "format": "int32",
            "description": "Photodiode 2 signal level.",
            "type": "integer",
            "example": 12
          },
          "esdTrigCountL": {
            "format": "int32",
            "description": "Number of ESD triggers, low byte of 2-byte counter.",
            "type": "integer",
            "example": 12
          },
          "esdTrigCountH": {
            "format": "int32",
            "description": "Number of ESD triggers, high byte of 2-byte counter.",
            "type": "integer",
            "example": 12
          },
          "lowLetL": {
            "format": "int32",
            "description": "LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "lowLetM": {
            "format": "int32",
            "description": "LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet1L": {
            "format": "int32",
            "description": "MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet1M": {
            "format": "int32",
            "description": "MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet2L": {
            "format": "int32",
            "description": "MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet2M": {
            "format": "int32",
            "description": "MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet3L": {
            "format": "int32",
            "description": "MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet3M": {
            "format": "int32",
            "description": "MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet4L": {
            "format": "int32",
            "description": "MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet4M": {
            "format": "int32",
            "description": "MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "hiLetL": {
            "format": "int32",
            "description": "HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "hiLetM": {
            "format": "int32",
            "description": "Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "surfDosL": {
            "format": "int32",
            "description": "Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosM": {
            "format": "int32",
            "description": "Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosH": {
            "format": "int32",
            "description": "Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosChargeL": {
            "format": "int32",
            "description": "Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosChargeH": {
            "format": "int32",
            "description": "Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosStat": {
            "format": "int32",
            "description": "Surface dosimeter status byte.",
            "type": "integer",
            "example": 2
          },
          "cdsThrottle": {
            "format": "int32",
            "description": "CDS throttle number of seconds between CDS transient capture readouts.",
            "type": "integer",
            "example": 12
          },
          "cdsThreshold": {
            "format": "int32",
            "description": "CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.",
            "type": "integer",
            "example": 12
          },
          "checksum": {
            "format": "int32",
            "description": "Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).",
            "type": "integer",
            "example": 12
          },
          "transientData": {
            "description": "Array of 144 digitized samples of ESD waveform for transient packets.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2,
              3
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "ECPSDR_Full": {
        "description": "Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.",
        "required": [
          "classificationMarking",
          "type",
          "msgTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ECPSDR-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite hosting the sensor.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the on-orbit satellite hosting the sensor.",
            "type": "integer",
            "example": 101
          },
          "origObjectId": {
            "description": "Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "type": {
            "description": "The type of data associated with this record (STANDARD, TRANSIENT).",
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "example": "STANDARD"
          },
          "msgTime": {
            "format": "date-time",
            "description": "Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "obTime": {
            "format": "date-time",
            "description": "Time of the observation, in ISO 8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "retransmit": {
            "description": "Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).",
            "type": "boolean",
            "example": true
          },
          "senMode": {
            "description": "The sensor mode associated with this measurements (NORMAL, TEST).",
            "maxLength": 12,
            "type": "string",
            "example": "TEST"
          },
          "dosBias": {
            "format": "int32",
            "description": "Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.",
            "type": "integer",
            "example": 12
          },
          "asl5VCurrMon": {
            "format": "int32",
            "description": "Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.",
            "type": "integer",
            "example": 12
          },
          "dsl5VCurrMon": {
            "format": "int32",
            "description": "Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.",
            "type": "integer",
            "example": 12
          },
          "psTempMon": {
            "format": "int32",
            "description": "Power supply temperature monitor.  This is sensor status telemetry.",
            "type": "integer",
            "example": 12
          },
          "cdsPlateVMon": {
            "format": "int32",
            "description": "CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.",
            "type": "integer",
            "example": 12
          },
          "cdsRefVMon": {
            "format": "int32",
            "description": "CDS reference voltage monitor.  See vRef for conversion factor to Volts.",
            "type": "integer",
            "example": 12
          },
          "mpTemp": {
            "format": "int32",
            "description": "Unitless sensor mounting plate temperature.",
            "type": "integer",
            "example": 12
          },
          "vRef": {
            "format": "int32",
            "description": "Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.",
            "type": "integer",
            "example": 12
          },
          "pd1SigLev": {
            "format": "int32",
            "description": "Photodiode 1 signal level.",
            "type": "integer",
            "example": 12
          },
          "pd2SigLev": {
            "format": "int32",
            "description": "Photodiode 2 signal level.",
            "type": "integer",
            "example": 12
          },
          "esdTrigCountL": {
            "format": "int32",
            "description": "Number of ESD triggers, low byte of 2-byte counter.",
            "type": "integer",
            "example": 12
          },
          "esdTrigCountH": {
            "format": "int32",
            "description": "Number of ESD triggers, high byte of 2-byte counter.",
            "type": "integer",
            "example": 12
          },
          "lowLetL": {
            "format": "int32",
            "description": "LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "lowLetM": {
            "format": "int32",
            "description": "LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet1L": {
            "format": "int32",
            "description": "MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet1M": {
            "format": "int32",
            "description": "MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet2L": {
            "format": "int32",
            "description": "MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet2M": {
            "format": "int32",
            "description": "MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet3L": {
            "format": "int32",
            "description": "MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet3M": {
            "format": "int32",
            "description": "MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet4L": {
            "format": "int32",
            "description": "MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet4M": {
            "format": "int32",
            "description": "MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "hiLetL": {
            "format": "int32",
            "description": "HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "hiLetM": {
            "format": "int32",
            "description": "Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "surfDosL": {
            "format": "int32",
            "description": "Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosM": {
            "format": "int32",
            "description": "Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosH": {
            "format": "int32",
            "description": "Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosChargeL": {
            "format": "int32",
            "description": "Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosChargeH": {
            "format": "int32",
            "description": "Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosStat": {
            "format": "int32",
            "description": "Surface dosimeter status byte.",
            "type": "integer",
            "example": 2
          },
          "cdsThrottle": {
            "format": "int32",
            "description": "CDS throttle number of seconds between CDS transient capture readouts.",
            "type": "integer",
            "example": 12
          },
          "cdsThreshold": {
            "format": "int32",
            "description": "CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.",
            "type": "integer",
            "example": 12
          },
          "checksum": {
            "format": "int32",
            "description": "Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).",
            "type": "integer",
            "example": 12
          },
          "transientData": {
            "description": "Array of 144 digitized samples of ESD waveform for transient packets.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2,
              3
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          }
        }
      },
      "ECPSDR_Ingest": {
        "description": "Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.",
        "required": [
          "classificationMarking",
          "type",
          "msgTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ECPSDR-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite hosting the sensor.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the on-orbit satellite hosting the sensor.",
            "type": "integer",
            "example": 101
          },
          "origObjectId": {
            "description": "Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "type": {
            "description": "The type of data associated with this record (STANDARD, TRANSIENT).",
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "example": "STANDARD"
          },
          "msgTime": {
            "format": "date-time",
            "description": "Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "obTime": {
            "format": "date-time",
            "description": "Time of the observation, in ISO 8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "retransmit": {
            "description": "Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).",
            "type": "boolean",
            "example": true
          },
          "senMode": {
            "description": "The sensor mode associated with this measurements (NORMAL, TEST).",
            "maxLength": 12,
            "type": "string",
            "example": "TEST"
          },
          "dosBias": {
            "format": "int32",
            "description": "Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.",
            "type": "integer",
            "example": 12
          },
          "asl5VCurrMon": {
            "format": "int32",
            "description": "Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.",
            "type": "integer",
            "example": 12
          },
          "dsl5VCurrMon": {
            "format": "int32",
            "description": "Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.",
            "type": "integer",
            "example": 12
          },
          "psTempMon": {
            "format": "int32",
            "description": "Power supply temperature monitor.  This is sensor status telemetry.",
            "type": "integer",
            "example": 12
          },
          "cdsPlateVMon": {
            "format": "int32",
            "description": "CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.",
            "type": "integer",
            "example": 12
          },
          "cdsRefVMon": {
            "format": "int32",
            "description": "CDS reference voltage monitor.  See vRef for conversion factor to Volts.",
            "type": "integer",
            "example": 12
          },
          "mpTemp": {
            "format": "int32",
            "description": "Unitless sensor mounting plate temperature.",
            "type": "integer",
            "example": 12
          },
          "vRef": {
            "format": "int32",
            "description": "Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.",
            "type": "integer",
            "example": 12
          },
          "pd1SigLev": {
            "format": "int32",
            "description": "Photodiode 1 signal level.",
            "type": "integer",
            "example": 12
          },
          "pd2SigLev": {
            "format": "int32",
            "description": "Photodiode 2 signal level.",
            "type": "integer",
            "example": 12
          },
          "esdTrigCountL": {
            "format": "int32",
            "description": "Number of ESD triggers, low byte of 2-byte counter.",
            "type": "integer",
            "example": 12
          },
          "esdTrigCountH": {
            "format": "int32",
            "description": "Number of ESD triggers, high byte of 2-byte counter.",
            "type": "integer",
            "example": 12
          },
          "lowLetL": {
            "format": "int32",
            "description": "LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "lowLetM": {
            "format": "int32",
            "description": "LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet1L": {
            "format": "int32",
            "description": "MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet1M": {
            "format": "int32",
            "description": "MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet2L": {
            "format": "int32",
            "description": "MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet2M": {
            "format": "int32",
            "description": "MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet3L": {
            "format": "int32",
            "description": "MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet3M": {
            "format": "int32",
            "description": "MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet4L": {
            "format": "int32",
            "description": "MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "medLet4M": {
            "format": "int32",
            "description": "MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "hiLetL": {
            "format": "int32",
            "description": "HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "hiLetM": {
            "format": "int32",
            "description": "Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.",
            "type": "integer",
            "example": 2
          },
          "surfDosL": {
            "format": "int32",
            "description": "Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosM": {
            "format": "int32",
            "description": "Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosH": {
            "format": "int32",
            "description": "Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosChargeL": {
            "format": "int32",
            "description": "Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosChargeH": {
            "format": "int32",
            "description": "Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.",
            "type": "integer",
            "example": 12
          },
          "surfDosStat": {
            "format": "int32",
            "description": "Surface dosimeter status byte.",
            "type": "integer",
            "example": 2
          },
          "cdsThrottle": {
            "format": "int32",
            "description": "CDS throttle number of seconds between CDS transient capture readouts.",
            "type": "integer",
            "example": 12
          },
          "cdsThreshold": {
            "format": "int32",
            "description": "CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.",
            "type": "integer",
            "example": 12
          },
          "checksum": {
            "format": "int32",
            "description": "Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).",
            "type": "integer",
            "example": 12
          },
          "transientData": {
            "description": "Array of 144 digitized samples of ESD waveform for transient packets.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2,
              3
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Engine_Full": {
        "description": "Known launch vehicle engines and their performance characteristics and limits.  A launch vehicle has 1 to many engines per stage.",
        "required": [
          "name",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "name": {
            "description": "Engine name/variant.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE_VARIANT1"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engineDetails": {
            "description": "Read-only collection of additional EngineDetails by various sources for this engine, ignored on create/update. These details must be created separately via the /udl/enginedetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EngineDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "EngineDetails_Full": {
        "description": "Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.",
        "required": [
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINEDETAILS-ID"
          },
          "idEngine": {
            "description": "Identifier of the parent engine record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "family": {
            "description": "Engine type or family.",
            "maxLength": 64,
            "type": "string",
            "example": "ENGINE_TYPE1"
          },
          "cycleType": {
            "description": "Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Pressure Fed"
          },
          "characteristicType": {
            "description": "Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Electric"
          },
          "manufacturerOrgId": {
            "description": "Organization ID of the engine manufacturer.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "specificImpulse": {
            "format": "double",
            "description": "Launch engine specific impulse in seconds.",
            "type": "number",
            "example": 1.1
          },
          "burnTime": {
            "format": "double",
            "description": "Launch engine maximum burn time in seconds.",
            "type": "number",
            "example": 1.1
          },
          "seaLevelThrust": {
            "format": "double",
            "description": "Engine maximum thrust at sea level in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "vacuumThrust": {
            "format": "double",
            "description": "Engine maximum thrust in a vacuum in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "chamberPressure": {
            "format": "double",
            "description": "Engine chamber pressure in bars.",
            "type": "number",
            "example": 1.1
          },
          "nozzleExpansionRatio": {
            "format": "double",
            "description": "Engine nozzle expansion ratio.",
            "type": "number",
            "example": 1.1
          },
          "maxFirings": {
            "format": "int32",
            "description": "Engine maximum number of firings.",
            "type": "integer",
            "example": 5
          },
          "propellant": {
            "description": "Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid"
          },
          "oxidizer": {
            "description": "Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid Oxygen"
          },
          "notes": {
            "description": "Notes/Description of the engine.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "EOObservation_Abridged": {
        "description": "Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EOOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should contact the provider for details on their obTime specifications.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "corrQuality": {
            "format": "double",
            "description": "Object Correlation Quality score of the observation when compared to a known orbit state, (non-standardized). Users should consult data providers regarding the expected range of values.",
            "type": "number",
            "example": 1.1
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "idSkyImagery": {
            "description": "Unique identifier of the Sky Imagery.",
            "maxLength": 36,
            "type": "string",
            "example": "SKYIMAGERY-ID"
          },
          "collectMethod": {
            "description": "Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).",
            "maxLength": 24,
            "type": "string",
            "example": "AUTOTRACK"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 5
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "obPosition": {
            "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
            "maxLength": 8,
            "type": "string",
            "example": "FIRST"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": false
          },
          "azimuth": {
            "format": "double",
            "description": "Line of sight azimuth angle in degrees and topocentric frame.  Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight azimuth angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "azimuthBias": {
            "format": "double",
            "description": "Sensor line of sight azimuth angle bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the line of sight azimuth in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "elevation": {
            "format": "double",
            "description": "Line of sight elevation in degrees and topocentric frame. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight elevation angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "elevationBias": {
            "format": "double",
            "description": "Sensor line of sight elevation bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the line of sight elevation in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "range": {
            "format": "double",
            "description": "Line of sight range in km. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight range, in kilometers.",
            "type": "number",
            "example": 1.1
          },
          "rangeBias": {
            "format": "double",
            "description": "Sensor line of sight range bias in km.",
            "type": "number",
            "example": 1.1
          },
          "rangeRate": {
            "format": "double",
            "description": "Range rate in km/s. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight range rate, in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "ra": {
            "format": "double",
            "description": "Line of sight right ascension, in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "raMeasured": {
            "description": "Optional flag indicating whether the ra value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "raRate": {
            "format": "double",
            "description": "Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "raUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight right ascension angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "raBias": {
            "format": "double",
            "description": "Sensor line of sight right ascension bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "declination": {
            "format": "double",
            "description": "Line of sight declination, in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "declinationMeasured": {
            "description": "Optional flag indicating whether the declination value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "declinationRate": {
            "format": "double",
            "description": "Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "declinationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight declination angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "declinationBias": {
            "format": "double",
            "description": "Sensor line of sight declination angle bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "losx": {
            "format": "double",
            "description": "Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losy": {
            "format": "double",
            "description": "Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losz": {
            "format": "double",
            "description": "Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight pointing in micro-radians.",
            "type": "number",
            "example": 1.1
          },
          "losxvel": {
            "format": "double",
            "description": "Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losyvel": {
            "format": "double",
            "description": "Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "loszvel": {
            "format": "double",
            "description": "Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 179.1
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at obTime (if mobile/onorbit) in km.",
            "type": "number",
            "example": 1.1
          },
          "senx": {
            "format": "double",
            "description": "Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "seny": {
            "format": "double",
            "description": "Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senz": {
            "format": "double",
            "description": "Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelx": {
            "format": "double",
            "description": "Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvely": {
            "format": "double",
            "description": "Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelz": {
            "format": "double",
            "description": "Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senQuat": {
            "description": "The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.4492,
              0.02,
              0.8765,
              0.2213
            ]
          },
          "fovCount": {
            "format": "int32",
            "description": "The number of RSOs detected in the sensor field of view.",
            "type": "integer",
            "example": 1
          },
          "fovCountUCT": {
            "format": "int32",
            "description": "The number of uncorrelated tracks in the field of view.",
            "type": "integer",
            "example": 2
          },
          "expDuration": {
            "format": "double",
            "description": "Image exposure duration in seconds. For observations performed using frame stacking or synthetic tracking methods, the exposure duration should be the total integration time. This field is highly recommended / required if the observations are going to be used for photometric processing.",
            "type": "number",
            "example": 1.1
          },
          "zeroptd": {
            "format": "double",
            "description": "Formula: 2.5 * log_10 (zero_mag_counts / expDuration).",
            "type": "number",
            "example": 1.1
          },
          "netObjSig": {
            "format": "double",
            "description": "Net object signature = counts / expDuration.",
            "type": "number",
            "example": 1.1
          },
          "netObjSigUnc": {
            "format": "double",
            "description": "Net object signature uncertainty = counts uncertainty / expDuration.",
            "type": "number",
            "example": 1.1
          },
          "mag": {
            "format": "double",
            "description": "Measure of observed brightness calibrated against the Gaia G-band in units of magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "magUnc": {
            "format": "double",
            "description": "Uncertainty of the observed brightness in units of magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "magNormRange": {
            "format": "double",
            "description": "Formula: mag - 5.0 * log_10(geo_range / 1000000.0).",
            "type": "number",
            "example": 1.1
          },
          "geolat": {
            "format": "double",
            "description": "For GEO detections, the latitude in degrees north.",
            "type": "number",
            "example": 1.1
          },
          "geolon": {
            "format": "double",
            "description": "For GEO detections, the longitude in degrees east.",
            "type": "number",
            "example": 1.1
          },
          "geoalt": {
            "format": "double",
            "description": "For GEO detections, the altitude in km.",
            "type": "number",
            "example": 1.1
          },
          "georange": {
            "format": "double",
            "description": "For GEO detections, the range in km.",
            "type": "number",
            "example": 1.1
          },
          "skyBkgrnd": {
            "format": "double",
            "description": "Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.",
            "type": "number",
            "example": 1.1
          },
          "primaryExtinction": {
            "format": "double",
            "description": "Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.",
            "type": "number",
            "example": 1.1
          },
          "primaryExtinctionUnc": {
            "format": "double",
            "description": "Primary Extinction Coefficient Uncertainty, in Magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "solarPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.",
            "type": "number",
            "example": 1.1
          },
          "solarEqPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing (i.e. before the opposition) and positive when opening (after the opposition).",
            "type": "number",
            "example": 1.1
          },
          "solarDecAngle": {
            "format": "double",
            "description": "Angle from the sun to the equatorial plane.",
            "type": "number",
            "example": 1.1
          },
          "shutterDelay": {
            "format": "double",
            "description": "Shutter delay in seconds.",
            "type": "number",
            "example": 1.1
          },
          "timingBias": {
            "format": "double",
            "description": "Sensor timing bias in seconds.",
            "type": "number",
            "example": 1.1
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URI"
          },
          "intensity": {
            "format": "double",
            "description": "Intensity of the target for IR observations, in kw/sr/um.",
            "type": "number",
            "example": 1.1
          },
          "bgIntensity": {
            "format": "double",
            "description": "Background intensity for IR observations, in kw/sr/um.",
            "type": "number",
            "example": 1.1
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "PROVIDED_DATA1"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "referenceFrame": {
            "description": "The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "GCRF",
              "ITRF",
              "TEME"
            ],
            "type": "string",
            "example": "J2000"
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "umbra": {
            "description": "Boolean indicating that the target object was in umbral eclipse at the time of this observation.",
            "type": "boolean",
            "example": false
          },
          "penumbra": {
            "description": "Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.",
            "type": "boolean",
            "example": false
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "type": {
            "description": "Read only field specifying the type of observation (e.g. OPTICAL, OPTICAL_IR, LASER_RANGING, etc).",
            "type": "string",
            "readOnly": true,
            "example": "OPTICAL"
          }
        }
      },
      "EOObservation_Full": {
        "description": "Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EOOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should contact the provider for details on their obTime specifications.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "corrQuality": {
            "format": "double",
            "description": "Object Correlation Quality score of the observation when compared to a known orbit state, (non-standardized). Users should consult data providers regarding the expected range of values.",
            "type": "number",
            "example": 1.1
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "idSkyImagery": {
            "description": "Unique identifier of the Sky Imagery.",
            "maxLength": 36,
            "type": "string",
            "example": "SKYIMAGERY-ID"
          },
          "collectMethod": {
            "description": "Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).",
            "maxLength": 24,
            "type": "string",
            "example": "AUTOTRACK"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 5
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "obPosition": {
            "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
            "maxLength": 8,
            "type": "string",
            "example": "FIRST"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": false
          },
          "azimuth": {
            "format": "double",
            "description": "Line of sight azimuth angle in degrees and topocentric frame.  Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight azimuth angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "azimuthBias": {
            "format": "double",
            "description": "Sensor line of sight azimuth angle bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the line of sight azimuth in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "elevation": {
            "format": "double",
            "description": "Line of sight elevation in degrees and topocentric frame. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight elevation angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "elevationBias": {
            "format": "double",
            "description": "Sensor line of sight elevation bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the line of sight elevation in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "range": {
            "format": "double",
            "description": "Line of sight range in km. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight range, in kilometers.",
            "type": "number",
            "example": 1.1
          },
          "rangeBias": {
            "format": "double",
            "description": "Sensor line of sight range bias in km.",
            "type": "number",
            "example": 1.1
          },
          "rangeRate": {
            "format": "double",
            "description": "Range rate in km/s. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight range rate, in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "ra": {
            "format": "double",
            "description": "Line of sight right ascension, in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "raMeasured": {
            "description": "Optional flag indicating whether the ra value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "raRate": {
            "format": "double",
            "description": "Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "raUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight right ascension angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "raBias": {
            "format": "double",
            "description": "Sensor line of sight right ascension bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "declination": {
            "format": "double",
            "description": "Line of sight declination, in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "declinationMeasured": {
            "description": "Optional flag indicating whether the declination value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "declinationRate": {
            "format": "double",
            "description": "Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "declinationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight declination angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "declinationBias": {
            "format": "double",
            "description": "Sensor line of sight declination angle bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "losx": {
            "format": "double",
            "description": "Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losy": {
            "format": "double",
            "description": "Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losz": {
            "format": "double",
            "description": "Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight pointing in micro-radians.",
            "type": "number",
            "example": 1.1
          },
          "losxvel": {
            "format": "double",
            "description": "Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losyvel": {
            "format": "double",
            "description": "Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "loszvel": {
            "format": "double",
            "description": "Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 179.1
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at obTime (if mobile/onorbit) in km.",
            "type": "number",
            "example": 1.1
          },
          "senx": {
            "format": "double",
            "description": "Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "seny": {
            "format": "double",
            "description": "Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senz": {
            "format": "double",
            "description": "Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelx": {
            "format": "double",
            "description": "Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvely": {
            "format": "double",
            "description": "Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelz": {
            "format": "double",
            "description": "Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senQuat": {
            "description": "The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.4492,
              0.02,
              0.8765,
              0.2213
            ]
          },
          "fovCount": {
            "format": "int32",
            "description": "The number of RSOs detected in the sensor field of view.",
            "type": "integer",
            "example": 1
          },
          "fovCountUCT": {
            "format": "int32",
            "description": "The number of uncorrelated tracks in the field of view.",
            "type": "integer",
            "example": 2
          },
          "expDuration": {
            "format": "double",
            "description": "Image exposure duration in seconds. For observations performed using frame stacking or synthetic tracking methods, the exposure duration should be the total integration time. This field is highly recommended / required if the observations are going to be used for photometric processing.",
            "type": "number",
            "example": 1.1
          },
          "zeroptd": {
            "format": "double",
            "description": "Formula: 2.5 * log_10 (zero_mag_counts / expDuration).",
            "type": "number",
            "example": 1.1
          },
          "netObjSig": {
            "format": "double",
            "description": "Net object signature = counts / expDuration.",
            "type": "number",
            "example": 1.1
          },
          "netObjSigUnc": {
            "format": "double",
            "description": "Net object signature uncertainty = counts uncertainty / expDuration.",
            "type": "number",
            "example": 1.1
          },
          "mag": {
            "format": "double",
            "description": "Measure of observed brightness calibrated against the Gaia G-band in units of magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "magUnc": {
            "format": "double",
            "description": "Uncertainty of the observed brightness in units of magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "magNormRange": {
            "format": "double",
            "description": "Formula: mag - 5.0 * log_10(geo_range / 1000000.0).",
            "type": "number",
            "example": 1.1
          },
          "geolat": {
            "format": "double",
            "description": "For GEO detections, the latitude in degrees north.",
            "type": "number",
            "example": 1.1
          },
          "geolon": {
            "format": "double",
            "description": "For GEO detections, the longitude in degrees east.",
            "type": "number",
            "example": 1.1
          },
          "geoalt": {
            "format": "double",
            "description": "For GEO detections, the altitude in km.",
            "type": "number",
            "example": 1.1
          },
          "georange": {
            "format": "double",
            "description": "For GEO detections, the range in km.",
            "type": "number",
            "example": 1.1
          },
          "skyBkgrnd": {
            "format": "double",
            "description": "Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.",
            "type": "number",
            "example": 1.1
          },
          "primaryExtinction": {
            "format": "double",
            "description": "Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.",
            "type": "number",
            "example": 1.1
          },
          "primaryExtinctionUnc": {
            "format": "double",
            "description": "Primary Extinction Coefficient Uncertainty, in Magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "solarPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.",
            "type": "number",
            "example": 1.1
          },
          "solarEqPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing (i.e. before the opposition) and positive when opening (after the opposition).",
            "type": "number",
            "example": 1.1
          },
          "solarDecAngle": {
            "format": "double",
            "description": "Angle from the sun to the equatorial plane.",
            "type": "number",
            "example": 1.1
          },
          "shutterDelay": {
            "format": "double",
            "description": "Shutter delay in seconds.",
            "type": "number",
            "example": 1.1
          },
          "timingBias": {
            "format": "double",
            "description": "Sensor timing bias in seconds.",
            "type": "number",
            "example": 1.1
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URI"
          },
          "intensity": {
            "format": "double",
            "description": "Intensity of the target for IR observations, in kw/sr/um.",
            "type": "number",
            "example": 1.1
          },
          "bgIntensity": {
            "format": "double",
            "description": "Background intensity for IR observations, in kw/sr/um.",
            "type": "number",
            "example": 1.1
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "PROVIDED_DATA1"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "zeroPtdUnc": {
            "format": "double",
            "description": "This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.",
            "type": "number",
            "example": 1.1
          },
          "eoobservationDetails": {
            "$ref": "#/components/schemas/EOObservationDetails_Full"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "referenceFrame": {
            "description": "The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "GCRF",
              "ITRF",
              "TEME"
            ],
            "type": "string",
            "example": "J2000"
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "umbra": {
            "description": "Boolean indicating that the target object was in umbral eclipse at the time of this observation.",
            "type": "boolean",
            "example": false
          },
          "penumbra": {
            "description": "Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.",
            "type": "boolean",
            "example": false
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "type": {
            "description": "Read only field specifying the type of observation (e.g. OPTICAL, OPTICAL_IR, LASER_RANGING, etc).",
            "type": "string",
            "readOnly": true,
            "example": "OPTICAL"
          }
        }
      },
      "EOObservation_Ingest": {
        "description": "Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EOOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should contact the provider for details on their obTime specifications.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "corrQuality": {
            "format": "double",
            "description": "Object Correlation Quality score of the observation when compared to a known orbit state, (non-standardized). Users should consult data providers regarding the expected range of values.",
            "type": "number",
            "example": 1.1
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "idSkyImagery": {
            "description": "Unique identifier of the Sky Imagery.",
            "maxLength": 36,
            "type": "string",
            "example": "SKYIMAGERY-ID"
          },
          "collectMethod": {
            "description": "Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).",
            "maxLength": 24,
            "type": "string",
            "example": "AUTOTRACK"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 5
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "obPosition": {
            "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
            "maxLength": 8,
            "type": "string",
            "example": "FIRST"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": false
          },
          "azimuth": {
            "format": "double",
            "description": "Line of sight azimuth angle in degrees and topocentric frame.  Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight azimuth angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "azimuthBias": {
            "format": "double",
            "description": "Sensor line of sight azimuth angle bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the line of sight azimuth in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "elevation": {
            "format": "double",
            "description": "Line of sight elevation in degrees and topocentric frame. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight elevation angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "elevationBias": {
            "format": "double",
            "description": "Sensor line of sight elevation bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the line of sight elevation in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "range": {
            "format": "double",
            "description": "Line of sight range in km. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight range, in kilometers.",
            "type": "number",
            "example": 1.1
          },
          "rangeBias": {
            "format": "double",
            "description": "Sensor line of sight range bias in km.",
            "type": "number",
            "example": 1.1
          },
          "rangeRate": {
            "format": "double",
            "description": "Range rate in km/s. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight range rate, in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "ra": {
            "format": "double",
            "description": "Line of sight right ascension, in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "raMeasured": {
            "description": "Optional flag indicating whether the ra value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "raRate": {
            "format": "double",
            "description": "Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "raUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight right ascension angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "raBias": {
            "format": "double",
            "description": "Sensor line of sight right ascension bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "declination": {
            "format": "double",
            "description": "Line of sight declination, in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "declinationMeasured": {
            "description": "Optional flag indicating whether the declination value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "declinationRate": {
            "format": "double",
            "description": "Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "declinationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight declination angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "declinationBias": {
            "format": "double",
            "description": "Sensor line of sight declination angle bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "losx": {
            "format": "double",
            "description": "Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losy": {
            "format": "double",
            "description": "Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losz": {
            "format": "double",
            "description": "Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight pointing in micro-radians.",
            "type": "number",
            "example": 1.1
          },
          "losxvel": {
            "format": "double",
            "description": "Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losyvel": {
            "format": "double",
            "description": "Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "loszvel": {
            "format": "double",
            "description": "Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 179.1
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at obTime (if mobile/onorbit) in km.",
            "type": "number",
            "example": 1.1
          },
          "senx": {
            "format": "double",
            "description": "Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "seny": {
            "format": "double",
            "description": "Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senz": {
            "format": "double",
            "description": "Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelx": {
            "format": "double",
            "description": "Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvely": {
            "format": "double",
            "description": "Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelz": {
            "format": "double",
            "description": "Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senQuat": {
            "description": "The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.4492,
              0.02,
              0.8765,
              0.2213
            ]
          },
          "fovCount": {
            "format": "int32",
            "description": "The number of RSOs detected in the sensor field of view.",
            "type": "integer",
            "example": 1
          },
          "fovCountUCT": {
            "format": "int32",
            "description": "The number of uncorrelated tracks in the field of view.",
            "type": "integer",
            "example": 2
          },
          "expDuration": {
            "format": "double",
            "description": "Image exposure duration in seconds. For observations performed using frame stacking or synthetic tracking methods, the exposure duration should be the total integration time. This field is highly recommended / required if the observations are going to be used for photometric processing.",
            "type": "number",
            "example": 1.1
          },
          "zeroptd": {
            "format": "double",
            "description": "Formula: 2.5 * log_10 (zero_mag_counts / expDuration).",
            "type": "number",
            "example": 1.1
          },
          "netObjSig": {
            "format": "double",
            "description": "Net object signature = counts / expDuration.",
            "type": "number",
            "example": 1.1
          },
          "netObjSigUnc": {
            "format": "double",
            "description": "Net object signature uncertainty = counts uncertainty / expDuration.",
            "type": "number",
            "example": 1.1
          },
          "mag": {
            "format": "double",
            "description": "Measure of observed brightness calibrated against the Gaia G-band in units of magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "magUnc": {
            "format": "double",
            "description": "Uncertainty of the observed brightness in units of magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "magNormRange": {
            "format": "double",
            "description": "Formula: mag - 5.0 * log_10(geo_range / 1000000.0).",
            "type": "number",
            "example": 1.1
          },
          "geolat": {
            "format": "double",
            "description": "For GEO detections, the latitude in degrees north.",
            "type": "number",
            "example": 1.1
          },
          "geolon": {
            "format": "double",
            "description": "For GEO detections, the longitude in degrees east.",
            "type": "number",
            "example": 1.1
          },
          "geoalt": {
            "format": "double",
            "description": "For GEO detections, the altitude in km.",
            "type": "number",
            "example": 1.1
          },
          "georange": {
            "format": "double",
            "description": "For GEO detections, the range in km.",
            "type": "number",
            "example": 1.1
          },
          "skyBkgrnd": {
            "format": "double",
            "description": "Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.",
            "type": "number",
            "example": 1.1
          },
          "primaryExtinction": {
            "format": "double",
            "description": "Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.",
            "type": "number",
            "example": 1.1
          },
          "primaryExtinctionUnc": {
            "format": "double",
            "description": "Primary Extinction Coefficient Uncertainty, in Magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "solarPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.",
            "type": "number",
            "example": 1.1
          },
          "solarEqPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing (i.e. before the opposition) and positive when opening (after the opposition).",
            "type": "number",
            "example": 1.1
          },
          "solarDecAngle": {
            "format": "double",
            "description": "Angle from the sun to the equatorial plane.",
            "type": "number",
            "example": 1.1
          },
          "shutterDelay": {
            "format": "double",
            "description": "Shutter delay in seconds.",
            "type": "number",
            "example": 1.1
          },
          "timingBias": {
            "format": "double",
            "description": "Sensor timing bias in seconds.",
            "type": "number",
            "example": 1.1
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URI"
          },
          "intensity": {
            "format": "double",
            "description": "Intensity of the target for IR observations, in kw/sr/um.",
            "type": "number",
            "example": 1.1
          },
          "bgIntensity": {
            "format": "double",
            "description": "Background intensity for IR observations, in kw/sr/um.",
            "type": "number",
            "example": 1.1
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "PROVIDED_DATA1"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "zeroPtdUnc": {
            "format": "double",
            "description": "This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.",
            "type": "number",
            "example": 1.1
          },
          "eoobservationDetails": {
            "$ref": "#/components/schemas/EOObservationDetails_Ingest"
          },
          "referenceFrame": {
            "description": "The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "GCRF",
              "ITRF",
              "TEME"
            ],
            "type": "string",
            "example": "J2000"
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "umbra": {
            "description": "Boolean indicating that the target object was in umbral eclipse at the time of this observation.",
            "type": "boolean",
            "example": false
          },
          "penumbra": {
            "description": "Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.",
            "type": "boolean",
            "example": false
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "type": {
            "description": "Read only field specifying the type of observation (e.g. OPTICAL, OPTICAL_IR, LASER_RANGING, etc).",
            "type": "string",
            "readOnly": true,
            "example": "OPTICAL"
          }
        }
      },
      "EOObservationDetails_Full": {
        "description": "Model representation of additional detailed observation data for electro-optical based sensor phenomenologies.",
        "type": "object",
        "properties": {
          "idEOObservation": {
            "description": "Unique identifier of the parent EOObservation.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EOOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "predictedRa": {
            "format": "double",
            "description": "Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 10.1
          },
          "predictedDeclination": {
            "format": "double",
            "description": "Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 10.1
          },
          "predictedAzimuth": {
            "format": "double",
            "description": "Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.",
            "type": "number",
            "example": 10.1
          },
          "predictedElevation": {
            "format": "double",
            "description": "Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.",
            "type": "number",
            "example": 10.1
          },
          "sunAzimuth": {
            "format": "double",
            "description": "Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied.",
            "type": "number",
            "example": 10.1
          },
          "sunElevation": {
            "format": "double",
            "description": "Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required).",
            "type": "number",
            "example": 10.1
          },
          "numSpectralFilters": {
            "format": "int16",
            "description": "The value is the number of spectral filters used.",
            "type": "integer",
            "example": 10
          },
          "spectralFilters": {
            "description": "Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Keyword1",
              "Keyword2"
            ]
          },
          "spectralZMFL": {
            "description": "This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "spectralFilterSolarMag": {
            "description": "This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "zeroPoints": {
            "description": "This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "zeroPointsUnc": {
            "description": "This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "extinctionCoeffs": {
            "description": "The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "extinctionCoeffsUnc": {
            "description": "This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "colorCoeffs": {
            "description": "Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "numNeutralDensityFilters": {
            "format": "int16",
            "description": "The value is the number of neutral density filters used.",
            "type": "integer",
            "example": 12
          },
          "neutralDensityFilterNames": {
            "description": "Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "numNeutralDensityFilters1",
              "numNeutralDensityFilters2"
            ]
          },
          "neutralDensityFilterTransmissions": {
            "description": "The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "neutralDensityFilterTransmissionsUnc": {
            "description": "This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "gain": {
            "format": "double",
            "description": "Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.",
            "type": "number",
            "example": 234.2
          },
          "ifov": {
            "format": "double",
            "description": "Sensor instantaneous field of view (ratio of pixel pitch to focal length).",
            "type": "number",
            "example": 0.2
          },
          "pixelArrayWidth": {
            "format": "int16",
            "description": "Pixel array size (width) in pixels.",
            "type": "integer",
            "example": 12
          },
          "pixelArrayHeight": {
            "format": "int16",
            "description": "Pixel array size (height) in pixels.",
            "type": "integer",
            "example": 23
          },
          "pixelMin": {
            "format": "int16",
            "description": "Minimum valid pixel value, this is typically 0.",
            "type": "integer",
            "example": 12
          },
          "pixelMax": {
            "format": "int32",
            "description": "Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.",
            "type": "integer",
            "example": 256
          },
          "centroidRow": {
            "format": "double",
            "description": "Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).",
            "type": "number",
            "example": 0.1
          },
          "centroidColumn": {
            "format": "double",
            "description": "Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).",
            "type": "number",
            "example": 0.5
          },
          "rowVariance": {
            "format": "double",
            "description": "Spatial variance of image distribution in vertical direction measured in pixels squared.",
            "type": "number",
            "example": 0.1
          },
          "columnVariance": {
            "format": "double",
            "description": "Spatial variance of image distribution in horizontal direction measured in pixels squared.",
            "type": "number",
            "example": 0.1
          },
          "rowColCov": {
            "format": "double",
            "description": "Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.",
            "type": "number",
            "example": 0.01
          },
          "distFromStreakCenter": {
            "description": "An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -127.153,
              -126.153,
              -125.153
            ]
          },
          "surfBrightness": {
            "description": "An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              21.01,
              21.382,
              21.725
            ]
          },
          "surfBrightnessUnc": {
            "description": "An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.165,
              0.165,
              0.165
            ]
          },
          "timesUnc": {
            "format": "double",
            "description": "Uncertainty in the times reported in UTC in seconds.",
            "type": "number",
            "example": 13.1
          },
          "ccdTemp": {
            "format": "double",
            "description": "Operating temperature of CCD recorded during exposure or measured during calibrations in K.",
            "type": "number",
            "example": 123.4
          },
          "currentSpectralFilterNum": {
            "format": "int16",
            "description": "The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.",
            "type": "integer",
            "example": 23
          },
          "currentNeutralDensityFilterNum": {
            "format": "int16",
            "description": "The reference number n, in neutralDensityFilters for the currently used neutral density filter.",
            "type": "integer",
            "example": 3
          },
          "binningHoriz": {
            "format": "int16",
            "description": "The number of pixels binned horizontally.",
            "type": "integer",
            "example": 12
          },
          "binningVert": {
            "format": "int16",
            "description": "The number of pixels binned vertically.",
            "type": "integer",
            "example": 14
          },
          "pcalNumStars": {
            "format": "int32",
            "description": "Number of stars used in photometric fit count.",
            "type": "integer",
            "example": 23
          },
          "ccdObjPosX": {
            "format": "double",
            "description": "The x centroid position on the CCD of the target object in pixels.",
            "type": "number",
            "example": 123.3
          },
          "ccdObjPosY": {
            "format": "double",
            "description": "The y centroid position on the CCD of the target object in pixels.",
            "type": "number",
            "example": 321.4
          },
          "ccdObjWidth": {
            "format": "double",
            "description": "This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.",
            "type": "number",
            "example": 133.2
          },
          "backgroundSignal": {
            "format": "double",
            "description": "This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.",
            "type": "number",
            "example": 4134.1
          },
          "backgroundSignalUnc": {
            "format": "double",
            "description": "Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.",
            "type": "number",
            "example": 123.2
          },
          "peakApertureCount": {
            "format": "double",
            "description": "Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.",
            "type": "number",
            "example": 123.2
          },
          "peakBackgroundCount": {
            "format": "int32",
            "description": "Peak Background Raw Counts is the largest pixel value used in background signal.",
            "type": "integer",
            "example": 321
          },
          "snrEst": {
            "format": "double",
            "description": "Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).",
            "type": "number",
            "example": 13.4
          },
          "magInstrumental": {
            "format": "double",
            "description": "Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.",
            "type": "number",
            "example": 123.3
          },
          "magInstrumentalUnc": {
            "format": "double",
            "description": "Uncertainty in the instrumental magnitude.",
            "type": "number",
            "example": 123.3
          },
          "opticalCrossSection": {
            "format": "double",
            "description": "Optical Cross Section computed in units m(2)/ster.",
            "type": "number",
            "example": 123.3
          },
          "opticalCrossSectionUnc": {
            "format": "double",
            "description": "Uncertainty in Optical Cross Section computed in units m(2)/ster.",
            "type": "number",
            "example": 123.3
          },
          "sunStatePosX": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km.",
            "type": "number",
            "example": 123.3
          },
          "sunStatePosY": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km.",
            "type": "number",
            "example": 123.3
          },
          "sunStatePosZ": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km.",
            "type": "number",
            "example": 123.3
          },
          "sunStateVelX": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
            "type": "number",
            "example": 123.3
          },
          "sunStateVelY": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
            "type": "number",
            "example": 123.3
          },
          "sunStateVelZ": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
            "type": "number",
            "example": 123.3
          },
          "numCatalogStars": {
            "format": "int16",
            "description": "Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.",
            "type": "integer",
            "example": 123
          },
          "numDetectedStars": {
            "format": "int16",
            "description": "Number of detected stars in the FOV with the target object. Helps identify frames with clouds.",
            "type": "integer",
            "example": 123
          },
          "numCorrelatedStars": {
            "format": "int16",
            "description": "Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.",
            "type": "integer",
            "example": 123
          },
          "predictedRaUnc": {
            "format": "double",
            "description": "Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 123.2
          },
          "predictedDeclinationUnc": {
            "format": "double",
            "description": "Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 123.2
          },
          "raCov": {
            "format": "double",
            "description": "Covariance (x^2) in measured Right Ascension (X) in deg^2.",
            "type": "number",
            "example": 123.2
          },
          "declinationCov": {
            "format": "double",
            "description": "Covariance (Y^2) in measured declination (Y) in deg^2.",
            "type": "number",
            "example": 123.2
          },
          "raDeclinationCov": {
            "format": "double",
            "description": "Covariance (XY) in measured ra/declination (XY) in deg^2.",
            "type": "number",
            "example": 123.2
          },
          "acalCrPixX": {
            "format": "double",
            "description": "World Coordinate System (WCS) X pixel origin in astrometric fit.",
            "type": "number",
            "example": 123.2
          },
          "acalCrPixY": {
            "format": "double",
            "description": "World Coordinate System (WCS) Y pixel origin in astrometric fit.",
            "type": "number",
            "example": 123.2
          },
          "acalCrValX": {
            "format": "double",
            "description": "World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.",
            "type": "number",
            "example": 123.2
          },
          "acalCrValY": {
            "format": "double",
            "description": "World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.",
            "type": "number",
            "example": 123.2
          },
          "acalNumStars": {
            "format": "int16",
            "description": "Number of stars used in astrometric fit.",
            "type": "integer",
            "example": 123
          },
          "objSunRange": {
            "format": "double",
            "description": "Distance from the target object to the sun during the observation in meters.",
            "type": "number",
            "example": 123.2
          },
          "phaseAngBisect": {
            "format": "double",
            "description": "Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.",
            "type": "number",
            "example": 123.2
          },
          "solarDiskFrac": {
            "format": "double",
            "description": "Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).",
            "type": "number",
            "example": 123.2
          },
          "toes": {
            "format": "double",
            "description": "Time off element set reported in seconds.",
            "type": "number",
            "example": 123.2
          },
          "does": {
            "format": "double",
            "description": "Angle off element set reported in degrees.",
            "type": "number",
            "example": 123.2
          },
          "source": {
            "description": "Source of the data, will be set to EOObservation source if blank.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n, will be set to EOObservation dataMode if blank.",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "EOObservationDetails_Ingest": {
        "description": "Model representation of additional detailed observation data for electro-optical based sensor phenomenologies.",
        "type": "object",
        "properties": {
          "idEOObservation": {
            "description": "Unique identifier of the parent EOObservation.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EOOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "predictedRa": {
            "format": "double",
            "description": "Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 10.1
          },
          "predictedDeclination": {
            "format": "double",
            "description": "Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 10.1
          },
          "predictedAzimuth": {
            "format": "double",
            "description": "Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.",
            "type": "number",
            "example": 10.1
          },
          "predictedElevation": {
            "format": "double",
            "description": "Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.",
            "type": "number",
            "example": 10.1
          },
          "sunAzimuth": {
            "format": "double",
            "description": "Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied.",
            "type": "number",
            "example": 10.1
          },
          "sunElevation": {
            "format": "double",
            "description": "Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required).",
            "type": "number",
            "example": 10.1
          },
          "numSpectralFilters": {
            "format": "int16",
            "description": "The value is the number of spectral filters used.",
            "type": "integer",
            "example": 10
          },
          "spectralFilters": {
            "description": "Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Keyword1",
              "Keyword2"
            ]
          },
          "spectralZMFL": {
            "description": "This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "spectralFilterSolarMag": {
            "description": "This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "zeroPoints": {
            "description": "This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "zeroPointsUnc": {
            "description": "This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "extinctionCoeffs": {
            "description": "The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "extinctionCoeffsUnc": {
            "description": "This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "colorCoeffs": {
            "description": "Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "numNeutralDensityFilters": {
            "format": "int16",
            "description": "The value is the number of neutral density filters used.",
            "type": "integer",
            "example": 12
          },
          "neutralDensityFilterNames": {
            "description": "Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "numNeutralDensityFilters1",
              "numNeutralDensityFilters2"
            ]
          },
          "neutralDensityFilterTransmissions": {
            "description": "The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "neutralDensityFilterTransmissionsUnc": {
            "description": "This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "gain": {
            "format": "double",
            "description": "Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.",
            "type": "number",
            "example": 234.2
          },
          "ifov": {
            "format": "double",
            "description": "Sensor instantaneous field of view (ratio of pixel pitch to focal length).",
            "type": "number",
            "example": 0.2
          },
          "pixelArrayWidth": {
            "format": "int16",
            "description": "Pixel array size (width) in pixels.",
            "type": "integer",
            "example": 12
          },
          "pixelArrayHeight": {
            "format": "int16",
            "description": "Pixel array size (height) in pixels.",
            "type": "integer",
            "example": 23
          },
          "pixelMin": {
            "format": "int16",
            "description": "Minimum valid pixel value, this is typically 0.",
            "type": "integer",
            "example": 12
          },
          "pixelMax": {
            "format": "int32",
            "description": "Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.",
            "type": "integer",
            "example": 256
          },
          "centroidRow": {
            "format": "double",
            "description": "Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).",
            "type": "number",
            "example": 0.1
          },
          "centroidColumn": {
            "format": "double",
            "description": "Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).",
            "type": "number",
            "example": 0.5
          },
          "rowVariance": {
            "format": "double",
            "description": "Spatial variance of image distribution in vertical direction measured in pixels squared.",
            "type": "number",
            "example": 0.1
          },
          "columnVariance": {
            "format": "double",
            "description": "Spatial variance of image distribution in horizontal direction measured in pixels squared.",
            "type": "number",
            "example": 0.1
          },
          "rowColCov": {
            "format": "double",
            "description": "Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.",
            "type": "number",
            "example": 0.01
          },
          "distFromStreakCenter": {
            "description": "An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -127.153,
              -126.153,
              -125.153
            ]
          },
          "surfBrightness": {
            "description": "An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              21.01,
              21.382,
              21.725
            ]
          },
          "surfBrightnessUnc": {
            "description": "An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.165,
              0.165,
              0.165
            ]
          },
          "timesUnc": {
            "format": "double",
            "description": "Uncertainty in the times reported in UTC in seconds.",
            "type": "number",
            "example": 13.1
          },
          "ccdTemp": {
            "format": "double",
            "description": "Operating temperature of CCD recorded during exposure or measured during calibrations in K.",
            "type": "number",
            "example": 123.4
          },
          "currentSpectralFilterNum": {
            "format": "int16",
            "description": "The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.",
            "type": "integer",
            "example": 23
          },
          "currentNeutralDensityFilterNum": {
            "format": "int16",
            "description": "The reference number n, in neutralDensityFilters for the currently used neutral density filter.",
            "type": "integer",
            "example": 3
          },
          "binningHoriz": {
            "format": "int16",
            "description": "The number of pixels binned horizontally.",
            "type": "integer",
            "example": 12
          },
          "binningVert": {
            "format": "int16",
            "description": "The number of pixels binned vertically.",
            "type": "integer",
            "example": 14
          },
          "pcalNumStars": {
            "format": "int32",
            "description": "Number of stars used in photometric fit count.",
            "type": "integer",
            "example": 23
          },
          "ccdObjPosX": {
            "format": "double",
            "description": "The x centroid position on the CCD of the target object in pixels.",
            "type": "number",
            "example": 123.3
          },
          "ccdObjPosY": {
            "format": "double",
            "description": "The y centroid position on the CCD of the target object in pixels.",
            "type": "number",
            "example": 321.4
          },
          "ccdObjWidth": {
            "format": "double",
            "description": "This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.",
            "type": "number",
            "example": 133.2
          },
          "backgroundSignal": {
            "format": "double",
            "description": "This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.",
            "type": "number",
            "example": 4134.1
          },
          "backgroundSignalUnc": {
            "format": "double",
            "description": "Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.",
            "type": "number",
            "example": 123.2
          },
          "peakApertureCount": {
            "format": "double",
            "description": "Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.",
            "type": "number",
            "example": 123.2
          },
          "peakBackgroundCount": {
            "format": "int32",
            "description": "Peak Background Raw Counts is the largest pixel value used in background signal.",
            "type": "integer",
            "example": 321
          },
          "snrEst": {
            "format": "double",
            "description": "Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).",
            "type": "number",
            "example": 13.4
          },
          "magInstrumental": {
            "format": "double",
            "description": "Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.",
            "type": "number",
            "example": 123.3
          },
          "magInstrumentalUnc": {
            "format": "double",
            "description": "Uncertainty in the instrumental magnitude.",
            "type": "number",
            "example": 123.3
          },
          "opticalCrossSection": {
            "format": "double",
            "description": "Optical Cross Section computed in units m(2)/ster.",
            "type": "number",
            "example": 123.3
          },
          "opticalCrossSectionUnc": {
            "format": "double",
            "description": "Uncertainty in Optical Cross Section computed in units m(2)/ster.",
            "type": "number",
            "example": 123.3
          },
          "sunStatePosX": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km.",
            "type": "number",
            "example": 123.3
          },
          "sunStatePosY": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km.",
            "type": "number",
            "example": 123.3
          },
          "sunStatePosZ": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km.",
            "type": "number",
            "example": 123.3
          },
          "sunStateVelX": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
            "type": "number",
            "example": 123.3
          },
          "sunStateVelY": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
            "type": "number",
            "example": 123.3
          },
          "sunStateVelZ": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
            "type": "number",
            "example": 123.3
          },
          "numCatalogStars": {
            "format": "int16",
            "description": "Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.",
            "type": "integer",
            "example": 123
          },
          "numDetectedStars": {
            "format": "int16",
            "description": "Number of detected stars in the FOV with the target object. Helps identify frames with clouds.",
            "type": "integer",
            "example": 123
          },
          "numCorrelatedStars": {
            "format": "int16",
            "description": "Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.",
            "type": "integer",
            "example": 123
          },
          "predictedRaUnc": {
            "format": "double",
            "description": "Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 123.2
          },
          "predictedDeclinationUnc": {
            "format": "double",
            "description": "Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 123.2
          },
          "raCov": {
            "format": "double",
            "description": "Covariance (x^2) in measured Right Ascension (X) in deg^2.",
            "type": "number",
            "example": 123.2
          },
          "declinationCov": {
            "format": "double",
            "description": "Covariance (Y^2) in measured declination (Y) in deg^2.",
            "type": "number",
            "example": 123.2
          },
          "raDeclinationCov": {
            "format": "double",
            "description": "Covariance (XY) in measured ra/declination (XY) in deg^2.",
            "type": "number",
            "example": 123.2
          },
          "acalCrPixX": {
            "format": "double",
            "description": "World Coordinate System (WCS) X pixel origin in astrometric fit.",
            "type": "number",
            "example": 123.2
          },
          "acalCrPixY": {
            "format": "double",
            "description": "World Coordinate System (WCS) Y pixel origin in astrometric fit.",
            "type": "number",
            "example": 123.2
          },
          "acalCrValX": {
            "format": "double",
            "description": "World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.",
            "type": "number",
            "example": 123.2
          },
          "acalCrValY": {
            "format": "double",
            "description": "World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.",
            "type": "number",
            "example": 123.2
          },
          "acalNumStars": {
            "format": "int16",
            "description": "Number of stars used in astrometric fit.",
            "type": "integer",
            "example": 123
          },
          "objSunRange": {
            "format": "double",
            "description": "Distance from the target object to the sun during the observation in meters.",
            "type": "number",
            "example": 123.2
          },
          "phaseAngBisect": {
            "format": "double",
            "description": "Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.",
            "type": "number",
            "example": 123.2
          },
          "solarDiskFrac": {
            "format": "double",
            "description": "Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).",
            "type": "number",
            "example": 123.2
          },
          "toes": {
            "format": "double",
            "description": "Time off element set reported in seconds.",
            "type": "number",
            "example": 123.2
          },
          "does": {
            "format": "double",
            "description": "Angle off element set reported in degrees.",
            "type": "number",
            "example": 123.2
          },
          "source": {
            "description": "Source of the data, will be set to EOObservation source if blank.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n, will be set to EOObservation dataMode if blank.",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "GNSSObservation_Abridged": {
        "description": "Information for Global Navigation Satellite Systems (GNSS) Observations collected from GNSS receivers, including the specific GNSS sat from which each signal was received, and the observation codes of each observation in the record. Each GNSS Observation is associated with a GNSS Observation Set record containing data which applies to all observations in the set, including observation time, receiver location, and Dilution of Precision (DOP) values. Users can Reference RINEX 3+ documentation for further information concerning many of the standards and conventions for GNSS observations.",
        "type": "object",
        "properties": {
          "gnssSatId": {
            "description": "RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:\n\nG - GPS (NN = PRN)\n\nR - GLONASS (NN = Slot Number)\n\nS - SBAS Payload (NN = PRN-100)\n\nE - Galileo (NN = PRN)\n\nC - BeiDou (NN = PRN)\n\nJ - QZSS (NN = PRN - 1923)\n\nI - IRNSS (NN = PRN)",
            "maxLength": 6,
            "type": "string",
            "example": "GEJ"
          },
          "trackingStatus": {
            "format": "int32",
            "description": "Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).",
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "agcState": {
            "format": "int32",
            "description": "GNSS Automatic Gain Control State.",
            "minimum": 0,
            "type": "integer",
            "example": 20
          },
          "obsCodeSet": {
            "description": "The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "S1C",
              "C1C",
              "C1D"
            ]
          },
          "ob": {
            "description": "Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              42.1,
              1000,
              0.9
            ]
          }
        }
      },
      "GNSSObservation_Full": {
        "description": "Information for Global Navigation Satellite Systems (GNSS) Observations collected from GNSS receivers, including the specific GNSS sat from which each signal was received, and the observation codes of each observation in the record. Each GNSS Observation is associated with a GNSS Observation Set record containing data which applies to all observations in the set, including observation time, receiver location, and Dilution of Precision (DOP) values. Users can Reference RINEX 3+ documentation for further information concerning many of the standards and conventions for GNSS observations.",
        "type": "object",
        "properties": {
          "gnssSatId": {
            "description": "RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:\n\nG - GPS (NN = PRN)\n\nR - GLONASS (NN = Slot Number)\n\nS - SBAS Payload (NN = PRN-100)\n\nE - Galileo (NN = PRN)\n\nC - BeiDou (NN = PRN)\n\nJ - QZSS (NN = PRN - 1923)\n\nI - IRNSS (NN = PRN)",
            "maxLength": 6,
            "type": "string",
            "example": "GEJ"
          },
          "trackingStatus": {
            "format": "int32",
            "description": "Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).",
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "agcState": {
            "format": "int32",
            "description": "GNSS Automatic Gain Control State.",
            "minimum": 0,
            "type": "integer",
            "example": 20
          },
          "obsCodeSet": {
            "description": "The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "S1C",
              "C1C",
              "C1D"
            ]
          },
          "ob": {
            "description": "Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              42.1,
              1000,
              0.9
            ]
          }
        }
      },
      "GNSSObservation_Ingest": {
        "description": "Information for Global Navigation Satellite Systems (GNSS) Observations collected from GNSS receivers, including the specific GNSS sat from which each signal was received, and the observation codes of each observation in the record. Each GNSS Observation is associated with a GNSS Observation Set record containing data which applies to all observations in the set, including observation time, receiver location, and Dilution of Precision (DOP) values. Users can Reference RINEX 3+ documentation for further information concerning many of the standards and conventions for GNSS observations.",
        "type": "object",
        "properties": {
          "gnssSatId": {
            "description": "RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:\n\nG - GPS (NN = PRN)\n\nR - GLONASS (NN = Slot Number)\n\nS - SBAS Payload (NN = PRN-100)\n\nE - Galileo (NN = PRN)\n\nC - BeiDou (NN = PRN)\n\nJ - QZSS (NN = PRN - 1923)\n\nI - IRNSS (NN = PRN)",
            "maxLength": 6,
            "type": "string",
            "example": "GEJ"
          },
          "trackingStatus": {
            "format": "int32",
            "description": "Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).",
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "agcState": {
            "format": "int32",
            "description": "GNSS Automatic Gain Control State.",
            "minimum": 0,
            "type": "integer",
            "example": 20
          },
          "obsCodeSet": {
            "description": "The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "S1C",
              "C1C",
              "C1D"
            ]
          },
          "ob": {
            "description": "Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              42.1,
              1000,
              0.9
            ]
          }
        }
      },
      "GNSSObservationSet_Abridged": {
        "description": "Set of GNSSObservation data.",
        "required": [
          "classificationMarking",
          "ts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "GNSSObSet-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "markerType": {
            "description": "The marker type of the observing receiver (AIRBORNE, ANIMAL, BALLISTIC, FIXED BUOY, FLOATING BUOY, FLOATING ICE, GEODETIC, GLACIER, GROUNDCRAFT, HUMAN, NON GEODETIC, NON PHYSICAL, SPACEBORNE, WATERCRAFT).  Reference RINEX 3+ for further information concerning marker types.",
            "maxLength": 24,
            "type": "string",
            "example": "SPACEBORNE"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the primary satellite on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 2
          },
          "origObjectId": {
            "description": "Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "ts": {
            "format": "date-time",
            "description": "Observation Time, in ISO8601 UTC format with microsecond precision.  This timestamp applies to all observations within the set.",
            "type": "string",
            "example": "2022-01-01T00:00:00.123456Z"
          },
          "outage": {
            "format": "int32",
            "description": "Time, in seconds, that the receiver has been unable to compute a GNSS fix.",
            "type": "integer",
            "example": 200
          },
          "gDop": {
            "format": "double",
            "description": "Geometric Dilution of Precision.",
            "type": "number",
            "example": 0.33
          },
          "hDop": {
            "format": "double",
            "description": "Horizontal Dilution of Precision.",
            "type": "number",
            "example": 0.03
          },
          "pDop": {
            "format": "double",
            "description": "Position Dilution of Precision.",
            "type": "number",
            "example": 0.002
          },
          "tDop": {
            "format": "double",
            "description": "Time Dilution of Precision.",
            "type": "number",
            "example": 0.05
          },
          "vDop": {
            "format": "double",
            "description": "Vertical Dilution of Precision.",
            "type": "number",
            "example": 0.03
          },
          "eventId": {
            "description": "Optional source-provided identifier for this collection event. This field can be used to associate records related to the same event.",
            "maxLength": 64,
            "type": "string",
            "example": "2f2205c9-7bc2-4e1a-8416-2f80cc71f64b"
          },
          "esId": {
            "description": "Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris.  If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Observation records if each receiver is synced to the ephemeris points.",
            "maxLength": 36,
            "type": "string",
            "example": "ES-ID"
          },
          "receiver": {
            "description": "The number or ID of the GNSS receiver associated with this data.  Each GNSS Observation Set is associated with only one receiver.  If reporting for multiple receivers a separate set should be generated for each.  A null value is assumed to indicate that only one receiver is present, or reported.",
            "maxLength": 36,
            "type": "string",
            "example": "RECEIVER-ID"
          },
          "boresight": {
            "description": "unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.",
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              3.23
            ]
          },
          "quat": {
            "description": "The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at observation time (ts). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.",
            "maxItems": 4,
            "minItems": 4,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.02,
              0.01,
              0.012
            ]
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 spacecraft latitude sub-point at observation time (ts), represented as -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 32.021
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 spacecraft longitude sub-point at observation time (ts), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 125.123
          },
          "alt": {
            "format": "double",
            "description": "Spacecraft altitude at observation time (ts), expressed in kilometers above WGS-84 ellipsoid.",
            "type": "number",
            "example": 200
          },
          "satPosition": {
            "description": "Three element array, expressing the ECI J2K spacecraft position components, in kilometers, at observation time (ts). The array element order is [x, y, z].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1625.71954,
              6782.15396,
              -1721.34267
            ]
          },
          "satVelocity": {
            "description": "Three element array, expressing the ECI J2K spacecraft velocity components, in km/second, at observation time (ts).  The array element order is [xvel, yvel, zvel].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              2.03,
              0.003,
              0.12
            ]
          },
          "obsCodes": {
            "description": "Array of the strings containing the individual observation code sets that are contained within this GNSS Observation set.  Each string is a three-character representation of the measurement type, the channel, and the coding, in compliance with the RINEX 3+ standard (Pseudorange (C), Carrier Phase (L), Doppler (D), Signal Strength C/No (S), or Channel Number (X)).  See the GNSS Observation ob field for the units of measure associated with each observation type.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ACL"
            ]
          },
          "trackingStatus": {
            "format": "int32",
            "description": "Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).",
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "navigationStatus": {
            "description": "The current navigation status as defined by the data source. In general the navigation status specifies whether the signal is normal, degraded, or unavailable. For status value definitions please reach out to data source provider.",
            "type": "string",
            "example": "degraded"
          },
          "agcState": {
            "format": "int32",
            "description": "GNSS Automatic Gain Control State.",
            "minimum": 0,
            "type": "integer",
            "example": 20
          },
          "srcTyps": {
            "description": "Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this GNSS Observation Set. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SV",
              "SV"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to this GNSS Observation Set. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/statevector/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SV_ID",
              "SV_ID"
            ]
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "gnssObservationList": {
            "description": "GNSSObservations associated with this GNSSObservationSet.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GNSSObservation_Abridged"
            }
          }
        }
      },
      "GNSSObservationSet_Full": {
        "description": "Set of GNSSObservation data.",
        "required": [
          "classificationMarking",
          "ts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "GNSSObSet-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "markerType": {
            "description": "The marker type of the observing receiver (AIRBORNE, ANIMAL, BALLISTIC, FIXED BUOY, FLOATING BUOY, FLOATING ICE, GEODETIC, GLACIER, GROUNDCRAFT, HUMAN, NON GEODETIC, NON PHYSICAL, SPACEBORNE, WATERCRAFT).  Reference RINEX 3+ for further information concerning marker types.",
            "maxLength": 24,
            "type": "string",
            "example": "SPACEBORNE"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the primary satellite on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 2
          },
          "origObjectId": {
            "description": "Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "ts": {
            "format": "date-time",
            "description": "Observation Time, in ISO8601 UTC format with microsecond precision.  This timestamp applies to all observations within the set.",
            "type": "string",
            "example": "2022-01-01T00:00:00.123456Z"
          },
          "outage": {
            "format": "int32",
            "description": "Time, in seconds, that the receiver has been unable to compute a GNSS fix.",
            "type": "integer",
            "example": 200
          },
          "gDop": {
            "format": "double",
            "description": "Geometric Dilution of Precision.",
            "type": "number",
            "example": 0.33
          },
          "hDop": {
            "format": "double",
            "description": "Horizontal Dilution of Precision.",
            "type": "number",
            "example": 0.03
          },
          "pDop": {
            "format": "double",
            "description": "Position Dilution of Precision.",
            "type": "number",
            "example": 0.002
          },
          "tDop": {
            "format": "double",
            "description": "Time Dilution of Precision.",
            "type": "number",
            "example": 0.05
          },
          "vDop": {
            "format": "double",
            "description": "Vertical Dilution of Precision.",
            "type": "number",
            "example": 0.03
          },
          "eventId": {
            "description": "Optional source-provided identifier for this collection event. This field can be used to associate records related to the same event.",
            "maxLength": 64,
            "type": "string",
            "example": "2f2205c9-7bc2-4e1a-8416-2f80cc71f64b"
          },
          "esId": {
            "description": "Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris.  If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Observation records if each receiver is synced to the ephemeris points.",
            "maxLength": 36,
            "type": "string",
            "example": "ES-ID"
          },
          "receiver": {
            "description": "The number or ID of the GNSS receiver associated with this data.  Each GNSS Observation Set is associated with only one receiver.  If reporting for multiple receivers a separate set should be generated for each.  A null value is assumed to indicate that only one receiver is present, or reported.",
            "maxLength": 36,
            "type": "string",
            "example": "RECEIVER-ID"
          },
          "boresight": {
            "description": "unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.",
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              3.23
            ]
          },
          "quat": {
            "description": "The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at observation time (ts). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.",
            "maxItems": 4,
            "minItems": 4,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.02,
              0.01,
              0.012
            ]
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 spacecraft latitude sub-point at observation time (ts), represented as -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 32.021
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 spacecraft longitude sub-point at observation time (ts), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 125.123
          },
          "alt": {
            "format": "double",
            "description": "Spacecraft altitude at observation time (ts), expressed in kilometers above WGS-84 ellipsoid.",
            "type": "number",
            "example": 200
          },
          "satPosition": {
            "description": "Three element array, expressing the ECI J2K spacecraft position components, in kilometers, at observation time (ts). The array element order is [x, y, z].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1625.71954,
              6782.15396,
              -1721.34267
            ]
          },
          "satVelocity": {
            "description": "Three element array, expressing the ECI J2K spacecraft velocity components, in km/second, at observation time (ts).  The array element order is [xvel, yvel, zvel].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              2.03,
              0.003,
              0.12
            ]
          },
          "obsCodes": {
            "description": "Array of the strings containing the individual observation code sets that are contained within this GNSS Observation set.  Each string is a three-character representation of the measurement type, the channel, and the coding, in compliance with the RINEX 3+ standard (Pseudorange (C), Carrier Phase (L), Doppler (D), Signal Strength C/No (S), or Channel Number (X)).  See the GNSS Observation ob field for the units of measure associated with each observation type.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ACL"
            ]
          },
          "trackingStatus": {
            "format": "int32",
            "description": "Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).",
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "navigationStatus": {
            "description": "The current navigation status as defined by the data source. In general the navigation status specifies whether the signal is normal, degraded, or unavailable. For status value definitions please reach out to data source provider.",
            "type": "string",
            "example": "degraded"
          },
          "agcState": {
            "format": "int32",
            "description": "GNSS Automatic Gain Control State.",
            "minimum": 0,
            "type": "integer",
            "example": 20
          },
          "srcTyps": {
            "description": "Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this GNSS Observation Set. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SV",
              "SV"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to this GNSS Observation Set. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/statevector/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SV_ID",
              "SV_ID"
            ]
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "gnssObservationList": {
            "description": "GNSSObservations associated with this GNSSObservationSet.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GNSSObservation_Full"
            }
          }
        }
      },
      "GNSSObservationSet_Ingest": {
        "description": "Set of GNSSObservation data.",
        "required": [
          "classificationMarking",
          "ts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "GNSSObSet-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "markerType": {
            "description": "The marker type of the observing receiver (AIRBORNE, ANIMAL, BALLISTIC, FIXED BUOY, FLOATING BUOY, FLOATING ICE, GEODETIC, GLACIER, GROUNDCRAFT, HUMAN, NON GEODETIC, NON PHYSICAL, SPACEBORNE, WATERCRAFT).  Reference RINEX 3+ for further information concerning marker types.",
            "maxLength": 24,
            "type": "string",
            "example": "SPACEBORNE"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the primary satellite on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 2
          },
          "origObjectId": {
            "description": "Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "ts": {
            "format": "date-time",
            "description": "Observation Time, in ISO8601 UTC format with microsecond precision.  This timestamp applies to all observations within the set.",
            "type": "string",
            "example": "2022-01-01T00:00:00.123456Z"
          },
          "outage": {
            "format": "int32",
            "description": "Time, in seconds, that the receiver has been unable to compute a GNSS fix.",
            "type": "integer",
            "example": 200
          },
          "gDop": {
            "format": "double",
            "description": "Geometric Dilution of Precision.",
            "type": "number",
            "example": 0.33
          },
          "hDop": {
            "format": "double",
            "description": "Horizontal Dilution of Precision.",
            "type": "number",
            "example": 0.03
          },
          "pDop": {
            "format": "double",
            "description": "Position Dilution of Precision.",
            "type": "number",
            "example": 0.002
          },
          "tDop": {
            "format": "double",
            "description": "Time Dilution of Precision.",
            "type": "number",
            "example": 0.05
          },
          "vDop": {
            "format": "double",
            "description": "Vertical Dilution of Precision.",
            "type": "number",
            "example": 0.03
          },
          "eventId": {
            "description": "Optional source-provided identifier for this collection event. This field can be used to associate records related to the same event.",
            "maxLength": 64,
            "type": "string",
            "example": "2f2205c9-7bc2-4e1a-8416-2f80cc71f64b"
          },
          "esId": {
            "description": "Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris.  If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Observation records if each receiver is synced to the ephemeris points.",
            "maxLength": 36,
            "type": "string",
            "example": "ES-ID"
          },
          "receiver": {
            "description": "The number or ID of the GNSS receiver associated with this data.  Each GNSS Observation Set is associated with only one receiver.  If reporting for multiple receivers a separate set should be generated for each.  A null value is assumed to indicate that only one receiver is present, or reported.",
            "maxLength": 36,
            "type": "string",
            "example": "RECEIVER-ID"
          },
          "boresight": {
            "description": "unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.",
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              3.23
            ]
          },
          "quat": {
            "description": "The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at observation time (ts). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.",
            "maxItems": 4,
            "minItems": 4,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.02,
              0.01,
              0.012
            ]
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 spacecraft latitude sub-point at observation time (ts), represented as -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 32.021
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 spacecraft longitude sub-point at observation time (ts), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 125.123
          },
          "alt": {
            "format": "double",
            "description": "Spacecraft altitude at observation time (ts), expressed in kilometers above WGS-84 ellipsoid.",
            "type": "number",
            "example": 200
          },
          "satPosition": {
            "description": "Three element array, expressing the ECI J2K spacecraft position components, in kilometers, at observation time (ts). The array element order is [x, y, z].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1625.71954,
              6782.15396,
              -1721.34267
            ]
          },
          "satVelocity": {
            "description": "Three element array, expressing the ECI J2K spacecraft velocity components, in km/second, at observation time (ts).  The array element order is [xvel, yvel, zvel].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              2.03,
              0.003,
              0.12
            ]
          },
          "obsCodes": {
            "description": "Array of the strings containing the individual observation code sets that are contained within this GNSS Observation set.  Each string is a three-character representation of the measurement type, the channel, and the coding, in compliance with the RINEX 3+ standard (Pseudorange (C), Carrier Phase (L), Doppler (D), Signal Strength C/No (S), or Channel Number (X)).  See the GNSS Observation ob field for the units of measure associated with each observation type.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ACL"
            ]
          },
          "trackingStatus": {
            "format": "int32",
            "description": "Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).",
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "navigationStatus": {
            "description": "The current navigation status as defined by the data source. In general the navigation status specifies whether the signal is normal, degraded, or unavailable. For status value definitions please reach out to data source provider.",
            "type": "string",
            "example": "degraded"
          },
          "agcState": {
            "format": "int32",
            "description": "GNSS Automatic Gain Control State.",
            "minimum": 0,
            "type": "integer",
            "example": 20
          },
          "srcTyps": {
            "description": "Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this GNSS Observation Set. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SV",
              "SV"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to this GNSS Observation Set. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/statevector/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SV_ID",
              "SV_ID"
            ]
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "gnssObservationList": {
            "description": "GNSSObservations associated with this GNSSObservationSet.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GNSSObservation_Ingest"
            }
          }
        }
      },
      "GNSSRawIF_Abridged": {
        "description": "Global Navigation Satellite System (GNSS) Raw Intermediate Frequency (IF) data are the recorded streams of raw signal samples after down-conversion of the received signal to IF and prior to any processing onboard the receiving spacecraft.  These data sets are processed in various geophysical applications and used to characterize Electromagnetic Interference (EMI) in the operating environment.",
        "required": [
          "classificationMarking",
          "startTime",
          "endTime",
          "centerFreq",
          "fileName",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "GNSSRawIF-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the primary satellite on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "32375"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 32375
          },
          "origObjectId": {
            "description": "Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "L2045"
          },
          "eventId": {
            "description": "Optional source-provided identifier for this collection event. This field can be used to associate records related to the same event.",
            "maxLength": 64,
            "type": "string",
            "example": "2f2205c9-7bc2-4e1a-8416-2f80cc71f64b"
          },
          "esId": {
            "description": "Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Raw IF records if each receiver is synced to the ephemeris points.",
            "maxLength": 36,
            "type": "string",
            "example": "60f7a241-b7be-48d8-acf3-786670af53f9"
          },
          "receiver": {
            "description": "The number or ID of the GNSS receiver associated with this data.  If reporting for multiple receivers a separate record should be generated for each. If null, it  is assumed to indicate that only one receiver is present, or reported.",
            "maxLength": 36,
            "type": "string",
            "example": "GPS1"
          },
          "boresight": {
            "description": "Unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0,
              1,
              0
            ]
          },
          "quat": {
            "description": "The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at the sample start time (startTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion. The quaternion should be normalized to 1.",
            "maxItems": 4,
            "minItems": 4,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0,
              -0.2734104,
              0.1562345,
              0.9491246
            ]
          },
          "startIndex": {
            "format": "int32",
            "description": "The index of the sample within the associated binary file that corresponds to the startTime indicated in this record.  This is especially useful on high sample-rate sensors when some samples are less than one microsecond before the value of startTime.  This index is 0-based.  If null, the startIndex is assumed to be 0.",
            "type": "integer",
            "example": 2
          },
          "startTime": {
            "format": "date-time",
            "description": "Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2022-04-09T18:11:28.919768Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "End time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2022-04-09T18:12:28.919768Z"
          },
          "startLat": {
            "format": "double",
            "description": "WGS-84 spacecraft latitude sub-point at start time (startTime), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 38.834
          },
          "startLon": {
            "format": "double",
            "description": "WGS-84 spacecraft longitude sub-point at start time (startTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": -104.821
          },
          "startAlt": {
            "format": "double",
            "description": "Spacecraft altitude at start time (startTime), expressed in kilometers above WGS-84 ellipsoid.",
            "type": "number",
            "example": 525.664
          },
          "endLat": {
            "format": "double",
            "description": "WGS-84 spacecraft latitude sub-point at end time (endTime), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 38.922
          },
          "endLon": {
            "format": "double",
            "description": "WGS-84 spacecraft longitude sub-point at end time (endTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": -104.67
          },
          "endAlt": {
            "format": "double",
            "description": "Spacecraft altitude at end time (endTime), expressed in kilometers above WGS-84 ellipsoid.",
            "type": "number",
            "example": 525.626
          },
          "centerFreq": {
            "description": "The center frequency, in MHz, of the observation bands.  More than one band may be reported in each binary file, so this is an array of the center frequency of each band (including an array of length 1 if only one band is present).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1227.6,
              1575.4
            ]
          },
          "ifFreq": {
            "description": "The center frequency, in MHz, after downconversion to intermediate frequency.  If provided, this array should have the same length as centerFreqs.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              4.09,
              5.87
            ]
          },
          "sampleRate": {
            "description": "The number of samples taken per second.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              8000,
              9000
            ]
          },
          "postFourier": {
            "description": "After converting the raw data in the file, to generate (frequency-space) spectra some sets require an additional transformation or correction based on details of the hardware that recorded it.  This field marks any such transformations.  Currently supported options are NONE (no correction) and MIRRORED (frequency axis is flipped around the corresponding value of ifFreq). If null, it is assumed that NONE applies to all frequency bands.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NONE",
              "NONE"
            ]
          },
          "sampleType": {
            "description": "The sample type associated with the IF data.  REAL for data with only an I-component or COMPLEX for data with both I & Q components.",
            "maxLength": 10,
            "type": "string",
            "example": "COMPLEX"
          },
          "bitDepth": {
            "format": "int32",
            "description": "The number of bits in each datum, for example 2 for 2-bit integers or 8 for 8-bit integers.",
            "type": "integer",
            "example": 8
          },
          "diffCodeBias": {
            "description": "Differential Code Biases (DCBs) are the systematic errors, or biases, between two GNSS code observations at the same or different frequencies.  If applicable, this field should contain an array of DBC with length equal to the number of frequencies in the binary file.  The reference frequency should show DCB equal to 0.  If null, it is assumed that there is no DCB (all values are 0).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.0271,
              0.0016
            ]
          },
          "dataRate": {
            "format": "double",
            "description": "The amount of data generated per unit time, expressed in Megabytes/minute.",
            "type": "number",
            "example": 0.205
          },
          "setId": {
            "description": "User-defined ID of a set or sequence of records/files.  Used to associate a set of related raw IF records.",
            "type": "string",
            "example": "2b0b1b1a-a3c0-4267-894a-0c40cb84a5af"
          },
          "setLength": {
            "format": "int32",
            "description": "The number of raw IF records/files in a set.",
            "type": "integer",
            "example": 7
          },
          "sequenceID": {
            "format": "int32",
            "description": "The sequence number of a raw IF record/file within a set.  Sequence number should start at 1.  If null, then it is assumed that the order of records within a raw IF set is not relevant.",
            "type": "integer",
            "example": 1
          },
          "fileName": {
            "description": "The file name of the Raw IF Binary file.  The files should be in the Hierarchical Data Format (HDF5).",
            "maxLength": 128,
            "type": "string",
            "example": "somefile.hdf5"
          },
          "srcTyps": {
            "description": "Array of UDL record types (GNSSSET) associated with this GNSSRawIF record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GNSSSET"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records associated with this GNSSRawIF record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/gnssobservationset/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GNSSSET_ID"
            ]
          },
          "fileSize": {
            "format": "int64",
            "description": "The binary file size, in bytes, auto-populated by the system.  The maximum file size for this service is 5,000,000 Bytes (5 MB). Files exceeding the maximum size will be rejected.",
            "type": "integer",
            "readOnly": true,
            "example": 3168895
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "GNSSRawIF_Full": {
        "description": "Global Navigation Satellite System (GNSS) Raw Intermediate Frequency (IF) data are the recorded streams of raw signal samples after down-conversion of the received signal to IF and prior to any processing onboard the receiving spacecraft.  These data sets are processed in various geophysical applications and used to characterize Electromagnetic Interference (EMI) in the operating environment.",
        "required": [
          "classificationMarking",
          "startTime",
          "endTime",
          "centerFreq",
          "fileName",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "GNSSRawIF-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the primary satellite on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "32375"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 32375
          },
          "origObjectId": {
            "description": "Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "L2045"
          },
          "eventId": {
            "description": "Optional source-provided identifier for this collection event. This field can be used to associate records related to the same event.",
            "maxLength": 64,
            "type": "string",
            "example": "2f2205c9-7bc2-4e1a-8416-2f80cc71f64b"
          },
          "esId": {
            "description": "Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Raw IF records if each receiver is synced to the ephemeris points.",
            "maxLength": 36,
            "type": "string",
            "example": "60f7a241-b7be-48d8-acf3-786670af53f9"
          },
          "receiver": {
            "description": "The number or ID of the GNSS receiver associated with this data.  If reporting for multiple receivers a separate record should be generated for each. If null, it  is assumed to indicate that only one receiver is present, or reported.",
            "maxLength": 36,
            "type": "string",
            "example": "GPS1"
          },
          "boresight": {
            "description": "Unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0,
              1,
              0
            ]
          },
          "quat": {
            "description": "The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at the sample start time (startTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion. The quaternion should be normalized to 1.",
            "maxItems": 4,
            "minItems": 4,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0,
              -0.2734104,
              0.1562345,
              0.9491246
            ]
          },
          "startIndex": {
            "format": "int32",
            "description": "The index of the sample within the associated binary file that corresponds to the startTime indicated in this record.  This is especially useful on high sample-rate sensors when some samples are less than one microsecond before the value of startTime.  This index is 0-based.  If null, the startIndex is assumed to be 0.",
            "type": "integer",
            "example": 2
          },
          "startTime": {
            "format": "date-time",
            "description": "Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2022-04-09T18:11:28.919768Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "End time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2022-04-09T18:12:28.919768Z"
          },
          "startLat": {
            "format": "double",
            "description": "WGS-84 spacecraft latitude sub-point at start time (startTime), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 38.834
          },
          "startLon": {
            "format": "double",
            "description": "WGS-84 spacecraft longitude sub-point at start time (startTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": -104.821
          },
          "startAlt": {
            "format": "double",
            "description": "Spacecraft altitude at start time (startTime), expressed in kilometers above WGS-84 ellipsoid.",
            "type": "number",
            "example": 525.664
          },
          "endLat": {
            "format": "double",
            "description": "WGS-84 spacecraft latitude sub-point at end time (endTime), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 38.922
          },
          "endLon": {
            "format": "double",
            "description": "WGS-84 spacecraft longitude sub-point at end time (endTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": -104.67
          },
          "endAlt": {
            "format": "double",
            "description": "Spacecraft altitude at end time (endTime), expressed in kilometers above WGS-84 ellipsoid.",
            "type": "number",
            "example": 525.626
          },
          "centerFreq": {
            "description": "The center frequency, in MHz, of the observation bands.  More than one band may be reported in each binary file, so this is an array of the center frequency of each band (including an array of length 1 if only one band is present).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1227.6,
              1575.4
            ]
          },
          "ifFreq": {
            "description": "The center frequency, in MHz, after downconversion to intermediate frequency.  If provided, this array should have the same length as centerFreqs.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              4.09,
              5.87
            ]
          },
          "sampleRate": {
            "description": "The number of samples taken per second.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              8000,
              9000
            ]
          },
          "postFourier": {
            "description": "After converting the raw data in the file, to generate (frequency-space) spectra some sets require an additional transformation or correction based on details of the hardware that recorded it.  This field marks any such transformations.  Currently supported options are NONE (no correction) and MIRRORED (frequency axis is flipped around the corresponding value of ifFreq). If null, it is assumed that NONE applies to all frequency bands.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NONE",
              "NONE"
            ]
          },
          "sampleType": {
            "description": "The sample type associated with the IF data.  REAL for data with only an I-component or COMPLEX for data with both I & Q components.",
            "maxLength": 10,
            "type": "string",
            "example": "COMPLEX"
          },
          "bitDepth": {
            "format": "int32",
            "description": "The number of bits in each datum, for example 2 for 2-bit integers or 8 for 8-bit integers.",
            "type": "integer",
            "example": 8
          },
          "diffCodeBias": {
            "description": "Differential Code Biases (DCBs) are the systematic errors, or biases, between two GNSS code observations at the same or different frequencies.  If applicable, this field should contain an array of DBC with length equal to the number of frequencies in the binary file.  The reference frequency should show DCB equal to 0.  If null, it is assumed that there is no DCB (all values are 0).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.0271,
              0.0016
            ]
          },
          "dataRate": {
            "format": "double",
            "description": "The amount of data generated per unit time, expressed in Megabytes/minute.",
            "type": "number",
            "example": 0.205
          },
          "setId": {
            "description": "User-defined ID of a set or sequence of records/files.  Used to associate a set of related raw IF records.",
            "type": "string",
            "example": "2b0b1b1a-a3c0-4267-894a-0c40cb84a5af"
          },
          "setLength": {
            "format": "int32",
            "description": "The number of raw IF records/files in a set.",
            "type": "integer",
            "example": 7
          },
          "sequenceID": {
            "format": "int32",
            "description": "The sequence number of a raw IF record/file within a set.  Sequence number should start at 1.  If null, then it is assumed that the order of records within a raw IF set is not relevant.",
            "type": "integer",
            "example": 1
          },
          "fileName": {
            "description": "The file name of the Raw IF Binary file.  The files should be in the Hierarchical Data Format (HDF5).",
            "maxLength": 128,
            "type": "string",
            "example": "somefile.hdf5"
          },
          "srcTyps": {
            "description": "Array of UDL record types (GNSSSET) associated with this GNSSRawIF record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GNSSSET"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records associated with this GNSSRawIF record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/gnssobservationset/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GNSSSET_ID"
            ]
          },
          "fileSize": {
            "format": "int64",
            "description": "The binary file size, in bytes, auto-populated by the system.  The maximum file size for this service is 5,000,000 Bytes (5 MB). Files exceeding the maximum size will be rejected.",
            "type": "integer",
            "readOnly": true,
            "example": 3168895
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "GNSSRawIF_Ingest": {
        "description": "Global Navigation Satellite System (GNSS) Raw Intermediate Frequency (IF) data are the recorded streams of raw signal samples after down-conversion of the received signal to IF and prior to any processing onboard the receiving spacecraft.  These data sets are processed in various geophysical applications and used to characterize Electromagnetic Interference (EMI) in the operating environment.",
        "required": [
          "classificationMarking",
          "startTime",
          "endTime",
          "centerFreq",
          "fileName",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "GNSSRawIF-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the primary satellite on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "32375"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 32375
          },
          "origObjectId": {
            "description": "Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "L2045"
          },
          "eventId": {
            "description": "Optional source-provided identifier for this collection event. This field can be used to associate records related to the same event.",
            "maxLength": 64,
            "type": "string",
            "example": "2f2205c9-7bc2-4e1a-8416-2f80cc71f64b"
          },
          "esId": {
            "description": "Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Raw IF records if each receiver is synced to the ephemeris points.",
            "maxLength": 36,
            "type": "string",
            "example": "60f7a241-b7be-48d8-acf3-786670af53f9"
          },
          "receiver": {
            "description": "The number or ID of the GNSS receiver associated with this data.  If reporting for multiple receivers a separate record should be generated for each. If null, it  is assumed to indicate that only one receiver is present, or reported.",
            "maxLength": 36,
            "type": "string",
            "example": "GPS1"
          },
          "boresight": {
            "description": "Unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0,
              1,
              0
            ]
          },
          "quat": {
            "description": "The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at the sample start time (startTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion. The quaternion should be normalized to 1.",
            "maxItems": 4,
            "minItems": 4,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0,
              -0.2734104,
              0.1562345,
              0.9491246
            ]
          },
          "startIndex": {
            "format": "int32",
            "description": "The index of the sample within the associated binary file that corresponds to the startTime indicated in this record.  This is especially useful on high sample-rate sensors when some samples are less than one microsecond before the value of startTime.  This index is 0-based.  If null, the startIndex is assumed to be 0.",
            "type": "integer",
            "example": 2
          },
          "startTime": {
            "format": "date-time",
            "description": "Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2022-04-09T18:11:28.919768Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "End time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2022-04-09T18:12:28.919768Z"
          },
          "startLat": {
            "format": "double",
            "description": "WGS-84 spacecraft latitude sub-point at start time (startTime), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 38.834
          },
          "startLon": {
            "format": "double",
            "description": "WGS-84 spacecraft longitude sub-point at start time (startTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": -104.821
          },
          "startAlt": {
            "format": "double",
            "description": "Spacecraft altitude at start time (startTime), expressed in kilometers above WGS-84 ellipsoid.",
            "type": "number",
            "example": 525.664
          },
          "endLat": {
            "format": "double",
            "description": "WGS-84 spacecraft latitude sub-point at end time (endTime), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 38.922
          },
          "endLon": {
            "format": "double",
            "description": "WGS-84 spacecraft longitude sub-point at end time (endTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": -104.67
          },
          "endAlt": {
            "format": "double",
            "description": "Spacecraft altitude at end time (endTime), expressed in kilometers above WGS-84 ellipsoid.",
            "type": "number",
            "example": 525.626
          },
          "centerFreq": {
            "description": "The center frequency, in MHz, of the observation bands.  More than one band may be reported in each binary file, so this is an array of the center frequency of each band (including an array of length 1 if only one band is present).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1227.6,
              1575.4
            ]
          },
          "ifFreq": {
            "description": "The center frequency, in MHz, after downconversion to intermediate frequency.  If provided, this array should have the same length as centerFreqs.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              4.09,
              5.87
            ]
          },
          "sampleRate": {
            "description": "The number of samples taken per second.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              8000,
              9000
            ]
          },
          "postFourier": {
            "description": "After converting the raw data in the file, to generate (frequency-space) spectra some sets require an additional transformation or correction based on details of the hardware that recorded it.  This field marks any such transformations.  Currently supported options are NONE (no correction) and MIRRORED (frequency axis is flipped around the corresponding value of ifFreq). If null, it is assumed that NONE applies to all frequency bands.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NONE",
              "NONE"
            ]
          },
          "sampleType": {
            "description": "The sample type associated with the IF data.  REAL for data with only an I-component or COMPLEX for data with both I & Q components.",
            "maxLength": 10,
            "type": "string",
            "example": "COMPLEX"
          },
          "bitDepth": {
            "format": "int32",
            "description": "The number of bits in each datum, for example 2 for 2-bit integers or 8 for 8-bit integers.",
            "type": "integer",
            "example": 8
          },
          "diffCodeBias": {
            "description": "Differential Code Biases (DCBs) are the systematic errors, or biases, between two GNSS code observations at the same or different frequencies.  If applicable, this field should contain an array of DBC with length equal to the number of frequencies in the binary file.  The reference frequency should show DCB equal to 0.  If null, it is assumed that there is no DCB (all values are 0).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.0271,
              0.0016
            ]
          },
          "dataRate": {
            "format": "double",
            "description": "The amount of data generated per unit time, expressed in Megabytes/minute.",
            "type": "number",
            "example": 0.205
          },
          "setId": {
            "description": "User-defined ID of a set or sequence of records/files.  Used to associate a set of related raw IF records.",
            "type": "string",
            "example": "2b0b1b1a-a3c0-4267-894a-0c40cb84a5af"
          },
          "setLength": {
            "format": "int32",
            "description": "The number of raw IF records/files in a set.",
            "type": "integer",
            "example": 7
          },
          "sequenceID": {
            "format": "int32",
            "description": "The sequence number of a raw IF record/file within a set.  Sequence number should start at 1.  If null, then it is assumed that the order of records within a raw IF set is not relevant.",
            "type": "integer",
            "example": 1
          },
          "fileName": {
            "description": "The file name of the Raw IF Binary file.  The files should be in the Hierarchical Data Format (HDF5).",
            "maxLength": 128,
            "type": "string",
            "example": "somefile.hdf5"
          },
          "srcTyps": {
            "description": "Array of UDL record types (GNSSSET) associated with this GNSSRawIF record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GNSSSET"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records associated with this GNSSRawIF record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/gnssobservationset/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GNSSSET_ID"
            ]
          },
          "fileSize": {
            "format": "int64",
            "description": "The binary file size, in bytes, auto-populated by the system.  The maximum file size for this service is 5,000,000 Bytes (5 MB). Files exceeding the maximum size will be rejected.",
            "type": "integer",
            "readOnly": true,
            "example": 3168895
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "IonoObservation_Abridged": {
        "description": "These services provide operations for posting and querying ionospheric observation data. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.",
        "required": [
          "classificationMarking",
          "system",
          "stationId",
          "startTimeUTC",
          "systemInfo",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "IONOOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "system": {
            "description": "Ionosonde hardware type or data collection type together with possible additional descriptors.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Example hardware type"
          },
          "neProfileName": {
            "description": "Name of the algorithm used for the electron density profile.",
            "maxLength": 64,
            "type": "string",
            "example": "NH"
          },
          "neProfileVersion": {
            "format": "double",
            "description": "Version of the algorithm used for the electron density profile.",
            "minimum": 0,
            "type": "number",
            "example": 4.32
          },
          "scalerInfo": {
            "$ref": "#/components/schemas/IonoObservationScalerInfo_Abridged"
          },
          "densityProfile": {
            "$ref": "#/components/schemas/IonoObservationDensityProfile_Abridged"
          },
          "stationId": {
            "description": "URSI code for station or stations producing the ionosonde.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "STATION-ID"
          },
          "startTimeUTC": {
            "format": "date-time",
            "description": "Sounding Start time in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "systemInfo": {
            "description": "Names of settings.",
            "maxLength": 1024,
            "minLength": 1,
            "type": "string",
            "example": "Example settings"
          },
          "systemNotes": {
            "description": "Details concerning the composition/intention/interpretation/audience/etc. of any data recorded here. This field may contain all of the intended information e.g. info on signal waveforms used, antenna setup, etc. OR may describe the data/settings to be provided in the “data” field.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "transmitCoordinates": {
            "description": "List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                45.5,
                179.3,
                35.6
              ],
              [
                -80.2,
                -20.5,
                43.2
              ]
            ]
          },
          "transmitSensorType": {
            "description": "Enums: Mobile, Static.",
            "maxLength": 16,
            "enum": [
              "Mobile",
              "Static"
            ],
            "type": "string",
            "example": "Mobile"
          },
          "receiveCoordinates": {
            "description": "List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                45.5,
                179.3,
                35.6
              ],
              [
                -80.2,
                -20.5,
                43.2
              ]
            ]
          },
          "receiveSensorType": {
            "description": "Enums: Mobile, Static.",
            "maxLength": 16,
            "enum": [
              "Mobile",
              "Static"
            ],
            "type": "string",
            "example": "Mobile"
          },
          "antennaElementPosition": {
            "$ref": "#/components/schemas/IonoObservationAntennaElementPosition_Abridged"
          },
          "antennaElementPositionCoordinateSystem": {
            "description": "Enums: J2000, ECR/ECEF, TEME, GCRF, WGS84 (GEODetic lat, long, alt), GEOCentric (lat, long, radii).",
            "maxLength": 32,
            "enum": [
              "J2000",
              "ECR/ECEF",
              "TEME",
              "GCRF",
              "WGS84 (GEODetic lat, long, alt)",
              "GEOCentric (lat, long, radii)"
            ],
            "type": "string",
            "example": "J2000"
          },
          "power": {
            "$ref": "#/components/schemas/IonoObservationPower_Abridged"
          },
          "range": {
            "$ref": "#/components/schemas/IonoObservationRange_Abridged"
          },
          "frequency": {
            "$ref": "#/components/schemas/IonoObservationFrequency_Abridged"
          },
          "polarization": {
            "$ref": "#/components/schemas/IonoObservationPolarization_Abridged"
          },
          "azimuth": {
            "$ref": "#/components/schemas/IonoObservationAzimuth_Abridged"
          },
          "elevation": {
            "$ref": "#/components/schemas/IonoObservationElevation_Abridged"
          },
          "restrictedFrequency": {
            "description": "Array of restricted frequencies.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              12.5,
              34.5,
              45.3
            ]
          },
          "restrictedFrequencyNotes": {
            "description": "Notes for the restrictedFrequency data.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "doppler": {
            "$ref": "#/components/schemas/IonoObservationDoppler_Abridged"
          },
          "time": {
            "$ref": "#/components/schemas/IonoObservationTime_Abridged"
          },
          "stokes": {
            "$ref": "#/components/schemas/IonoObservationStokes_Abridged"
          },
          "amplitude": {
            "$ref": "#/components/schemas/IonoObservationAmplitude_Abridged"
          },
          "phase": {
            "$ref": "#/components/schemas/IonoObservationPhase_Abridged"
          },
          "foF2": {
            "format": "double",
            "description": "The ordinary wave critical frequency of the highest stratification in the F region, specified in MHz. URSI ID: 00.",
            "type": "number",
            "example": 6.75
          },
          "foF1": {
            "format": "double",
            "description": "The ordinary wave F1 critical frequency, in MHz. URSI ID: 10.",
            "type": "number",
            "example": 8.2
          },
          "fxF2": {
            "format": "double",
            "description": "The extraordinary wave F2 critical frequency, in MHz. URSI ID: 01.",
            "type": "number",
            "example": 4.5
          },
          "fxF1": {
            "format": "double",
            "description": "The extraordinary wave F1 critical frequency, in MHz. URSI ID: 11.",
            "type": "number",
            "example": 4.2
          },
          "md": {
            "format": "double",
            "description": "MUF(D)/foF2.",
            "type": "number",
            "example": 1.1
          },
          "luf": {
            "format": "double",
            "description": "Lowest usable frequency.",
            "type": "number",
            "example": 1.1
          },
          "mufd": {
            "format": "double",
            "description": "Maximum Usable Frequency for ground distance D in MHz.",
            "type": "number",
            "example": 1.1
          },
          "fmin": {
            "format": "double",
            "description": "Lowest frequency at which echo traces are observed on the ionogram, in MHz. URSI ID: 42.",
            "type": "number",
            "example": 2.025
          },
          "foEs": {
            "format": "double",
            "description": "Highest ordinary wave frequency at which a mainly continuous Es trace is observed, in MHz. URSI ID: 30.",
            "type": "number",
            "example": 2.35
          },
          "fminF": {
            "format": "double",
            "description": "Minimum frequency of F layer echoes in MHz. URSI ID: 80.",
            "type": "number",
            "example": 2.7
          },
          "fminE": {
            "format": "double",
            "description": "Minimum frequency of E layer echoes in MHz. URSI ID: 81.",
            "type": "number",
            "example": 2.025
          },
          "foE": {
            "format": "double",
            "description": "The ordinary wave critical frequency of the lowest thick layer which causes a discontinuity, in MHz. URSI ID: 20.",
            "type": "number",
            "example": 1.1
          },
          "fxE": {
            "format": "double",
            "description": "The extraordinary wave E critical frequency, in MHz. URSI ID: 21.",
            "type": "number",
            "example": 1.1
          },
          "fxI": {
            "format": "double",
            "description": "The highest frequency of F-trace in MHz. Note: fxI is with capital i. URSI ID: 51.",
            "type": "number",
            "example": 7.525
          },
          "hprimeF": {
            "format": "double",
            "description": "The minimum virtual height of the ordinary wave trace taken as a whole, in km. URSI ID: 16.",
            "type": "number",
            "example": 238.5
          },
          "hprimeF2": {
            "format": "double",
            "description": "The minimum virtual height of ordinary wave trace for the highest stable stratification in the F region in km. URSI ID: 4.",
            "type": "number",
            "example": 238.5
          },
          "hprimeF1": {
            "format": "double",
            "description": "The minimum virtual height of reflection at a point where the trace is horizontal in the F region in km. URSI ID: 14.",
            "type": "number",
            "example": 230.1
          },
          "hprimeE": {
            "format": "double",
            "description": "The minimum virtual height of the normal E layer trace in km. URSI ID: 24.",
            "type": "number",
            "example": 98.47
          },
          "hprimeEs": {
            "format": "double",
            "description": "The minimum height of the trace used to give foEs in km. URSI ID: 34.",
            "type": "number",
            "example": 95
          },
          "zmE": {
            "format": "double",
            "description": "Peak height of E-layer in km. URSI ID: 90.",
            "type": "number",
            "example": 91.744
          },
          "yE": {
            "format": "double",
            "description": "Parabolic E layer semi-thickness in km. URSI ID: 83.",
            "type": "number",
            "example": 1.722
          },
          "qf": {
            "format": "double",
            "description": "Average range spread of F layer in km. URSI ID: 84.",
            "type": "number",
            "example": 1.83
          },
          "qe": {
            "format": "double",
            "description": "Average range spread of E layer in km. URSI ID: 85.",
            "type": "number",
            "example": 0.95
          },
          "downF": {
            "format": "double",
            "description": "Lowering of F trace to the leading edge in km.",
            "type": "number",
            "example": 1.1
          },
          "downE": {
            "format": "double",
            "description": "Lowering of E trace to the leading edge in km.",
            "type": "number",
            "example": 1.1
          },
          "downEs": {
            "format": "double",
            "description": "Lowering of Es trace to the leading edge in km.",
            "type": "number",
            "example": 1.1
          },
          "ff": {
            "format": "double",
            "description": "Frequency spread between fxF2 and FxI in MHz. URSI ID: 86.",
            "type": "number",
            "example": 0.075
          },
          "fe": {
            "format": "double",
            "description": "Frequency spread beyond foE in MHz. URSI ID: 87.",
            "type": "number",
            "example": 1.23
          },
          "d": {
            "format": "double",
            "description": "Distance for MUF calculation in km.",
            "type": "number",
            "example": 1.1
          },
          "fmuf": {
            "format": "double",
            "description": "MUF/OblFactor in MHz.",
            "type": "number",
            "example": 1.1
          },
          "hprimefMUF": {
            "format": "double",
            "description": "Virtual height at MUF/OblFactor frequency in MHz.",
            "type": "number",
            "example": 1.1
          },
          "deltafoF2": {
            "format": "double",
            "description": "Adjustment to the scaled foF2 during profile inversion in MHz.",
            "type": "number",
            "example": 1.1
          },
          "foEp": {
            "format": "double",
            "description": "Predicted value of foE in MHz.",
            "type": "number",
            "example": 1.1
          },
          "fhprimeF": {
            "format": "double",
            "description": "The frequency at which hprimeF is measured in MHz. URSI ID: 61.",
            "type": "number",
            "example": 2.5
          },
          "fhprimeF2": {
            "format": "double",
            "description": "The frequency at which hprimeF2 is measured in MHz. URSI ID: 60.",
            "type": "number",
            "example": 2.5
          },
          "foF1p": {
            "format": "double",
            "description": "Predicted value of foF1 in MHz.",
            "type": "number",
            "example": 1.1
          },
          "foF2p": {
            "format": "double",
            "description": "Predicted value of foF2 in MHz.",
            "type": "number",
            "example": 1.1
          },
          "hmF2": {
            "format": "double",
            "description": "True height of the F2 peak in km. URSI ID: AE.",
            "type": "number",
            "example": 240.498
          },
          "hmF1": {
            "format": "double",
            "description": "True height of the F1 peak in km. URSI ID: BE.",
            "type": "number",
            "example": 230.128
          },
          "hmE": {
            "format": "double",
            "description": "True height of the E peak in km. URSI ID: CE.",
            "type": "number",
            "example": 215.643
          },
          "zhalfNm": {
            "format": "double",
            "description": "True height at half peak electron density in the F2 layer in km. URSI ID: 93.",
            "type": "number",
            "example": 240.498
          },
          "fminEs": {
            "format": "double",
            "description": "Minimum frequency of Es layer in MHz.",
            "type": "number",
            "example": 1.1
          },
          "yF2": {
            "format": "double",
            "description": "Parabolic F2 layer semi-thickness in km. URSI ID: 94.",
            "type": "number",
            "example": 62.178
          },
          "yF1": {
            "format": "double",
            "description": "Parabolic F1 layer semi-thickness in km. URSI ID: 95.",
            "type": "number",
            "example": 55.645
          },
          "tec": {
            "format": "double",
            "description": "Total Ionospheric Electron Content *10^16e/m^2. 1 TEC Unit (TECU) = 10^16 electrons/m^2. URSI ID: 72.",
            "type": "number",
            "example": 24.673
          },
          "scaleHeightF2Peak": {
            "format": "double",
            "description": "Effective scale height at hmF2 Titheridge method in km. URSI ID: 69.",
            "type": "number",
            "example": 35.613
          },
          "b0": {
            "format": "double",
            "description": "IRI thickness parameter in km. URSI ID: D0.",
            "type": "number",
            "example": 68.07
          },
          "b1": {
            "format": "double",
            "description": "IRI profile shape parameter. URSI ID: D1.",
            "type": "number",
            "example": 1.87
          },
          "d1": {
            "format": "double",
            "description": "IRI profile shape parameter, F1 layer. URSI ID: D2.",
            "type": "number",
            "example": 1.94
          },
          "foEa": {
            "format": "double",
            "description": "Critical frequency of night time auroral E layer in MHz. URSI ID: 23.",
            "type": "number",
            "example": 45.764
          },
          "hprimeEa": {
            "format": "double",
            "description": "Minimum virtual height of night time auroral E layer trace in km. URSI ID: 27.",
            "type": "number",
            "example": 102.6
          },
          "foP": {
            "format": "double",
            "description": "Highest ordinary wave critical frequency of F region patch trace in MHz. URSI ID: 55.",
            "type": "number",
            "example": 87.21
          },
          "hprimeP": {
            "format": "double",
            "description": "Minimum virtual height of the trace used to determine foP in km. URSI ID: 56.",
            "type": "number",
            "example": 89.45
          },
          "fbEs": {
            "format": "double",
            "description": "The blanketing frequency of layer used to derive foEs in MHz. URSI ID: 32.",
            "type": "number",
            "example": 34.867
          },
          "typeEs": {
            "description": "Characterization of the shape of Es trace. URSI ID: 36.",
            "maxLength": 25,
            "type": "string",
            "example": "Auroral"
          },
          "charAtts": {
            "description": "List of attributes that are associated with the specified characteristics. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. \nQualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IonoObservationCharAtts_Abridged"
            }
          },
          "height": {
            "description": "Array of altitudes above station level for plasma frequency/density arrays in km (must match the size of the plasmaFrequency and electronDensity Arrays).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "plasmaFrequency": {
            "description": "Array of plasma frequencies in MHz (must match the size of the height and electronDensity arrays).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "plasmaFrequencyUncertainty": {
            "description": "Uncertainty in specifying the electron plasma frequency at each height point of the profile (must match the size of the plasmaFrequency array).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.8,
              0.2,
              0.5
            ]
          },
          "electronDensity": {
            "description": "Array of electron densities in cm^-3 (must match the size of the height and plasmaFrequency arrays).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "electronDensityUncertainty": {
            "description": "Uncertainty in specifying the electron density at each height point of the profile (must match the size of the electronDensity array).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.8,
              0.2,
              0.5
            ]
          },
          "artistFlags": {
            "description": "Array of Legacy Artist Flags.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2,
              3
            ]
          },
          "traceGeneric": {
            "$ref": "#/components/schemas/IonoObservationTraceGeneric_Abridged"
          },
          "tidPhaseSpeeds": {
            "description": "Array of speed in m/s at which the disturbance travels through the ionosphere.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "tidAzimuth": {
            "description": "Array of degrees clockwise from true North of the TID.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "tidPeriods": {
            "description": "Array of 1/frequency of the TID wave.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "datum": {
            "$ref": "#/components/schemas/IonoObservationDatum_Abridged"
          },
          "platformName": {
            "description": "Equipment location.",
            "maxLength": 512,
            "type": "string",
            "example": "Millstone Hill"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "IonoObservation_Full": {
        "description": "These services provide operations for posting and querying ionospheric observation data. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.",
        "required": [
          "classificationMarking",
          "system",
          "stationId",
          "startTimeUTC",
          "systemInfo",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "IONOOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "system": {
            "description": "Ionosonde hardware type or data collection type together with possible additional descriptors.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Example hardware type"
          },
          "neProfileName": {
            "description": "Name of the algorithm used for the electron density profile.",
            "maxLength": 64,
            "type": "string",
            "example": "NH"
          },
          "neProfileVersion": {
            "format": "double",
            "description": "Version of the algorithm used for the electron density profile.",
            "minimum": 0,
            "type": "number",
            "example": 4.32
          },
          "scalerInfo": {
            "$ref": "#/components/schemas/IonoObservationScalerInfo_Full"
          },
          "densityProfile": {
            "$ref": "#/components/schemas/IonoObservationDensityProfile_Full"
          },
          "stationId": {
            "description": "URSI code for station or stations producing the ionosonde.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "STATION-ID"
          },
          "startTimeUTC": {
            "format": "date-time",
            "description": "Sounding Start time in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "systemInfo": {
            "description": "Names of settings.",
            "maxLength": 1024,
            "minLength": 1,
            "type": "string",
            "example": "Example settings"
          },
          "systemNotes": {
            "description": "Details concerning the composition/intention/interpretation/audience/etc. of any data recorded here. This field may contain all of the intended information e.g. info on signal waveforms used, antenna setup, etc. OR may describe the data/settings to be provided in the “data” field.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "transmitCoordinates": {
            "description": "List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                45.5,
                179.3,
                35.6
              ],
              [
                -80.2,
                -20.5,
                43.2
              ]
            ]
          },
          "transmitSensorType": {
            "description": "Enums: Mobile, Static.",
            "maxLength": 16,
            "enum": [
              "Mobile",
              "Static"
            ],
            "type": "string",
            "example": "Mobile"
          },
          "receiveCoordinates": {
            "description": "List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                45.5,
                179.3,
                35.6
              ],
              [
                -80.2,
                -20.5,
                43.2
              ]
            ]
          },
          "receiveSensorType": {
            "description": "Enums: Mobile, Static.",
            "maxLength": 16,
            "enum": [
              "Mobile",
              "Static"
            ],
            "type": "string",
            "example": "Mobile"
          },
          "antennaElementPosition": {
            "$ref": "#/components/schemas/IonoObservationAntennaElementPosition_Full"
          },
          "antennaElementPositionCoordinateSystem": {
            "description": "Enums: J2000, ECR/ECEF, TEME, GCRF, WGS84 (GEODetic lat, long, alt), GEOCentric (lat, long, radii).",
            "maxLength": 32,
            "enum": [
              "J2000",
              "ECR/ECEF",
              "TEME",
              "GCRF",
              "WGS84 (GEODetic lat, long, alt)",
              "GEOCentric (lat, long, radii)"
            ],
            "type": "string",
            "example": "J2000"
          },
          "power": {
            "$ref": "#/components/schemas/IonoObservationPower_Full"
          },
          "range": {
            "$ref": "#/components/schemas/IonoObservationRange_Full"
          },
          "frequency": {
            "$ref": "#/components/schemas/IonoObservationFrequency_Full"
          },
          "polarization": {
            "$ref": "#/components/schemas/IonoObservationPolarization_Full"
          },
          "azimuth": {
            "$ref": "#/components/schemas/IonoObservationAzimuth_Full"
          },
          "elevation": {
            "$ref": "#/components/schemas/IonoObservationElevation_Full"
          },
          "restrictedFrequency": {
            "description": "Array of restricted frequencies.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              12.5,
              34.5,
              45.3
            ]
          },
          "restrictedFrequencyNotes": {
            "description": "Notes for the restrictedFrequency data.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "doppler": {
            "$ref": "#/components/schemas/IonoObservationDoppler_Full"
          },
          "time": {
            "$ref": "#/components/schemas/IonoObservationTime_Full"
          },
          "stokes": {
            "$ref": "#/components/schemas/IonoObservationStokes_Full"
          },
          "amplitude": {
            "$ref": "#/components/schemas/IonoObservationAmplitude_Full"
          },
          "phase": {
            "$ref": "#/components/schemas/IonoObservationPhase_Full"
          },
          "foF2": {
            "format": "double",
            "description": "The ordinary wave critical frequency of the highest stratification in the F region, specified in MHz. URSI ID: 00.",
            "type": "number",
            "example": 6.75
          },
          "foF1": {
            "format": "double",
            "description": "The ordinary wave F1 critical frequency, in MHz. URSI ID: 10.",
            "type": "number",
            "example": 8.2
          },
          "fxF2": {
            "format": "double",
            "description": "The extraordinary wave F2 critical frequency, in MHz. URSI ID: 01.",
            "type": "number",
            "example": 4.5
          },
          "fxF1": {
            "format": "double",
            "description": "The extraordinary wave F1 critical frequency, in MHz. URSI ID: 11.",
            "type": "number",
            "example": 4.2
          },
          "md": {
            "format": "double",
            "description": "MUF(D)/foF2.",
            "type": "number",
            "example": 1.1
          },
          "luf": {
            "format": "double",
            "description": "Lowest usable frequency.",
            "type": "number",
            "example": 1.1
          },
          "mufd": {
            "format": "double",
            "description": "Maximum Usable Frequency for ground distance D in MHz.",
            "type": "number",
            "example": 1.1
          },
          "fmin": {
            "format": "double",
            "description": "Lowest frequency at which echo traces are observed on the ionogram, in MHz. URSI ID: 42.",
            "type": "number",
            "example": 2.025
          },
          "foEs": {
            "format": "double",
            "description": "Highest ordinary wave frequency at which a mainly continuous Es trace is observed, in MHz. URSI ID: 30.",
            "type": "number",
            "example": 2.35
          },
          "fminF": {
            "format": "double",
            "description": "Minimum frequency of F layer echoes in MHz. URSI ID: 80.",
            "type": "number",
            "example": 2.7
          },
          "fminE": {
            "format": "double",
            "description": "Minimum frequency of E layer echoes in MHz. URSI ID: 81.",
            "type": "number",
            "example": 2.025
          },
          "foE": {
            "format": "double",
            "description": "The ordinary wave critical frequency of the lowest thick layer which causes a discontinuity, in MHz. URSI ID: 20.",
            "type": "number",
            "example": 1.1
          },
          "fxE": {
            "format": "double",
            "description": "The extraordinary wave E critical frequency, in MHz. URSI ID: 21.",
            "type": "number",
            "example": 1.1
          },
          "fxI": {
            "format": "double",
            "description": "The highest frequency of F-trace in MHz. Note: fxI is with capital i. URSI ID: 51.",
            "type": "number",
            "example": 7.525
          },
          "hprimeF": {
            "format": "double",
            "description": "The minimum virtual height of the ordinary wave trace taken as a whole, in km. URSI ID: 16.",
            "type": "number",
            "example": 238.5
          },
          "hprimeF2": {
            "format": "double",
            "description": "The minimum virtual height of ordinary wave trace for the highest stable stratification in the F region in km. URSI ID: 4.",
            "type": "number",
            "example": 238.5
          },
          "hprimeF1": {
            "format": "double",
            "description": "The minimum virtual height of reflection at a point where the trace is horizontal in the F region in km. URSI ID: 14.",
            "type": "number",
            "example": 230.1
          },
          "hprimeE": {
            "format": "double",
            "description": "The minimum virtual height of the normal E layer trace in km. URSI ID: 24.",
            "type": "number",
            "example": 98.47
          },
          "hprimeEs": {
            "format": "double",
            "description": "The minimum height of the trace used to give foEs in km. URSI ID: 34.",
            "type": "number",
            "example": 95
          },
          "zmE": {
            "format": "double",
            "description": "Peak height of E-layer in km. URSI ID: 90.",
            "type": "number",
            "example": 91.744
          },
          "yE": {
            "format": "double",
            "description": "Parabolic E layer semi-thickness in km. URSI ID: 83.",
            "type": "number",
            "example": 1.722
          },
          "qf": {
            "format": "double",
            "description": "Average range spread of F layer in km. URSI ID: 84.",
            "type": "number",
            "example": 1.83
          },
          "qe": {
            "format": "double",
            "description": "Average range spread of E layer in km. URSI ID: 85.",
            "type": "number",
            "example": 0.95
          },
          "downF": {
            "format": "double",
            "description": "Lowering of F trace to the leading edge in km.",
            "type": "number",
            "example": 1.1
          },
          "downE": {
            "format": "double",
            "description": "Lowering of E trace to the leading edge in km.",
            "type": "number",
            "example": 1.1
          },
          "downEs": {
            "format": "double",
            "description": "Lowering of Es trace to the leading edge in km.",
            "type": "number",
            "example": 1.1
          },
          "ff": {
            "format": "double",
            "description": "Frequency spread between fxF2 and FxI in MHz. URSI ID: 86.",
            "type": "number",
            "example": 0.075
          },
          "fe": {
            "format": "double",
            "description": "Frequency spread beyond foE in MHz. URSI ID: 87.",
            "type": "number",
            "example": 1.23
          },
          "d": {
            "format": "double",
            "description": "Distance for MUF calculation in km.",
            "type": "number",
            "example": 1.1
          },
          "fmuf": {
            "format": "double",
            "description": "MUF/OblFactor in MHz.",
            "type": "number",
            "example": 1.1
          },
          "hprimefMUF": {
            "format": "double",
            "description": "Virtual height at MUF/OblFactor frequency in MHz.",
            "type": "number",
            "example": 1.1
          },
          "deltafoF2": {
            "format": "double",
            "description": "Adjustment to the scaled foF2 during profile inversion in MHz.",
            "type": "number",
            "example": 1.1
          },
          "foEp": {
            "format": "double",
            "description": "Predicted value of foE in MHz.",
            "type": "number",
            "example": 1.1
          },
          "fhprimeF": {
            "format": "double",
            "description": "The frequency at which hprimeF is measured in MHz. URSI ID: 61.",
            "type": "number",
            "example": 2.5
          },
          "fhprimeF2": {
            "format": "double",
            "description": "The frequency at which hprimeF2 is measured in MHz. URSI ID: 60.",
            "type": "number",
            "example": 2.5
          },
          "foF1p": {
            "format": "double",
            "description": "Predicted value of foF1 in MHz.",
            "type": "number",
            "example": 1.1
          },
          "foF2p": {
            "format": "double",
            "description": "Predicted value of foF2 in MHz.",
            "type": "number",
            "example": 1.1
          },
          "hmF2": {
            "format": "double",
            "description": "True height of the F2 peak in km. URSI ID: AE.",
            "type": "number",
            "example": 240.498
          },
          "hmF1": {
            "format": "double",
            "description": "True height of the F1 peak in km. URSI ID: BE.",
            "type": "number",
            "example": 230.128
          },
          "hmE": {
            "format": "double",
            "description": "True height of the E peak in km. URSI ID: CE.",
            "type": "number",
            "example": 215.643
          },
          "zhalfNm": {
            "format": "double",
            "description": "True height at half peak electron density in the F2 layer in km. URSI ID: 93.",
            "type": "number",
            "example": 240.498
          },
          "fminEs": {
            "format": "double",
            "description": "Minimum frequency of Es layer in MHz.",
            "type": "number",
            "example": 1.1
          },
          "yF2": {
            "format": "double",
            "description": "Parabolic F2 layer semi-thickness in km. URSI ID: 94.",
            "type": "number",
            "example": 62.178
          },
          "yF1": {
            "format": "double",
            "description": "Parabolic F1 layer semi-thickness in km. URSI ID: 95.",
            "type": "number",
            "example": 55.645
          },
          "tec": {
            "format": "double",
            "description": "Total Ionospheric Electron Content *10^16e/m^2. 1 TEC Unit (TECU) = 10^16 electrons/m^2. URSI ID: 72.",
            "type": "number",
            "example": 24.673
          },
          "scaleHeightF2Peak": {
            "format": "double",
            "description": "Effective scale height at hmF2 Titheridge method in km. URSI ID: 69.",
            "type": "number",
            "example": 35.613
          },
          "b0": {
            "format": "double",
            "description": "IRI thickness parameter in km. URSI ID: D0.",
            "type": "number",
            "example": 68.07
          },
          "b1": {
            "format": "double",
            "description": "IRI profile shape parameter. URSI ID: D1.",
            "type": "number",
            "example": 1.87
          },
          "d1": {
            "format": "double",
            "description": "IRI profile shape parameter, F1 layer. URSI ID: D2.",
            "type": "number",
            "example": 1.94
          },
          "foEa": {
            "format": "double",
            "description": "Critical frequency of night time auroral E layer in MHz. URSI ID: 23.",
            "type": "number",
            "example": 45.764
          },
          "hprimeEa": {
            "format": "double",
            "description": "Minimum virtual height of night time auroral E layer trace in km. URSI ID: 27.",
            "type": "number",
            "example": 102.6
          },
          "foP": {
            "format": "double",
            "description": "Highest ordinary wave critical frequency of F region patch trace in MHz. URSI ID: 55.",
            "type": "number",
            "example": 87.21
          },
          "hprimeP": {
            "format": "double",
            "description": "Minimum virtual height of the trace used to determine foP in km. URSI ID: 56.",
            "type": "number",
            "example": 89.45
          },
          "fbEs": {
            "format": "double",
            "description": "The blanketing frequency of layer used to derive foEs in MHz. URSI ID: 32.",
            "type": "number",
            "example": 34.867
          },
          "typeEs": {
            "description": "Characterization of the shape of Es trace. URSI ID: 36.",
            "maxLength": 25,
            "type": "string",
            "example": "Auroral"
          },
          "charAtts": {
            "description": "List of attributes that are associated with the specified characteristics. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. \nQualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IonoObservationCharAtts_Full"
            }
          },
          "height": {
            "description": "Array of altitudes above station level for plasma frequency/density arrays in km (must match the size of the plasmaFrequency and electronDensity Arrays).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "plasmaFrequency": {
            "description": "Array of plasma frequencies in MHz (must match the size of the height and electronDensity arrays).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "plasmaFrequencyUncertainty": {
            "description": "Uncertainty in specifying the electron plasma frequency at each height point of the profile (must match the size of the plasmaFrequency array).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.8,
              0.2,
              0.5
            ]
          },
          "electronDensity": {
            "description": "Array of electron densities in cm^-3 (must match the size of the height and plasmaFrequency arrays).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "electronDensityUncertainty": {
            "description": "Uncertainty in specifying the electron density at each height point of the profile (must match the size of the electronDensity array).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.8,
              0.2,
              0.5
            ]
          },
          "artistFlags": {
            "description": "Array of Legacy Artist Flags.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2,
              3
            ]
          },
          "traceGeneric": {
            "$ref": "#/components/schemas/IonoObservationTraceGeneric_Full"
          },
          "tidPhaseSpeeds": {
            "description": "Array of speed in m/s at which the disturbance travels through the ionosphere.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "tidAzimuth": {
            "description": "Array of degrees clockwise from true North of the TID.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "tidPeriods": {
            "description": "Array of 1/frequency of the TID wave.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "datum": {
            "$ref": "#/components/schemas/IonoObservationDatum_Full"
          },
          "platformName": {
            "description": "Equipment location.",
            "maxLength": 512,
            "type": "string",
            "example": "Millstone Hill"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "IonoObservation_Ingest": {
        "description": "These services provide operations for posting and querying ionospheric observation data. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.",
        "required": [
          "classificationMarking",
          "system",
          "stationId",
          "startTimeUTC",
          "systemInfo",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "IONOOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "system": {
            "description": "Ionosonde hardware type or data collection type together with possible additional descriptors.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Example hardware type"
          },
          "neProfileName": {
            "description": "Name of the algorithm used for the electron density profile.",
            "maxLength": 64,
            "type": "string",
            "example": "NH"
          },
          "neProfileVersion": {
            "format": "double",
            "description": "Version of the algorithm used for the electron density profile.",
            "minimum": 0,
            "type": "number",
            "example": 4.32
          },
          "scalerInfo": {
            "$ref": "#/components/schemas/IonoObservationScalerInfo_Ingest"
          },
          "densityProfile": {
            "$ref": "#/components/schemas/IonoObservationDensityProfile_Ingest"
          },
          "stationId": {
            "description": "URSI code for station or stations producing the ionosonde.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "STATION-ID"
          },
          "startTimeUTC": {
            "format": "date-time",
            "description": "Sounding Start time in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "systemInfo": {
            "description": "Names of settings.",
            "maxLength": 1024,
            "minLength": 1,
            "type": "string",
            "example": "Example settings"
          },
          "systemNotes": {
            "description": "Details concerning the composition/intention/interpretation/audience/etc. of any data recorded here. This field may contain all of the intended information e.g. info on signal waveforms used, antenna setup, etc. OR may describe the data/settings to be provided in the “data” field.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "transmitCoordinates": {
            "description": "List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                45.5,
                179.3,
                35.6
              ],
              [
                -80.2,
                -20.5,
                43.2
              ]
            ]
          },
          "transmitSensorType": {
            "description": "Enums: Mobile, Static.",
            "maxLength": 16,
            "enum": [
              "Mobile",
              "Static"
            ],
            "type": "string",
            "example": "Mobile"
          },
          "receiveCoordinates": {
            "description": "List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                45.5,
                179.3,
                35.6
              ],
              [
                -80.2,
                -20.5,
                43.2
              ]
            ]
          },
          "receiveSensorType": {
            "description": "Enums: Mobile, Static.",
            "maxLength": 16,
            "enum": [
              "Mobile",
              "Static"
            ],
            "type": "string",
            "example": "Mobile"
          },
          "antennaElementPosition": {
            "$ref": "#/components/schemas/IonoObservationAntennaElementPosition_Ingest"
          },
          "antennaElementPositionCoordinateSystem": {
            "description": "Enums: J2000, ECR/ECEF, TEME, GCRF, WGS84 (GEODetic lat, long, alt), GEOCentric (lat, long, radii).",
            "maxLength": 32,
            "enum": [
              "J2000",
              "ECR/ECEF",
              "TEME",
              "GCRF",
              "WGS84 (GEODetic lat, long, alt)",
              "GEOCentric (lat, long, radii)"
            ],
            "type": "string",
            "example": "J2000"
          },
          "power": {
            "$ref": "#/components/schemas/IonoObservationPower_Ingest"
          },
          "range": {
            "$ref": "#/components/schemas/IonoObservationRange_Ingest"
          },
          "frequency": {
            "$ref": "#/components/schemas/IonoObservationFrequency_Ingest"
          },
          "polarization": {
            "$ref": "#/components/schemas/IonoObservationPolarization_Ingest"
          },
          "azimuth": {
            "$ref": "#/components/schemas/IonoObservationAzimuth_Ingest"
          },
          "elevation": {
            "$ref": "#/components/schemas/IonoObservationElevation_Ingest"
          },
          "restrictedFrequency": {
            "description": "Array of restricted frequencies.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              12.5,
              34.5,
              45.3
            ]
          },
          "restrictedFrequencyNotes": {
            "description": "Notes for the restrictedFrequency data.",
            "maxLength": 512,
            "type": "string",
            "example": "Example notes"
          },
          "doppler": {
            "$ref": "#/components/schemas/IonoObservationDoppler_Ingest"
          },
          "time": {
            "$ref": "#/components/schemas/IonoObservationTime_Ingest"
          },
          "stokes": {
            "$ref": "#/components/schemas/IonoObservationStokes_Ingest"
          },
          "amplitude": {
            "$ref": "#/components/schemas/IonoObservationAmplitude_Ingest"
          },
          "phase": {
            "$ref": "#/components/schemas/IonoObservationPhase_Ingest"
          },
          "foF2": {
            "format": "double",
            "description": "The ordinary wave critical frequency of the highest stratification in the F region, specified in MHz. URSI ID: 00.",
            "type": "number",
            "example": 6.75
          },
          "foF1": {
            "format": "double",
            "description": "The ordinary wave F1 critical frequency, in MHz. URSI ID: 10.",
            "type": "number",
            "example": 8.2
          },
          "fxF2": {
            "format": "double",
            "description": "The extraordinary wave F2 critical frequency, in MHz. URSI ID: 01.",
            "type": "number",
            "example": 4.5
          },
          "fxF1": {
            "format": "double",
            "description": "The extraordinary wave F1 critical frequency, in MHz. URSI ID: 11.",
            "type": "number",
            "example": 4.2
          },
          "md": {
            "format": "double",
            "description": "MUF(D)/foF2.",
            "type": "number",
            "example": 1.1
          },
          "luf": {
            "format": "double",
            "description": "Lowest usable frequency.",
            "type": "number",
            "example": 1.1
          },
          "mufd": {
            "format": "double",
            "description": "Maximum Usable Frequency for ground distance D in MHz.",
            "type": "number",
            "example": 1.1
          },
          "fmin": {
            "format": "double",
            "description": "Lowest frequency at which echo traces are observed on the ionogram, in MHz. URSI ID: 42.",
            "type": "number",
            "example": 2.025
          },
          "foEs": {
            "format": "double",
            "description": "Highest ordinary wave frequency at which a mainly continuous Es trace is observed, in MHz. URSI ID: 30.",
            "type": "number",
            "example": 2.35
          },
          "fminF": {
            "format": "double",
            "description": "Minimum frequency of F layer echoes in MHz. URSI ID: 80.",
            "type": "number",
            "example": 2.7
          },
          "fminE": {
            "format": "double",
            "description": "Minimum frequency of E layer echoes in MHz. URSI ID: 81.",
            "type": "number",
            "example": 2.025
          },
          "foE": {
            "format": "double",
            "description": "The ordinary wave critical frequency of the lowest thick layer which causes a discontinuity, in MHz. URSI ID: 20.",
            "type": "number",
            "example": 1.1
          },
          "fxE": {
            "format": "double",
            "description": "The extraordinary wave E critical frequency, in MHz. URSI ID: 21.",
            "type": "number",
            "example": 1.1
          },
          "fxI": {
            "format": "double",
            "description": "The highest frequency of F-trace in MHz. Note: fxI is with capital i. URSI ID: 51.",
            "type": "number",
            "example": 7.525
          },
          "hprimeF": {
            "format": "double",
            "description": "The minimum virtual height of the ordinary wave trace taken as a whole, in km. URSI ID: 16.",
            "type": "number",
            "example": 238.5
          },
          "hprimeF2": {
            "format": "double",
            "description": "The minimum virtual height of ordinary wave trace for the highest stable stratification in the F region in km. URSI ID: 4.",
            "type": "number",
            "example": 238.5
          },
          "hprimeF1": {
            "format": "double",
            "description": "The minimum virtual height of reflection at a point where the trace is horizontal in the F region in km. URSI ID: 14.",
            "type": "number",
            "example": 230.1
          },
          "hprimeE": {
            "format": "double",
            "description": "The minimum virtual height of the normal E layer trace in km. URSI ID: 24.",
            "type": "number",
            "example": 98.47
          },
          "hprimeEs": {
            "format": "double",
            "description": "The minimum height of the trace used to give foEs in km. URSI ID: 34.",
            "type": "number",
            "example": 95
          },
          "zmE": {
            "format": "double",
            "description": "Peak height of E-layer in km. URSI ID: 90.",
            "type": "number",
            "example": 91.744
          },
          "yE": {
            "format": "double",
            "description": "Parabolic E layer semi-thickness in km. URSI ID: 83.",
            "type": "number",
            "example": 1.722
          },
          "qf": {
            "format": "double",
            "description": "Average range spread of F layer in km. URSI ID: 84.",
            "type": "number",
            "example": 1.83
          },
          "qe": {
            "format": "double",
            "description": "Average range spread of E layer in km. URSI ID: 85.",
            "type": "number",
            "example": 0.95
          },
          "downF": {
            "format": "double",
            "description": "Lowering of F trace to the leading edge in km.",
            "type": "number",
            "example": 1.1
          },
          "downE": {
            "format": "double",
            "description": "Lowering of E trace to the leading edge in km.",
            "type": "number",
            "example": 1.1
          },
          "downEs": {
            "format": "double",
            "description": "Lowering of Es trace to the leading edge in km.",
            "type": "number",
            "example": 1.1
          },
          "ff": {
            "format": "double",
            "description": "Frequency spread between fxF2 and FxI in MHz. URSI ID: 86.",
            "type": "number",
            "example": 0.075
          },
          "fe": {
            "format": "double",
            "description": "Frequency spread beyond foE in MHz. URSI ID: 87.",
            "type": "number",
            "example": 1.23
          },
          "d": {
            "format": "double",
            "description": "Distance for MUF calculation in km.",
            "type": "number",
            "example": 1.1
          },
          "fmuf": {
            "format": "double",
            "description": "MUF/OblFactor in MHz.",
            "type": "number",
            "example": 1.1
          },
          "hprimefMUF": {
            "format": "double",
            "description": "Virtual height at MUF/OblFactor frequency in MHz.",
            "type": "number",
            "example": 1.1
          },
          "deltafoF2": {
            "format": "double",
            "description": "Adjustment to the scaled foF2 during profile inversion in MHz.",
            "type": "number",
            "example": 1.1
          },
          "foEp": {
            "format": "double",
            "description": "Predicted value of foE in MHz.",
            "type": "number",
            "example": 1.1
          },
          "fhprimeF": {
            "format": "double",
            "description": "The frequency at which hprimeF is measured in MHz. URSI ID: 61.",
            "type": "number",
            "example": 2.5
          },
          "fhprimeF2": {
            "format": "double",
            "description": "The frequency at which hprimeF2 is measured in MHz. URSI ID: 60.",
            "type": "number",
            "example": 2.5
          },
          "foF1p": {
            "format": "double",
            "description": "Predicted value of foF1 in MHz.",
            "type": "number",
            "example": 1.1
          },
          "foF2p": {
            "format": "double",
            "description": "Predicted value of foF2 in MHz.",
            "type": "number",
            "example": 1.1
          },
          "hmF2": {
            "format": "double",
            "description": "True height of the F2 peak in km. URSI ID: AE.",
            "type": "number",
            "example": 240.498
          },
          "hmF1": {
            "format": "double",
            "description": "True height of the F1 peak in km. URSI ID: BE.",
            "type": "number",
            "example": 230.128
          },
          "hmE": {
            "format": "double",
            "description": "True height of the E peak in km. URSI ID: CE.",
            "type": "number",
            "example": 215.643
          },
          "zhalfNm": {
            "format": "double",
            "description": "True height at half peak electron density in the F2 layer in km. URSI ID: 93.",
            "type": "number",
            "example": 240.498
          },
          "fminEs": {
            "format": "double",
            "description": "Minimum frequency of Es layer in MHz.",
            "type": "number",
            "example": 1.1
          },
          "yF2": {
            "format": "double",
            "description": "Parabolic F2 layer semi-thickness in km. URSI ID: 94.",
            "type": "number",
            "example": 62.178
          },
          "yF1": {
            "format": "double",
            "description": "Parabolic F1 layer semi-thickness in km. URSI ID: 95.",
            "type": "number",
            "example": 55.645
          },
          "tec": {
            "format": "double",
            "description": "Total Ionospheric Electron Content *10^16e/m^2. 1 TEC Unit (TECU) = 10^16 electrons/m^2. URSI ID: 72.",
            "type": "number",
            "example": 24.673
          },
          "scaleHeightF2Peak": {
            "format": "double",
            "description": "Effective scale height at hmF2 Titheridge method in km. URSI ID: 69.",
            "type": "number",
            "example": 35.613
          },
          "b0": {
            "format": "double",
            "description": "IRI thickness parameter in km. URSI ID: D0.",
            "type": "number",
            "example": 68.07
          },
          "b1": {
            "format": "double",
            "description": "IRI profile shape parameter. URSI ID: D1.",
            "type": "number",
            "example": 1.87
          },
          "d1": {
            "format": "double",
            "description": "IRI profile shape parameter, F1 layer. URSI ID: D2.",
            "type": "number",
            "example": 1.94
          },
          "foEa": {
            "format": "double",
            "description": "Critical frequency of night time auroral E layer in MHz. URSI ID: 23.",
            "type": "number",
            "example": 45.764
          },
          "hprimeEa": {
            "format": "double",
            "description": "Minimum virtual height of night time auroral E layer trace in km. URSI ID: 27.",
            "type": "number",
            "example": 102.6
          },
          "foP": {
            "format": "double",
            "description": "Highest ordinary wave critical frequency of F region patch trace in MHz. URSI ID: 55.",
            "type": "number",
            "example": 87.21
          },
          "hprimeP": {
            "format": "double",
            "description": "Minimum virtual height of the trace used to determine foP in km. URSI ID: 56.",
            "type": "number",
            "example": 89.45
          },
          "fbEs": {
            "format": "double",
            "description": "The blanketing frequency of layer used to derive foEs in MHz. URSI ID: 32.",
            "type": "number",
            "example": 34.867
          },
          "typeEs": {
            "description": "Characterization of the shape of Es trace. URSI ID: 36.",
            "maxLength": 25,
            "type": "string",
            "example": "Auroral"
          },
          "charAtts": {
            "description": "List of attributes that are associated with the specified characteristics. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. \nQualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IonoObservationCharAtts_Ingest"
            }
          },
          "height": {
            "description": "Array of altitudes above station level for plasma frequency/density arrays in km (must match the size of the plasmaFrequency and electronDensity Arrays).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "plasmaFrequency": {
            "description": "Array of plasma frequencies in MHz (must match the size of the height and electronDensity arrays).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "plasmaFrequencyUncertainty": {
            "description": "Uncertainty in specifying the electron plasma frequency at each height point of the profile (must match the size of the plasmaFrequency array).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.8,
              0.2,
              0.5
            ]
          },
          "electronDensity": {
            "description": "Array of electron densities in cm^-3 (must match the size of the height and plasmaFrequency arrays).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "electronDensityUncertainty": {
            "description": "Uncertainty in specifying the electron density at each height point of the profile (must match the size of the electronDensity array).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.8,
              0.2,
              0.5
            ]
          },
          "artistFlags": {
            "description": "Array of Legacy Artist Flags.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2,
              3
            ]
          },
          "traceGeneric": {
            "$ref": "#/components/schemas/IonoObservationTraceGeneric_Ingest"
          },
          "tidPhaseSpeeds": {
            "description": "Array of speed in m/s at which the disturbance travels through the ionosphere.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "tidAzimuth": {
            "description": "Array of degrees clockwise from true North of the TID.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "tidPeriods": {
            "description": "Array of 1/frequency of the TID wave.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "datum": {
            "$ref": "#/components/schemas/IonoObservationDatum_Ingest"
          },
          "platformName": {
            "description": "Equipment location.",
            "maxLength": 512,
            "type": "string",
            "example": "Millstone Hill"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "IonoObservationAmplitude_Abridged": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the amplitude data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers for amplitude dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              4,
              5
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of amplitude data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationAmplitude_Full": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the amplitude data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers for amplitude dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              4,
              5
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of amplitude data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationAmplitude_Ingest": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the amplitude data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers for amplitude dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              4,
              5
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of amplitude data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationAntennaElementPosition_Abridged": {
        "type": "object",
        "properties": {
          "dimensions": {
            "description": "Array of integers of the antenna_element dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              3,
              4
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of 3-element tuples (x,y,z) in km.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.23,
                0.123
              ]
            ]
          }
        }
      },
      "IonoObservationAntennaElementPosition_Full": {
        "type": "object",
        "properties": {
          "dimensions": {
            "description": "Array of integers of the antenna_element dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              3,
              4
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of 3-element tuples (x,y,z) in km.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.23,
                0.123
              ]
            ]
          }
        }
      },
      "IonoObservationAntennaElementPosition_Ingest": {
        "type": "object",
        "properties": {
          "dimensions": {
            "description": "Array of integers of the antenna_element dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              3,
              4
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of 3-element tuples (x,y,z) in km.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.23,
                0.123
              ]
            ]
          }
        }
      },
      "IonoObservationAzimuth_Abridged": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the azimuth data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the azimuth array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of incoming azimuth at the receiver.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationAzimuth_Full": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the azimuth data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the azimuth array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of incoming azimuth at the receiver.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationAzimuth_Ingest": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the azimuth data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the azimuth array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of incoming azimuth at the receiver.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationCharAtts_Abridged": {
        "description": "Characteristic attributes of a IonoObservation.",
        "type": "object",
        "properties": {
          "ursiID": {
            "description": "Characteristic's URSI ID. See the characteristic's description for its corresponding URSI ID.",
            "maxLength": 3,
            "type": "string",
            "example": "04"
          },
          "charName": {
            "description": "Characteristic name. This value should reflect the UDL field name for the corresponding characteristic.",
            "maxLength": 16,
            "type": "string",
            "example": "hprimeF2"
          },
          "lowerBound": {
            "format": "double",
            "description": "Specified characteristic's lower bound. Should be less than or equal to the characteristic's current value as set in this record.",
            "type": "number",
            "example": 1.26
          },
          "upperBound": {
            "format": "double",
            "description": "Specified characteristic's upper bound. Should be greater than or equal to the characteristic's current value as set in this record.",
            "type": "number",
            "example": 2.57
          },
          "q": {
            "format": "char",
            "description": "Qualifying letter (Q) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.",
            "type": "string",
            "example": "T"
          },
          "d": {
            "format": "char",
            "description": "Descriptive letter (D) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.",
            "type": "string",
            "example": "K"
          },
          "climateModelName": {
            "description": "Name of the climate model.",
            "maxLength": 64,
            "type": "string",
            "example": "IRI"
          },
          "climateModelOptions": {
            "description": "List of options for the climate model.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "URSI-88",
              "No storm"
            ]
          },
          "climateModelInputParams": {
            "description": "Input parameters for the climate model.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ISSN1 88.1",
              "Option 2"
            ]
          },
          "uncertaintyBoundType": {
            "description": "Uncertainty Bounds (lower and upper) define an interval around reported value that contains true value at the specified probability level. Probability levels are specified in terms of percentile (from 1 to 100) or the standard deviation, sigma (e.g. 1sigma, 2sigma, 3sigma, 5percentile, 10percentile, 25percentile).",
            "type": "string",
            "example": "1sigma"
          }
        }
      },
      "IonoObservationCharAtts_Full": {
        "description": "Characteristic attributes of a IonoObservation.",
        "type": "object",
        "properties": {
          "ursiID": {
            "description": "Characteristic's URSI ID. See the characteristic's description for its corresponding URSI ID.",
            "maxLength": 3,
            "type": "string",
            "example": "04"
          },
          "charName": {
            "description": "Characteristic name. This value should reflect the UDL field name for the corresponding characteristic.",
            "maxLength": 16,
            "type": "string",
            "example": "hprimeF2"
          },
          "lowerBound": {
            "format": "double",
            "description": "Specified characteristic's lower bound. Should be less than or equal to the characteristic's current value as set in this record.",
            "type": "number",
            "example": 1.26
          },
          "upperBound": {
            "format": "double",
            "description": "Specified characteristic's upper bound. Should be greater than or equal to the characteristic's current value as set in this record.",
            "type": "number",
            "example": 2.57
          },
          "q": {
            "format": "char",
            "description": "Qualifying letter (Q) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.",
            "type": "string",
            "example": "T"
          },
          "d": {
            "format": "char",
            "description": "Descriptive letter (D) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.",
            "type": "string",
            "example": "K"
          },
          "climateModelName": {
            "description": "Name of the climate model.",
            "maxLength": 64,
            "type": "string",
            "example": "IRI"
          },
          "climateModelOptions": {
            "description": "List of options for the climate model.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "URSI-88",
              "No storm"
            ]
          },
          "climateModelInputParams": {
            "description": "Input parameters for the climate model.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ISSN1 88.1",
              "Option 2"
            ]
          },
          "uncertaintyBoundType": {
            "description": "Uncertainty Bounds (lower and upper) define an interval around reported value that contains true value at the specified probability level. Probability levels are specified in terms of percentile (from 1 to 100) or the standard deviation, sigma (e.g. 1sigma, 2sigma, 3sigma, 5percentile, 10percentile, 25percentile).",
            "type": "string",
            "example": "1sigma"
          }
        }
      },
      "IonoObservationCharAtts_Ingest": {
        "description": "Characteristic attributes of a IonoObservation.",
        "type": "object",
        "properties": {
          "ursiID": {
            "description": "Characteristic's URSI ID. See the characteristic's description for its corresponding URSI ID.",
            "maxLength": 3,
            "type": "string",
            "example": "04"
          },
          "charName": {
            "description": "Characteristic name. This value should reflect the UDL field name for the corresponding characteristic.",
            "maxLength": 16,
            "type": "string",
            "example": "hprimeF2"
          },
          "lowerBound": {
            "format": "double",
            "description": "Specified characteristic's lower bound. Should be less than or equal to the characteristic's current value as set in this record.",
            "type": "number",
            "example": 1.26
          },
          "upperBound": {
            "format": "double",
            "description": "Specified characteristic's upper bound. Should be greater than or equal to the characteristic's current value as set in this record.",
            "type": "number",
            "example": 2.57
          },
          "q": {
            "format": "char",
            "description": "Qualifying letter (Q) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.",
            "type": "string",
            "example": "T"
          },
          "d": {
            "format": "char",
            "description": "Descriptive letter (D) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.",
            "type": "string",
            "example": "K"
          },
          "climateModelName": {
            "description": "Name of the climate model.",
            "maxLength": 64,
            "type": "string",
            "example": "IRI"
          },
          "climateModelOptions": {
            "description": "List of options for the climate model.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "URSI-88",
              "No storm"
            ]
          },
          "climateModelInputParams": {
            "description": "Input parameters for the climate model.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ISSN1 88.1",
              "Option 2"
            ]
          },
          "uncertaintyBoundType": {
            "description": "Uncertainty Bounds (lower and upper) define an interval around reported value that contains true value at the specified probability level. Probability levels are specified in terms of percentile (from 1 to 100) or the standard deviation, sigma (e.g. 1sigma, 2sigma, 3sigma, 5percentile, 10percentile, 25percentile).",
            "type": "string",
            "example": "1sigma"
          }
        }
      },
      "IonoObservationDatum_Abridged": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the datum with details of what the data is, units, etc.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "data": {
            "description": "Array to support sparse data collections.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          }
        }
      },
      "IonoObservationDatum_Full": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the datum with details of what the data is, units, etc.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "data": {
            "description": "Array to support sparse data collections.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          }
        }
      },
      "IonoObservationDatum_Ingest": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the datum with details of what the data is, units, etc.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "data": {
            "description": "Array to support sparse data collections.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          }
        }
      },
      "IonoObservationDensityProfile_Abridged": {
        "description": "Profile of electron densities in the ionosphere associated with an IonoObservation.",
        "type": "object",
        "properties": {
          "parabolic": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileParabolic_Abridged"
          },
          "quasiParabolic": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileQuasiParabolic_Abridged"
          },
          "valleyModelDescription": {
            "description": "Description of the valley model and parameters.",
            "type": "string",
            "example": "2-parameter UMLCAR model with width W in km and depth D in MHz, no fitting."
          },
          "valleyModelCoeffs": {
            "description": "Array of valley model coefficients.",
            "maxItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              39.597,
              0.1777
            ]
          },
          "shiftedChebyshev": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileShiftedChebyshev_Abridged"
          },
          "topsideExtensionChapmanConst": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged"
          },
          "topsideExtensionVaryChap": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileTopsideExtensionVaryChap_Abridged"
          },
          "iri": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileIRI_Abridged"
          }
        }
      },
      "IonoObservationDensityProfile_Full": {
        "description": "Profile of electron densities in the ionosphere associated with an IonoObservation.",
        "type": "object",
        "properties": {
          "parabolic": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileParabolic_Full"
          },
          "quasiParabolic": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileQuasiParabolic_Full"
          },
          "valleyModelDescription": {
            "description": "Description of the valley model and parameters.",
            "type": "string",
            "example": "2-parameter UMLCAR model with width W in km and depth D in MHz, no fitting."
          },
          "valleyModelCoeffs": {
            "description": "Array of valley model coefficients.",
            "maxItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              39.597,
              0.1777
            ]
          },
          "shiftedChebyshev": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileShiftedChebyshev_Full"
          },
          "topsideExtensionChapmanConst": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileTopsideExtensionChapmanConst_Full"
          },
          "topsideExtensionVaryChap": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileTopsideExtensionVaryChap_Full"
          },
          "iri": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileIRI_Full"
          }
        }
      },
      "IonoObservationDensityProfile_Ingest": {
        "description": "Profile of electron densities in the ionosphere associated with an IonoObservation.",
        "type": "object",
        "properties": {
          "parabolic": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileParabolic_Ingest"
          },
          "quasiParabolic": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileQuasiParabolic_Ingest"
          },
          "valleyModelDescription": {
            "description": "Description of the valley model and parameters.",
            "type": "string",
            "example": "2-parameter UMLCAR model with width W in km and depth D in MHz, no fitting."
          },
          "valleyModelCoeffs": {
            "description": "Array of valley model coefficients.",
            "maxItems": 2,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              39.597,
              0.1777
            ]
          },
          "shiftedChebyshev": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileShiftedChebyshev_Ingest"
          },
          "topsideExtensionChapmanConst": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileTopsideExtensionChapmanConst_Ingest"
          },
          "topsideExtensionVaryChap": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileTopsideExtensionVaryChap_Ingest"
          },
          "iri": {
            "$ref": "#/components/schemas/IonoObservationDensityProfileIRI_Ingest"
          }
        }
      },
      "IonoObservationDensityProfileIRI_Abridged": {
        "description": "Full set of the IRI formalism coefficients.",
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of IRI implementation.",
            "type": "string",
            "example": "Full altitude range of 1D vertical plasma density profile for D, E, and F regions of the ionosphere provided by IRI, in which model parameters are replaced with observed ionogram-derived data where available."
          },
          "nmF2": {
            "format": "double",
            "description": "Peak density of F2 layer, in grams per cubic centimeter.",
            "type": "number",
            "example": 313283.1
          },
          "hmF2": {
            "format": "double",
            "description": "Peak height of F2 layer, in kilometers.",
            "type": "number",
            "example": 265.42
          },
          "b0": {
            "format": "double",
            "description": "B0 parameter of the F2 layer shape.",
            "type": "number",
            "example": 245.1
          },
          "b1": {
            "format": "double",
            "description": "B1 parameter of the F2 layer shape.",
            "type": "number",
            "example": 3.45
          },
          "nmF1": {
            "format": "double",
            "description": "Peak density of the F1 layer, in grams per cubic centimeter.",
            "type": "number",
            "example": 210486
          },
          "hmF1": {
            "format": "double",
            "description": "Peak height of the F1 layer, in kilometers.",
            "type": "number",
            "example": 210.3
          },
          "d1": {
            "format": "double",
            "description": "D1 parameter of the F1 layer shape.",
            "type": "number",
            "example": 0
          },
          "hz": {
            "format": "double",
            "description": "Height HZ of the interim layer, in kilometers.",
            "type": "number",
            "example": 142.7
          },
          "hValTop": {
            "format": "double",
            "description": "The valley height, in kilometers.",
            "type": "number",
            "example": 116.2
          },
          "nValB": {
            "format": "double",
            "description": "The valley depth, in grams per cubic centimeter.",
            "type": "number",
            "example": 147025.1
          },
          "nmE": {
            "format": "double",
            "description": "Peak density of the E layer, in per cubic centimeter.",
            "type": "number",
            "example": 154164.1
          },
          "hmE": {
            "format": "double",
            "description": "Peak height of the F2 layer, in kilometers.",
            "type": "number",
            "example": 99.8
          },
          "hdx": {
            "format": "double",
            "description": "Height of the intermediate region at the top of D region, in kilometers.",
            "type": "number",
            "example": 85.6
          },
          "nmD": {
            "format": "double",
            "description": "Peak density of the D layer, in per cubic centimeter.",
            "type": "number",
            "example": 937543116.1
          },
          "hmD": {
            "format": "double",
            "description": "Peak height of the D layer, in kilometers.",
            "type": "number",
            "example": 81.1
          },
          "ha": {
            "format": "double",
            "description": "Starting height of the D layer, in kilometers.",
            "type": "number",
            "example": 50.1
          },
          "fp1": {
            "format": "double",
            "description": "TBD.",
            "type": "number",
            "example": 0.0474732023322638
          },
          "fp2": {
            "format": "double",
            "description": "TBD.",
            "type": "number",
            "example": -0.00112685246984002
          },
          "fp30": {
            "format": "double",
            "description": "TBD.",
            "type": "number",
            "example": 0.00827559450035957
          },
          "fp3U": {
            "format": "double",
            "description": "TBD.",
            "type": "number",
            "example": 0.000201178475411428
          },
          "chi": {
            "format": "double",
            "description": "Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.",
            "type": "number",
            "example": 35.1
          }
        }
      },
      "IonoObservationDensityProfileIRI_Full": {
        "description": "Full set of the IRI formalism coefficients.",
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of IRI implementation.",
            "type": "string",
            "example": "Full altitude range of 1D vertical plasma density profile for D, E, and F regions of the ionosphere provided by IRI, in which model parameters are replaced with observed ionogram-derived data where available."
          },
          "nmF2": {
            "format": "double",
            "description": "Peak density of F2 layer, in grams per cubic centimeter.",
            "type": "number",
            "example": 313283.1
          },
          "hmF2": {
            "format": "double",
            "description": "Peak height of F2 layer, in kilometers.",
            "type": "number",
            "example": 265.42
          },
          "b0": {
            "format": "double",
            "description": "B0 parameter of the F2 layer shape.",
            "type": "number",
            "example": 245.1
          },
          "b1": {
            "format": "double",
            "description": "B1 parameter of the F2 layer shape.",
            "type": "number",
            "example": 3.45
          },
          "nmF1": {
            "format": "double",
            "description": "Peak density of the F1 layer, in grams per cubic centimeter.",
            "type": "number",
            "example": 210486
          },
          "hmF1": {
            "format": "double",
            "description": "Peak height of the F1 layer, in kilometers.",
            "type": "number",
            "example": 210.3
          },
          "d1": {
            "format": "double",
            "description": "D1 parameter of the F1 layer shape.",
            "type": "number",
            "example": 0
          },
          "hz": {
            "format": "double",
            "description": "Height HZ of the interim layer, in kilometers.",
            "type": "number",
            "example": 142.7
          },
          "hValTop": {
            "format": "double",
            "description": "The valley height, in kilometers.",
            "type": "number",
            "example": 116.2
          },
          "nValB": {
            "format": "double",
            "description": "The valley depth, in grams per cubic centimeter.",
            "type": "number",
            "example": 147025.1
          },
          "nmE": {
            "format": "double",
            "description": "Peak density of the E layer, in per cubic centimeter.",
            "type": "number",
            "example": 154164.1
          },
          "hmE": {
            "format": "double",
            "description": "Peak height of the F2 layer, in kilometers.",
            "type": "number",
            "example": 99.8
          },
          "hdx": {
            "format": "double",
            "description": "Height of the intermediate region at the top of D region, in kilometers.",
            "type": "number",
            "example": 85.6
          },
          "nmD": {
            "format": "double",
            "description": "Peak density of the D layer, in per cubic centimeter.",
            "type": "number",
            "example": 937543116.1
          },
          "hmD": {
            "format": "double",
            "description": "Peak height of the D layer, in kilometers.",
            "type": "number",
            "example": 81.1
          },
          "ha": {
            "format": "double",
            "description": "Starting height of the D layer, in kilometers.",
            "type": "number",
            "example": 50.1
          },
          "fp1": {
            "format": "double",
            "description": "TBD.",
            "type": "number",
            "example": 0.0474732023322638
          },
          "fp2": {
            "format": "double",
            "description": "TBD.",
            "type": "number",
            "example": -0.00112685246984002
          },
          "fp30": {
            "format": "double",
            "description": "TBD.",
            "type": "number",
            "example": 0.00827559450035957
          },
          "fp3U": {
            "format": "double",
            "description": "TBD.",
            "type": "number",
            "example": 0.000201178475411428
          },
          "chi": {
            "format": "double",
            "description": "Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.",
            "type": "number",
            "example": 35.1
          }
        }
      },
      "IonoObservationDensityProfileIRI_Ingest": {
        "description": "Full set of the IRI formalism coefficients.",
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of IRI implementation.",
            "type": "string",
            "example": "Full altitude range of 1D vertical plasma density profile for D, E, and F regions of the ionosphere provided by IRI, in which model parameters are replaced with observed ionogram-derived data where available."
          },
          "nmF2": {
            "format": "double",
            "description": "Peak density of F2 layer, in grams per cubic centimeter.",
            "type": "number",
            "example": 313283.1
          },
          "hmF2": {
            "format": "double",
            "description": "Peak height of F2 layer, in kilometers.",
            "type": "number",
            "example": 265.42
          },
          "b0": {
            "format": "double",
            "description": "B0 parameter of the F2 layer shape.",
            "type": "number",
            "example": 245.1
          },
          "b1": {
            "format": "double",
            "description": "B1 parameter of the F2 layer shape.",
            "type": "number",
            "example": 3.45
          },
          "nmF1": {
            "format": "double",
            "description": "Peak density of the F1 layer, in grams per cubic centimeter.",
            "type": "number",
            "example": 210486
          },
          "hmF1": {
            "format": "double",
            "description": "Peak height of the F1 layer, in kilometers.",
            "type": "number",
            "example": 210.3
          },
          "d1": {
            "format": "double",
            "description": "D1 parameter of the F1 layer shape.",
            "type": "number",
            "example": 0
          },
          "hz": {
            "format": "double",
            "description": "Height HZ of the interim layer, in kilometers.",
            "type": "number",
            "example": 142.7
          },
          "hValTop": {
            "format": "double",
            "description": "The valley height, in kilometers.",
            "type": "number",
            "example": 116.2
          },
          "nValB": {
            "format": "double",
            "description": "The valley depth, in grams per cubic centimeter.",
            "type": "number",
            "example": 147025.1
          },
          "nmE": {
            "format": "double",
            "description": "Peak density of the E layer, in per cubic centimeter.",
            "type": "number",
            "example": 154164.1
          },
          "hmE": {
            "format": "double",
            "description": "Peak height of the F2 layer, in kilometers.",
            "type": "number",
            "example": 99.8
          },
          "hdx": {
            "format": "double",
            "description": "Height of the intermediate region at the top of D region, in kilometers.",
            "type": "number",
            "example": 85.6
          },
          "nmD": {
            "format": "double",
            "description": "Peak density of the D layer, in per cubic centimeter.",
            "type": "number",
            "example": 937543116.1
          },
          "hmD": {
            "format": "double",
            "description": "Peak height of the D layer, in kilometers.",
            "type": "number",
            "example": 81.1
          },
          "ha": {
            "format": "double",
            "description": "Starting height of the D layer, in kilometers.",
            "type": "number",
            "example": 50.1
          },
          "fp1": {
            "format": "double",
            "description": "TBD.",
            "type": "number",
            "example": 0.0474732023322638
          },
          "fp2": {
            "format": "double",
            "description": "TBD.",
            "type": "number",
            "example": -0.00112685246984002
          },
          "fp30": {
            "format": "double",
            "description": "TBD.",
            "type": "number",
            "example": 0.00827559450035957
          },
          "fp3U": {
            "format": "double",
            "description": "TBD.",
            "type": "number",
            "example": 0.000201178475411428
          },
          "chi": {
            "format": "double",
            "description": "Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.",
            "type": "number",
            "example": 35.1
          }
        }
      },
      "IonoObservationDensityProfileParabolic_Abridged": {
        "description": "Coefficients to describe the E, F1, and F2 layers as parabolic-shape segments.",
        "type": "object",
        "properties": {
          "description": {
            "description": "General description of the QP computation algorithm.",
            "type": "string",
            "example": "Best-fit algorithm in NHPC software."
          },
          "parabolicItems": {
            "description": "Describes the E, F1, and F2 layers as parabolic-shape segments.",
            "maxItems": 3,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IonoObservationDensityProfileParabolicItem_Abridged"
            }
          }
        }
      },
      "IonoObservationDensityProfileParabolic_Full": {
        "description": "Coefficients to describe the E, F1, and F2 layers as parabolic-shape segments.",
        "type": "object",
        "properties": {
          "description": {
            "description": "General description of the QP computation algorithm.",
            "type": "string",
            "example": "Best-fit algorithm in NHPC software."
          },
          "parabolicItems": {
            "description": "Describes the E, F1, and F2 layers as parabolic-shape segments.",
            "maxItems": 3,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IonoObservationDensityProfileParabolicItem_Full"
            }
          }
        }
      },
      "IonoObservationDensityProfileParabolic_Ingest": {
        "description": "Coefficients to describe the E, F1, and F2 layers as parabolic-shape segments.",
        "type": "object",
        "properties": {
          "description": {
            "description": "General description of the QP computation algorithm.",
            "type": "string",
            "example": "Best-fit algorithm in NHPC software."
          },
          "parabolicItems": {
            "description": "Describes the E, F1, and F2 layers as parabolic-shape segments.",
            "maxItems": 3,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IonoObservationDensityProfileParabolicItem_Ingest"
            }
          }
        }
      },
      "IonoObservationDensityProfileParabolicItem_Abridged": {
        "description": "Describes the E, F1, and F2 layers as parabolic-shape segments.",
        "type": "object",
        "properties": {
          "layer": {
            "description": "Ionospheric plasma layer (E, F1, or F2).",
            "type": "string",
            "example": "E"
          },
          "f": {
            "format": "double",
            "description": "Plasma frequency at the layer peak, in MHz.",
            "type": "number",
            "example": 3.621
          },
          "z": {
            "format": "double",
            "description": "Height of the layer peak, in kilometers.",
            "type": "number",
            "example": 110.2
          },
          "y": {
            "format": "double",
            "description": "Half-thickness of the layer, in kilometers.",
            "type": "number",
            "example": 11.1
          }
        }
      },
      "IonoObservationDensityProfileParabolicItem_Full": {
        "description": "Describes the E, F1, and F2 layers as parabolic-shape segments.",
        "type": "object",
        "properties": {
          "layer": {
            "description": "Ionospheric plasma layer (E, F1, or F2).",
            "type": "string",
            "example": "E"
          },
          "f": {
            "format": "double",
            "description": "Plasma frequency at the layer peak, in MHz.",
            "type": "number",
            "example": 3.621
          },
          "z": {
            "format": "double",
            "description": "Height of the layer peak, in kilometers.",
            "type": "number",
            "example": 110.2
          },
          "y": {
            "format": "double",
            "description": "Half-thickness of the layer, in kilometers.",
            "type": "number",
            "example": 11.1
          }
        }
      },
      "IonoObservationDensityProfileParabolicItem_Ingest": {
        "description": "Describes the E, F1, and F2 layers as parabolic-shape segments.",
        "type": "object",
        "properties": {
          "layer": {
            "description": "Ionospheric plasma layer (E, F1, or F2).",
            "type": "string",
            "example": "E"
          },
          "f": {
            "format": "double",
            "description": "Plasma frequency at the layer peak, in MHz.",
            "type": "number",
            "example": 3.621
          },
          "z": {
            "format": "double",
            "description": "Height of the layer peak, in kilometers.",
            "type": "number",
            "example": 110.2
          },
          "y": {
            "format": "double",
            "description": "Half-thickness of the layer, in kilometers.",
            "type": "number",
            "example": 11.1
          }
        }
      },
      "IonoObservationDensityProfileQuasiParabolic_Abridged": {
        "description": "Coefficients to describe profile shape as quasi-parabolic segments.",
        "type": "object",
        "properties": {
          "description": {
            "description": "General description of the quasi-parabolic computation algorithm.",
            "type": "string",
            "example": "Array of the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C"
          },
          "earthRadius": {
            "format": "double",
            "description": "Value of the Earth's radius, in kilometers, used for computations.",
            "type": "number",
            "example": 6370.1
          },
          "quasiParabolicSegments": {
            "description": "Array of quasi-parabolic segments. Each segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C”. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IonoObservationDensityProfileQuasiParabolicSegment_Abridged"
            }
          }
        }
      },
      "IonoObservationDensityProfileQuasiParabolic_Full": {
        "description": "Coefficients to describe profile shape as quasi-parabolic segments.",
        "type": "object",
        "properties": {
          "description": {
            "description": "General description of the quasi-parabolic computation algorithm.",
            "type": "string",
            "example": "Array of the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C"
          },
          "earthRadius": {
            "format": "double",
            "description": "Value of the Earth's radius, in kilometers, used for computations.",
            "type": "number",
            "example": 6370.1
          },
          "quasiParabolicSegments": {
            "description": "Array of quasi-parabolic segments. Each segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C”. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IonoObservationDensityProfileQuasiParabolicSegment_Full"
            }
          }
        }
      },
      "IonoObservationDensityProfileQuasiParabolic_Ingest": {
        "description": "Coefficients to describe profile shape as quasi-parabolic segments.",
        "type": "object",
        "properties": {
          "description": {
            "description": "General description of the quasi-parabolic computation algorithm.",
            "type": "string",
            "example": "Array of the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C"
          },
          "earthRadius": {
            "format": "double",
            "description": "Value of the Earth's radius, in kilometers, used for computations.",
            "type": "number",
            "example": 6370.1
          },
          "quasiParabolicSegments": {
            "description": "Array of quasi-parabolic segments. Each segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C”. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IonoObservationDensityProfileQuasiParabolicSegment_Ingest"
            }
          }
        }
      },
      "IonoObservationDensityProfileQuasiParabolicSegment_Abridged": {
        "description": "A quasi-parabolic segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C”. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.",
        "type": "object",
        "properties": {
          "index": {
            "format": "int32",
            "description": "The index of this segment in the list, from 1 to NumSegments.",
            "type": "integer",
            "example": 12
          },
          "rb": {
            "format": "double",
            "description": "Starting range of the segment, in kilometers from the Earth's center.",
            "type": "number",
            "example": 6460.1
          },
          "re": {
            "format": "double",
            "description": "Ending range of the segment, in kilometers from the Earth's center.",
            "type": "number",
            "example": 6480.001
          },
          "a": {
            "format": "double",
            "description": "Coefficient A.",
            "type": "number",
            "example": -550273940000
          },
          "b": {
            "format": "double",
            "description": "Coefficient B.",
            "type": "number",
            "example": 169837632
          },
          "c": {
            "format": "double",
            "description": "Coefficient C.",
            "type": "number",
            "example": 13104.63
          },
          "error": {
            "format": "double",
            "description": "Best-fit error.",
            "type": "number",
            "example": 0.0016
          }
        }
      },
      "IonoObservationDensityProfileQuasiParabolicSegment_Full": {
        "description": "A quasi-parabolic segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C”. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.",
        "type": "object",
        "properties": {
          "index": {
            "format": "int32",
            "description": "The index of this segment in the list, from 1 to NumSegments.",
            "type": "integer",
            "example": 12
          },
          "rb": {
            "format": "double",
            "description": "Starting range of the segment, in kilometers from the Earth's center.",
            "type": "number",
            "example": 6460.1
          },
          "re": {
            "format": "double",
            "description": "Ending range of the segment, in kilometers from the Earth's center.",
            "type": "number",
            "example": 6480.001
          },
          "a": {
            "format": "double",
            "description": "Coefficient A.",
            "type": "number",
            "example": -550273940000
          },
          "b": {
            "format": "double",
            "description": "Coefficient B.",
            "type": "number",
            "example": 169837632
          },
          "c": {
            "format": "double",
            "description": "Coefficient C.",
            "type": "number",
            "example": 13104.63
          },
          "error": {
            "format": "double",
            "description": "Best-fit error.",
            "type": "number",
            "example": 0.0016
          }
        }
      },
      "IonoObservationDensityProfileQuasiParabolicSegment_Ingest": {
        "description": "A quasi-parabolic segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C”. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.",
        "type": "object",
        "properties": {
          "index": {
            "format": "int32",
            "description": "The index of this segment in the list, from 1 to NumSegments.",
            "type": "integer",
            "example": 12
          },
          "rb": {
            "format": "double",
            "description": "Starting range of the segment, in kilometers from the Earth's center.",
            "type": "number",
            "example": 6460.1
          },
          "re": {
            "format": "double",
            "description": "Ending range of the segment, in kilometers from the Earth's center.",
            "type": "number",
            "example": 6480.001
          },
          "a": {
            "format": "double",
            "description": "Coefficient A.",
            "type": "number",
            "example": -550273940000
          },
          "b": {
            "format": "double",
            "description": "Coefficient B.",
            "type": "number",
            "example": 169837632
          },
          "c": {
            "format": "double",
            "description": "Coefficient C.",
            "type": "number",
            "example": 13104.63
          },
          "error": {
            "format": "double",
            "description": "Best-fit error.",
            "type": "number",
            "example": 0.0016
          }
        }
      },
      "IonoObservationDensityProfileShiftedChebyshev_Abridged": {
        "description": "Coefficients to describe either the E, F1, and bottomside F2 profile shapes or the height uncertainty boundaries.",
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of the computation technique.",
            "type": "string",
            "example": "Best-fit Huang-Reinisch formalism based on shifted Chebyshev expansion."
          },
          "shiftedChebyshevs": {
            "description": "Up to 3 groups of coefficients, using “shiftedChebyshev” sub-field, to describe E, F1, and bottomside F2 profile shapes, or up to 6 groups of coefficients to describe height uncertainty boundaries (upper and lower).",
            "maxItems": 6,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IonoObservationDensityProfileShiftedChebyshevEntry_Abridged"
            }
          }
        }
      },
      "IonoObservationDensityProfileShiftedChebyshev_Full": {
        "description": "Coefficients to describe either the E, F1, and bottomside F2 profile shapes or the height uncertainty boundaries.",
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of the computation technique.",
            "type": "string",
            "example": "Best-fit Huang-Reinisch formalism based on shifted Chebyshev expansion."
          },
          "shiftedChebyshevs": {
            "description": "Up to 3 groups of coefficients, using “shiftedChebyshev” sub-field, to describe E, F1, and bottomside F2 profile shapes, or up to 6 groups of coefficients to describe height uncertainty boundaries (upper and lower).",
            "maxItems": 6,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IonoObservationDensityProfileShiftedChebyshevEntry_Full"
            }
          }
        }
      },
      "IonoObservationDensityProfileShiftedChebyshev_Ingest": {
        "description": "Coefficients to describe either the E, F1, and bottomside F2 profile shapes or the height uncertainty boundaries.",
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of the computation technique.",
            "type": "string",
            "example": "Best-fit Huang-Reinisch formalism based on shifted Chebyshev expansion."
          },
          "shiftedChebyshevs": {
            "description": "Up to 3 groups of coefficients, using “shiftedChebyshev” sub-field, to describe E, F1, and bottomside F2 profile shapes, or up to 6 groups of coefficients to describe height uncertainty boundaries (upper and lower).",
            "maxItems": 6,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IonoObservationDensityProfileShiftedChebyshevEntry_Ingest"
            }
          }
        }
      },
      "IonoObservationDensityProfileShiftedChebyshevEntry_Abridged": {
        "description": "Coefficients, using ‘shiftedChebyshev’ sub-field, to describe E, F1, and bottomside F2 profile shapes, or height uncertainty boundaries (upper and lower).",
        "type": "object",
        "properties": {
          "layer": {
            "description": "The ionospheric plasma layer.",
            "type": "string",
            "example": "F2"
          },
          "fstart": {
            "format": "double",
            "description": "Start frequency of the layer, in MHz.",
            "type": "number",
            "example": 0.2
          },
          "fstop": {
            "format": "double",
            "description": "Stop frequency of the layer, in MHz.",
            "type": "number",
            "example": 1.39
          },
          "peakheight": {
            "format": "double",
            "description": "Peak height of the layer, in kilometers.",
            "type": "number",
            "example": 110.1
          },
          "zhalfNm": {
            "format": "double",
            "description": "Height at which density is half of the peak Nm, in kilometers.",
            "type": "number",
            "example": 210.1
          },
          "n": {
            "format": "int32",
            "description": "Number of coefficients in the expansion.",
            "type": "integer",
            "example": 5
          },
          "coeffs": {
            "description": "Array of coefficients.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -11.2,
              -10.536,
              3.357,
              -0.888,
              0.155
            ]
          },
          "error": {
            "format": "double",
            "description": "Best fit error.",
            "type": "number",
            "example": 0.02
          }
        }
      },
      "IonoObservationDensityProfileShiftedChebyshevEntry_Full": {
        "description": "Coefficients, using ‘shiftedChebyshev’ sub-field, to describe E, F1, and bottomside F2 profile shapes, or height uncertainty boundaries (upper and lower).",
        "type": "object",
        "properties": {
          "layer": {
            "description": "The ionospheric plasma layer.",
            "type": "string",
            "example": "F2"
          },
          "fstart": {
            "format": "double",
            "description": "Start frequency of the layer, in MHz.",
            "type": "number",
            "example": 0.2
          },
          "fstop": {
            "format": "double",
            "description": "Stop frequency of the layer, in MHz.",
            "type": "number",
            "example": 1.39
          },
          "peakheight": {
            "format": "double",
            "description": "Peak height of the layer, in kilometers.",
            "type": "number",
            "example": 110.1
          },
          "zhalfNm": {
            "format": "double",
            "description": "Height at which density is half of the peak Nm, in kilometers.",
            "type": "number",
            "example": 210.1
          },
          "n": {
            "format": "int32",
            "description": "Number of coefficients in the expansion.",
            "type": "integer",
            "example": 5
          },
          "coeffs": {
            "description": "Array of coefficients.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -11.2,
              -10.536,
              3.357,
              -0.888,
              0.155
            ]
          },
          "error": {
            "format": "double",
            "description": "Best fit error.",
            "type": "number",
            "example": 0.02
          }
        }
      },
      "IonoObservationDensityProfileShiftedChebyshevEntry_Ingest": {
        "description": "Coefficients, using ‘shiftedChebyshev’ sub-field, to describe E, F1, and bottomside F2 profile shapes, or height uncertainty boundaries (upper and lower).",
        "type": "object",
        "properties": {
          "layer": {
            "description": "The ionospheric plasma layer.",
            "type": "string",
            "example": "F2"
          },
          "fstart": {
            "format": "double",
            "description": "Start frequency of the layer, in MHz.",
            "type": "number",
            "example": 0.2
          },
          "fstop": {
            "format": "double",
            "description": "Stop frequency of the layer, in MHz.",
            "type": "number",
            "example": 1.39
          },
          "peakheight": {
            "format": "double",
            "description": "Peak height of the layer, in kilometers.",
            "type": "number",
            "example": 110.1
          },
          "zhalfNm": {
            "format": "double",
            "description": "Height at which density is half of the peak Nm, in kilometers.",
            "type": "number",
            "example": 210.1
          },
          "n": {
            "format": "int32",
            "description": "Number of coefficients in the expansion.",
            "type": "integer",
            "example": 5
          },
          "coeffs": {
            "description": "Array of coefficients.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -11.2,
              -10.536,
              3.357,
              -0.888,
              0.155
            ]
          },
          "error": {
            "format": "double",
            "description": "Best fit error.",
            "type": "number",
            "example": 0.02
          }
        }
      },
      "IonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged": {
        "description": "Parameters of the constant-scale-height Chapman layer.",
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of the Chapman computation technique.",
            "type": "string",
            "example": "Constant scale height Chapman topside layer determined using bottomside peak density parameters and placed chi km above the ionosonde-determined peak height."
          },
          "nmF2": {
            "format": "double",
            "description": "Peak density of F2 layer, in grams per cubic centimeter.",
            "type": "number",
            "example": 313283.1
          },
          "hmF2": {
            "format": "double",
            "description": "Peak height of F2 layer, in kilometers.",
            "type": "number",
            "example": 265.42
          },
          "scaleF2": {
            "format": "double",
            "description": "Scale height if F2 layer at the peak, in kilometers.",
            "type": "number",
            "example": 45.191
          },
          "chi": {
            "format": "double",
            "description": "Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.",
            "type": "number",
            "example": 35.1
          }
        }
      },
      "IonoObservationDensityProfileTopsideExtensionChapmanConst_Full": {
        "description": "Parameters of the constant-scale-height Chapman layer.",
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of the Chapman computation technique.",
            "type": "string",
            "example": "Constant scale height Chapman topside layer determined using bottomside peak density parameters and placed chi km above the ionosonde-determined peak height."
          },
          "nmF2": {
            "format": "double",
            "description": "Peak density of F2 layer, in grams per cubic centimeter.",
            "type": "number",
            "example": 313283.1
          },
          "hmF2": {
            "format": "double",
            "description": "Peak height of F2 layer, in kilometers.",
            "type": "number",
            "example": 265.42
          },
          "scaleF2": {
            "format": "double",
            "description": "Scale height if F2 layer at the peak, in kilometers.",
            "type": "number",
            "example": 45.191
          },
          "chi": {
            "format": "double",
            "description": "Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.",
            "type": "number",
            "example": 35.1
          }
        }
      },
      "IonoObservationDensityProfileTopsideExtensionChapmanConst_Ingest": {
        "description": "Parameters of the constant-scale-height Chapman layer.",
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of the Chapman computation technique.",
            "type": "string",
            "example": "Constant scale height Chapman topside layer determined using bottomside peak density parameters and placed chi km above the ionosonde-determined peak height."
          },
          "nmF2": {
            "format": "double",
            "description": "Peak density of F2 layer, in grams per cubic centimeter.",
            "type": "number",
            "example": 313283.1
          },
          "hmF2": {
            "format": "double",
            "description": "Peak height of F2 layer, in kilometers.",
            "type": "number",
            "example": 265.42
          },
          "scaleF2": {
            "format": "double",
            "description": "Scale height if F2 layer at the peak, in kilometers.",
            "type": "number",
            "example": 45.191
          },
          "chi": {
            "format": "double",
            "description": "Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.",
            "type": "number",
            "example": 35.1
          }
        }
      },
      "IonoObservationDensityProfileTopsideExtensionVaryChap_Abridged": {
        "description": "Varying scale height Chapman topside layer.",
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of the Chapman computation technique.",
            "type": "string",
            "example": "Constant scale height Chapman topside layer determined using bottomside peak density parameters and placed chi km above the ionosonde-determined peak height."
          },
          "nmF2": {
            "format": "double",
            "description": "Peak density of F2 layer, in grams per cubic centimeter.",
            "type": "number",
            "example": 313283.1
          },
          "hmF2": {
            "format": "double",
            "description": "Peak height of F2 layer, in kilometers.",
            "type": "number",
            "example": 265.42
          },
          "scaleF2": {
            "format": "double",
            "description": "Scale height if F2 layer at the peak, in kilometers.",
            "type": "number",
            "example": 45.191
          },
          "alpha": {
            "format": "double",
            "description": "Alpha parameter of the profile shape.",
            "type": "number",
            "example": 30.1
          },
          "beta": {
            "format": "double",
            "description": "Beta parameter of the profile shape.",
            "type": "number",
            "example": 30.1
          },
          "ht": {
            "format": "double",
            "description": "Transition height, in  kilometers.",
            "type": "number",
            "example": 30.1
          },
          "chi": {
            "format": "double",
            "description": "Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.",
            "type": "number",
            "example": 30.1
          }
        }
      },
      "IonoObservationDensityProfileTopsideExtensionVaryChap_Full": {
        "description": "Varying scale height Chapman topside layer.",
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of the Chapman computation technique.",
            "type": "string",
            "example": "Constant scale height Chapman topside layer determined using bottomside peak density parameters and placed chi km above the ionosonde-determined peak height."
          },
          "nmF2": {
            "format": "double",
            "description": "Peak density of F2 layer, in grams per cubic centimeter.",
            "type": "number",
            "example": 313283.1
          },
          "hmF2": {
            "format": "double",
            "description": "Peak height of F2 layer, in kilometers.",
            "type": "number",
            "example": 265.42
          },
          "scaleF2": {
            "format": "double",
            "description": "Scale height if F2 layer at the peak, in kilometers.",
            "type": "number",
            "example": 45.191
          },
          "alpha": {
            "format": "double",
            "description": "Alpha parameter of the profile shape.",
            "type": "number",
            "example": 30.1
          },
          "beta": {
            "format": "double",
            "description": "Beta parameter of the profile shape.",
            "type": "number",
            "example": 30.1
          },
          "ht": {
            "format": "double",
            "description": "Transition height, in  kilometers.",
            "type": "number",
            "example": 30.1
          },
          "chi": {
            "format": "double",
            "description": "Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.",
            "type": "number",
            "example": 30.1
          }
        }
      },
      "IonoObservationDensityProfileTopsideExtensionVaryChap_Ingest": {
        "description": "Varying scale height Chapman topside layer.",
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of the Chapman computation technique.",
            "type": "string",
            "example": "Constant scale height Chapman topside layer determined using bottomside peak density parameters and placed chi km above the ionosonde-determined peak height."
          },
          "nmF2": {
            "format": "double",
            "description": "Peak density of F2 layer, in grams per cubic centimeter.",
            "type": "number",
            "example": 313283.1
          },
          "hmF2": {
            "format": "double",
            "description": "Peak height of F2 layer, in kilometers.",
            "type": "number",
            "example": 265.42
          },
          "scaleF2": {
            "format": "double",
            "description": "Scale height if F2 layer at the peak, in kilometers.",
            "type": "number",
            "example": 45.191
          },
          "alpha": {
            "format": "double",
            "description": "Alpha parameter of the profile shape.",
            "type": "number",
            "example": 30.1
          },
          "beta": {
            "format": "double",
            "description": "Beta parameter of the profile shape.",
            "type": "number",
            "example": 30.1
          },
          "ht": {
            "format": "double",
            "description": "Transition height, in  kilometers.",
            "type": "number",
            "example": 30.1
          },
          "chi": {
            "format": "double",
            "description": "Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.",
            "type": "number",
            "example": 30.1
          }
        }
      },
      "IonoObservationDoppler_Abridged": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the doppler data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the doppler array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of received doppler shifts in Hz.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationDoppler_Full": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the doppler data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the doppler array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of received doppler shifts in Hz.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationDoppler_Ingest": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the doppler data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the doppler array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of received doppler shifts in Hz.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationElevation_Abridged": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the elevation data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the elevation array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              2,
              3
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of incoming elevation at the receiver.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationElevation_Full": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the elevation data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the elevation array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              2,
              3
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of incoming elevation at the receiver.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationElevation_Ingest": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the elevation data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the elevation array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              2,
              3
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of incoming elevation at the receiver.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationFrequency_Abridged": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the frequency data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the frequency array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for frequency dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of frequency data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationFrequency_Full": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the frequency data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the frequency array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for frequency dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of frequency data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationFrequency_Ingest": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the frequency data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the frequency array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for frequency dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of frequency data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationPhase_Abridged": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the phase data. Orientation and position for each antenna element across the antenna_element dimension.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the phase array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for phase dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of phase data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationPhase_Full": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the phase data. Orientation and position for each antenna element across the antenna_element dimension.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the phase array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for phase dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of phase data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationPhase_Ingest": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the phase data. Orientation and position for each antenna element across the antenna_element dimension.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the phase array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for phase dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of phase data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationPolarization_Abridged": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the polarization data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers for polarization dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of polarization data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "enum": [
                            "X",
                            "O"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          "X",
                          "O"
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationPolarization_Full": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the polarization data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers for polarization dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of polarization data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "enum": [
                            "X",
                            "O"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          "X",
                          "O"
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationPolarization_Ingest": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the polarization data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers for polarization dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of polarization data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "enum": [
                            "X",
                            "O"
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          "X",
                          "O"
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationPower_Abridged": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the power data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the power array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of received power in db.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationPower_Full": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the power data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the power array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of received power in db.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationPower_Ingest": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the power data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the power array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of received power in db.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationRange_Abridged": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the range data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the range array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for range dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of range data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationRange_Full": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the range data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the range array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for range dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of range data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationRange_Ingest": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the range data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the range array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for range dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "data": {
            "description": "Array of range data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationScalerInfo_Abridged": {
        "description": "The ScalerInfo record describes the person or system who interpreted the ionogram in IonoObservation.",
        "type": "object",
        "properties": {
          "type": {
            "description": "Scaler type (MANUAL, AUTOMATIC or UNKNOWN).",
            "maxLength": 9,
            "type": "string",
            "example": "MANUAL"
          },
          "name": {
            "description": "Scaler name.",
            "maxLength": 20,
            "type": "string",
            "example": "ARTIST-4"
          },
          "organization": {
            "description": "Scaler organization.",
            "maxLength": 64,
            "type": "string",
            "example": "UML"
          },
          "version": {
            "format": "double",
            "description": "Scaler version.",
            "minimum": 0,
            "type": "number",
            "example": 500200.1
          },
          "confidenceScore": {
            "format": "int32",
            "description": "Scaler confidence score.",
            "minimum": 0,
            "type": "integer",
            "example": 75
          },
          "confidenceLevel": {
            "format": "int32",
            "description": "Scaler confidence level.",
            "minimum": 0,
            "type": "integer",
            "example": 11
          }
        }
      },
      "IonoObservationScalerInfo_Full": {
        "description": "The ScalerInfo record describes the person or system who interpreted the ionogram in IonoObservation.",
        "type": "object",
        "properties": {
          "type": {
            "description": "Scaler type (MANUAL, AUTOMATIC or UNKNOWN).",
            "maxLength": 9,
            "type": "string",
            "example": "MANUAL"
          },
          "name": {
            "description": "Scaler name.",
            "maxLength": 20,
            "type": "string",
            "example": "ARTIST-4"
          },
          "organization": {
            "description": "Scaler organization.",
            "maxLength": 64,
            "type": "string",
            "example": "UML"
          },
          "version": {
            "format": "double",
            "description": "Scaler version.",
            "minimum": 0,
            "type": "number",
            "example": 500200.1
          },
          "confidenceScore": {
            "format": "int32",
            "description": "Scaler confidence score.",
            "minimum": 0,
            "type": "integer",
            "example": 75
          },
          "confidenceLevel": {
            "format": "int32",
            "description": "Scaler confidence level.",
            "minimum": 0,
            "type": "integer",
            "example": 11
          }
        }
      },
      "IonoObservationScalerInfo_Ingest": {
        "description": "The ScalerInfo record describes the person or system who interpreted the ionogram in IonoObservation.",
        "type": "object",
        "properties": {
          "type": {
            "description": "Scaler type (MANUAL, AUTOMATIC or UNKNOWN).",
            "maxLength": 9,
            "type": "string",
            "example": "MANUAL"
          },
          "name": {
            "description": "Scaler name.",
            "maxLength": 20,
            "type": "string",
            "example": "ARTIST-4"
          },
          "organization": {
            "description": "Scaler organization.",
            "maxLength": 64,
            "type": "string",
            "example": "UML"
          },
          "version": {
            "format": "double",
            "description": "Scaler version.",
            "minimum": 0,
            "type": "number",
            "example": 500200.1
          },
          "confidenceScore": {
            "format": "int32",
            "description": "Scaler confidence score.",
            "minimum": 0,
            "type": "integer",
            "example": 75
          },
          "confidenceLevel": {
            "format": "int32",
            "description": "Scaler confidence level.",
            "minimum": 0,
            "type": "integer",
            "example": 11
          }
        }
      },
      "IonoObservationStokes_Abridged": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the stokes data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the stoke array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              2,
              3
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAMES1",
              "NAMES2"
            ]
          },
          "data": {
            "description": "Array of received stokes data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          },
          "s": {
            "description": "S1, S2, and S3 (the normalized Stokes parameters 1, 2, and 3).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1,
              2
            ]
          }
        }
      },
      "IonoObservationStokes_Full": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the stokes data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the stoke array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              2,
              3
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAMES1",
              "NAMES2"
            ]
          },
          "data": {
            "description": "Array of received stokes data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          },
          "s": {
            "description": "S1, S2, and S3 (the normalized Stokes parameters 1, 2, and 3).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1,
              2
            ]
          }
        }
      },
      "IonoObservationStokes_Ingest": {
        "type": "object",
        "properties": {
          "notes": {
            "description": "Notes for the stokes data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "dimensions": {
            "description": "Array of integers of the stoke array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              2,
              3
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAMES1",
              "NAMES2"
            ]
          },
          "data": {
            "description": "Array of received stokes data.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          },
          "s": {
            "description": "S1, S2, and S3 (the normalized Stokes parameters 1, 2, and 3).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1,
              2
            ]
          }
        }
      },
      "IonoObservationTime_Abridged": {
        "type": "object",
        "properties": {
          "dimensions": {
            "description": "Array of integers of the time array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "notes": {
            "description": "The notes indicate the scheme and accuracy.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "data": {
            "description": "Array of times in number of seconds passed since January 1st, 1970 with the same dimensions as power.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationTime_Full": {
        "type": "object",
        "properties": {
          "dimensions": {
            "description": "Array of integers of the time array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "notes": {
            "description": "The notes indicate the scheme and accuracy.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "data": {
            "description": "Array of times in number of seconds passed since January 1st, 1970 with the same dimensions as power.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationTime_Ingest": {
        "type": "object",
        "properties": {
          "dimensions": {
            "description": "Array of integers of the time array dimensions.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "dimensionName": {
            "description": "Array of names for dimensions.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "notes": {
            "description": "The notes indicate the scheme and accuracy.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          },
          "data": {
            "description": "Array of times in number of seconds passed since January 1st, 1970 with the same dimensions as power.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "format": "double",
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              [
                [
                  [
                    [
                      [
                        [
                          0.02,
                          0.034
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          }
        }
      },
      "IonoObservationTraceGeneric_Abridged": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Multi-dimensional Array. The 1st dimension spans points along the trace while the 2nd dimension spans frequency-range pairs.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                }
              }
            },
            "example": [
              [
                [
                  1.23,
                  1.0903
                ]
              ]
            ]
          },
          "dimensionName": {
            "description": "Array of dimension names for trace generic data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "notes": {
            "description": "Notes for the trace generic data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          }
        }
      },
      "IonoObservationTraceGeneric_Full": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Multi-dimensional Array. The 1st dimension spans points along the trace while the 2nd dimension spans frequency-range pairs.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                }
              }
            },
            "example": [
              [
                [
                  1.23,
                  1.0903
                ]
              ]
            ]
          },
          "dimensionName": {
            "description": "Array of dimension names for trace generic data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "notes": {
            "description": "Notes for the trace generic data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          }
        }
      },
      "IonoObservationTraceGeneric_Ingest": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Multi-dimensional Array. The 1st dimension spans points along the trace while the 2nd dimension spans frequency-range pairs.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "format": "double",
                  "type": "number"
                }
              }
            },
            "example": [
              [
                [
                  1.23,
                  1.0903
                ]
              ]
            ]
          },
          "dimensionName": {
            "description": "Array of dimension names for trace generic data.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "NAME1",
              "NAME2"
            ]
          },
          "notes": {
            "description": "Notes for the trace generic data.",
            "maxLength": 512,
            "type": "string",
            "example": "NOTES"
          }
        }
      },
      "Location_Full": {
        "description": "Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idLocation": {
            "description": "Unique identifier of the location, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Location name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Example location"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 16,
            "type": "string",
            "example": "US"
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "altitude": {
            "format": "double",
            "description": "Altitude of the location, in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "MonoRadar_Abridged": {
        "description": "A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.",
        "required": [
          "classificationMarking",
          "msgfmt",
          "msgtyp",
          "ts",
          "msgts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "MONORADAR-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "tti": {
            "description": "Test target indicator.",
            "maxLength": 16,
            "type": "string",
            "example": "TTI"
          },
          "idSensor": {
            "description": "ID of the radar site or station providing the data.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-SENSOR-ID"
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 45.23
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude, in kilometers, at time of observation (ts).",
            "type": "number",
            "example": 100.23
          },
          "sac": {
            "format": "int32",
            "description": "System Area Code.",
            "type": "integer",
            "example": 10
          },
          "sic": {
            "format": "int32",
            "description": "System Identification Code.",
            "type": "integer",
            "example": 40
          },
          "tgtid": {
            "description": "Aircraft identification from an aircraft equipped with a Mode S transponder.",
            "maxLength": 16,
            "type": "string",
            "example": "TGT-ID"
          },
          "addr": {
            "description": "Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.",
            "maxLength": 16,
            "type": "string",
            "example": "ADDR-ID"
          },
          "msgfmt": {
            "description": "Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "CAT48"
          },
          "msgtyp": {
            "description": "Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "BCN"
          },
          "af": {
            "description": "Flag indicating military message.",
            "type": "boolean",
            "example": true
          },
          "faa": {
            "description": "Flag indicating FAA/Civ message.",
            "type": "boolean",
            "example": true
          },
          "spi": {
            "description": "Flag indicating whether Special Position Indicator (SPI) present in interrogation response.",
            "type": "boolean",
            "example": true
          },
          "aims": {
            "description": "Flag indicating whether AIMS present.",
            "type": "boolean",
            "example": true
          },
          "mti": {
            "description": "Flag indicating that target was detected using data from an MTI receiver.",
            "type": "boolean",
            "example": true
          },
          "bcnhits": {
            "format": "int32",
            "description": "Number of beacon hits received on the target.",
            "type": "integer",
            "example": 12
          },
          "ts": {
            "format": "date-time",
            "description": "Target detection time, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "msgts": {
            "format": "date-time",
            "description": "Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "rng": {
            "format": "double",
            "description": "Measured slant range to target from the observing site, in km.",
            "type": "number",
            "example": 100.23
          },
          "az": {
            "format": "double",
            "description": "Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.",
            "type": "number",
            "example": 100.23
          },
          "acp": {
            "format": "int32",
            "description": "Azimuth Change Pulse count at target detection.",
            "type": "integer",
            "example": 100
          },
          "alt3d": {
            "format": "double",
            "description": "Measured height of the target, in km. (for 3D radars).",
            "type": "number",
            "example": 100.23
          },
          "mc": {
            "format": "double",
            "description": "Mode-C altitude (uncorrected pressure altitude), in km.",
            "type": "number",
            "example": 100.23
          },
          "mcv": {
            "description": "Status of the mode-C validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "MCV"
          },
          "mcg": {
            "description": "Indicator that the mode-C response was garbled.",
            "type": "boolean",
            "example": true
          },
          "m1": {
            "description": "Mode-1 interrogation response (mission code).",
            "maxLength": 128,
            "type": "string",
            "example": "MISSION_CODE"
          },
          "m1v": {
            "description": "Status of the mode-1 validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "M1V"
          },
          "m1g": {
            "description": "Indicator that the mode-1 response was garbled.",
            "type": "boolean",
            "example": true
          },
          "m2": {
            "description": "Mode-2 interrogation response (military identification code).",
            "maxLength": 128,
            "type": "string",
            "example": "MILITARY_ID_CODE"
          },
          "m2v": {
            "description": "Status of the mode-2 validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "M2V"
          },
          "m2xv": {
            "description": "Status of the mode-2 X-Pulse response validation.",
            "maxLength": 16,
            "type": "string",
            "example": "M2XV"
          },
          "m2g": {
            "description": "Indicator that the mode-2 response was garbled.",
            "type": "boolean",
            "example": true
          },
          "m3a": {
            "description": "Mode-3/A interrogation response (aircraft identification).",
            "maxLength": 128,
            "type": "string",
            "example": "AIRCRAFT_ID"
          },
          "m3av": {
            "description": "Status of the mode-3/A validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "M3AV"
          },
          "m3ag": {
            "description": "Indicator that the mode-3/A response was garbled.",
            "type": "boolean",
            "example": true
          },
          "m3axv": {
            "description": "Status of the mode-3 X-Pulse response validation.",
            "maxLength": 16,
            "type": "string",
            "example": "M3AXV"
          },
          "m4": {
            "description": "Mode-4 interrogation response (Identification Friend/Foe).",
            "maxLength": 24,
            "type": "string",
            "example": "ID_FRIEND"
          },
          "m4v": {
            "description": "Status of the mode-4 validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "M4V"
          },
          "m4d1d2": {
            "description": "Mode-4 D1 & D2 response status.",
            "maxLength": 8,
            "type": "string",
            "example": "STATUS"
          },
          "mscommb": {
            "description": "Mode-S Comm B message data.",
            "maxLength": 16,
            "type": "string",
            "example": "MSCOMMB"
          },
          "milemrgcy": {
            "description": "Flag indicating military emergency.",
            "type": "boolean",
            "example": false
          },
          "code7500": {
            "description": "7500 squawk present (hijack).",
            "type": "boolean",
            "example": false
          },
          "code7600": {
            "description": "7600 squawk present (loss of comm).",
            "type": "boolean",
            "example": false
          },
          "code7700": {
            "description": "7700 squawk present (general emergency).",
            "type": "boolean",
            "example": false
          },
          "grndspd": {
            "format": "double",
            "description": "Target ground speed, in meters/second.",
            "type": "number",
            "example": 30.23
          },
          "hdng": {
            "format": "double",
            "description": "Target heading, in degrees from true North at the target position.",
            "type": "number",
            "example": 30.23
          },
          "trknum": {
            "format": "int32",
            "description": "Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.",
            "type": "integer",
            "example": 30
          },
          "rad": {
            "description": "Type of sensor(s) maintaining track.",
            "maxLength": 16,
            "type": "string",
            "example": "RAD"
          },
          "mah": {
            "description": "Indication of Horizontal Maneuver detection.",
            "maxLength": 16,
            "type": "string",
            "example": "MAH"
          },
          "cdm": {
            "description": "Climbing/Descending mode indicator.",
            "maxLength": 24,
            "type": "string",
            "example": "CDM"
          },
          "cartpos": {
            "description": "Array of local 2d-cartesian [x, y] coordinates of target, in km.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.2,
              2.2
            ]
          },
          "psrrl": {
            "format": "double",
            "description": "Runlength of the primary surveillance radar track, in degrees.",
            "type": "number",
            "example": 44.23
          },
          "ssrl": {
            "format": "double",
            "description": "Runlength of the secondary surveillance radar track, in degrees.",
            "type": "number",
            "example": 44.23
          },
          "rngdelt": {
            "format": "double",
            "description": "Target range delta between PSR and SSR (reference PSR-SSR), in km.",
            "type": "number",
            "example": 44.23
          },
          "azdelt": {
            "format": "double",
            "description": "Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.",
            "type": "number",
            "example": 44.23
          },
          "wectc": {
            "description": "Warning/Error Conditions and Target Classification.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "WARNING",
              "WARNING"
            ]
          },
          "mrgrpt": {
            "description": "Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.",
            "type": "boolean",
            "example": true
          },
          "artsqual": {
            "description": "ARTS quality.",
            "maxLength": 64,
            "type": "string",
            "example": "QUALITY"
          },
          "trkelig": {
            "description": "Track eligibility flag.",
            "maxLength": 24,
            "type": "string",
            "example": "ELIGIBILITY"
          },
          "tgtconf": {
            "description": "Target confidence.",
            "maxLength": 24,
            "type": "string",
            "example": "CONFIDENCE"
          },
          "tgtcorr": {
            "description": "Target correlation flag.",
            "maxLength": 16,
            "type": "string",
            "example": "CORRELATION"
          },
          "tis": {
            "format": "double",
            "description": "Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.",
            "type": "number",
            "example": 0.4
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "MonoRadar_Full": {
        "description": "A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.",
        "required": [
          "classificationMarking",
          "msgfmt",
          "msgtyp",
          "ts",
          "msgts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "MONORADAR-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "tti": {
            "description": "Test target indicator.",
            "maxLength": 16,
            "type": "string",
            "example": "TTI"
          },
          "idSensor": {
            "description": "ID of the radar site or station providing the data.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-SENSOR-ID"
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 45.23
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude, in kilometers, at time of observation (ts).",
            "type": "number",
            "example": 100.23
          },
          "sac": {
            "format": "int32",
            "description": "System Area Code.",
            "type": "integer",
            "example": 10
          },
          "sic": {
            "format": "int32",
            "description": "System Identification Code.",
            "type": "integer",
            "example": 40
          },
          "tgtid": {
            "description": "Aircraft identification from an aircraft equipped with a Mode S transponder.",
            "maxLength": 16,
            "type": "string",
            "example": "TGT-ID"
          },
          "addr": {
            "description": "Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.",
            "maxLength": 16,
            "type": "string",
            "example": "ADDR-ID"
          },
          "msgfmt": {
            "description": "Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "CAT48"
          },
          "msgtyp": {
            "description": "Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "BCN"
          },
          "af": {
            "description": "Flag indicating military message.",
            "type": "boolean",
            "example": true
          },
          "faa": {
            "description": "Flag indicating FAA/Civ message.",
            "type": "boolean",
            "example": true
          },
          "spi": {
            "description": "Flag indicating whether Special Position Indicator (SPI) present in interrogation response.",
            "type": "boolean",
            "example": true
          },
          "aims": {
            "description": "Flag indicating whether AIMS present.",
            "type": "boolean",
            "example": true
          },
          "mti": {
            "description": "Flag indicating that target was detected using data from an MTI receiver.",
            "type": "boolean",
            "example": true
          },
          "bcnhits": {
            "format": "int32",
            "description": "Number of beacon hits received on the target.",
            "type": "integer",
            "example": 12
          },
          "ts": {
            "format": "date-time",
            "description": "Target detection time, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "msgts": {
            "format": "date-time",
            "description": "Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "rng": {
            "format": "double",
            "description": "Measured slant range to target from the observing site, in km.",
            "type": "number",
            "example": 100.23
          },
          "az": {
            "format": "double",
            "description": "Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.",
            "type": "number",
            "example": 100.23
          },
          "acp": {
            "format": "int32",
            "description": "Azimuth Change Pulse count at target detection.",
            "type": "integer",
            "example": 100
          },
          "alt3d": {
            "format": "double",
            "description": "Measured height of the target, in km. (for 3D radars).",
            "type": "number",
            "example": 100.23
          },
          "mc": {
            "format": "double",
            "description": "Mode-C altitude (uncorrected pressure altitude), in km.",
            "type": "number",
            "example": 100.23
          },
          "mcv": {
            "description": "Status of the mode-C validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "MCV"
          },
          "mcg": {
            "description": "Indicator that the mode-C response was garbled.",
            "type": "boolean",
            "example": true
          },
          "m1": {
            "description": "Mode-1 interrogation response (mission code).",
            "maxLength": 128,
            "type": "string",
            "example": "MISSION_CODE"
          },
          "m1v": {
            "description": "Status of the mode-1 validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "M1V"
          },
          "m1g": {
            "description": "Indicator that the mode-1 response was garbled.",
            "type": "boolean",
            "example": true
          },
          "m2": {
            "description": "Mode-2 interrogation response (military identification code).",
            "maxLength": 128,
            "type": "string",
            "example": "MILITARY_ID_CODE"
          },
          "m2v": {
            "description": "Status of the mode-2 validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "M2V"
          },
          "m2xv": {
            "description": "Status of the mode-2 X-Pulse response validation.",
            "maxLength": 16,
            "type": "string",
            "example": "M2XV"
          },
          "m2g": {
            "description": "Indicator that the mode-2 response was garbled.",
            "type": "boolean",
            "example": true
          },
          "m3a": {
            "description": "Mode-3/A interrogation response (aircraft identification).",
            "maxLength": 128,
            "type": "string",
            "example": "AIRCRAFT_ID"
          },
          "m3av": {
            "description": "Status of the mode-3/A validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "M3AV"
          },
          "m3ag": {
            "description": "Indicator that the mode-3/A response was garbled.",
            "type": "boolean",
            "example": true
          },
          "m3axv": {
            "description": "Status of the mode-3 X-Pulse response validation.",
            "maxLength": 16,
            "type": "string",
            "example": "M3AXV"
          },
          "m4": {
            "description": "Mode-4 interrogation response (Identification Friend/Foe).",
            "maxLength": 24,
            "type": "string",
            "example": "ID_FRIEND"
          },
          "m4v": {
            "description": "Status of the mode-4 validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "M4V"
          },
          "m4d1d2": {
            "description": "Mode-4 D1 & D2 response status.",
            "maxLength": 8,
            "type": "string",
            "example": "STATUS"
          },
          "mscommb": {
            "description": "Mode-S Comm B message data.",
            "maxLength": 16,
            "type": "string",
            "example": "MSCOMMB"
          },
          "milemrgcy": {
            "description": "Flag indicating military emergency.",
            "type": "boolean",
            "example": false
          },
          "code7500": {
            "description": "7500 squawk present (hijack).",
            "type": "boolean",
            "example": false
          },
          "code7600": {
            "description": "7600 squawk present (loss of comm).",
            "type": "boolean",
            "example": false
          },
          "code7700": {
            "description": "7700 squawk present (general emergency).",
            "type": "boolean",
            "example": false
          },
          "grndspd": {
            "format": "double",
            "description": "Target ground speed, in meters/second.",
            "type": "number",
            "example": 30.23
          },
          "hdng": {
            "format": "double",
            "description": "Target heading, in degrees from true North at the target position.",
            "type": "number",
            "example": 30.23
          },
          "trknum": {
            "format": "int32",
            "description": "Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.",
            "type": "integer",
            "example": 30
          },
          "rad": {
            "description": "Type of sensor(s) maintaining track.",
            "maxLength": 16,
            "type": "string",
            "example": "RAD"
          },
          "mah": {
            "description": "Indication of Horizontal Maneuver detection.",
            "maxLength": 16,
            "type": "string",
            "example": "MAH"
          },
          "cdm": {
            "description": "Climbing/Descending mode indicator.",
            "maxLength": 24,
            "type": "string",
            "example": "CDM"
          },
          "cartpos": {
            "description": "Array of local 2d-cartesian [x, y] coordinates of target, in km.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.2,
              2.2
            ]
          },
          "psrrl": {
            "format": "double",
            "description": "Runlength of the primary surveillance radar track, in degrees.",
            "type": "number",
            "example": 44.23
          },
          "ssrl": {
            "format": "double",
            "description": "Runlength of the secondary surveillance radar track, in degrees.",
            "type": "number",
            "example": 44.23
          },
          "rngdelt": {
            "format": "double",
            "description": "Target range delta between PSR and SSR (reference PSR-SSR), in km.",
            "type": "number",
            "example": 44.23
          },
          "azdelt": {
            "format": "double",
            "description": "Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.",
            "type": "number",
            "example": 44.23
          },
          "wectc": {
            "description": "Warning/Error Conditions and Target Classification.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "WARNING",
              "WARNING"
            ]
          },
          "mrgrpt": {
            "description": "Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.",
            "type": "boolean",
            "example": true
          },
          "artsqual": {
            "description": "ARTS quality.",
            "maxLength": 64,
            "type": "string",
            "example": "QUALITY"
          },
          "trkelig": {
            "description": "Track eligibility flag.",
            "maxLength": 24,
            "type": "string",
            "example": "ELIGIBILITY"
          },
          "tgtconf": {
            "description": "Target confidence.",
            "maxLength": 24,
            "type": "string",
            "example": "CONFIDENCE"
          },
          "tgtcorr": {
            "description": "Target correlation flag.",
            "maxLength": 16,
            "type": "string",
            "example": "CORRELATION"
          },
          "tis": {
            "format": "double",
            "description": "Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.",
            "type": "number",
            "example": 0.4
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "MonoRadar_Ingest": {
        "description": "A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.",
        "required": [
          "classificationMarking",
          "msgfmt",
          "msgtyp",
          "ts",
          "msgts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "MONORADAR-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "tti": {
            "description": "Test target indicator.",
            "maxLength": 16,
            "type": "string",
            "example": "TTI"
          },
          "idSensor": {
            "description": "ID of the radar site or station providing the data.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-SENSOR-ID"
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 45.23
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude, in kilometers, at time of observation (ts).",
            "type": "number",
            "example": 100.23
          },
          "sac": {
            "format": "int32",
            "description": "System Area Code.",
            "type": "integer",
            "example": 10
          },
          "sic": {
            "format": "int32",
            "description": "System Identification Code.",
            "type": "integer",
            "example": 40
          },
          "tgtid": {
            "description": "Aircraft identification from an aircraft equipped with a Mode S transponder.",
            "maxLength": 16,
            "type": "string",
            "example": "TGT-ID"
          },
          "addr": {
            "description": "Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.",
            "maxLength": 16,
            "type": "string",
            "example": "ADDR-ID"
          },
          "msgfmt": {
            "description": "Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "CAT48"
          },
          "msgtyp": {
            "description": "Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).",
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "example": "BCN"
          },
          "af": {
            "description": "Flag indicating military message.",
            "type": "boolean",
            "example": true
          },
          "faa": {
            "description": "Flag indicating FAA/Civ message.",
            "type": "boolean",
            "example": true
          },
          "spi": {
            "description": "Flag indicating whether Special Position Indicator (SPI) present in interrogation response.",
            "type": "boolean",
            "example": true
          },
          "aims": {
            "description": "Flag indicating whether AIMS present.",
            "type": "boolean",
            "example": true
          },
          "mti": {
            "description": "Flag indicating that target was detected using data from an MTI receiver.",
            "type": "boolean",
            "example": true
          },
          "bcnhits": {
            "format": "int32",
            "description": "Number of beacon hits received on the target.",
            "type": "integer",
            "example": 12
          },
          "ts": {
            "format": "date-time",
            "description": "Target detection time, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "msgts": {
            "format": "date-time",
            "description": "Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "rng": {
            "format": "double",
            "description": "Measured slant range to target from the observing site, in km.",
            "type": "number",
            "example": 100.23
          },
          "az": {
            "format": "double",
            "description": "Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.",
            "type": "number",
            "example": 100.23
          },
          "acp": {
            "format": "int32",
            "description": "Azimuth Change Pulse count at target detection.",
            "type": "integer",
            "example": 100
          },
          "alt3d": {
            "format": "double",
            "description": "Measured height of the target, in km. (for 3D radars).",
            "type": "number",
            "example": 100.23
          },
          "mc": {
            "format": "double",
            "description": "Mode-C altitude (uncorrected pressure altitude), in km.",
            "type": "number",
            "example": 100.23
          },
          "mcv": {
            "description": "Status of the mode-C validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "MCV"
          },
          "mcg": {
            "description": "Indicator that the mode-C response was garbled.",
            "type": "boolean",
            "example": true
          },
          "m1": {
            "description": "Mode-1 interrogation response (mission code).",
            "maxLength": 128,
            "type": "string",
            "example": "MISSION_CODE"
          },
          "m1v": {
            "description": "Status of the mode-1 validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "M1V"
          },
          "m1g": {
            "description": "Indicator that the mode-1 response was garbled.",
            "type": "boolean",
            "example": true
          },
          "m2": {
            "description": "Mode-2 interrogation response (military identification code).",
            "maxLength": 128,
            "type": "string",
            "example": "MILITARY_ID_CODE"
          },
          "m2v": {
            "description": "Status of the mode-2 validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "M2V"
          },
          "m2xv": {
            "description": "Status of the mode-2 X-Pulse response validation.",
            "maxLength": 16,
            "type": "string",
            "example": "M2XV"
          },
          "m2g": {
            "description": "Indicator that the mode-2 response was garbled.",
            "type": "boolean",
            "example": true
          },
          "m3a": {
            "description": "Mode-3/A interrogation response (aircraft identification).",
            "maxLength": 128,
            "type": "string",
            "example": "AIRCRAFT_ID"
          },
          "m3av": {
            "description": "Status of the mode-3/A validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "M3AV"
          },
          "m3ag": {
            "description": "Indicator that the mode-3/A response was garbled.",
            "type": "boolean",
            "example": true
          },
          "m3axv": {
            "description": "Status of the mode-3 X-Pulse response validation.",
            "maxLength": 16,
            "type": "string",
            "example": "M3AXV"
          },
          "m4": {
            "description": "Mode-4 interrogation response (Identification Friend/Foe).",
            "maxLength": 24,
            "type": "string",
            "example": "ID_FRIEND"
          },
          "m4v": {
            "description": "Status of the mode-4 validity bit.",
            "maxLength": 16,
            "type": "string",
            "example": "M4V"
          },
          "m4d1d2": {
            "description": "Mode-4 D1 & D2 response status.",
            "maxLength": 8,
            "type": "string",
            "example": "STATUS"
          },
          "mscommb": {
            "description": "Mode-S Comm B message data.",
            "maxLength": 16,
            "type": "string",
            "example": "MSCOMMB"
          },
          "milemrgcy": {
            "description": "Flag indicating military emergency.",
            "type": "boolean",
            "example": false
          },
          "code7500": {
            "description": "7500 squawk present (hijack).",
            "type": "boolean",
            "example": false
          },
          "code7600": {
            "description": "7600 squawk present (loss of comm).",
            "type": "boolean",
            "example": false
          },
          "code7700": {
            "description": "7700 squawk present (general emergency).",
            "type": "boolean",
            "example": false
          },
          "grndspd": {
            "format": "double",
            "description": "Target ground speed, in meters/second.",
            "type": "number",
            "example": 30.23
          },
          "hdng": {
            "format": "double",
            "description": "Target heading, in degrees from true North at the target position.",
            "type": "number",
            "example": 30.23
          },
          "trknum": {
            "format": "int32",
            "description": "Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.",
            "type": "integer",
            "example": 30
          },
          "rad": {
            "description": "Type of sensor(s) maintaining track.",
            "maxLength": 16,
            "type": "string",
            "example": "RAD"
          },
          "mah": {
            "description": "Indication of Horizontal Maneuver detection.",
            "maxLength": 16,
            "type": "string",
            "example": "MAH"
          },
          "cdm": {
            "description": "Climbing/Descending mode indicator.",
            "maxLength": 24,
            "type": "string",
            "example": "CDM"
          },
          "cartpos": {
            "description": "Array of local 2d-cartesian [x, y] coordinates of target, in km.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.2,
              2.2
            ]
          },
          "psrrl": {
            "format": "double",
            "description": "Runlength of the primary surveillance radar track, in degrees.",
            "type": "number",
            "example": 44.23
          },
          "ssrl": {
            "format": "double",
            "description": "Runlength of the secondary surveillance radar track, in degrees.",
            "type": "number",
            "example": 44.23
          },
          "rngdelt": {
            "format": "double",
            "description": "Target range delta between PSR and SSR (reference PSR-SSR), in km.",
            "type": "number",
            "example": 44.23
          },
          "azdelt": {
            "format": "double",
            "description": "Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.",
            "type": "number",
            "example": 44.23
          },
          "wectc": {
            "description": "Warning/Error Conditions and Target Classification.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "WARNING",
              "WARNING"
            ]
          },
          "mrgrpt": {
            "description": "Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.",
            "type": "boolean",
            "example": true
          },
          "artsqual": {
            "description": "ARTS quality.",
            "maxLength": 64,
            "type": "string",
            "example": "QUALITY"
          },
          "trkelig": {
            "description": "Track eligibility flag.",
            "maxLength": 24,
            "type": "string",
            "example": "ELIGIBILITY"
          },
          "tgtconf": {
            "description": "Target confidence.",
            "maxLength": 24,
            "type": "string",
            "example": "CONFIDENCE"
          },
          "tgtcorr": {
            "description": "Target correlation flag.",
            "maxLength": 16,
            "type": "string",
            "example": "CORRELATION"
          },
          "tis": {
            "format": "double",
            "description": "Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.",
            "type": "number",
            "example": 0.4
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "OnboardNavigation_Abridged": {
        "description": "These services provide spacecraft positional data derived from on-board navigational sensors.  Navigational points are provided in kilometers and in a user specified reference frame, with ECI J2K being preferred.",
        "required": [
          "classificationMarking",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "type": "string",
            "example": "ONBOARD-NAVIGATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the primary satellite on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 101
          },
          "origObjectId": {
            "description": "Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "startTime": {
            "format": "date-time",
            "description": "Start time of the sensor data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-07-20T01:02:03.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "End time of the sensor data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-07-20T01:02:03.123456Z"
          },
          "esId": {
            "description": "Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.",
            "maxLength": 36,
            "type": "string",
            "example": "EPHEMERISSET-ID"
          },
          "starCatName": {
            "description": "The name or identifier the star catalog in use.",
            "maxLength": 24,
            "type": "string",
            "example": "STAR-CAT-NAME"
          },
          "starCatLoadTime": {
            "format": "date-time",
            "description": "The last load time of the current star catalog onboard this spacecraft.",
            "type": "string",
            "example": "2021-07-21T01:02:03.123Z"
          },
          "idStateVector": {
            "description": "Unique identifier of the last onboard state vector.",
            "maxLength": 36,
            "type": "string",
            "example": "STATE-VECTOR-ID"
          },
          "ts": {
            "description": "Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.",
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string",
              "example": "2022-03-10T12:15:50"
            },
            "example": [
              "2021-07-21T01:02:03.120003Z"
            ]
          },
          "referenceFrame": {
            "description": "The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "sunSensor": {
            "description": "Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.1,
                2.2,
                3.3
              ]
            ]
          },
          "mag": {
            "description": "Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.1,
                2.2,
                3.3
              ]
            ]
          },
          "starTracker": {
            "description": "Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.1,
                2.2,
                3.3
              ]
            ]
          },
          "deltaPos": {
            "description": "Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.1,
                2.2,
                3.3
              ]
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 36,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "OnboardNavigation_Full": {
        "description": "These services provide spacecraft positional data derived from on-board navigational sensors.  Navigational points are provided in kilometers and in a user specified reference frame, with ECI J2K being preferred.",
        "required": [
          "classificationMarking",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "type": "string",
            "example": "ONBOARD-NAVIGATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the primary satellite on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 101
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "origObjectId": {
            "description": "Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "startTime": {
            "format": "date-time",
            "description": "Start time of the sensor data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-07-20T01:02:03.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "End time of the sensor data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-07-20T01:02:03.123456Z"
          },
          "esId": {
            "description": "Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.",
            "maxLength": 36,
            "type": "string",
            "example": "EPHEMERISSET-ID"
          },
          "starCatName": {
            "description": "The name or identifier the star catalog in use.",
            "maxLength": 24,
            "type": "string",
            "example": "STAR-CAT-NAME"
          },
          "starCatLoadTime": {
            "format": "date-time",
            "description": "The last load time of the current star catalog onboard this spacecraft.",
            "type": "string",
            "example": "2021-07-21T01:02:03.123Z"
          },
          "idStateVector": {
            "description": "Unique identifier of the last onboard state vector.",
            "maxLength": 36,
            "type": "string",
            "example": "STATE-VECTOR-ID"
          },
          "ts": {
            "description": "Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.",
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string",
              "example": "2022-03-10T12:15:50"
            },
            "example": [
              "2021-07-21T01:02:03.120003Z"
            ]
          },
          "referenceFrame": {
            "description": "The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "sunSensor": {
            "description": "Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.1,
                2.2,
                3.3
              ]
            ]
          },
          "mag": {
            "description": "Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.1,
                2.2,
                3.3
              ]
            ]
          },
          "starTracker": {
            "description": "Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.1,
                2.2,
                3.3
              ]
            ]
          },
          "deltaPos": {
            "description": "Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.1,
                2.2,
                3.3
              ]
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 36,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "OnboardNavigation_Ingest": {
        "description": "These services provide spacecraft positional data derived from on-board navigational sensors.  Navigational points are provided in kilometers and in a user specified reference frame, with ECI J2K being preferred.",
        "required": [
          "classificationMarking",
          "startTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "type": "string",
            "example": "ONBOARD-NAVIGATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the primary satellite on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 101
          },
          "origObjectId": {
            "description": "Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "startTime": {
            "format": "date-time",
            "description": "Start time of the sensor data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-07-20T01:02:03.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "End time of the sensor data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-07-20T01:02:03.123456Z"
          },
          "esId": {
            "description": "Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.",
            "maxLength": 36,
            "type": "string",
            "example": "EPHEMERISSET-ID"
          },
          "starCatName": {
            "description": "The name or identifier the star catalog in use.",
            "maxLength": 24,
            "type": "string",
            "example": "STAR-CAT-NAME"
          },
          "starCatLoadTime": {
            "format": "date-time",
            "description": "The last load time of the current star catalog onboard this spacecraft.",
            "type": "string",
            "example": "2021-07-21T01:02:03.123Z"
          },
          "idStateVector": {
            "description": "Unique identifier of the last onboard state vector.",
            "maxLength": 36,
            "type": "string",
            "example": "STATE-VECTOR-ID"
          },
          "ts": {
            "description": "Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.",
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string",
              "example": "2022-03-10T12:15:50"
            },
            "example": [
              "2021-07-21T01:02:03.120003Z"
            ]
          },
          "referenceFrame": {
            "description": "The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "sunSensor": {
            "description": "Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.1,
                2.2,
                3.3
              ]
            ]
          },
          "mag": {
            "description": "Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.1,
                2.2,
                3.3
              ]
            ]
          },
          "starTracker": {
            "description": "Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.1,
                2.2,
                3.3
              ]
            ]
          },
          "deltaPos": {
            "description": "Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "format": "double",
                "type": "number"
              }
            },
            "example": [
              [
                1.1,
                2.2,
                3.3
              ]
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 36,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Onorbit_Full": {
        "description": "Model object representing on-orbit objects or satellites in the system.",
        "required": [
          "classificationMarking",
          "satNo",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idOnOrbit": {
            "description": "For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "commonName": {
            "description": "Common name of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Example common name"
          },
          "constellation": {
            "description": "Constellation to which this satellite belongs.",
            "maxLength": 128,
            "type": "string",
            "example": "Big Dipper"
          },
          "intlDes": {
            "description": "International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.",
            "maxLength": 45,
            "type": "string",
            "example": "2021123ABC"
          },
          "launchDate": {
            "format": "date",
            "description": "Date of launch.",
            "type": "string",
            "example": "2018-01-01"
          },
          "decayDate": {
            "format": "date-time",
            "description": "Date of decay.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "objectType": {
            "description": "Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.",
            "maxLength": 32,
            "enum": [
              "ROCKET BODY",
              "DEBRIS",
              "PAYLOAD",
              "PLATFORM",
              "MANNED",
              "UNKNOWN"
            ],
            "type": "string",
            "example": "PAYLOAD"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "missionNumber": {
            "description": "Mission number of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Expedition 1"
          },
          "category": {
            "description": "Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).",
            "maxLength": 45,
            "enum": [
              "Unknown",
              "On-Orbit",
              "Decayed",
              "Cataloged Without State",
              "Launch Nominal",
              "Analyst Satellite",
              "Cislunar",
              "Lunar",
              "Hyperbolic",
              "Heliocentric",
              "Interplanetary",
              "Lagrangian",
              "Docked"
            ],
            "type": "string",
            "example": "Lunar"
          },
          "lifetimeYears": {
            "format": "int32",
            "description": "Estimated lifetime of the on-orbit payload, if known.",
            "type": "integer",
            "example": 10
          },
          "altName": {
            "description": "Alternate name of the on-orbit object.",
            "maxLength": 64,
            "type": "string",
            "example": "Alternate Name"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "launchSiteId": {
            "description": "Id of the associated launchSite entity.",
            "maxLength": 36,
            "type": "string",
            "example": "LAUNCHSITE-ID"
          },
          "entityCollection": {
            "description": "Read-only entity details (only returned/used on detail queries).",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "description": "An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.",
              "required": [
                "name",
                "classificationMarking",
                "type",
                "source",
                "dataMode"
              ],
              "type": "object",
              "properties": {
                "idEntity": {
                  "description": "Unique identifier of the record.",
                  "maxLength": 36,
                  "minLength": 1,
                  "type": "string",
                  "example": "ENTITY-ID"
                },
                "name": {
                  "description": "Unique entity name.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "example": "Example name"
                },
                "classificationMarking": {
                  "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "example": "U"
                },
                "terrestrialId": {
                  "description": "Terrestrial identifier of this entity, if applicable.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "TERRESTRIAL-ID"
                },
                "type": {
                  "description": "The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).",
                  "maxLength": 45,
                  "minLength": 1,
                  "enum": [
                    "AIRCRAFT",
                    "BUS",
                    "COMM",
                    "IR",
                    "NAVIGATION",
                    "ONORBIT",
                    "RFEMITTER",
                    "SCIENTIFIC",
                    "SENSOR",
                    "SITE",
                    "VESSEL"
                  ],
                  "type": "string",
                  "example": "ONORBIT"
                },
                "idLocation": {
                  "description": "Unique identifier of the entity location, if terrestrial/fixed.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "LOCATION-ID"
                },
                "countryCode": {
                  "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
                  "maxLength": 4,
                  "type": "string",
                  "example": "US"
                },
                "ownerType": {
                  "description": "Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).",
                  "maxLength": 32,
                  "enum": [
                    "Commercial",
                    "Government",
                    "Academic",
                    "Consortium",
                    "Other"
                  ],
                  "type": "string",
                  "example": "Commercial"
                },
                "taskable": {
                  "description": "Boolean indicating if this entity is taskable.",
                  "type": "boolean",
                  "example": false
                },
                "urls": {
                  "description": "List of URLs to additional details/documents for this entity.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "URL1",
                    "URL2"
                  ]
                },
                "createdAt": {
                  "format": "date-time",
                  "description": "Time the row was created in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "createdBy": {
                  "description": "Application user who created the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "updatedAt": {
                  "format": "date-time",
                  "description": "Time the row was last updated in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "updatedBy": {
                  "description": "Application user who updated the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "source": {
                  "description": "Source of the data.",
                  "maxLength": 64,
                  "minLength": 1,
                  "type": "string",
                  "example": "Bluestaq"
                },
                "origin": {
                  "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                  "maxLength": 64,
                  "type": "string",
                  "example": "THIRD_PARTY_DATASOURCE"
                },
                "dataMode": {
                  "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                  "maxLength": 32,
                  "minLength": 1,
                  "enum": [
                    "REAL",
                    "TEST",
                    "SIMULATED",
                    "EXERCISE"
                  ],
                  "type": "string",
                  "example": "TEST"
                },
                "location": {
                  "$ref": "#/components/schemas/Location_Full"
                },
                "idOnOrbit": {
                  "description": "Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "ONORBIT-ID"
                },
                "operatingUnit": {
                  "$ref": "#/components/schemas/Operatingunit_Full"
                },
                "idOperatingUnit": {
                  "description": "Unique identifier of the associated operating unit object.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "OPERATINGUNIT-ID"
                },
                "origNetwork": {
                  "description": "The originating source network on which this record was created, auto-populated by the system.",
                  "maxLength": 32,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "OPS1"
                },
                "statusCollection": {
                  "description": "Read-only collection of statuses which can be collected by multiple sources.",
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Status_Full"
                  },
                  "readOnly": true
                },
                "rfBands": {
                  "description": "Read-only collection of RF bands utilized by this entity for communication and/or operation.",
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFBand_Full"
                  },
                  "readOnly": true
                }
              }
            },
            "readOnly": true
          },
          "antennas": {
            "description": "Read-only collection of antennas on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitAntenna_Full"
            },
            "readOnly": true
          },
          "batteries": {
            "description": "Read-only collection of batteries on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitBattery_Full"
            },
            "readOnly": true
          },
          "solarArrays": {
            "description": "Read-only collection of solar arrays on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitSolarArray_Full"
            },
            "readOnly": true
          },
          "thrusters": {
            "description": "Read-only collection of thrusters (engines) on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitThruster_Full"
            },
            "readOnly": true
          },
          "onorbitDetails": {
            "description": "Read-only collection of details for this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitDetails_Full"
            },
            "readOnly": true
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitAntenna_Full": {
        "required": [
          "idOnOrbit",
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITANTENNA-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idAntenna": {
            "description": "ID of the antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "antenna": {
            "$ref": "#/components/schemas/Antenna_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitBattery_Full": {
        "required": [
          "idOnOrbit",
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITBATTERY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idBattery": {
            "description": "ID of the battery.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of batteries on the spacecraft of the type identified by idBattery.",
            "type": "integer",
            "example": 5
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "battery": {
            "$ref": "#/components/schemas/Battery_Full"
          }
        }
      },
      "OnorbitDetails_Full": {
        "description": "Contains details of the OnOrbit object.",
        "required": [
          "idOnOrbit",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITDETAILS-ID"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "lastObTime": {
            "format": "date-time",
            "description": "Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "vismag": {
            "format": "double",
            "description": "Current/latest visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "vismagMin": {
            "format": "double",
            "description": "Minimum visual magnitude in M.",
            "type": "number",
            "example": 5.23
          },
          "vismagMax": {
            "format": "double",
            "description": "Maximum visual magnitude in M.",
            "type": "number",
            "example": 15.23
          },
          "vismagMean": {
            "format": "double",
            "description": "Mean visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "rcs": {
            "format": "double",
            "description": "Current/latest radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "rcsMin": {
            "format": "double",
            "description": "Minimum radar cross section in meters squared.",
            "type": "number",
            "example": 5.23
          },
          "rcsMax": {
            "format": "double",
            "description": "Maximum radar cross section in meters squared.",
            "type": "number",
            "example": 15.23
          },
          "rcsMean": {
            "format": "double",
            "description": "Mean radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "bolDeltaV": {
            "format": "double",
            "description": "The total beginning of life delta V of the spacecraft, in meters per second.",
            "type": "number",
            "example": 1000.1
          },
          "maxDeltaV": {
            "format": "double",
            "description": "Maximum delta V available for this on-orbit spacecraft, in meters per second.",
            "type": "number",
            "example": 10.23
          },
          "deltaVUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.",
            "type": "number",
            "example": 50.1
          },
          "estDeltaVDuration": {
            "format": "double",
            "description": "Estimated maximum burn duration for the object, in seconds.",
            "type": "number",
            "example": 10.23
          },
          "numMission": {
            "format": "int32",
            "description": "The number of distinct missions the spacecraft performs.",
            "type": "integer",
            "example": 2
          },
          "missionTypes": {
            "description": "Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Weather",
              "Space Weather"
            ]
          },
          "busType": {
            "description": "Type of the bus on the spacecraft.",
            "maxLength": 32,
            "type": "string",
            "example": "A2100"
          },
          "geoSlot": {
            "format": "double",
            "description": "GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 90.23
          },
          "driftRate": {
            "format": "double",
            "description": "GEO drift rate, if applicable in degrees per day.",
            "type": "number",
            "example": 1.23
          },
          "dryMass": {
            "format": "double",
            "description": "Spacecraft dry mass (without fuel or disposables) in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "additionalMass": {
            "format": "double",
            "description": "Mass of fuel and disposables at launch time in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMin": {
            "format": "double",
            "description": "Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 5.23
          },
          "launchMass": {
            "format": "double",
            "description": "Nominal mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMax": {
            "format": "double",
            "description": "Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 15.23
          },
          "bolFuelMass": {
            "format": "double",
            "description": "Spacecraft beginning of life fuel mass, in orbit, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "currentMass": {
            "format": "double",
            "description": "The estimated total current mass of the spacecraft, in kilograms.",
            "type": "number",
            "example": 500
          },
          "totalMassUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft mass, in kilograms.",
            "type": "number",
            "example": 50.1
          },
          "solarArrayArea": {
            "format": "double",
            "description": "Spacecraft deployed area of solar array in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maneuverable": {
            "description": "Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.",
            "type": "boolean",
            "example": false
          },
          "fuelRemaining": {
            "format": "double",
            "description": "Estimated remaining fuel for the object in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "crossSection": {
            "format": "double",
            "description": "Average cross sectional area in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "busCrossSection": {
            "format": "double",
            "description": "Average cross sectional area of the bus in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maxRadius": {
            "format": "double",
            "description": "Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.",
            "type": "number",
            "example": 10.23
          },
          "colaRadius": {
            "format": "double",
            "description": "Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.",
            "type": "number",
            "example": 10.23
          },
          "adeptRadius": {
            "format": "double",
            "description": "The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.",
            "type": "number",
            "example": 10.23
          },
          "numDeployable": {
            "format": "int32",
            "description": "The number of sub-satellites or deployable objects on the spacecraft.",
            "type": "integer",
            "example": 2
          },
          "depNames": {
            "description": "Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GOES-18A",
              "GOES-18B"
            ]
          },
          "depEstMasses": {
            "description": "Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              20,
              21
            ]
          },
          "depMassUncs": {
            "description": "Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              10,
              5
            ]
          },
          "refSource": {
            "description": "The reference source, sources, or URL from which the data in this record was obtained.",
            "maxLength": 256,
            "type": "string",
            "example": "Wikipedia"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "lastObSource": {
            "description": "The name of the source who last provided an observation for this idOnOrbit.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitSolarArray_Full": {
        "required": [
          "idOnOrbit",
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITSOLARARRAY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idSolarArray": {
            "description": "ID of the SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of solar arrays on the spacecraft of the type identified by idSolarArray.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "solarArray": {
            "$ref": "#/components/schemas/SolarArray_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitThruster_Full": {
        "required": [
          "idOnOrbit",
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITTHRUSTER-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idEngine": {
            "description": "ID of the Engine.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "The type of thruster associated with this record (e.g. LAE, Hydrazine REA, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Hydrazine REA"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of engines/thrusters on the spacecraft of the type identified by idEngine.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engine": {
            "$ref": "#/components/schemas/Engine_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Operatingunit_Full": {
        "description": "Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idOperatingUnit": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OPERATINGUNIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "altOperatingUnitId": {
            "description": "Unique identifier of the operating unit record from the originating system.",
            "maxLength": 36,
            "type": "string",
            "example": "32100000000021"
          },
          "name": {
            "description": "Name of the operating unit.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "SOME_NAME"
          },
          "description": {
            "description": "Description of the operating unit.",
            "maxLength": 256,
            "type": "string",
            "example": "Description of unit"
          },
          "idLocation": {
            "description": "Unique identifier of the location record for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "idContact": {
            "description": "Unique identifier of the contact for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "CONTACT-ID"
          },
          "idOrganization": {
            "description": "Unique identifier of the organization record for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "unitIdentifier": {
            "description": "An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.",
            "maxLength": 10,
            "type": "string",
            "example": "AZXAZ12345"
          },
          "countryCode": {
            "description": "The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to \"OTHR\" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).",
            "maxLength": 4,
            "type": "string",
            "example": "IQ"
          },
          "altCountryCode": {
            "description": "Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.",
            "maxLength": 4,
            "type": "string",
            "example": "IZ"
          },
          "wac": {
            "description": "World Aeronautical Chart identifier for the area in which a designated operating unit is located.",
            "maxLength": 4,
            "type": "string",
            "example": "0427"
          },
          "operStatus": {
            "description": "The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 3,
            "type": "string",
            "example": "OPR"
          },
          "condition": {
            "description": "The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "RDY"
          },
          "conditionAvail": {
            "description": "Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "A"
          },
          "eval": {
            "format": "int32",
            "description": "The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.",
            "type": "integer",
            "example": 7
          },
          "fpa": {
            "description": "Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 5,
            "type": "string",
            "example": "EOB"
          },
          "ident": {
            "description": "Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): \n\nASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.\n\nFRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.\n\nHOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.\n\nFAKER: Friendly track, object, or entity acting as an exercise hostile.\n\nJOKER: Friendly track, object, or entity acting as an exercise suspect.\n\nNEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.\n\nPENDING: Track object which has not been evaluated.\n\nSUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.\n\nUNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.",
            "maxLength": 32,
            "type": "string",
            "example": "FRIEND"
          },
          "allegiance": {
            "description": "The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to \"OTHR\" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).",
            "maxLength": 4,
            "type": "string",
            "example": "OTHR"
          },
          "altAllegiance": {
            "description": "Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.",
            "maxLength": 4,
            "type": "string",
            "example": "HL"
          },
          "locName": {
            "description": "Location name for the coordinates.",
            "maxLength": 54,
            "type": "string",
            "example": "LOCATION_NAME"
          },
          "locReason": {
            "description": "Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 9,
            "type": "string",
            "example": "GR"
          },
          "force": {
            "description": "An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "NV"
          },
          "forceName": {
            "description": "The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.",
            "maxLength": 54,
            "type": "string",
            "example": "FORCE-NAME"
          },
          "functRole": {
            "description": "Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 3,
            "type": "string",
            "example": "MIL"
          },
          "msnPrimary": {
            "description": "Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "W6"
          },
          "msnPrimarySpecialty": {
            "description": "Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "QK"
          },
          "masterUnit": {
            "description": "This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.",
            "type": "boolean",
            "example": true
          },
          "stylizedUnit": {
            "description": "This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.",
            "type": "boolean",
            "example": true
          },
          "divCat": {
            "description": "Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 1,
            "type": "string",
            "example": "5"
          },
          "echelon": {
            "description": "Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "SHIP"
          },
          "echelonTier": {
            "description": "Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 2,
            "type": "string",
            "example": "68"
          },
          "fleetId": {
            "description": "Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 1,
            "type": "string",
            "example": "A"
          },
          "deployStatus": {
            "description": "A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 2,
            "type": "string",
            "example": "ND"
          },
          "flagFlown": {
            "description": "The country code of the observed flag flown.",
            "maxLength": 4,
            "type": "string",
            "example": "IZ"
          },
          "coordDatum": {
            "description": "A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 16,
            "type": "string",
            "example": "WGS"
          },
          "coord": {
            "description": "\"Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.\nPos. 1-2.  Latitude Degrees     [00-90]\nPos. 3-4.  Latitude Minutes     [00-59]\nPos. 5-6.  Latitude Seconds     [00-59]\nPos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  \nPos. 10. Latitude Hemisphere       [NS] \nPos. 11-13. Longitude Degrees     [00-180] \nPos. 14-15. Longitude Minutes     [00-59] \nPos. 16-17. Longitude Seconds     [00-59] \nPos. 18-20. Longitude Thousandths Of Seconds      [000-999]\nPos. 21. Longitude Hemisphere     [EW]\nPos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]\".\n",
            "maxLength": 21,
            "type": "string",
            "example": "340000000N0430000000E"
          },
          "coordDerivAcc": {
            "format": "double",
            "description": "Indicates the plus or minus error assessed against the method used to derive the coordinate.",
            "type": "number",
            "example": 12.345
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 179.1
          },
          "elevMsl": {
            "format": "double",
            "description": "Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.",
            "type": "number",
            "example": 123.45
          },
          "elevMslConfLvl": {
            "format": "int32",
            "description": "Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.",
            "type": "integer",
            "example": 50
          },
          "elevMslDerivAcc": {
            "format": "double",
            "description": "Indicates the plus or minus error assessed against the method used to derive the elevation.",
            "type": "number",
            "example": 12.34
          },
          "geoidalMslSep": {
            "format": "double",
            "description": "The distance between Mean Sea Level and a referenced ellipsoid.",
            "type": "number",
            "example": 12.34
          },
          "milGridSys": {
            "description": "\"Indicates the grid system used in the development of the milGrid coordinates. Values are:\nUPS - Universal Polar System\nUTM - Universal Transverse Mercator\".",
            "maxLength": 3,
            "type": "string",
            "example": "UTM"
          },
          "milGrid": {
            "description": "The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:\n4Q (grid zone designator, GZD)\nFJ (the 100,000-meter square identifier)\n12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).",
            "maxLength": 15,
            "type": "string",
            "example": "4QFJ12345678"
          },
          "utm": {
            "description": "Universal Transverse Mercator (UTM) grid coordinates.\nPos. 1-2, UTM Zone Column   [01-60\nPos. 3, UTM Zone Row   [C-HJ-NP-X]\nPos. 4, UTM False Easting   [0-9]\nPos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]\nPos. 10-11, UTM False Northing    [0-9][0-9]\nPos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].",
            "maxLength": 16,
            "type": "string",
            "example": "19P4390691376966"
          },
          "airDefArea": {
            "description": "Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.",
            "maxLength": 5,
            "type": "string",
            "example": "AL006"
          },
          "polSubdiv": {
            "description": "Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 7,
            "type": "string",
            "example": "IZ07"
          },
          "symCode": {
            "description": "A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.",
            "maxLength": 15,
            "type": "string",
            "example": "SOGPU----------"
          },
          "classRating": {
            "description": "Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:\n0 - Does not meet criteria above\n1 - Primary importance to system\n2 - Secondary importance to system\n3 - Tertiary importance to system\nO - Other. Explain in Remarks.",
            "maxLength": 1,
            "type": "string",
            "example": "1"
          },
          "recStatus": {
            "description": "Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:\nA - Active\nI - Inactive\nK - Acknowledged\nL - Local\nQ - A nominated (NOM) or Data Change Request (DCR) record\nR - Production reduced by CMD decision\nW - Working Record.",
            "maxLength": 1,
            "type": "string",
            "example": "A"
          },
          "reviewDate": {
            "format": "date",
            "description": "Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.",
            "type": "string",
            "example": "2008-06-10"
          },
          "resProd": {
            "description": "Responsible Producer - Organization that is responsible for the maintenance of the record.",
            "maxLength": 4,
            "type": "string",
            "example": "RT"
          },
          "referenceDoc": {
            "description": "The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 128,
            "type": "string",
            "example": "Provider Reference Documentation"
          },
          "operatingUnitRemarks": {
            "description": "Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperatingUnitRemark_Full"
            },
            "readOnly": true
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization_Full"
          },
          "location": {
            "$ref": "#/components/schemas/Location_Full"
          }
        }
      },
      "OperatingUnitRemark_Full": {
        "description": "Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.",
        "required": [
          "classificationMarking",
          "idOperatingUnit",
          "text",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "0167f577-e06c-358e-85aa-0a07a730bdd0"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOperatingUnit": {
            "description": "The ID of the operating unit to which this remark applies.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OperatingUnit-ID"
          },
          "altRmkId": {
            "description": "Unique identifier of the unit remark record from the originating system.",
            "maxLength": 36,
            "type": "string",
            "example": "123456ABC"
          },
          "name": {
            "description": "The name of the remark.",
            "maxLength": 64,
            "type": "string",
            "example": "Remark name"
          },
          "type": {
            "description": "The remark type (e.g. Caution, Information, Misc, Restriction, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Restriction"
          },
          "text": {
            "description": "The text of the remark.",
            "maxLength": 16384,
            "minLength": 1,
            "type": "string",
            "example": "This is a remark"
          },
          "code": {
            "description": "The remark type identifier. For example, the Mobility Air Forces (MAF) remark code, defined in the Airfield Suitability and Restriction Report (ASRR).",
            "maxLength": 16,
            "type": "string",
            "example": "M"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "OpticalSOIObservation_Full": {
        "description": "An Optical SOI record contains observation information taken from a sensor about a Space Object.",
        "required": [
          "obStartTime"
        ],
        "type": "object",
        "properties": {
          "obStartTime": {
            "format": "date-time",
            "description": "Observation detection start time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.888456Z"
          },
          "intensityTimes": {
            "description": "Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.",
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string",
              "example": "2022-03-10T12:15:50"
            },
            "example": [
              "2018-01-01T16:00:00.888456Z",
              "2018-01-01T16:00:00.898456Z",
              "2018-01-01T16:00:00.998456Z"
            ]
          },
          "currentSpectralFilterNum": {
            "format": "int16",
            "description": "The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.",
            "type": "integer",
            "example": 0
          },
          "expDuration": {
            "format": "double",
            "description": "Image exposure duration in seconds.",
            "type": "number",
            "example": 0.455
          },
          "intensities": {
            "description": "Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              1.1,
              1.1
            ]
          },
          "extinctionCoeffs": {
            "description": "Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.32,
              0.32,
              0.32
            ]
          },
          "extinctionCoeffsUnc": {
            "description": "Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.06,
              0.06,
              0.06
            ]
          },
          "skyBgs": {
            "description": "Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              100625.375,
              100625.375,
              100625.375
            ]
          },
          "localSkyBgs": {
            "description": "Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              100625.375,
              100625.375,
              100625.375
            ]
          },
          "localSkyBgsUnc": {
            "description": "Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.065,
              0.065,
              0.065
            ]
          },
          "numDetectedStars": {
            "description": "Array of the number of detected stars in the FOV with a value for each element in the intensities field.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              6,
              6,
              6
            ]
          },
          "numCorrelatedStars": {
            "description": "Array of the number of correlated stars in the FOV with a value for each element in the intensities field.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              3,
              3,
              3
            ]
          },
          "zeroPoints": {
            "description": "Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              24.711,
              24.711,
              24.711
            ]
          },
          "ras": {
            "description": "Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              107.4,
              107.4,
              107.4
            ]
          },
          "declinations": {
            "description": "Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -0.45,
              -0.45,
              -0.45
            ]
          },
          "raRates": {
            "description": "Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0,
              0,
              0
            ]
          },
          "percentSats": {
            "description": "Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.1,
              0.2,
              1
            ]
          }
        }
      },
      "OpticalSOIObservation_Ingest": {
        "description": "An Optical SOI record contains observation information taken from a sensor about a Space Object.",
        "required": [
          "obStartTime"
        ],
        "type": "object",
        "properties": {
          "obStartTime": {
            "format": "date-time",
            "description": "Observation detection start time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.888456Z"
          },
          "intensityTimes": {
            "description": "Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.",
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string",
              "example": "2022-03-10T12:15:50"
            },
            "example": [
              "2018-01-01T16:00:00.888456Z",
              "2018-01-01T16:00:00.898456Z",
              "2018-01-01T16:00:00.998456Z"
            ]
          },
          "currentSpectralFilterNum": {
            "format": "int16",
            "description": "The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.",
            "type": "integer",
            "example": 0
          },
          "expDuration": {
            "format": "double",
            "description": "Image exposure duration in seconds.",
            "type": "number",
            "example": 0.455
          },
          "intensities": {
            "description": "Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              1.1,
              1.1
            ]
          },
          "extinctionCoeffs": {
            "description": "Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.32,
              0.32,
              0.32
            ]
          },
          "extinctionCoeffsUnc": {
            "description": "Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.06,
              0.06,
              0.06
            ]
          },
          "skyBgs": {
            "description": "Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              100625.375,
              100625.375,
              100625.375
            ]
          },
          "localSkyBgs": {
            "description": "Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              100625.375,
              100625.375,
              100625.375
            ]
          },
          "localSkyBgsUnc": {
            "description": "Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.065,
              0.065,
              0.065
            ]
          },
          "numDetectedStars": {
            "description": "Array of the number of detected stars in the FOV with a value for each element in the intensities field.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              6,
              6,
              6
            ]
          },
          "numCorrelatedStars": {
            "description": "Array of the number of correlated stars in the FOV with a value for each element in the intensities field.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              3,
              3,
              3
            ]
          },
          "zeroPoints": {
            "description": "Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              24.711,
              24.711,
              24.711
            ]
          },
          "ras": {
            "description": "Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              107.4,
              107.4,
              107.4
            ]
          },
          "declinations": {
            "description": "Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -0.45,
              -0.45,
              -0.45
            ]
          },
          "raRates": {
            "description": "Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0,
              0,
              0
            ]
          },
          "percentSats": {
            "description": "Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.1,
              0.2,
              1
            ]
          }
        }
      },
      "Organization_Full": {
        "description": "An organization such as a corporation, manufacturer, consortium, government, etc. An organization may have parent and child organizations as well as link to a former organization if this org previously existed as another organization.",
        "required": [
          "classificationMarking",
          "name",
          "type",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Organization name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "type": {
            "description": "Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "GOVERNMENT"
          },
          "category": {
            "description": "Subtype or category of the organization (e.g. Private company, stock market quoted company, subsidiary, goverment department/agency, etc).",
            "maxLength": 128,
            "type": "string",
            "example": "Private company"
          },
          "externalId": {
            "description": "Optional externally provided identifier for this row.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "description": {
            "description": "Organization description.",
            "maxLength": 256,
            "type": "string",
            "example": "Example description"
          },
          "countryCode": {
            "description": "Country of the physical location of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code. However, it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "nationality": {
            "description": "Country of registration or ownership of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "active": {
            "description": "Boolean indicating if this organization is currently active.",
            "type": "boolean",
            "example": false
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "some.user"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "organizationDetails": {
            "description": "Read-only collection of additional OrganizationDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/organizationdetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationDetails_Full"
            },
            "readOnly": true
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OrganizationDetails_Full": {
        "description": "Model representation of additional detailed organization data as collected by a particular source.",
        "required": [
          "idOrganization",
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATIONDETAILS-ID"
          },
          "idOrganization": {
            "description": "Unique identifier of the parent organization.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Organization details name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "email": {
            "description": "Listed contact email address for the organization.",
            "maxLength": 320,
            "type": "string",
            "example": "some_organization@organization.com"
          },
          "address1": {
            "description": "Street number of the organization.",
            "maxLength": 120,
            "type": "string",
            "example": "123 Main Street"
          },
          "address2": {
            "description": "Field for additional organization address information such as PO Box and unit number.",
            "maxLength": 120,
            "type": "string",
            "example": "Apt 4B"
          },
          "address3": {
            "description": "Contains the third line of address information for an organization.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado Springs CO, 80903"
          },
          "geoAdminLevel1": {
            "description": "Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado"
          },
          "geoAdminLevel2": {
            "description": "Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.",
            "maxLength": 120,
            "type": "string",
            "example": "El Paso County"
          },
          "geoAdminLevel3": {
            "description": "Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado Springs"
          },
          "postalCode": {
            "description": "A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.",
            "maxLength": 32,
            "type": "string",
            "example": "80903"
          },
          "description": {
            "description": "Organization description.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example description"
          },
          "formerOrgId": {
            "description": "Former organization ID (if this organization previously existed as another organization).",
            "maxLength": 36,
            "type": "string",
            "example": "FORMERORG-ID"
          },
          "parentOrgId": {
            "description": "Parent organization ID of this organization if it is a child organization.",
            "maxLength": 36,
            "type": "string",
            "example": "PARENTORG-ID"
          },
          "financialYearEndDate": {
            "format": "date-time",
            "description": "For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "revenue": {
            "format": "double",
            "description": "For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "profit": {
            "format": "double",
            "description": "For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "ebitda": {
            "format": "double",
            "description": "For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "ftes": {
            "format": "int32",
            "description": "Total number of FTEs in this organization.",
            "type": "integer",
            "example": 123
          },
          "broker": {
            "description": "Designated broker for this organization.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "ceo": {
            "description": "For organizations of type CORPORATION, the name of the Chief Executive Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "cfo": {
            "description": "For organizations of type CORPORATION, the name of the Chief Financial Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "cto": {
            "description": "For organizations of type CORPORATION, the name of the Chief Technology Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "riskManager": {
            "description": "The name of the risk manager for the organization.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "massRanking": {
            "format": "int32",
            "description": "Mass ranking for this organization.",
            "type": "integer",
            "example": 123
          },
          "revenueRanking": {
            "format": "int32",
            "description": "Revenue ranking for this organization.",
            "type": "integer",
            "example": 123
          },
          "financialNotes": {
            "description": "For organizations of type CORPORATION, notes on company financials.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "servicesNotes": {
            "description": "Notes on the services provided by the organization.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "fleetPlanNotes": {
            "description": "Satellite fleet planning notes for this organization.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "some.user"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "PassiveRadarObservation_Abridged": {
        "description": "Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2023-01-24T23:35:26.518152Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "40699"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 40699
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "OCULUSA"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "idRFEmitter": {
            "description": "Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "RED_CLIFFS_3ABCRN"
          },
          "idSensorRefReceiver": {
            "description": "Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "OculusRef1"
          },
          "extObservationId": {
            "description": "Optional external observation identifier provided by the source.",
            "maxLength": 36,
            "type": "string",
            "example": "26892"
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "trackId": {
            "description": "Unique identifier of a track that represents a tracklet for this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "12212"
          },
          "obPosition": {
            "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
            "maxLength": 8,
            "type": "string",
            "example": "FIRST"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": false
          },
          "azimuth": {
            "format": "double",
            "description": "Line of sight azimuth angle in degrees and topocentric frame.",
            "type": "number",
            "example": 134.5
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.",
            "type": "number",
            "example": 0.5
          },
          "azimuthBias": {
            "format": "double",
            "description": "Sensor azimuth angle bias in degrees.",
            "type": "number",
            "example": 0.123
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the line of sight azimuth in degrees per second.",
            "type": "number",
            "example": 0.5
          },
          "elevation": {
            "format": "double",
            "description": "Line of sight elevation in degrees and topocentric frame.",
            "type": "number",
            "example": 76.1
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight elevation angle measurement, in degrees.",
            "type": "number",
            "example": 0.5
          },
          "elevationBias": {
            "format": "double",
            "description": "Sensor elevation bias in degrees.",
            "type": "number",
            "example": 0.123
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the line of sight elevation in degrees per second.",
            "type": "number",
            "example": 0.5
          },
          "delay": {
            "format": "double",
            "description": "The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).",
            "type": "number",
            "example": 0.00505820232809312
          },
          "delayUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the delay measurement, in seconds.",
            "type": "number",
            "example": 0.0000031
          },
          "delayBias": {
            "format": "double",
            "description": "Delay bias in seconds.",
            "type": "number",
            "example": 0.00000123
          },
          "bistaticRange": {
            "format": "double",
            "description": "Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.",
            "type": "number",
            "example": 754.8212
          },
          "bistaticRangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in bistatic range in kilometers.",
            "type": "number",
            "example": 5.1
          },
          "bistaticRangeBias": {
            "format": "double",
            "description": "Sensor bistatic range bias in kilometers.",
            "type": "number",
            "example": 2.34
          },
          "bistaticRangeRate": {
            "format": "double",
            "description": "Rate of change of the bistatic path in kilometers/sec.",
            "type": "number",
            "example": -0.30222
          },
          "bistaticRangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.",
            "type": "number",
            "example": 0.123
          },
          "bistaticRangeAccel": {
            "format": "double",
            "description": "Bistatic range acceleration in kilometers/sec^2.",
            "type": "number",
            "example": 1.23
          },
          "bistaticRangeAccelUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.",
            "type": "number",
            "example": 0.1
          },
          "doppler": {
            "format": "double",
            "description": "Doppler measurement in hertz.",
            "type": "number",
            "example": -101.781641000597
          },
          "dopplerUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the Doppler measurement in hertz.",
            "type": "number",
            "example": 0.2
          },
          "coning": {
            "format": "double",
            "description": "Coning angle in degrees.",
            "type": "number",
            "example": 60.1
          },
          "coningUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the coning angle measurement, in degrees.",
            "type": "number",
            "example": 0.5
          },
          "tof": {
            "format": "double",
            "description": "Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.",
            "type": "number",
            "example": 0.00592856674135648
          },
          "tofUnc": {
            "format": "double",
            "description": "One sigma uncertainty in time of flight in seconds.",
            "type": "number",
            "example": 0.0000031
          },
          "tofBias": {
            "format": "double",
            "description": "The Time of Flight (TOF) bias in seconds.",
            "type": "number",
            "example": 0.00000123
          },
          "accel": {
            "format": "double",
            "description": "The target Acceleration measurement in kilometers/sec^2 for this observation.",
            "type": "number",
            "example": 1.23
          },
          "accelUnc": {
            "format": "double",
            "description": "The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.",
            "type": "number",
            "example": 0.1
          },
          "ra": {
            "format": "double",
            "description": "Line of sight right ascension in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 1.23
          },
          "declination": {
            "format": "double",
            "description": "Line of sight declination angle in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.23
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": -35.1181763996856
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 139.613567052763
          },
          "alt": {
            "format": "double",
            "description": "The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.",
            "minimum": 0,
            "type": "number",
            "example": 478.056378
          },
          "xvel": {
            "format": "double",
            "description": "X velocity of target in kilometers/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 1.23
          },
          "yvel": {
            "format": "double",
            "description": "Y velocity of target in kilometers/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 3.21
          },
          "zvel": {
            "format": "double",
            "description": "Z velocity of target in kilometers/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 3.12
          },
          "rcs": {
            "format": "double",
            "description": "Radar cross section in meters squared for polarization principal.",
            "type": "number",
            "example": 100.23
          },
          "rcsUnc": {
            "format": "double",
            "description": "One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.",
            "type": "number",
            "example": 1.23
          },
          "orthogonalRcs": {
            "format": "double",
            "description": "Radar cross section in meters squared for orthogonal polarization.",
            "type": "number",
            "example": 10.23
          },
          "orthogonalRcsUnc": {
            "format": "double",
            "description": "One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.",
            "type": "number",
            "example": 1.23
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 17.292053
          },
          "timingBias": {
            "format": "double",
            "description": "Sensor timing bias in seconds.",
            "type": "number",
            "example": 1.23
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "Descriptor"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "type": {
            "description": "Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).",
            "type": "string",
            "readOnly": true,
            "example": "RADAR"
          }
        }
      },
      "PassiveRadarObservation_Full": {
        "description": "Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2023-01-24T23:35:26.518152Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "40699"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 40699
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "OCULUSA"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "idRFEmitter": {
            "description": "Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "RED_CLIFFS_3ABCRN"
          },
          "idSensorRefReceiver": {
            "description": "Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "OculusRef1"
          },
          "extObservationId": {
            "description": "Optional external observation identifier provided by the source.",
            "maxLength": 36,
            "type": "string",
            "example": "26892"
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "trackId": {
            "description": "Unique identifier of a track that represents a tracklet for this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "12212"
          },
          "obPosition": {
            "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
            "maxLength": 8,
            "type": "string",
            "example": "FIRST"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": false
          },
          "azimuth": {
            "format": "double",
            "description": "Line of sight azimuth angle in degrees and topocentric frame.",
            "type": "number",
            "example": 134.5
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.",
            "type": "number",
            "example": 0.5
          },
          "azimuthBias": {
            "format": "double",
            "description": "Sensor azimuth angle bias in degrees.",
            "type": "number",
            "example": 0.123
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the line of sight azimuth in degrees per second.",
            "type": "number",
            "example": 0.5
          },
          "elevation": {
            "format": "double",
            "description": "Line of sight elevation in degrees and topocentric frame.",
            "type": "number",
            "example": 76.1
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight elevation angle measurement, in degrees.",
            "type": "number",
            "example": 0.5
          },
          "elevationBias": {
            "format": "double",
            "description": "Sensor elevation bias in degrees.",
            "type": "number",
            "example": 0.123
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the line of sight elevation in degrees per second.",
            "type": "number",
            "example": 0.5
          },
          "delay": {
            "format": "double",
            "description": "The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).",
            "type": "number",
            "example": 0.00505820232809312
          },
          "delayUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the delay measurement, in seconds.",
            "type": "number",
            "example": 0.0000031
          },
          "delayBias": {
            "format": "double",
            "description": "Delay bias in seconds.",
            "type": "number",
            "example": 0.00000123
          },
          "bistaticRange": {
            "format": "double",
            "description": "Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.",
            "type": "number",
            "example": 754.8212
          },
          "bistaticRangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in bistatic range in kilometers.",
            "type": "number",
            "example": 5.1
          },
          "bistaticRangeBias": {
            "format": "double",
            "description": "Sensor bistatic range bias in kilometers.",
            "type": "number",
            "example": 2.34
          },
          "bistaticRangeRate": {
            "format": "double",
            "description": "Rate of change of the bistatic path in kilometers/sec.",
            "type": "number",
            "example": -0.30222
          },
          "bistaticRangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.",
            "type": "number",
            "example": 0.123
          },
          "bistaticRangeAccel": {
            "format": "double",
            "description": "Bistatic range acceleration in kilometers/sec^2.",
            "type": "number",
            "example": 1.23
          },
          "bistaticRangeAccelUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.",
            "type": "number",
            "example": 0.1
          },
          "doppler": {
            "format": "double",
            "description": "Doppler measurement in hertz.",
            "type": "number",
            "example": -101.781641000597
          },
          "dopplerUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the Doppler measurement in hertz.",
            "type": "number",
            "example": 0.2
          },
          "coning": {
            "format": "double",
            "description": "Coning angle in degrees.",
            "type": "number",
            "example": 60.1
          },
          "coningUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the coning angle measurement, in degrees.",
            "type": "number",
            "example": 0.5
          },
          "tof": {
            "format": "double",
            "description": "Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.",
            "type": "number",
            "example": 0.00592856674135648
          },
          "tofUnc": {
            "format": "double",
            "description": "One sigma uncertainty in time of flight in seconds.",
            "type": "number",
            "example": 0.0000031
          },
          "tofBias": {
            "format": "double",
            "description": "The Time of Flight (TOF) bias in seconds.",
            "type": "number",
            "example": 0.00000123
          },
          "accel": {
            "format": "double",
            "description": "The target Acceleration measurement in kilometers/sec^2 for this observation.",
            "type": "number",
            "example": 1.23
          },
          "accelUnc": {
            "format": "double",
            "description": "The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.",
            "type": "number",
            "example": 0.1
          },
          "ra": {
            "format": "double",
            "description": "Line of sight right ascension in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 1.23
          },
          "declination": {
            "format": "double",
            "description": "Line of sight declination angle in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.23
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": -35.1181763996856
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 139.613567052763
          },
          "alt": {
            "format": "double",
            "description": "The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.",
            "minimum": 0,
            "type": "number",
            "example": 478.056378
          },
          "xvel": {
            "format": "double",
            "description": "X velocity of target in kilometers/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 1.23
          },
          "yvel": {
            "format": "double",
            "description": "Y velocity of target in kilometers/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 3.21
          },
          "zvel": {
            "format": "double",
            "description": "Z velocity of target in kilometers/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 3.12
          },
          "rcs": {
            "format": "double",
            "description": "Radar cross section in meters squared for polarization principal.",
            "type": "number",
            "example": 100.23
          },
          "rcsUnc": {
            "format": "double",
            "description": "One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.",
            "type": "number",
            "example": 1.23
          },
          "orthogonalRcs": {
            "format": "double",
            "description": "Radar cross section in meters squared for orthogonal polarization.",
            "type": "number",
            "example": 10.23
          },
          "orthogonalRcsUnc": {
            "format": "double",
            "description": "One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.",
            "type": "number",
            "example": 1.23
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 17.292053
          },
          "timingBias": {
            "format": "double",
            "description": "Sensor timing bias in seconds.",
            "type": "number",
            "example": 1.23
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "Descriptor"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "type": {
            "description": "Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).",
            "type": "string",
            "readOnly": true,
            "example": "RADAR"
          }
        }
      },
      "PassiveRadarObservation_Ingest": {
        "description": "Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2023-01-24T23:35:26.518152Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "40699"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 40699
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "OCULUSA"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "idRFEmitter": {
            "description": "Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "RED_CLIFFS_3ABCRN"
          },
          "idSensorRefReceiver": {
            "description": "Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.",
            "maxLength": 36,
            "type": "string",
            "example": "OculusRef1"
          },
          "extObservationId": {
            "description": "Optional external observation identifier provided by the source.",
            "maxLength": 36,
            "type": "string",
            "example": "26892"
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "trackId": {
            "description": "Unique identifier of a track that represents a tracklet for this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "12212"
          },
          "obPosition": {
            "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
            "maxLength": 8,
            "type": "string",
            "example": "FIRST"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": false
          },
          "azimuth": {
            "format": "double",
            "description": "Line of sight azimuth angle in degrees and topocentric frame.",
            "type": "number",
            "example": 134.5
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.",
            "type": "number",
            "example": 0.5
          },
          "azimuthBias": {
            "format": "double",
            "description": "Sensor azimuth angle bias in degrees.",
            "type": "number",
            "example": 0.123
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the line of sight azimuth in degrees per second.",
            "type": "number",
            "example": 0.5
          },
          "elevation": {
            "format": "double",
            "description": "Line of sight elevation in degrees and topocentric frame.",
            "type": "number",
            "example": 76.1
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight elevation angle measurement, in degrees.",
            "type": "number",
            "example": 0.5
          },
          "elevationBias": {
            "format": "double",
            "description": "Sensor elevation bias in degrees.",
            "type": "number",
            "example": 0.123
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the line of sight elevation in degrees per second.",
            "type": "number",
            "example": 0.5
          },
          "delay": {
            "format": "double",
            "description": "The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).",
            "type": "number",
            "example": 0.00505820232809312
          },
          "delayUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the delay measurement, in seconds.",
            "type": "number",
            "example": 0.0000031
          },
          "delayBias": {
            "format": "double",
            "description": "Delay bias in seconds.",
            "type": "number",
            "example": 0.00000123
          },
          "bistaticRange": {
            "format": "double",
            "description": "Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.",
            "type": "number",
            "example": 754.8212
          },
          "bistaticRangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in bistatic range in kilometers.",
            "type": "number",
            "example": 5.1
          },
          "bistaticRangeBias": {
            "format": "double",
            "description": "Sensor bistatic range bias in kilometers.",
            "type": "number",
            "example": 2.34
          },
          "bistaticRangeRate": {
            "format": "double",
            "description": "Rate of change of the bistatic path in kilometers/sec.",
            "type": "number",
            "example": -0.30222
          },
          "bistaticRangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.",
            "type": "number",
            "example": 0.123
          },
          "bistaticRangeAccel": {
            "format": "double",
            "description": "Bistatic range acceleration in kilometers/sec^2.",
            "type": "number",
            "example": 1.23
          },
          "bistaticRangeAccelUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.",
            "type": "number",
            "example": 0.1
          },
          "doppler": {
            "format": "double",
            "description": "Doppler measurement in hertz.",
            "type": "number",
            "example": -101.781641000597
          },
          "dopplerUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the Doppler measurement in hertz.",
            "type": "number",
            "example": 0.2
          },
          "coning": {
            "format": "double",
            "description": "Coning angle in degrees.",
            "type": "number",
            "example": 60.1
          },
          "coningUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the coning angle measurement, in degrees.",
            "type": "number",
            "example": 0.5
          },
          "tof": {
            "format": "double",
            "description": "Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.",
            "type": "number",
            "example": 0.00592856674135648
          },
          "tofUnc": {
            "format": "double",
            "description": "One sigma uncertainty in time of flight in seconds.",
            "type": "number",
            "example": 0.0000031
          },
          "tofBias": {
            "format": "double",
            "description": "The Time of Flight (TOF) bias in seconds.",
            "type": "number",
            "example": 0.00000123
          },
          "accel": {
            "format": "double",
            "description": "The target Acceleration measurement in kilometers/sec^2 for this observation.",
            "type": "number",
            "example": 1.23
          },
          "accelUnc": {
            "format": "double",
            "description": "The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.",
            "type": "number",
            "example": 0.1
          },
          "ra": {
            "format": "double",
            "description": "Line of sight right ascension in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 1.23
          },
          "declination": {
            "format": "double",
            "description": "Line of sight declination angle in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.23
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": -35.1181763996856
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 139.613567052763
          },
          "alt": {
            "format": "double",
            "description": "The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.",
            "minimum": 0,
            "type": "number",
            "example": 478.056378
          },
          "xvel": {
            "format": "double",
            "description": "X velocity of target in kilometers/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 1.23
          },
          "yvel": {
            "format": "double",
            "description": "Y velocity of target in kilometers/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 3.21
          },
          "zvel": {
            "format": "double",
            "description": "Z velocity of target in kilometers/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 3.12
          },
          "rcs": {
            "format": "double",
            "description": "Radar cross section in meters squared for polarization principal.",
            "type": "number",
            "example": 100.23
          },
          "rcsUnc": {
            "format": "double",
            "description": "One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.",
            "type": "number",
            "example": 1.23
          },
          "orthogonalRcs": {
            "format": "double",
            "description": "Radar cross section in meters squared for orthogonal polarization.",
            "type": "number",
            "example": 10.23
          },
          "orthogonalRcsUnc": {
            "format": "double",
            "description": "One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.",
            "type": "number",
            "example": 1.23
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 17.292053
          },
          "timingBias": {
            "format": "double",
            "description": "Sensor timing bias in seconds.",
            "type": "number",
            "example": 1.23
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "Descriptor"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "type": {
            "description": "Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).",
            "type": "string",
            "readOnly": true,
            "example": "RADAR"
          }
        }
      },
      "RadarObservation_Abridged": {
        "description": "Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RADAROBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 1
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "obPosition": {
            "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
            "maxLength": 8,
            "type": "string",
            "example": "FIRST"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": true
          },
          "azimuth": {
            "format": "double",
            "description": "azimuth angle in degrees and topocentric frame.",
            "type": "number",
            "example": 45.23
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.",
            "type": "number",
            "example": 45.23
          },
          "azimuthBias": {
            "format": "double",
            "description": "Sensor azimuth angle bias in degrees.",
            "type": "number",
            "example": 45.23
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the line of sight azimuth in degrees per second.",
            "type": "number",
            "example": 1.23
          },
          "elevation": {
            "format": "double",
            "description": "Line of sight elevation in degrees and topocentric frame.",
            "type": "number",
            "example": 45.23
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight elevation angle measurement, in degrees.",
            "type": "number",
            "example": 1.23
          },
          "elevationBias": {
            "format": "double",
            "description": "Sensor elevation bias in degrees.",
            "type": "number",
            "example": 1.23
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the line of sight elevation in degrees per second.",
            "type": "number",
            "example": 1.23
          },
          "range": {
            "format": "double",
            "description": "Target range in km.",
            "type": "number",
            "example": 100.23
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeAccel": {
            "format": "double",
            "description": "Range accelaration in km/s2.",
            "type": "number",
            "example": 10.23
          },
          "rangeAccelUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).",
            "type": "number",
            "example": 1.23
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range measurement, in kilometers.",
            "type": "number",
            "example": 1.23
          },
          "rangeBias": {
            "format": "double",
            "description": "Sensor range bias in km.",
            "type": "number",
            "example": 1.23
          },
          "rangeRate": {
            "format": "double",
            "description": "Rate of change of the line of sight range in km/sec.",
            "type": "number",
            "example": 1.23
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range rate measurement, in kilometers/second.",
            "type": "number",
            "example": 0.5
          },
          "doppler": {
            "format": "double",
            "description": "Corrected doppler measurement in meters per second.",
            "type": "number",
            "example": 10.23
          },
          "dopplerUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the corrected doppler measurement, in meters/second.",
            "type": "number",
            "example": 1.23
          },
          "ra": {
            "format": "double",
            "description": "Line of sight right ascension in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 1.23
          },
          "raMeasured": {
            "description": "Optional flag indicating whether the ra value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "declination": {
            "format": "double",
            "description": "Line of sight declination angle in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.23
          },
          "declinationMeasured": {
            "description": "Optional flag indicating whether the declination value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "x": {
            "format": "double",
            "description": "X position of target in km in J2000 coordinate frame.",
            "type": "number",
            "example": 50.23
          },
          "y": {
            "format": "double",
            "description": "Y position of target in km in J2000 coordinate frame.",
            "type": "number",
            "example": 50.23
          },
          "z": {
            "format": "double",
            "description": "Z position of target in km in J2000 coordinate frame.",
            "type": "number",
            "example": 50.23
          },
          "xvel": {
            "format": "double",
            "description": "X velocity of target in km/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 1.23
          },
          "yvel": {
            "format": "double",
            "description": "Y velocity of target in km/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 5.23
          },
          "zvel": {
            "format": "double",
            "description": "Z velocity of target in km/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 5.23
          },
          "senx": {
            "format": "double",
            "description": "Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
            "type": "number",
            "example": 45.23
          },
          "seny": {
            "format": "double",
            "description": "Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
            "type": "number",
            "example": 40.23
          },
          "senz": {
            "format": "double",
            "description": "Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
            "type": "number",
            "example": 35.23
          },
          "rcs": {
            "format": "double",
            "description": "Radar cross section in meters squared for polarization principal.",
            "type": "number",
            "example": 100.23
          },
          "rcsUnc": {
            "format": "double",
            "description": "one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.",
            "type": "number",
            "example": 1.23
          },
          "orthogonalRcs": {
            "format": "double",
            "description": "Radar cross section in meters squared for orthogonal polarization.",
            "type": "number",
            "example": 1.23
          },
          "orthogonalRcsUnc": {
            "format": "double",
            "description": "one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.",
            "type": "number",
            "example": 10.23
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 0.5
          },
          "beam": {
            "format": "double",
            "description": "ID of the beam that produced this observation.",
            "type": "number",
            "example": 1.23
          },
          "timingBias": {
            "format": "double",
            "description": "Sensor timing bias in seconds.",
            "type": "number",
            "example": 1.23
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "rawFileURI"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "descriptor"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "type": {
            "description": "Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).",
            "type": "string",
            "readOnly": true,
            "example": "RADAR"
          }
        }
      },
      "RadarObservation_Full": {
        "description": "Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RADAROBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 1
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "obPosition": {
            "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
            "maxLength": 8,
            "type": "string",
            "example": "FIRST"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": true
          },
          "azimuth": {
            "format": "double",
            "description": "azimuth angle in degrees and topocentric frame.",
            "type": "number",
            "example": 45.23
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.",
            "type": "number",
            "example": 45.23
          },
          "azimuthBias": {
            "format": "double",
            "description": "Sensor azimuth angle bias in degrees.",
            "type": "number",
            "example": 45.23
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the line of sight azimuth in degrees per second.",
            "type": "number",
            "example": 1.23
          },
          "elevation": {
            "format": "double",
            "description": "Line of sight elevation in degrees and topocentric frame.",
            "type": "number",
            "example": 45.23
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight elevation angle measurement, in degrees.",
            "type": "number",
            "example": 1.23
          },
          "elevationBias": {
            "format": "double",
            "description": "Sensor elevation bias in degrees.",
            "type": "number",
            "example": 1.23
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the line of sight elevation in degrees per second.",
            "type": "number",
            "example": 1.23
          },
          "range": {
            "format": "double",
            "description": "Target range in km.",
            "type": "number",
            "example": 100.23
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeAccel": {
            "format": "double",
            "description": "Range accelaration in km/s2.",
            "type": "number",
            "example": 10.23
          },
          "rangeAccelUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).",
            "type": "number",
            "example": 1.23
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range measurement, in kilometers.",
            "type": "number",
            "example": 1.23
          },
          "rangeBias": {
            "format": "double",
            "description": "Sensor range bias in km.",
            "type": "number",
            "example": 1.23
          },
          "rangeRate": {
            "format": "double",
            "description": "Rate of change of the line of sight range in km/sec.",
            "type": "number",
            "example": 1.23
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range rate measurement, in kilometers/second.",
            "type": "number",
            "example": 0.5
          },
          "doppler": {
            "format": "double",
            "description": "Corrected doppler measurement in meters per second.",
            "type": "number",
            "example": 10.23
          },
          "dopplerUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the corrected doppler measurement, in meters/second.",
            "type": "number",
            "example": 1.23
          },
          "ra": {
            "format": "double",
            "description": "Line of sight right ascension in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 1.23
          },
          "raMeasured": {
            "description": "Optional flag indicating whether the ra value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "declination": {
            "format": "double",
            "description": "Line of sight declination angle in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.23
          },
          "declinationMeasured": {
            "description": "Optional flag indicating whether the declination value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "x": {
            "format": "double",
            "description": "X position of target in km in J2000 coordinate frame.",
            "type": "number",
            "example": 50.23
          },
          "y": {
            "format": "double",
            "description": "Y position of target in km in J2000 coordinate frame.",
            "type": "number",
            "example": 50.23
          },
          "z": {
            "format": "double",
            "description": "Z position of target in km in J2000 coordinate frame.",
            "type": "number",
            "example": 50.23
          },
          "xvel": {
            "format": "double",
            "description": "X velocity of target in km/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 1.23
          },
          "yvel": {
            "format": "double",
            "description": "Y velocity of target in km/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 5.23
          },
          "zvel": {
            "format": "double",
            "description": "Z velocity of target in km/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 5.23
          },
          "senx": {
            "format": "double",
            "description": "Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
            "type": "number",
            "example": 45.23
          },
          "seny": {
            "format": "double",
            "description": "Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
            "type": "number",
            "example": 40.23
          },
          "senz": {
            "format": "double",
            "description": "Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
            "type": "number",
            "example": 35.23
          },
          "rcs": {
            "format": "double",
            "description": "Radar cross section in meters squared for polarization principal.",
            "type": "number",
            "example": 100.23
          },
          "rcsUnc": {
            "format": "double",
            "description": "one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.",
            "type": "number",
            "example": 1.23
          },
          "orthogonalRcs": {
            "format": "double",
            "description": "Radar cross section in meters squared for orthogonal polarization.",
            "type": "number",
            "example": 1.23
          },
          "orthogonalRcsUnc": {
            "format": "double",
            "description": "one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.",
            "type": "number",
            "example": 10.23
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 0.5
          },
          "beam": {
            "format": "double",
            "description": "ID of the beam that produced this observation.",
            "type": "number",
            "example": 1.23
          },
          "timingBias": {
            "format": "double",
            "description": "Sensor timing bias in seconds.",
            "type": "number",
            "example": 1.23
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "rawFileURI"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "descriptor"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "type": {
            "description": "Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).",
            "type": "string",
            "readOnly": true,
            "example": "RADAR"
          }
        }
      },
      "RadarObservation_Ingest": {
        "description": "Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RADAROBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 1
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "obPosition": {
            "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
            "maxLength": 8,
            "type": "string",
            "example": "FIRST"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": true
          },
          "azimuth": {
            "format": "double",
            "description": "azimuth angle in degrees and topocentric frame.",
            "type": "number",
            "example": 45.23
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.",
            "type": "number",
            "example": 45.23
          },
          "azimuthBias": {
            "format": "double",
            "description": "Sensor azimuth angle bias in degrees.",
            "type": "number",
            "example": 45.23
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the line of sight azimuth in degrees per second.",
            "type": "number",
            "example": 1.23
          },
          "elevation": {
            "format": "double",
            "description": "Line of sight elevation in degrees and topocentric frame.",
            "type": "number",
            "example": 45.23
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight elevation angle measurement, in degrees.",
            "type": "number",
            "example": 1.23
          },
          "elevationBias": {
            "format": "double",
            "description": "Sensor elevation bias in degrees.",
            "type": "number",
            "example": 1.23
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the line of sight elevation in degrees per second.",
            "type": "number",
            "example": 1.23
          },
          "range": {
            "format": "double",
            "description": "Target range in km.",
            "type": "number",
            "example": 100.23
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeAccel": {
            "format": "double",
            "description": "Range accelaration in km/s2.",
            "type": "number",
            "example": 10.23
          },
          "rangeAccelUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).",
            "type": "number",
            "example": 1.23
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range measurement, in kilometers.",
            "type": "number",
            "example": 1.23
          },
          "rangeBias": {
            "format": "double",
            "description": "Sensor range bias in km.",
            "type": "number",
            "example": 1.23
          },
          "rangeRate": {
            "format": "double",
            "description": "Rate of change of the line of sight range in km/sec.",
            "type": "number",
            "example": 1.23
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range rate measurement, in kilometers/second.",
            "type": "number",
            "example": 0.5
          },
          "doppler": {
            "format": "double",
            "description": "Corrected doppler measurement in meters per second.",
            "type": "number",
            "example": 10.23
          },
          "dopplerUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the corrected doppler measurement, in meters/second.",
            "type": "number",
            "example": 1.23
          },
          "ra": {
            "format": "double",
            "description": "Line of sight right ascension in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 1.23
          },
          "raMeasured": {
            "description": "Optional flag indicating whether the ra value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "declination": {
            "format": "double",
            "description": "Line of sight declination angle in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.23
          },
          "declinationMeasured": {
            "description": "Optional flag indicating whether the declination value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "x": {
            "format": "double",
            "description": "X position of target in km in J2000 coordinate frame.",
            "type": "number",
            "example": 50.23
          },
          "y": {
            "format": "double",
            "description": "Y position of target in km in J2000 coordinate frame.",
            "type": "number",
            "example": 50.23
          },
          "z": {
            "format": "double",
            "description": "Z position of target in km in J2000 coordinate frame.",
            "type": "number",
            "example": 50.23
          },
          "xvel": {
            "format": "double",
            "description": "X velocity of target in km/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 1.23
          },
          "yvel": {
            "format": "double",
            "description": "Y velocity of target in km/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 5.23
          },
          "zvel": {
            "format": "double",
            "description": "Z velocity of target in km/sec in J2000 coordinate frame.",
            "type": "number",
            "example": 5.23
          },
          "senx": {
            "format": "double",
            "description": "Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
            "type": "number",
            "example": 45.23
          },
          "seny": {
            "format": "double",
            "description": "Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
            "type": "number",
            "example": 40.23
          },
          "senz": {
            "format": "double",
            "description": "Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
            "type": "number",
            "example": 35.23
          },
          "rcs": {
            "format": "double",
            "description": "Radar cross section in meters squared for polarization principal.",
            "type": "number",
            "example": 100.23
          },
          "rcsUnc": {
            "format": "double",
            "description": "one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.",
            "type": "number",
            "example": 1.23
          },
          "orthogonalRcs": {
            "format": "double",
            "description": "Radar cross section in meters squared for orthogonal polarization.",
            "type": "number",
            "example": 1.23
          },
          "orthogonalRcsUnc": {
            "format": "double",
            "description": "one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.",
            "type": "number",
            "example": 10.23
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 0.5
          },
          "beam": {
            "format": "double",
            "description": "ID of the beam that produced this observation.",
            "type": "number",
            "example": 1.23
          },
          "timingBias": {
            "format": "double",
            "description": "Sensor timing bias in seconds.",
            "type": "number",
            "example": 1.23
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "rawFileURI"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "descriptor"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "type": {
            "description": "Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).",
            "type": "string",
            "readOnly": true,
            "example": "RADAR"
          }
        }
      },
      "RadarSOIObservation_Full": {
        "description": "A Radar SOI record contains observation information taken from a sensor about a Space Object.",
        "required": [
          "obStartTime"
        ],
        "type": "object",
        "properties": {
          "obStartTime": {
            "format": "date-time",
            "description": "Observation detection start time in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.888456Z"
          },
          "tovs": {
            "description": "Array of the times of validity in ISO 8601 UTC format with microsecond precision.",
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string"
            },
            "example": [
              "2018-01-01T16:00:00.888456Z",
              "2018-01-01T16:00:00.888456Z",
              "2018-01-01T16:00:00.888456Z"
            ]
          },
          "rcsValues": {
            "description": "Array of observed radar cross section (RCS) values, in square meters.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              12.34,
              26.11,
              43.21
            ]
          },
          "rcsErrorEsts": {
            "description": "Array of error estimates of RCS values, in square meters.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.01,
              0.003,
              0.001
            ]
          },
          "polarizations": {
            "description": "Array of sensor polarizations when collecting the data. Polarization is a property of electromagnetic waves that describes the orientation of their oscillations. Possible values are H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "H",
              "L",
              "V"
            ]
          },
          "spectralWidths": {
            "description": "Array of spectral widths, in hertz. The spectral width of a satellite can help determine if an object is stable or tumbling which is often useful to distinguish a rocket body from an active stabilized payload or to deduce a rotational period of slowly tumbling objects at GEO.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              23.45,
              20.57,
              12.21
            ]
          },
          "rspaces": {
            "description": "Array of range sample spacing in meters. The 'tovs' and 'rspaces' arrays must match in size, if 'rspaces' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.006,
              0.006,
              0.006
            ]
          },
          "xspaces": {
            "description": "Array of cross-range sample spacing in meters. The 'tovs' and 'xspaces' arrays must match in size, if 'xspaces' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.006,
              0.006,
              0.006
            ]
          },
          "doppler2XRs": {
            "description": "Array of conversion factors between Doppler in hertz and cross-range in meters. The 'tovs' and 'doppler2XRs' arrays must match in size, if 'doppler2XRs' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              5644.27,
              5644.27,
              5644.27
            ]
          },
          "deltaTimes": {
            "description": "Array of average Interpulse spacing in seconds.  The 'tovs' and 'deltaTimes' arrays must match in size, if 'deltaTimes' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.005,
              0.005,
              0.005
            ]
          },
          "aspectAngles": {
            "description": "Array of the aspect angle at the center of the image in degrees.  The 'tovs' and 'aspectAngles' arrays must match in size, if 'aspectAngles' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              4.278,
              4.278,
              4.278
            ]
          },
          "projAngVels": {
            "description": "Array of the component of target angular velocity observable by radar in radians per second.  The 'tovs' and 'projAngVels' arrays must match in size, if 'projAngVels' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.166,
              0.166,
              0.166
            ]
          },
          "idStateVector": {
            "description": "Optional id of assumed StateVector of object being observed.",
            "maxLength": 36,
            "type": "string",
            "example": "99a0de63-b38f-4d81-b057"
          },
          "idAttitudeSet": {
            "description": "Optional id of assumed AttitudeSet of object being observed.",
            "maxLength": 36,
            "type": "string",
            "example": "99a0de63-b38f-4d81-b057"
          },
          "ranges": {
            "description": "Array of the range to target at image center in kilometers. The 'tovs' and 'ranges' arrays must match in size, if 'ranges' is provided. If there is an associated image the range is assumed to be at image center.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              877.938,
              877.938,
              877.938
            ]
          },
          "azimuths": {
            "description": "Array of the azimuth angle to target at image center in degrees. The 'tovs' and 'azimuths' arrays must match in size, if 'azimuths' is provided. If there is an associated image the azimuth angle is assumed to be at image center.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              278.27,
              278.27,
              278.27
            ]
          },
          "elevations": {
            "description": "Array of the elevation angle to target at image center in degrees. The 'tovs' and 'elevations' arrays must match in size, if 'elevations' is provided. If there is an associated image the elevation angle is assumed to be at image center.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              70.85,
              70.85,
              70.85
            ]
          },
          "rangeRates": {
            "description": "Array of the range rate of target at image center in kilometers per second. The 'tovs' and 'rangeRates' arrays must match in size, if 'rangeRates' is provided. If there is an associated image the range rate is assumed to be at image center.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.317,
              0.317,
              0.317
            ]
          },
          "azimuthRates": {
            "description": "Array of the azimuth rate of target at image center in degrees per second. The 'tovs' and 'azimuthRates' arrays must match in size, if 'azimuthRates' is provided. If there is an associated image the azimuth rate is assumed to be at image center.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -1.481,
              -1.481,
              -1.481
            ]
          },
          "elevationRates": {
            "description": "Array of the elevation rate of target at image center in degrees per second. The 'tovs' and 'elevationRates' arrays must match in size, if 'elevationRates' is provided. If there is an associated image the elevation rate is assumed to be at image center.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -0.074,
              -0.074,
              -0.074
            ]
          },
          "rangeAccels": {
            "description": "Array of the range acceleratons of target in kilometers per second squared. The 'tovs' and 'rangeAccels' arrays must match in size, if 'rangeAccels' is provided. If there is an associated image the range acceleration is assumed to be at image center.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.12,
              0.01,
              0.2
            ]
          },
          "azimuthBiases": {
            "description": "Array of  sensor azimuth angle biases in degrees. The 'tovs' and 'azimuthBiases' arrays must match in size, if 'azimuthBiases' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              45.23,
              45.23,
              45.23
            ]
          },
          "elevationBiases": {
            "description": "Array of sensor elevation biases in degrees. The 'tovs' and 'elevationBiases' arrays must match in size, if 'elevationBiases' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              1.23,
              1.23
            ]
          },
          "rangeBiases": {
            "description": "Array of sensor range biases in kilometers. The 'tovs' and 'rangeBiases' arrays must match in size, if 'rangeBiases' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              1.23,
              1.23
            ]
          },
          "integrationAngles": {
            "description": "Array of Integration angles in degrees. The 'tovs' and 'integrationAngles' arrays must match in size, if 'integrationAngles' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              8.594,
              8.594,
              8.594
            ]
          },
          "crossRangeRes": {
            "description": "Array of cross-range resolutions (accounting for weighting function) in kilometers. The 'tovs' and 'crossRangeRes' arrays must match in size, if 'crossRangeRes' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              11.301,
              11.301,
              11.301
            ]
          },
          "beta": {
            "format": "double",
            "description": "Beta angle (between target and radar-image frame z axis) in degrees.",
            "type": "number",
            "example": -89.97
          },
          "kappa": {
            "format": "double",
            "description": "Kappa angle (between radar-line-of-sight and target-frame x axis) in degrees.",
            "type": "number",
            "example": 103.04
          },
          "peakAmplitudes": {
            "description": "Array of the peak pixel amplitude for each image in decibels. The 'tovs' and 'peakAmplitudes' arrays must match in size, if 'peakAmplitudes' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              33.1,
              33.1,
              33.1
            ]
          },
          "centerFrequency": {
            "format": "double",
            "description": "Radar center frequency of the radar in hertz.",
            "type": "number",
            "example": 160047.0625
          },
          "pulseBandwidth": {
            "format": "double",
            "description": "Bandwidth of radar pulse in hertz.",
            "type": "number",
            "example": 24094.12
          },
          "xpos": {
            "description": "Array of the cartesian X positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tovs' and 'xpos' arrays must match in size, if 'xpos' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -1118.577381,
              -1118.577381,
              -1118.577381
            ]
          },
          "ypos": {
            "description": "Array of the cartesian Y positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tovs' and 'ypos' arrays must match in size, if 'ypos' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              3026.231084,
              3026.231084,
              3026.231084
            ]
          },
          "zpos": {
            "description": "Array of the cartesian Z positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tovs' and 'zpos' arrays must match in size, if 'zpos' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              6167.831808,
              6167.831808,
              6167.831808
            ]
          },
          "xvel": {
            "description": "Array of the cartesian X velocities of target, in kilometers per second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tovs' and 'xvel' arrays must match in size, if 'xvel' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -4.25242784,
              -4.25242784,
              -4.25242784
            ]
          },
          "yvel": {
            "description": "Array of the cartesian Y velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tovs' and 'yvel' arrays must match in size, if 'yvel' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              5.291107434,
              5.291107434,
              5.291107434
            ]
          },
          "zvel": {
            "description": "Array of the cartesian Z velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tovs' and 'zvel' arrays must match in size, if 'zvel' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -3.356493869,
              -3.356493869,
              -3.356493869
            ]
          },
          "xaccel": {
            "description": "Array of the cartesian X accelerations, in kilometers per second squared, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tovs' and 'xaccel' arrays must match in size, if 'xaccel' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -0.075,
              -0.74,
              -0.4
            ]
          },
          "yaccel": {
            "description": "Array of the cartesian Y accelerations, in kilometers per second squared, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tovs' and 'yaccel' arrays must match in size, if 'yaccel' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -0.007,
              0.003,
              0.1
            ]
          },
          "zaccel": {
            "description": "Array of the cartesian Z accelerations, in kilometers per second squared, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tovs' and 'zaccel' arrays must match in size, if 'zaccel' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.1,
              0.2,
              0.3
            ]
          }
        }
      },
      "RadarSOIObservation_Ingest": {
        "description": "A Radar SOI record contains observation information taken from a sensor about a Space Object.",
        "required": [
          "obStartTime"
        ],
        "type": "object",
        "properties": {
          "obStartTime": {
            "format": "date-time",
            "description": "Observation detection start time in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.888456Z"
          },
          "tovs": {
            "description": "Array of the times of validity in ISO 8601 UTC format with microsecond precision.",
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string"
            },
            "example": [
              "2018-01-01T16:00:00.888456Z",
              "2018-01-01T16:00:00.888456Z",
              "2018-01-01T16:00:00.888456Z"
            ]
          },
          "rcsValues": {
            "description": "Array of observed radar cross section (RCS) values, in square meters.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              12.34,
              26.11,
              43.21
            ]
          },
          "rcsErrorEsts": {
            "description": "Array of error estimates of RCS values, in square meters.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.01,
              0.003,
              0.001
            ]
          },
          "polarizations": {
            "description": "Array of sensor polarizations when collecting the data. Polarization is a property of electromagnetic waves that describes the orientation of their oscillations. Possible values are H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "H",
              "L",
              "V"
            ]
          },
          "spectralWidths": {
            "description": "Array of spectral widths, in hertz. The spectral width of a satellite can help determine if an object is stable or tumbling which is often useful to distinguish a rocket body from an active stabilized payload or to deduce a rotational period of slowly tumbling objects at GEO.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              23.45,
              20.57,
              12.21
            ]
          },
          "rspaces": {
            "description": "Array of range sample spacing in meters. The 'tovs' and 'rspaces' arrays must match in size, if 'rspaces' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.006,
              0.006,
              0.006
            ]
          },
          "xspaces": {
            "description": "Array of cross-range sample spacing in meters. The 'tovs' and 'xspaces' arrays must match in size, if 'xspaces' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.006,
              0.006,
              0.006
            ]
          },
          "doppler2XRs": {
            "description": "Array of conversion factors between Doppler in hertz and cross-range in meters. The 'tovs' and 'doppler2XRs' arrays must match in size, if 'doppler2XRs' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              5644.27,
              5644.27,
              5644.27
            ]
          },
          "deltaTimes": {
            "description": "Array of average Interpulse spacing in seconds.  The 'tovs' and 'deltaTimes' arrays must match in size, if 'deltaTimes' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.005,
              0.005,
              0.005
            ]
          },
          "aspectAngles": {
            "description": "Array of the aspect angle at the center of the image in degrees.  The 'tovs' and 'aspectAngles' arrays must match in size, if 'aspectAngles' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              4.278,
              4.278,
              4.278
            ]
          },
          "projAngVels": {
            "description": "Array of the component of target angular velocity observable by radar in radians per second.  The 'tovs' and 'projAngVels' arrays must match in size, if 'projAngVels' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.166,
              0.166,
              0.166
            ]
          },
          "idStateVector": {
            "description": "Optional id of assumed StateVector of object being observed.",
            "maxLength": 36,
            "type": "string",
            "example": "99a0de63-b38f-4d81-b057"
          },
          "idAttitudeSet": {
            "description": "Optional id of assumed AttitudeSet of object being observed.",
            "maxLength": 36,
            "type": "string",
            "example": "99a0de63-b38f-4d81-b057"
          },
          "ranges": {
            "description": "Array of the range to target at image center in kilometers. The 'tovs' and 'ranges' arrays must match in size, if 'ranges' is provided. If there is an associated image the range is assumed to be at image center.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              877.938,
              877.938,
              877.938
            ]
          },
          "azimuths": {
            "description": "Array of the azimuth angle to target at image center in degrees. The 'tovs' and 'azimuths' arrays must match in size, if 'azimuths' is provided. If there is an associated image the azimuth angle is assumed to be at image center.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              278.27,
              278.27,
              278.27
            ]
          },
          "elevations": {
            "description": "Array of the elevation angle to target at image center in degrees. The 'tovs' and 'elevations' arrays must match in size, if 'elevations' is provided. If there is an associated image the elevation angle is assumed to be at image center.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              70.85,
              70.85,
              70.85
            ]
          },
          "rangeRates": {
            "description": "Array of the range rate of target at image center in kilometers per second. The 'tovs' and 'rangeRates' arrays must match in size, if 'rangeRates' is provided. If there is an associated image the range rate is assumed to be at image center.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.317,
              0.317,
              0.317
            ]
          },
          "azimuthRates": {
            "description": "Array of the azimuth rate of target at image center in degrees per second. The 'tovs' and 'azimuthRates' arrays must match in size, if 'azimuthRates' is provided. If there is an associated image the azimuth rate is assumed to be at image center.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -1.481,
              -1.481,
              -1.481
            ]
          },
          "elevationRates": {
            "description": "Array of the elevation rate of target at image center in degrees per second. The 'tovs' and 'elevationRates' arrays must match in size, if 'elevationRates' is provided. If there is an associated image the elevation rate is assumed to be at image center.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -0.074,
              -0.074,
              -0.074
            ]
          },
          "rangeAccels": {
            "description": "Array of the range acceleratons of target in kilometers per second squared. The 'tovs' and 'rangeAccels' arrays must match in size, if 'rangeAccels' is provided. If there is an associated image the range acceleration is assumed to be at image center.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.12,
              0.01,
              0.2
            ]
          },
          "azimuthBiases": {
            "description": "Array of  sensor azimuth angle biases in degrees. The 'tovs' and 'azimuthBiases' arrays must match in size, if 'azimuthBiases' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              45.23,
              45.23,
              45.23
            ]
          },
          "elevationBiases": {
            "description": "Array of sensor elevation biases in degrees. The 'tovs' and 'elevationBiases' arrays must match in size, if 'elevationBiases' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              1.23,
              1.23
            ]
          },
          "rangeBiases": {
            "description": "Array of sensor range biases in kilometers. The 'tovs' and 'rangeBiases' arrays must match in size, if 'rangeBiases' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              1.23,
              1.23
            ]
          },
          "integrationAngles": {
            "description": "Array of Integration angles in degrees. The 'tovs' and 'integrationAngles' arrays must match in size, if 'integrationAngles' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              8.594,
              8.594,
              8.594
            ]
          },
          "crossRangeRes": {
            "description": "Array of cross-range resolutions (accounting for weighting function) in kilometers. The 'tovs' and 'crossRangeRes' arrays must match in size, if 'crossRangeRes' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              11.301,
              11.301,
              11.301
            ]
          },
          "beta": {
            "format": "double",
            "description": "Beta angle (between target and radar-image frame z axis) in degrees.",
            "type": "number",
            "example": -89.97
          },
          "kappa": {
            "format": "double",
            "description": "Kappa angle (between radar-line-of-sight and target-frame x axis) in degrees.",
            "type": "number",
            "example": 103.04
          },
          "peakAmplitudes": {
            "description": "Array of the peak pixel amplitude for each image in decibels. The 'tovs' and 'peakAmplitudes' arrays must match in size, if 'peakAmplitudes' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              33.1,
              33.1,
              33.1
            ]
          },
          "centerFrequency": {
            "format": "double",
            "description": "Radar center frequency of the radar in hertz.",
            "type": "number",
            "example": 160047.0625
          },
          "pulseBandwidth": {
            "format": "double",
            "description": "Bandwidth of radar pulse in hertz.",
            "type": "number",
            "example": 24094.12
          },
          "xpos": {
            "description": "Array of the cartesian X positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tovs' and 'xpos' arrays must match in size, if 'xpos' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -1118.577381,
              -1118.577381,
              -1118.577381
            ]
          },
          "ypos": {
            "description": "Array of the cartesian Y positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tovs' and 'ypos' arrays must match in size, if 'ypos' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              3026.231084,
              3026.231084,
              3026.231084
            ]
          },
          "zpos": {
            "description": "Array of the cartesian Z positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tovs' and 'zpos' arrays must match in size, if 'zpos' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              6167.831808,
              6167.831808,
              6167.831808
            ]
          },
          "xvel": {
            "description": "Array of the cartesian X velocities of target, in kilometers per second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tovs' and 'xvel' arrays must match in size, if 'xvel' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -4.25242784,
              -4.25242784,
              -4.25242784
            ]
          },
          "yvel": {
            "description": "Array of the cartesian Y velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tovs' and 'yvel' arrays must match in size, if 'yvel' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              5.291107434,
              5.291107434,
              5.291107434
            ]
          },
          "zvel": {
            "description": "Array of the cartesian Z velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tovs' and 'zvel' arrays must match in size, if 'zvel' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -3.356493869,
              -3.356493869,
              -3.356493869
            ]
          },
          "xaccel": {
            "description": "Array of the cartesian X accelerations, in kilometers per second squared, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tovs' and 'xaccel' arrays must match in size, if 'xaccel' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -0.075,
              -0.74,
              -0.4
            ]
          },
          "yaccel": {
            "description": "Array of the cartesian Y accelerations, in kilometers per second squared, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tovs' and 'yaccel' arrays must match in size, if 'yaccel' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -0.007,
              0.003,
              0.1
            ]
          },
          "zaccel": {
            "description": "Array of the cartesian Z accelerations, in kilometers per second squared, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tovs' and 'zaccel' arrays must match in size, if 'zaccel' is provided.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.1,
              0.2,
              0.3
            ]
          }
        }
      },
      "RFBand_Full": {
        "description": "Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.",
        "required": [
          "idEntity",
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RFBAND-ID"
          },
          "idEntity": {
            "description": "Unique identifier of the parent Entity which uses this band.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENTITY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "RF Band name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "BAND_NAME"
          },
          "band": {
            "description": "Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.",
            "maxLength": 5,
            "type": "string",
            "example": "Ku"
          },
          "mode": {
            "description": "RF Band mode (e.g. TX, RX).",
            "maxLength": 4,
            "enum": [
              "TX",
              "RX"
            ],
            "type": "string",
            "example": "TX"
          },
          "purpose": {
            "description": "Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).",
            "maxLength": 16,
            "enum": [
              "COMM",
              "TTC",
              "OPS",
              "OTHER"
            ],
            "type": "string",
            "example": "TTC"
          },
          "freqMin": {
            "format": "double",
            "description": "Start/minimum of transmit RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 50.23
          },
          "freqMax": {
            "format": "double",
            "description": "End/maximum of transmit RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 2000.23
          },
          "centerFreq": {
            "format": "double",
            "description": "Center frequency of RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 1000.23
          },
          "peakGain": {
            "format": "double",
            "description": "RF Range maximum gain, in dBi.",
            "type": "number",
            "example": 120.23
          },
          "edgeGain": {
            "format": "double",
            "description": "RF Range edge gain, in dBi.",
            "type": "number",
            "example": 100.23
          },
          "bandwidth": {
            "format": "double",
            "description": "RF Band frequency range bandwidth in Mhz.",
            "type": "number",
            "example": 100.23
          },
          "beamwidth": {
            "format": "double",
            "description": "Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.",
            "type": "number",
            "example": 45.23
          },
          "polarization": {
            "description": "Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.",
            "maxLength": 4,
            "enum": [
              "H",
              "V",
              "R",
              "L"
            ],
            "type": "string",
            "example": "H"
          },
          "erp": {
            "format": "double",
            "description": "Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the \"main lobe\") of its radiation pattern.",
            "type": "number",
            "example": 2.23
          },
          "eirp": {
            "format": "double",
            "description": "EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the \"main lobe\") of its radiation pattern.",
            "type": "number",
            "example": 2.23
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "RFObservation_Abridged": {
        "description": "Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).",
        "required": [
          "type",
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "type": {
            "description": "Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "example": "RF"
          },
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RFOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 32258
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIG-OBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIG-SENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": false
          },
          "transponder": {
            "description": "Optional identifier provided by observation source to indicate the transponder used for this measurement.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSPONDER-A"
          },
          "azimuth": {
            "format": "double",
            "description": "azimuth angle in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.1
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the azimuth angle measurement, in degrees.",
            "type": "number",
            "example": 2.1
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the azimuth in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "elevation": {
            "format": "double",
            "description": "elevation in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.1
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the elevation angle measurement, in degrees.",
            "type": "number",
            "example": 10.1
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the elevation in degrees per second.",
            "type": "number",
            "example": 10.1
          },
          "range": {
            "format": "double",
            "description": "Target range in km.",
            "type": "number",
            "example": 10.1
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range measurement, in kilometers.",
            "type": "number",
            "example": 10.1
          },
          "rangeRate": {
            "format": "double",
            "description": "Rate of change of the range in km/sec.",
            "type": "number",
            "example": 10.1
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range rate measurement, in kilometers/second.",
            "type": "number",
            "example": 10.1
          },
          "trackRange": {
            "format": "double",
            "description": "Target track or apparent range in km.",
            "type": "number",
            "example": 10.1
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.2
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 80.3
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.",
            "type": "number",
            "example": 10.1
          },
          "elnot": {
            "description": "ELINT notation.",
            "maxLength": 10,
            "type": "string",
            "example": "Ex. ELINT"
          },
          "frequency": {
            "format": "double",
            "description": "Center carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "nominalFrequency": {
            "format": "double",
            "description": "Nominal or expected center carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "startFrequency": {
            "format": "double",
            "description": "Start carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "endFrequency": {
            "format": "double",
            "description": "End carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "relativeCarrierPower": {
            "format": "double",
            "description": "Measured power of the center carrier frequency in dBW.",
            "type": "number",
            "example": 10.1
          },
          "spectrumAnalyzerPower": {
            "format": "double",
            "description": "Measured spectrum analyzer power of the center carrier frequency in dBW.",
            "type": "number",
            "example": 10.1
          },
          "relativeNoiseFloor": {
            "format": "double",
            "description": "The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.",
            "type": "number",
            "example": 10.1
          },
          "referenceLevel": {
            "format": "double",
            "description": "Reference signal level, in dBW.",
            "type": "number",
            "example": 10.1
          },
          "pgri": {
            "format": "double",
            "description": "A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.",
            "type": "number",
            "example": 10.1
          },
          "confidence": {
            "format": "double",
            "description": "Confidence in the signal and its measurements and characterization.",
            "type": "number",
            "example": 10.1
          },
          "incoming": {
            "description": "True if the signal is incoming, false if outgoing.",
            "type": "boolean",
            "example": false
          },
          "switchPoint": {
            "format": "int32",
            "description": "Switch Point of the RFObservation record.",
            "type": "integer",
            "example": 10
          },
          "baudRate": {
            "format": "double",
            "description": "Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.",
            "type": "number",
            "example": 10.1
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "nominalSnr": {
            "format": "double",
            "description": "Nominal or expected signal to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "polarity": {
            "format": "double",
            "description": "The antenna pointing dependent polarizer angle, in degrees.",
            "type": "number",
            "example": 10.1
          },
          "polarityType": {
            "description": "Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.",
            "maxLength": 16,
            "enum": [
              "H",
              "V",
              "R",
              "L"
            ],
            "type": "string",
            "example": "H"
          },
          "channel": {
            "format": "int32",
            "description": "Channel of the RFObservation record.",
            "type": "integer",
            "example": 10
          },
          "powerOverNoise": {
            "format": "double",
            "description": "Measured carrier power over noise (dBW/Hz).",
            "type": "number",
            "example": 10.1
          },
          "nominalPowerOverNoise": {
            "format": "double",
            "description": "Expected carrier power over noise (dBW/Hz).",
            "type": "number",
            "example": 10.1
          },
          "bandwidth": {
            "format": "double",
            "description": "Measured bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "nominalBandwidth": {
            "format": "double",
            "description": "Expected bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "resolutionBandwidth": {
            "format": "double",
            "description": "Resolution bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "videoBandwidth": {
            "format": "double",
            "description": "Video bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "eirp": {
            "format": "double",
            "description": "Measured Equivalent Isotopically Radiated Power in dBW.",
            "type": "number",
            "example": 10.1
          },
          "nominalEirp": {
            "format": "double",
            "description": "Expected Equivalent Isotopically Radiated Power in dBW.",
            "type": "number",
            "example": 10.1
          },
          "minPSD": {
            "format": "double",
            "description": "Minimum measured PSD value of the trace in dBW.",
            "type": "number",
            "example": 10.1
          },
          "maxPSD": {
            "format": "double",
            "description": "Maximum measured PSD value of the trace in dBW.",
            "type": "number",
            "example": 10.1
          },
          "frequencyShift": {
            "format": "double",
            "description": "Frequency Shift of the RFObservation record.",
            "type": "number",
            "example": 10.1
          },
          "peak": {
            "description": "Peak of the RFObservation record.",
            "type": "boolean",
            "example": false
          },
          "antennaName": {
            "description": "Antenna name of the RFObservation record.",
            "maxLength": 64,
            "type": "string",
            "example": "Antenna1"
          },
          "detectionStatus": {
            "description": "Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "DETECTED"
          },
          "collectionMode": {
            "description": "Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "SURVEY"
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URI"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "noisePwrDensity": {
            "format": "double",
            "description": "Noise power density, in dBW-Hz.",
            "type": "number",
            "example": 10.1
          },
          "carrierStandard": {
            "description": "Carrier standard (e.g. DVB-S2, 802.11g, etc.).",
            "maxLength": 10,
            "type": "string",
            "example": "DVB-S2"
          },
          "modulation": {
            "description": "Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).",
            "maxLength": 10,
            "type": "string",
            "example": "Auto"
          },
          "innerCodingRate": {
            "format": "int32",
            "description": "Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.",
            "type": "integer",
            "example": 7
          },
          "outerCodingRate": {
            "format": "int32",
            "description": "Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.",
            "type": "integer",
            "example": 4
          },
          "transmitFilterType": {
            "description": "Transmit pulse shaping filter typ (e.g. RRC).",
            "maxLength": 10,
            "type": "string",
            "example": "RRC"
          },
          "transmitFilterRollOff": {
            "format": "double",
            "description": "Transmit pulse shaping filter roll-off value.",
            "type": "number",
            "example": 10.1
          },
          "symbolToNoiseRatio": {
            "format": "double",
            "description": "Symbol to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "bitErrorRate": {
            "format": "double",
            "description": "The ratio of bit errors per number of received bits.",
            "type": "number",
            "example": 10.1
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "descriptor"
          },
          "url": {
            "description": "Optional URL containing additional information on this observation.",
            "maxLength": 2048,
            "type": "string",
            "example": "https://some-url"
          }
        }
      },
      "RFObservation_Full": {
        "description": "Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).",
        "required": [
          "type",
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "type": {
            "description": "Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "example": "RF"
          },
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RFOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 32258
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIG-OBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIG-SENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": false
          },
          "transponder": {
            "description": "Optional identifier provided by observation source to indicate the transponder used for this measurement.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSPONDER-A"
          },
          "azimuth": {
            "format": "double",
            "description": "azimuth angle in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.1
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the azimuth angle measurement, in degrees.",
            "type": "number",
            "example": 2.1
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the azimuth in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "elevation": {
            "format": "double",
            "description": "elevation in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.1
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the elevation angle measurement, in degrees.",
            "type": "number",
            "example": 10.1
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the elevation in degrees per second.",
            "type": "number",
            "example": 10.1
          },
          "range": {
            "format": "double",
            "description": "Target range in km.",
            "type": "number",
            "example": 10.1
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range measurement, in kilometers.",
            "type": "number",
            "example": 10.1
          },
          "rangeRate": {
            "format": "double",
            "description": "Rate of change of the range in km/sec.",
            "type": "number",
            "example": 10.1
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range rate measurement, in kilometers/second.",
            "type": "number",
            "example": 10.1
          },
          "trackRange": {
            "format": "double",
            "description": "Target track or apparent range in km.",
            "type": "number",
            "example": 10.1
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.2
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 80.3
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.",
            "type": "number",
            "example": 10.1
          },
          "elnot": {
            "description": "ELINT notation.",
            "maxLength": 10,
            "type": "string",
            "example": "Ex. ELINT"
          },
          "frequency": {
            "format": "double",
            "description": "Center carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "nominalFrequency": {
            "format": "double",
            "description": "Nominal or expected center carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "startFrequency": {
            "format": "double",
            "description": "Start carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "endFrequency": {
            "format": "double",
            "description": "End carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "relativeCarrierPower": {
            "format": "double",
            "description": "Measured power of the center carrier frequency in dBW.",
            "type": "number",
            "example": 10.1
          },
          "spectrumAnalyzerPower": {
            "format": "double",
            "description": "Measured spectrum analyzer power of the center carrier frequency in dBW.",
            "type": "number",
            "example": 10.1
          },
          "relativeNoiseFloor": {
            "format": "double",
            "description": "The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.",
            "type": "number",
            "example": 10.1
          },
          "referenceLevel": {
            "format": "double",
            "description": "Reference signal level, in dBW.",
            "type": "number",
            "example": 10.1
          },
          "pgri": {
            "format": "double",
            "description": "A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.",
            "type": "number",
            "example": 10.1
          },
          "confidence": {
            "format": "double",
            "description": "Confidence in the signal and its measurements and characterization.",
            "type": "number",
            "example": 10.1
          },
          "incoming": {
            "description": "True if the signal is incoming, false if outgoing.",
            "type": "boolean",
            "example": false
          },
          "switchPoint": {
            "format": "int32",
            "description": "Switch Point of the RFObservation record.",
            "type": "integer",
            "example": 10
          },
          "baudRate": {
            "format": "double",
            "description": "Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.",
            "type": "number",
            "example": 10.1
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "nominalSnr": {
            "format": "double",
            "description": "Nominal or expected signal to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "polarity": {
            "format": "double",
            "description": "The antenna pointing dependent polarizer angle, in degrees.",
            "type": "number",
            "example": 10.1
          },
          "polarityType": {
            "description": "Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.",
            "maxLength": 16,
            "enum": [
              "H",
              "V",
              "R",
              "L"
            ],
            "type": "string",
            "example": "H"
          },
          "channel": {
            "format": "int32",
            "description": "Channel of the RFObservation record.",
            "type": "integer",
            "example": 10
          },
          "powerOverNoise": {
            "format": "double",
            "description": "Measured carrier power over noise (dBW/Hz).",
            "type": "number",
            "example": 10.1
          },
          "nominalPowerOverNoise": {
            "format": "double",
            "description": "Expected carrier power over noise (dBW/Hz).",
            "type": "number",
            "example": 10.1
          },
          "bandwidth": {
            "format": "double",
            "description": "Measured bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "nominalBandwidth": {
            "format": "double",
            "description": "Expected bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "resolutionBandwidth": {
            "format": "double",
            "description": "Resolution bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "videoBandwidth": {
            "format": "double",
            "description": "Video bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "eirp": {
            "format": "double",
            "description": "Measured Equivalent Isotopically Radiated Power in dBW.",
            "type": "number",
            "example": 10.1
          },
          "nominalEirp": {
            "format": "double",
            "description": "Expected Equivalent Isotopically Radiated Power in dBW.",
            "type": "number",
            "example": 10.1
          },
          "minPSD": {
            "format": "double",
            "description": "Minimum measured PSD value of the trace in dBW.",
            "type": "number",
            "example": 10.1
          },
          "maxPSD": {
            "format": "double",
            "description": "Maximum measured PSD value of the trace in dBW.",
            "type": "number",
            "example": 10.1
          },
          "frequencyShift": {
            "format": "double",
            "description": "Frequency Shift of the RFObservation record.",
            "type": "number",
            "example": 10.1
          },
          "peak": {
            "description": "Peak of the RFObservation record.",
            "type": "boolean",
            "example": false
          },
          "antennaName": {
            "description": "Antenna name of the RFObservation record.",
            "maxLength": 64,
            "type": "string",
            "example": "Antenna1"
          },
          "detectionStatus": {
            "description": "Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "DETECTED"
          },
          "collectionMode": {
            "description": "Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "SURVEY"
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URI"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "noisePwrDensity": {
            "format": "double",
            "description": "Noise power density, in dBW-Hz.",
            "type": "number",
            "example": 10.1
          },
          "carrierStandard": {
            "description": "Carrier standard (e.g. DVB-S2, 802.11g, etc.).",
            "maxLength": 10,
            "type": "string",
            "example": "DVB-S2"
          },
          "modulation": {
            "description": "Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).",
            "maxLength": 10,
            "type": "string",
            "example": "Auto"
          },
          "innerCodingRate": {
            "format": "int32",
            "description": "Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.",
            "type": "integer",
            "example": 7
          },
          "outerCodingRate": {
            "format": "int32",
            "description": "Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.",
            "type": "integer",
            "example": 4
          },
          "transmitFilterType": {
            "description": "Transmit pulse shaping filter typ (e.g. RRC).",
            "maxLength": 10,
            "type": "string",
            "example": "RRC"
          },
          "transmitFilterRollOff": {
            "format": "double",
            "description": "Transmit pulse shaping filter roll-off value.",
            "type": "number",
            "example": 10.1
          },
          "symbolToNoiseRatio": {
            "format": "double",
            "description": "Symbol to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "bitErrorRate": {
            "format": "double",
            "description": "The ratio of bit errors per number of received bits.",
            "type": "number",
            "example": 10.1
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "descriptor"
          },
          "url": {
            "description": "Optional URL containing additional information on this observation.",
            "maxLength": 2048,
            "type": "string",
            "example": "https://some-url"
          }
        }
      },
      "RFObservationDetails_Full": {
        "description": "Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).",
        "required": [
          "type",
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "type": {
            "description": "Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "example": "RF"
          },
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RFOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 32258
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIG-OBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIG-SENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": false
          },
          "transponder": {
            "description": "Optional identifier provided by observation source to indicate the transponder used for this measurement.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSPONDER-A"
          },
          "azimuth": {
            "format": "double",
            "description": "azimuth angle in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.1
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the azimuth angle measurement, in degrees.",
            "type": "number",
            "example": 2.1
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the azimuth in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "elevation": {
            "format": "double",
            "description": "elevation in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.1
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the elevation angle measurement, in degrees.",
            "type": "number",
            "example": 10.1
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the elevation in degrees per second.",
            "type": "number",
            "example": 10.1
          },
          "range": {
            "format": "double",
            "description": "Target range in km.",
            "type": "number",
            "example": 10.1
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range measurement, in kilometers.",
            "type": "number",
            "example": 10.1
          },
          "rangeRate": {
            "format": "double",
            "description": "Rate of change of the range in km/sec.",
            "type": "number",
            "example": 10.1
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range rate measurement, in kilometers/second.",
            "type": "number",
            "example": 10.1
          },
          "trackRange": {
            "format": "double",
            "description": "Target track or apparent range in km.",
            "type": "number",
            "example": 10.1
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.2
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 80.3
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.",
            "type": "number",
            "example": 10.1
          },
          "elnot": {
            "description": "ELINT notation.",
            "maxLength": 10,
            "type": "string",
            "example": "Ex. ELINT"
          },
          "frequency": {
            "format": "double",
            "description": "Center carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "nominalFrequency": {
            "format": "double",
            "description": "Nominal or expected center carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "startFrequency": {
            "format": "double",
            "description": "Start carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "endFrequency": {
            "format": "double",
            "description": "End carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "relativeCarrierPower": {
            "format": "double",
            "description": "Measured power of the center carrier frequency in dBW.",
            "type": "number",
            "example": 10.1
          },
          "spectrumAnalyzerPower": {
            "format": "double",
            "description": "Measured spectrum analyzer power of the center carrier frequency in dBW.",
            "type": "number",
            "example": 10.1
          },
          "relativeNoiseFloor": {
            "format": "double",
            "description": "The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.",
            "type": "number",
            "example": 10.1
          },
          "referenceLevel": {
            "format": "double",
            "description": "Reference signal level, in dBW.",
            "type": "number",
            "example": 10.1
          },
          "pgri": {
            "format": "double",
            "description": "A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.",
            "type": "number",
            "example": 10.1
          },
          "confidence": {
            "format": "double",
            "description": "Confidence in the signal and its measurements and characterization.",
            "type": "number",
            "example": 10.1
          },
          "incoming": {
            "description": "True if the signal is incoming, false if outgoing.",
            "type": "boolean",
            "example": false
          },
          "switchPoint": {
            "format": "int32",
            "description": "Switch Point of the RFObservation record.",
            "type": "integer",
            "example": 10
          },
          "baudRate": {
            "format": "double",
            "description": "Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.",
            "type": "number",
            "example": 10.1
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "nominalSnr": {
            "format": "double",
            "description": "Nominal or expected signal to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "polarity": {
            "format": "double",
            "description": "The antenna pointing dependent polarizer angle, in degrees.",
            "type": "number",
            "example": 10.1
          },
          "polarityType": {
            "description": "Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.",
            "maxLength": 16,
            "enum": [
              "H",
              "V",
              "R",
              "L"
            ],
            "type": "string",
            "example": "H"
          },
          "channel": {
            "format": "int32",
            "description": "Channel of the RFObservation record.",
            "type": "integer",
            "example": 10
          },
          "powerOverNoise": {
            "format": "double",
            "description": "Measured carrier power over noise (dBW/Hz).",
            "type": "number",
            "example": 10.1
          },
          "nominalPowerOverNoise": {
            "format": "double",
            "description": "Expected carrier power over noise (dBW/Hz).",
            "type": "number",
            "example": 10.1
          },
          "bandwidth": {
            "format": "double",
            "description": "Measured bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "nominalBandwidth": {
            "format": "double",
            "description": "Expected bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "resolutionBandwidth": {
            "format": "double",
            "description": "Resolution bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "videoBandwidth": {
            "format": "double",
            "description": "Video bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "eirp": {
            "format": "double",
            "description": "Measured Equivalent Isotopically Radiated Power in dBW.",
            "type": "number",
            "example": 10.1
          },
          "nominalEirp": {
            "format": "double",
            "description": "Expected Equivalent Isotopically Radiated Power in dBW.",
            "type": "number",
            "example": 10.1
          },
          "minPSD": {
            "format": "double",
            "description": "Minimum measured PSD value of the trace in dBW.",
            "type": "number",
            "example": 10.1
          },
          "maxPSD": {
            "format": "double",
            "description": "Maximum measured PSD value of the trace in dBW.",
            "type": "number",
            "example": 10.1
          },
          "frequencyShift": {
            "format": "double",
            "description": "Frequency Shift of the RFObservation record.",
            "type": "number",
            "example": 10.1
          },
          "peak": {
            "description": "Peak of the RFObservation record.",
            "type": "boolean",
            "example": false
          },
          "antennaName": {
            "description": "Antenna name of the RFObservation record.",
            "maxLength": 64,
            "type": "string",
            "example": "Antenna1"
          },
          "detectionStatus": {
            "description": "Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "DETECTED"
          },
          "collectionMode": {
            "description": "Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "SURVEY"
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URI"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "noisePwrDensity": {
            "format": "double",
            "description": "Noise power density, in dBW-Hz.",
            "type": "number",
            "example": 10.1
          },
          "carrierStandard": {
            "description": "Carrier standard (e.g. DVB-S2, 802.11g, etc.).",
            "maxLength": 10,
            "type": "string",
            "example": "DVB-S2"
          },
          "modulation": {
            "description": "Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).",
            "maxLength": 10,
            "type": "string",
            "example": "Auto"
          },
          "innerCodingRate": {
            "format": "int32",
            "description": "Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.",
            "type": "integer",
            "example": 7
          },
          "outerCodingRate": {
            "format": "int32",
            "description": "Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.",
            "type": "integer",
            "example": 4
          },
          "transmitFilterType": {
            "description": "Transmit pulse shaping filter typ (e.g. RRC).",
            "maxLength": 10,
            "type": "string",
            "example": "RRC"
          },
          "transmitFilterRollOff": {
            "format": "double",
            "description": "Transmit pulse shaping filter roll-off value.",
            "type": "number",
            "example": 10.1
          },
          "symbolToNoiseRatio": {
            "format": "double",
            "description": "Symbol to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "bitErrorRate": {
            "format": "double",
            "description": "The ratio of bit errors per number of received bits.",
            "type": "number",
            "example": 10.1
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "descriptor"
          },
          "url": {
            "description": "Optional URL containing additional information on this observation.",
            "maxLength": 2048,
            "type": "string",
            "example": "https://some-url"
          },
          "frequencies": {
            "description": "Array of individual PSD frequencies of the signal in Hz. This array should correspond with the same-sized array of powers.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "powers": {
            "description": "Array of individual measured PSD powers of the signal in dBW. This array should correspond with the same-sized array of frequencies.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "snrs": {
            "description": "Array of signal to noise ratios of the signals, in dB.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "confidences": {
            "description": "Array of measurement confidences.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "detectionStatuses": {
            "description": "Array of detection statuses (e.g. DETECTED, CARRIER_DETECTED, NOT_DETECTED) for each measured signal.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "DETECTED"
            ]
          },
          "chipRates": {
            "description": "Array of chipRates.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "codeTaps": {
            "description": "Array of code taps.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "codeFills": {
            "description": "Array of code fills.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "codeLengths": {
            "description": "Array of code lengths.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "pnOrders": {
            "description": "Array of pnOrder.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "signalIds": {
            "description": "Array of optional source provided identifiers of the measurements/signals.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ID1",
              "ID2"
            ]
          },
          "baudRates": {
            "description": "Array of measured signal baud rates.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "telemetryIds": {
            "description": "Array of optional source provided telemetry identifiers of the measurements/signals.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ID1",
              "ID2"
            ]
          },
          "constellationXPoints": {
            "description": "Array of individual x-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationYPoints.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "constellationYPoints": {
            "description": "Array of individual y-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationXPoints.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          }
        }
      },
      "RFObservationDetails_Ingest": {
        "description": "Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).",
        "required": [
          "type",
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "type": {
            "description": "Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "example": "RF"
          },
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RFOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 32258
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIG-OBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIG-SENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": false
          },
          "transponder": {
            "description": "Optional identifier provided by observation source to indicate the transponder used for this measurement.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSPONDER-A"
          },
          "azimuth": {
            "format": "double",
            "description": "azimuth angle in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.1
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the azimuth angle measurement, in degrees.",
            "type": "number",
            "example": 2.1
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the azimuth in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "elevation": {
            "format": "double",
            "description": "elevation in degrees and J2000 coordinate frame.",
            "type": "number",
            "example": 10.1
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the elevation angle measurement, in degrees.",
            "type": "number",
            "example": 10.1
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the elevation in degrees per second.",
            "type": "number",
            "example": 10.1
          },
          "range": {
            "format": "double",
            "description": "Target range in km.",
            "type": "number",
            "example": 10.1
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range measurement, in kilometers.",
            "type": "number",
            "example": 10.1
          },
          "rangeRate": {
            "format": "double",
            "description": "Rate of change of the range in km/sec.",
            "type": "number",
            "example": 10.1
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the range rate measurement, in kilometers/second.",
            "type": "number",
            "example": 10.1
          },
          "trackRange": {
            "format": "double",
            "description": "Target track or apparent range in km.",
            "type": "number",
            "example": 10.1
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.2
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 80.3
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.",
            "type": "number",
            "example": 10.1
          },
          "elnot": {
            "description": "ELINT notation.",
            "maxLength": 10,
            "type": "string",
            "example": "Ex. ELINT"
          },
          "frequency": {
            "format": "double",
            "description": "Center carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "nominalFrequency": {
            "format": "double",
            "description": "Nominal or expected center carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "startFrequency": {
            "format": "double",
            "description": "Start carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "endFrequency": {
            "format": "double",
            "description": "End carrier frequency in Hz.",
            "type": "number",
            "example": 10.1
          },
          "relativeCarrierPower": {
            "format": "double",
            "description": "Measured power of the center carrier frequency in dBW.",
            "type": "number",
            "example": 10.1
          },
          "spectrumAnalyzerPower": {
            "format": "double",
            "description": "Measured spectrum analyzer power of the center carrier frequency in dBW.",
            "type": "number",
            "example": 10.1
          },
          "relativeNoiseFloor": {
            "format": "double",
            "description": "The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.",
            "type": "number",
            "example": 10.1
          },
          "referenceLevel": {
            "format": "double",
            "description": "Reference signal level, in dBW.",
            "type": "number",
            "example": 10.1
          },
          "pgri": {
            "format": "double",
            "description": "A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.",
            "type": "number",
            "example": 10.1
          },
          "confidence": {
            "format": "double",
            "description": "Confidence in the signal and its measurements and characterization.",
            "type": "number",
            "example": 10.1
          },
          "incoming": {
            "description": "True if the signal is incoming, false if outgoing.",
            "type": "boolean",
            "example": false
          },
          "switchPoint": {
            "format": "int32",
            "description": "Switch Point of the RFObservation record.",
            "type": "integer",
            "example": 10
          },
          "baudRate": {
            "format": "double",
            "description": "Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.",
            "type": "number",
            "example": 10.1
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "nominalSnr": {
            "format": "double",
            "description": "Nominal or expected signal to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "polarity": {
            "format": "double",
            "description": "The antenna pointing dependent polarizer angle, in degrees.",
            "type": "number",
            "example": 10.1
          },
          "polarityType": {
            "description": "Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.",
            "maxLength": 16,
            "enum": [
              "H",
              "V",
              "R",
              "L"
            ],
            "type": "string",
            "example": "H"
          },
          "channel": {
            "format": "int32",
            "description": "Channel of the RFObservation record.",
            "type": "integer",
            "example": 10
          },
          "powerOverNoise": {
            "format": "double",
            "description": "Measured carrier power over noise (dBW/Hz).",
            "type": "number",
            "example": 10.1
          },
          "nominalPowerOverNoise": {
            "format": "double",
            "description": "Expected carrier power over noise (dBW/Hz).",
            "type": "number",
            "example": 10.1
          },
          "bandwidth": {
            "format": "double",
            "description": "Measured bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "nominalBandwidth": {
            "format": "double",
            "description": "Expected bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "resolutionBandwidth": {
            "format": "double",
            "description": "Resolution bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "videoBandwidth": {
            "format": "double",
            "description": "Video bandwidth in Hz.",
            "type": "number",
            "example": 10.1
          },
          "eirp": {
            "format": "double",
            "description": "Measured Equivalent Isotopically Radiated Power in dBW.",
            "type": "number",
            "example": 10.1
          },
          "nominalEirp": {
            "format": "double",
            "description": "Expected Equivalent Isotopically Radiated Power in dBW.",
            "type": "number",
            "example": 10.1
          },
          "minPSD": {
            "format": "double",
            "description": "Minimum measured PSD value of the trace in dBW.",
            "type": "number",
            "example": 10.1
          },
          "maxPSD": {
            "format": "double",
            "description": "Maximum measured PSD value of the trace in dBW.",
            "type": "number",
            "example": 10.1
          },
          "frequencyShift": {
            "format": "double",
            "description": "Frequency Shift of the RFObservation record.",
            "type": "number",
            "example": 10.1
          },
          "peak": {
            "description": "Peak of the RFObservation record.",
            "type": "boolean",
            "example": false
          },
          "antennaName": {
            "description": "Antenna name of the RFObservation record.",
            "maxLength": 64,
            "type": "string",
            "example": "Antenna1"
          },
          "detectionStatus": {
            "description": "Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "DETECTED"
          },
          "collectionMode": {
            "description": "Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).",
            "maxLength": 32,
            "type": "string",
            "example": "SURVEY"
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URI"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "noisePwrDensity": {
            "format": "double",
            "description": "Noise power density, in dBW-Hz.",
            "type": "number",
            "example": 10.1
          },
          "carrierStandard": {
            "description": "Carrier standard (e.g. DVB-S2, 802.11g, etc.).",
            "maxLength": 10,
            "type": "string",
            "example": "DVB-S2"
          },
          "modulation": {
            "description": "Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).",
            "maxLength": 10,
            "type": "string",
            "example": "Auto"
          },
          "innerCodingRate": {
            "format": "int32",
            "description": "Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.",
            "type": "integer",
            "example": 7
          },
          "outerCodingRate": {
            "format": "int32",
            "description": "Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.",
            "type": "integer",
            "example": 4
          },
          "transmitFilterType": {
            "description": "Transmit pulse shaping filter typ (e.g. RRC).",
            "maxLength": 10,
            "type": "string",
            "example": "RRC"
          },
          "transmitFilterRollOff": {
            "format": "double",
            "description": "Transmit pulse shaping filter roll-off value.",
            "type": "number",
            "example": 10.1
          },
          "symbolToNoiseRatio": {
            "format": "double",
            "description": "Symbol to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "bitErrorRate": {
            "format": "double",
            "description": "The ratio of bit errors per number of received bits.",
            "type": "number",
            "example": 10.1
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "descriptor"
          },
          "url": {
            "description": "Optional URL containing additional information on this observation.",
            "maxLength": 2048,
            "type": "string",
            "example": "https://some-url"
          },
          "frequencies": {
            "description": "Array of individual PSD frequencies of the signal in Hz. This array should correspond with the same-sized array of powers.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "powers": {
            "description": "Array of individual measured PSD powers of the signal in dBW. This array should correspond with the same-sized array of frequencies.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "snrs": {
            "description": "Array of signal to noise ratios of the signals, in dB.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "confidences": {
            "description": "Array of measurement confidences.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "detectionStatuses": {
            "description": "Array of detection statuses (e.g. DETECTED, CARRIER_DETECTED, NOT_DETECTED) for each measured signal.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "DETECTED"
            ]
          },
          "chipRates": {
            "description": "Array of chipRates.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "codeTaps": {
            "description": "Array of code taps.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "codeFills": {
            "description": "Array of code fills.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "codeLengths": {
            "description": "Array of code lengths.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "pnOrders": {
            "description": "Array of pnOrder.",
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "example": [
              1,
              2
            ]
          },
          "signalIds": {
            "description": "Array of optional source provided identifiers of the measurements/signals.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ID1",
              "ID2"
            ]
          },
          "baudRates": {
            "description": "Array of measured signal baud rates.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "telemetryIds": {
            "description": "Array of optional source provided telemetry identifiers of the measurements/signals.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ID1",
              "ID2"
            ]
          },
          "constellationXPoints": {
            "description": "Array of individual x-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationYPoints.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          },
          "constellationYPoints": {
            "description": "Array of individual y-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationXPoints.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.2
            ]
          }
        }
      },
      "SARObservation_Abridged": {
        "description": "Model representation of observation data for SAR based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
        "required": [
          "classificationMarking",
          "collectionStart",
          "collectionEnd",
          "sarMode",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SAROBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the spacecraft hosting the sensor associated with this collection.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "36036"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the spacecraft hosting the sensor associated with this collection.",
            "type": "integer",
            "example": 36036
          },
          "origObjectId": {
            "description": "Optional identifier provided by the source to indicate the onorbit object hosting the sensor associated with this collection. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "36036"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "36036-1L"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the source to indicate the sensor for this collection. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "SMOS-1L"
          },
          "externalId": {
            "description": "Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "collectionId": {
            "description": "Optional identifier to indicate the specific collection tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "COLLECTION-ID"
          },
          "detectionId": {
            "description": "Identifier of the specific detection within a collection which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "DETECTION-ID"
          },
          "collectionStart": {
            "format": "date-time",
            "description": "Collection start time in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2023-04-22T17:35:00.123456Z"
          },
          "collectionEnd": {
            "format": "date-time",
            "description": "Collection end time in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2023-04-22T17:38:10.201770Z"
          },
          "centerTime": {
            "format": "date-time",
            "description": "The datetime at the center point of the collection in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2023-04-22T17:36:35.100885Z"
          },
          "detectionStart": {
            "format": "date-time",
            "description": "The detection start time in ISO 8601 UTC format, with microsecond precision.",
            "type": "string",
            "example": "2023-07-08T17:35:01.615396Z"
          },
          "detectionEnd": {
            "format": "date-time",
            "description": "The detection end time in ISO 8601 UTC format, with microsecond precision.",
            "type": "string",
            "example": "2023-07-08T17:35:20.772190Z"
          },
          "dwellTime": {
            "format": "double",
            "description": "The duration, in seconds, of this detection.",
            "type": "number",
            "example": 79.156794
          },
          "orbitState": {
            "description": "The orbital direction (ASCENDING, DESCENDING) of the platform during the collection.",
            "maxLength": 16,
            "type": "string",
            "example": "ASCENDING"
          },
          "sarMode": {
            "description": "Collection mode setting for this collection (e.g. AREA, SPOTLIGHT, STRIP, etc.).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SPOTLIGHT"
          },
          "operatingBand": {
            "description": "Name of the band containing operating frequency for the collection (e.g. C, E, EHF, HF, K, Ka, Ku, L, Q, S, SHF, UNK, UHF, V, VHF, VLF, W, X). See RFBandType for more details and descriptions of each band name.",
            "maxLength": 5,
            "type": "string",
            "example": "L"
          },
          "operatingFreq": {
            "format": "double",
            "description": "The operating frequency, in Mhz, for the collection.",
            "type": "number",
            "example": 2345.6
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "txPolarization": {
            "description": "Transmit polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.",
            "maxLength": 4,
            "type": "string",
            "example": "H"
          },
          "rxPolarization": {
            "description": "Receive polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.",
            "maxLength": 4,
            "type": "string",
            "example": "H"
          },
          "grazeAngle": {
            "format": "double",
            "description": "The graze angle (also referred to as look angle) for the collection in degrees.",
            "type": "number",
            "example": 45.1
          },
          "incidenceAngle": {
            "format": "double",
            "description": "The center incidence angle in degrees.",
            "type": "number",
            "example": 45.1
          },
          "squintAngle": {
            "format": "double",
            "description": "The squint angle for the collection in degrees.",
            "type": "number",
            "example": 1.2
          },
          "pulseBandwidth": {
            "format": "double",
            "description": "The bandwidth frequency of the pulse in Mhz.",
            "type": "number",
            "example": 500.1
          },
          "pulseDuration": {
            "format": "double",
            "description": "The duration of a pulse in seconds.",
            "type": "number",
            "example": 0.000011
          },
          "continuousSpotAngle": {
            "format": "double",
            "description": "Required sweep angle for the continuous spot scene in degrees.",
            "type": "number",
            "example": 45.1
          },
          "slantRange": {
            "format": "double",
            "description": "Slant distance from sensor to center point of imaging event in kilometers.",
            "type": "number",
            "example": 60.1
          },
          "nearRange": {
            "format": "double",
            "description": "Specifies the closest range, in kilometers, from the flight path to target during the collection.",
            "type": "number",
            "example": 12.1
          },
          "farRange": {
            "format": "double",
            "description": "Specifies the farthest range, in kilometers, from the flight path to target during the collection.",
            "type": "number",
            "example": 34.1
          },
          "swathLength": {
            "format": "double",
            "description": "The length of the collection as projected on the ground in kilometers.",
            "type": "number",
            "example": 12.1
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground (POLYGON, POINT, LINE).",
            "maxLength": 128,
            "type": "string",
            "example": "POLYGON"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 3
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 3
          },
          "spacingRange": {
            "format": "double",
            "description": "The pixel spacing in the range direction measured in meters.",
            "type": "number",
            "example": 0.123
          },
          "spacingAzimuth": {
            "format": "double",
            "description": "The pixel spacing in the azimuth direction measured in meters.",
            "type": "number",
            "example": 0.123
          },
          "looksAzimuth": {
            "format": "int32",
            "description": "The number of looks in the azimuth direction.",
            "type": "integer",
            "example": 2
          },
          "looksRange": {
            "format": "int32",
            "description": "The number of looks in the range direction.",
            "type": "integer",
            "example": 1
          },
          "resolutionRange": {
            "format": "double",
            "description": "The resolution in the range direction measured in meters.",
            "type": "number",
            "example": 0.123
          },
          "resolutionAzimuth": {
            "format": "double",
            "description": "The resolution in the azimuth direction measured in meters.",
            "type": "number",
            "example": 0.123
          },
          "obDirection": {
            "description": "The antenna pointing direction (LEFT, RIGHT).",
            "maxLength": 16,
            "type": "string",
            "example": "RIGHT"
          },
          "coordSys": {
            "description": "The coordinate system used for the sensor velocity and target position vectors for the collection.",
            "maxLength": 16,
            "type": "string",
            "example": "ECEF"
          },
          "targetposx": {
            "format": "double",
            "description": "The collection target X position in kilometers.",
            "type": "number",
            "example": 50.23
          },
          "targetposy": {
            "format": "double",
            "description": "The collection target Y position in kilometers.",
            "type": "number",
            "example": 50.23
          },
          "targetposz": {
            "format": "double",
            "description": "The collection target Z position in kilometers.",
            "type": "number",
            "example": 50.23
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude during collection in kilometers.",
            "type": "number",
            "example": 1.1
          },
          "senvelx": {
            "format": "double",
            "description": "Sensor platform X-velocity during collection in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "senvely": {
            "format": "double",
            "description": "Sensor platform Y-velocity during collection in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "senvelz": {
            "format": "double",
            "description": "Sensor platform Z-velocity during collection in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "senlatStart": {
            "format": "double",
            "description": "WGS-84 sensor latitude sub-point at collect start time (collectionStart), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.1
          },
          "senlonStart": {
            "format": "double",
            "description": "WGS-84 sensor longitude sub-point at collect start time (collectionStart), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "senlatEnd": {
            "format": "double",
            "description": "WGS-84 sensor latitude sub-point at collect end time (collectionEnd), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.1
          },
          "senlonEnd": {
            "format": "double",
            "description": "WGS-84 sensor longitude sub-point at collect end time (collectionEnd), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "srcTyps": {
            "description": "Array of UDL record types (e.g. ANALYTICMAGERY, ESID, GROUNDIMAGE, NOTIFICATION, POI, SV, TRACK) that are related to the SAR Observation. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ESID",
              "GROUNDIMAGE"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to the SAR Observation. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/sarobservation/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "f7e01cd4-626b-441f-a423-17b160eb78ba",
              "223833c4-be0d-4fdb-a2e4-325a48eccced"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2023-04-22T17:51:40.854Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "SARObservation_Full": {
        "description": "Model representation of observation data for SAR based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
        "required": [
          "classificationMarking",
          "collectionStart",
          "collectionEnd",
          "sarMode",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SAROBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the spacecraft hosting the sensor associated with this collection.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "36036"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the spacecraft hosting the sensor associated with this collection.",
            "type": "integer",
            "example": 36036
          },
          "origObjectId": {
            "description": "Optional identifier provided by the source to indicate the onorbit object hosting the sensor associated with this collection. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "36036"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "36036-1L"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the source to indicate the sensor for this collection. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "SMOS-1L"
          },
          "externalId": {
            "description": "Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "collectionId": {
            "description": "Optional identifier to indicate the specific collection tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "COLLECTION-ID"
          },
          "detectionId": {
            "description": "Identifier of the specific detection within a collection which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "DETECTION-ID"
          },
          "collectionStart": {
            "format": "date-time",
            "description": "Collection start time in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2023-04-22T17:35:00.123456Z"
          },
          "collectionEnd": {
            "format": "date-time",
            "description": "Collection end time in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2023-04-22T17:38:10.201770Z"
          },
          "centerTime": {
            "format": "date-time",
            "description": "The datetime at the center point of the collection in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2023-04-22T17:36:35.100885Z"
          },
          "detectionStart": {
            "format": "date-time",
            "description": "The detection start time in ISO 8601 UTC format, with microsecond precision.",
            "type": "string",
            "example": "2023-07-08T17:35:01.615396Z"
          },
          "detectionEnd": {
            "format": "date-time",
            "description": "The detection end time in ISO 8601 UTC format, with microsecond precision.",
            "type": "string",
            "example": "2023-07-08T17:35:20.772190Z"
          },
          "dwellTime": {
            "format": "double",
            "description": "The duration, in seconds, of this detection.",
            "type": "number",
            "example": 79.156794
          },
          "orbitState": {
            "description": "The orbital direction (ASCENDING, DESCENDING) of the platform during the collection.",
            "maxLength": 16,
            "type": "string",
            "example": "ASCENDING"
          },
          "sarMode": {
            "description": "Collection mode setting for this collection (e.g. AREA, SPOTLIGHT, STRIP, etc.).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SPOTLIGHT"
          },
          "operatingBand": {
            "description": "Name of the band containing operating frequency for the collection (e.g. C, E, EHF, HF, K, Ka, Ku, L, Q, S, SHF, UNK, UHF, V, VHF, VLF, W, X). See RFBandType for more details and descriptions of each band name.",
            "maxLength": 5,
            "type": "string",
            "example": "L"
          },
          "operatingFreq": {
            "format": "double",
            "description": "The operating frequency, in Mhz, for the collection.",
            "type": "number",
            "example": 2345.6
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "txPolarization": {
            "description": "Transmit polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.",
            "maxLength": 4,
            "type": "string",
            "example": "H"
          },
          "rxPolarization": {
            "description": "Receive polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.",
            "maxLength": 4,
            "type": "string",
            "example": "H"
          },
          "grazeAngle": {
            "format": "double",
            "description": "The graze angle (also referred to as look angle) for the collection in degrees.",
            "type": "number",
            "example": 45.1
          },
          "incidenceAngle": {
            "format": "double",
            "description": "The center incidence angle in degrees.",
            "type": "number",
            "example": 45.1
          },
          "squintAngle": {
            "format": "double",
            "description": "The squint angle for the collection in degrees.",
            "type": "number",
            "example": 1.2
          },
          "pulseBandwidth": {
            "format": "double",
            "description": "The bandwidth frequency of the pulse in Mhz.",
            "type": "number",
            "example": 500.1
          },
          "pulseDuration": {
            "format": "double",
            "description": "The duration of a pulse in seconds.",
            "type": "number",
            "example": 0.000011
          },
          "continuousSpotAngle": {
            "format": "double",
            "description": "Required sweep angle for the continuous spot scene in degrees.",
            "type": "number",
            "example": 45.1
          },
          "slantRange": {
            "format": "double",
            "description": "Slant distance from sensor to center point of imaging event in kilometers.",
            "type": "number",
            "example": 60.1
          },
          "nearRange": {
            "format": "double",
            "description": "Specifies the closest range, in kilometers, from the flight path to target during the collection.",
            "type": "number",
            "example": 12.1
          },
          "farRange": {
            "format": "double",
            "description": "Specifies the farthest range, in kilometers, from the flight path to target during the collection.",
            "type": "number",
            "example": 34.1
          },
          "swathLength": {
            "format": "double",
            "description": "The length of the collection as projected on the ground in kilometers.",
            "type": "number",
            "example": 12.1
          },
          "area": {
            "description": "Optional geographical region or polygon (lat/lon pairs) of the area surrounding the image event as projected on the ground.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground (POLYGON, POINT, LINE).",
            "maxLength": 128,
            "type": "string",
            "example": "POLYGON"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 3
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 3
          },
          "spacingRange": {
            "format": "double",
            "description": "The pixel spacing in the range direction measured in meters.",
            "type": "number",
            "example": 0.123
          },
          "spacingAzimuth": {
            "format": "double",
            "description": "The pixel spacing in the azimuth direction measured in meters.",
            "type": "number",
            "example": 0.123
          },
          "looksAzimuth": {
            "format": "int32",
            "description": "The number of looks in the azimuth direction.",
            "type": "integer",
            "example": 2
          },
          "looksRange": {
            "format": "int32",
            "description": "The number of looks in the range direction.",
            "type": "integer",
            "example": 1
          },
          "resolutionRange": {
            "format": "double",
            "description": "The resolution in the range direction measured in meters.",
            "type": "number",
            "example": 0.123
          },
          "resolutionAzimuth": {
            "format": "double",
            "description": "The resolution in the azimuth direction measured in meters.",
            "type": "number",
            "example": 0.123
          },
          "obDirection": {
            "description": "The antenna pointing direction (LEFT, RIGHT).",
            "maxLength": 16,
            "type": "string",
            "example": "RIGHT"
          },
          "coordSys": {
            "description": "The coordinate system used for the sensor velocity and target position vectors for the collection.",
            "maxLength": 16,
            "type": "string",
            "example": "ECEF"
          },
          "targetposx": {
            "format": "double",
            "description": "The collection target X position in kilometers.",
            "type": "number",
            "example": 50.23
          },
          "targetposy": {
            "format": "double",
            "description": "The collection target Y position in kilometers.",
            "type": "number",
            "example": 50.23
          },
          "targetposz": {
            "format": "double",
            "description": "The collection target Z position in kilometers.",
            "type": "number",
            "example": 50.23
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude during collection in kilometers.",
            "type": "number",
            "example": 1.1
          },
          "senvelx": {
            "format": "double",
            "description": "Sensor platform X-velocity during collection in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "senvely": {
            "format": "double",
            "description": "Sensor platform Y-velocity during collection in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "senvelz": {
            "format": "double",
            "description": "Sensor platform Z-velocity during collection in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "senlatStart": {
            "format": "double",
            "description": "WGS-84 sensor latitude sub-point at collect start time (collectionStart), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.1
          },
          "senlonStart": {
            "format": "double",
            "description": "WGS-84 sensor longitude sub-point at collect start time (collectionStart), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "senlatEnd": {
            "format": "double",
            "description": "WGS-84 sensor latitude sub-point at collect end time (collectionEnd), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.1
          },
          "senlonEnd": {
            "format": "double",
            "description": "WGS-84 sensor longitude sub-point at collect end time (collectionEnd), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "srcTyps": {
            "description": "Array of UDL record types (e.g. ANALYTICMAGERY, ESID, GROUNDIMAGE, NOTIFICATION, POI, SV, TRACK) that are related to the SAR Observation. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ESID",
              "GROUNDIMAGE"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to the SAR Observation. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/sarobservation/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "f7e01cd4-626b-441f-a423-17b160eb78ba",
              "223833c4-be0d-4fdb-a2e4-325a48eccced"
            ]
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2023-04-22T17:51:40.854Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "SARObservation_Ingest": {
        "description": "Model representation of observation data for SAR based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.",
        "required": [
          "classificationMarking",
          "collectionStart",
          "collectionEnd",
          "sarMode",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SAROBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the spacecraft hosting the sensor associated with this collection.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "36036"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the spacecraft hosting the sensor associated with this collection.",
            "type": "integer",
            "example": 36036
          },
          "origObjectId": {
            "description": "Optional identifier provided by the source to indicate the onorbit object hosting the sensor associated with this collection. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "36036"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "36036-1L"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the source to indicate the sensor for this collection. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "SMOS-1L"
          },
          "externalId": {
            "description": "Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "collectionId": {
            "description": "Optional identifier to indicate the specific collection tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "COLLECTION-ID"
          },
          "detectionId": {
            "description": "Identifier of the specific detection within a collection which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "DETECTION-ID"
          },
          "collectionStart": {
            "format": "date-time",
            "description": "Collection start time in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2023-04-22T17:35:00.123456Z"
          },
          "collectionEnd": {
            "format": "date-time",
            "description": "Collection end time in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2023-04-22T17:38:10.201770Z"
          },
          "centerTime": {
            "format": "date-time",
            "description": "The datetime at the center point of the collection in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2023-04-22T17:36:35.100885Z"
          },
          "detectionStart": {
            "format": "date-time",
            "description": "The detection start time in ISO 8601 UTC format, with microsecond precision.",
            "type": "string",
            "example": "2023-07-08T17:35:01.615396Z"
          },
          "detectionEnd": {
            "format": "date-time",
            "description": "The detection end time in ISO 8601 UTC format, with microsecond precision.",
            "type": "string",
            "example": "2023-07-08T17:35:20.772190Z"
          },
          "dwellTime": {
            "format": "double",
            "description": "The duration, in seconds, of this detection.",
            "type": "number",
            "example": 79.156794
          },
          "orbitState": {
            "description": "The orbital direction (ASCENDING, DESCENDING) of the platform during the collection.",
            "maxLength": 16,
            "type": "string",
            "example": "ASCENDING"
          },
          "sarMode": {
            "description": "Collection mode setting for this collection (e.g. AREA, SPOTLIGHT, STRIP, etc.).",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SPOTLIGHT"
          },
          "operatingBand": {
            "description": "Name of the band containing operating frequency for the collection (e.g. C, E, EHF, HF, K, Ka, Ku, L, Q, S, SHF, UNK, UHF, V, VHF, VLF, W, X). See RFBandType for more details and descriptions of each band name.",
            "maxLength": 5,
            "type": "string",
            "example": "L"
          },
          "operatingFreq": {
            "format": "double",
            "description": "The operating frequency, in Mhz, for the collection.",
            "type": "number",
            "example": 2345.6
          },
          "snr": {
            "format": "double",
            "description": "Signal to noise ratio, in dB.",
            "type": "number",
            "example": 10.1
          },
          "txPolarization": {
            "description": "Transmit polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.",
            "maxLength": 4,
            "type": "string",
            "example": "H"
          },
          "rxPolarization": {
            "description": "Receive polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.",
            "maxLength": 4,
            "type": "string",
            "example": "H"
          },
          "grazeAngle": {
            "format": "double",
            "description": "The graze angle (also referred to as look angle) for the collection in degrees.",
            "type": "number",
            "example": 45.1
          },
          "incidenceAngle": {
            "format": "double",
            "description": "The center incidence angle in degrees.",
            "type": "number",
            "example": 45.1
          },
          "squintAngle": {
            "format": "double",
            "description": "The squint angle for the collection in degrees.",
            "type": "number",
            "example": 1.2
          },
          "pulseBandwidth": {
            "format": "double",
            "description": "The bandwidth frequency of the pulse in Mhz.",
            "type": "number",
            "example": 500.1
          },
          "pulseDuration": {
            "format": "double",
            "description": "The duration of a pulse in seconds.",
            "type": "number",
            "example": 0.000011
          },
          "continuousSpotAngle": {
            "format": "double",
            "description": "Required sweep angle for the continuous spot scene in degrees.",
            "type": "number",
            "example": 45.1
          },
          "slantRange": {
            "format": "double",
            "description": "Slant distance from sensor to center point of imaging event in kilometers.",
            "type": "number",
            "example": 60.1
          },
          "nearRange": {
            "format": "double",
            "description": "Specifies the closest range, in kilometers, from the flight path to target during the collection.",
            "type": "number",
            "example": 12.1
          },
          "farRange": {
            "format": "double",
            "description": "Specifies the farthest range, in kilometers, from the flight path to target during the collection.",
            "type": "number",
            "example": 34.1
          },
          "swathLength": {
            "format": "double",
            "description": "The length of the collection as projected on the ground in kilometers.",
            "type": "number",
            "example": 12.1
          },
          "area": {
            "description": "Optional geographical region or polygon (lat/lon pairs) of the area surrounding the image event as projected on the ground.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "atext": {
            "description": "Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.",
            "type": "string",
            "example": "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
          },
          "agjson": {
            "description": "Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.",
            "type": "string",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
          },
          "atype": {
            "description": "Type of region as projected on the ground (POLYGON, POINT, LINE).",
            "maxLength": 128,
            "type": "string",
            "example": "POLYGON"
          },
          "andims": {
            "format": "int32",
            "description": "Number of dimensions of the geometry depicted by region.",
            "type": "integer",
            "example": 3
          },
          "asrid": {
            "format": "int32",
            "description": "Geographical spatial_ref_sys for region.",
            "type": "integer",
            "example": 3
          },
          "spacingRange": {
            "format": "double",
            "description": "The pixel spacing in the range direction measured in meters.",
            "type": "number",
            "example": 0.123
          },
          "spacingAzimuth": {
            "format": "double",
            "description": "The pixel spacing in the azimuth direction measured in meters.",
            "type": "number",
            "example": 0.123
          },
          "looksAzimuth": {
            "format": "int32",
            "description": "The number of looks in the azimuth direction.",
            "type": "integer",
            "example": 2
          },
          "looksRange": {
            "format": "int32",
            "description": "The number of looks in the range direction.",
            "type": "integer",
            "example": 1
          },
          "resolutionRange": {
            "format": "double",
            "description": "The resolution in the range direction measured in meters.",
            "type": "number",
            "example": 0.123
          },
          "resolutionAzimuth": {
            "format": "double",
            "description": "The resolution in the azimuth direction measured in meters.",
            "type": "number",
            "example": 0.123
          },
          "obDirection": {
            "description": "The antenna pointing direction (LEFT, RIGHT).",
            "maxLength": 16,
            "type": "string",
            "example": "RIGHT"
          },
          "coordSys": {
            "description": "The coordinate system used for the sensor velocity and target position vectors for the collection.",
            "maxLength": 16,
            "type": "string",
            "example": "ECEF"
          },
          "targetposx": {
            "format": "double",
            "description": "The collection target X position in kilometers.",
            "type": "number",
            "example": 50.23
          },
          "targetposy": {
            "format": "double",
            "description": "The collection target Y position in kilometers.",
            "type": "number",
            "example": 50.23
          },
          "targetposz": {
            "format": "double",
            "description": "The collection target Z position in kilometers.",
            "type": "number",
            "example": 50.23
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude during collection in kilometers.",
            "type": "number",
            "example": 1.1
          },
          "senvelx": {
            "format": "double",
            "description": "Sensor platform X-velocity during collection in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "senvely": {
            "format": "double",
            "description": "Sensor platform Y-velocity during collection in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "senvelz": {
            "format": "double",
            "description": "Sensor platform Z-velocity during collection in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "senlatStart": {
            "format": "double",
            "description": "WGS-84 sensor latitude sub-point at collect start time (collectionStart), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.1
          },
          "senlonStart": {
            "format": "double",
            "description": "WGS-84 sensor longitude sub-point at collect start time (collectionStart), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "senlatEnd": {
            "format": "double",
            "description": "WGS-84 sensor latitude sub-point at collect end time (collectionEnd), represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.1
          },
          "senlonEnd": {
            "format": "double",
            "description": "WGS-84 sensor longitude sub-point at collect end time (collectionEnd), represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "srcTyps": {
            "description": "Array of UDL record types (e.g. ANALYTICMAGERY, ESID, GROUNDIMAGE, NOTIFICATION, POI, SV, TRACK) that are related to the SAR Observation. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ESID",
              "GROUNDIMAGE"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to the SAR Observation. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/sarobservation/{uuid}).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "f7e01cd4-626b-441f-a423-17b160eb78ba",
              "223833c4-be0d-4fdb-a2e4-325a48eccced"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2023-04-22T17:51:40.854Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "SEObservation_Abridged": {
        "description": "A single space environment observation.",
        "required": [
          "obType",
          "obUoM"
        ],
        "type": "object",
        "properties": {
          "obType": {
            "description": "The type of observation associated with this record.",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "INTEGRAL FLUX"
          },
          "obUoM": {
            "description": "The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "example": "particles/cm^2/s/sr"
          },
          "obValue": {
            "format": "double",
            "description": "A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.",
            "type": "number",
            "example": 0.487687826
          },
          "obString": {
            "description": "A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.",
            "maxLength": 64,
            "type": "string",
            "example": "C1.3"
          },
          "obArray": {
            "description": "An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.7,
              35.6,
              21.2,
              19.01
            ]
          },
          "obBool": {
            "description": "A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.",
            "type": "boolean",
            "example": true
          },
          "obQuality": {
            "description": "The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.",
            "maxLength": 16,
            "type": "string",
            "example": "GOOD"
          },
          "obDescription": {
            "description": "Descriptive or additional information associated with this individual observation.",
            "maxLength": 512,
            "type": "string",
            "example": "Observation Description Text"
          }
        }
      },
      "SEObservation_Full": {
        "description": "A single space environment observation.",
        "required": [
          "obType",
          "obUoM"
        ],
        "type": "object",
        "properties": {
          "obType": {
            "description": "The type of observation associated with this record.",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "INTEGRAL FLUX"
          },
          "obUoM": {
            "description": "The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "example": "particles/cm^2/s/sr"
          },
          "obValue": {
            "format": "double",
            "description": "A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.",
            "type": "number",
            "example": 0.487687826
          },
          "obString": {
            "description": "A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.",
            "maxLength": 64,
            "type": "string",
            "example": "C1.3"
          },
          "obArray": {
            "description": "An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.7,
              35.6,
              21.2,
              19.01
            ]
          },
          "obBool": {
            "description": "A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.",
            "type": "boolean",
            "example": true
          },
          "obQuality": {
            "description": "The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.",
            "maxLength": 16,
            "type": "string",
            "example": "GOOD"
          },
          "obDescription": {
            "description": "Descriptive or additional information associated with this individual observation.",
            "maxLength": 512,
            "type": "string",
            "example": "Observation Description Text"
          }
        }
      },
      "SEObservation_Ingest": {
        "description": "A single space environment observation.",
        "required": [
          "obType",
          "obUoM"
        ],
        "type": "object",
        "properties": {
          "obType": {
            "description": "The type of observation associated with this record.",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "INTEGRAL FLUX"
          },
          "obUoM": {
            "description": "The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "example": "particles/cm^2/s/sr"
          },
          "obValue": {
            "format": "double",
            "description": "A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.",
            "type": "number",
            "example": 0.487687826
          },
          "obString": {
            "description": "A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.",
            "maxLength": 64,
            "type": "string",
            "example": "C1.3"
          },
          "obArray": {
            "description": "An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.7,
              35.6,
              21.2,
              19.01
            ]
          },
          "obBool": {
            "description": "A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.",
            "type": "boolean",
            "example": true
          },
          "obQuality": {
            "description": "The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.",
            "maxLength": 16,
            "type": "string",
            "example": "GOOD"
          },
          "obDescription": {
            "description": "Descriptive or additional information associated with this individual observation.",
            "maxLength": 512,
            "type": "string",
            "example": "Observation Description Text"
          }
        }
      },
      "SOICalibration_Abridged": {
        "description": "Schema for SOI Calibration data.",
        "type": "object",
        "properties": {
          "calExtinctionCoeff": {
            "format": "double",
            "description": "Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.",
            "type": "number",
            "example": 0.2
          },
          "calSkyBg": {
            "format": "double",
            "description": "Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.",
            "type": "number",
            "example": 30086.25
          },
          "calBgIntensity": {
            "format": "double",
            "description": "Background intensity, at calibration, specified in kilowatts per steradian per micrometer.",
            "type": "number",
            "example": 1.1
          },
          "calSpectralFilterSolarMag": {
            "format": "double",
            "description": "In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).",
            "type": "number",
            "example": 19.23664587
          },
          "calZeroPoint": {
            "format": "double",
            "description": "Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).",
            "type": "number",
            "example": 25.15682157
          },
          "calNumDetectedStars": {
            "format": "int32",
            "description": "Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.",
            "type": "integer",
            "example": 1
          },
          "calNumCorrelatedStars": {
            "format": "int32",
            "description": "Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.",
            "type": "integer",
            "example": 1
          },
          "calExtinctionCoeffUnc": {
            "format": "double",
            "description": "Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).",
            "type": "number",
            "example": 0.06474939
          },
          "calExtinctionCoeffMaxUnc": {
            "format": "double",
            "description": "Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).",
            "type": "number",
            "example": 0.19708838
          },
          "calTime": {
            "format": "date-time",
            "description": "Start time of calibration in ISO 8601 UTC time, with millisecond precision.",
            "type": "string",
            "example": "2023-01-02T16:00:00.123Z"
          },
          "calType": {
            "description": "Type of calibration (e.g. PRE, MID, POST).",
            "maxLength": 24,
            "type": "string",
            "example": "PRE"
          }
        }
      },
      "SOICalibration_Full": {
        "description": "Schema for SOI Calibration data.",
        "type": "object",
        "properties": {
          "calExtinctionCoeff": {
            "format": "double",
            "description": "Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.",
            "type": "number",
            "example": 0.2
          },
          "calSkyBg": {
            "format": "double",
            "description": "Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.",
            "type": "number",
            "example": 30086.25
          },
          "calBgIntensity": {
            "format": "double",
            "description": "Background intensity, at calibration, specified in kilowatts per steradian per micrometer.",
            "type": "number",
            "example": 1.1
          },
          "calSpectralFilterSolarMag": {
            "format": "double",
            "description": "In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).",
            "type": "number",
            "example": 19.23664587
          },
          "calZeroPoint": {
            "format": "double",
            "description": "Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).",
            "type": "number",
            "example": 25.15682157
          },
          "calNumDetectedStars": {
            "format": "int32",
            "description": "Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.",
            "type": "integer",
            "example": 1
          },
          "calNumCorrelatedStars": {
            "format": "int32",
            "description": "Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.",
            "type": "integer",
            "example": 1
          },
          "calExtinctionCoeffUnc": {
            "format": "double",
            "description": "Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).",
            "type": "number",
            "example": 0.06474939
          },
          "calExtinctionCoeffMaxUnc": {
            "format": "double",
            "description": "Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).",
            "type": "number",
            "example": 0.19708838
          },
          "calTime": {
            "format": "date-time",
            "description": "Start time of calibration in ISO 8601 UTC time, with millisecond precision.",
            "type": "string",
            "example": "2023-01-02T16:00:00.123Z"
          },
          "calType": {
            "description": "Type of calibration (e.g. PRE, MID, POST).",
            "maxLength": 24,
            "type": "string",
            "example": "PRE"
          }
        }
      },
      "SOICalibration_Ingest": {
        "description": "Schema for SOI Calibration data.",
        "type": "object",
        "properties": {
          "calExtinctionCoeff": {
            "format": "double",
            "description": "Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.",
            "type": "number",
            "example": 0.2
          },
          "calSkyBg": {
            "format": "double",
            "description": "Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.",
            "type": "number",
            "example": 30086.25
          },
          "calBgIntensity": {
            "format": "double",
            "description": "Background intensity, at calibration, specified in kilowatts per steradian per micrometer.",
            "type": "number",
            "example": 1.1
          },
          "calSpectralFilterSolarMag": {
            "format": "double",
            "description": "In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).",
            "type": "number",
            "example": 19.23664587
          },
          "calZeroPoint": {
            "format": "double",
            "description": "Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).",
            "type": "number",
            "example": 25.15682157
          },
          "calNumDetectedStars": {
            "format": "int32",
            "description": "Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.",
            "type": "integer",
            "example": 1
          },
          "calNumCorrelatedStars": {
            "format": "int32",
            "description": "Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.",
            "type": "integer",
            "example": 1
          },
          "calExtinctionCoeffUnc": {
            "format": "double",
            "description": "Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).",
            "type": "number",
            "example": 0.06474939
          },
          "calExtinctionCoeffMaxUnc": {
            "format": "double",
            "description": "Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).",
            "type": "number",
            "example": 0.19708838
          },
          "calTime": {
            "format": "date-time",
            "description": "Start time of calibration in ISO 8601 UTC time, with millisecond precision.",
            "type": "string",
            "example": "2023-01-02T16:00:00.123Z"
          },
          "calType": {
            "description": "Type of calibration (e.g. PRE, MID, POST).",
            "maxLength": 24,
            "type": "string",
            "example": "PRE"
          }
        }
      },
      "SOIObservationSet_Abridged": {
        "description": "These services provide operations for posting space object idenfification observation sets.",
        "required": [
          "classificationMarking",
          "startTime",
          "numObs",
          "type",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "msgCreateDate": {
            "format": "date-time",
            "description": "SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.",
            "type": "string",
            "example": "2022-07-07T16:00:00.123Z"
          },
          "idSensor": {
            "description": "ID of the observing sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "sensorAsId": {
            "description": "ID of the AttitudeSet record for the observing sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 101
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).",
            "type": "number",
            "example": 179.1
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at startTime (if mobile/onorbit) in kilometers.",
            "type": "number",
            "example": 1.1
          },
          "senx": {
            "format": "double",
            "description": "Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "seny": {
            "format": "double",
            "description": "Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senz": {
            "format": "double",
            "description": "Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelx": {
            "format": "double",
            "description": "Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvely": {
            "format": "double",
            "description": "Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelz": {
            "format": "double",
            "description": "Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "idElset": {
            "description": "ID of the UDL Elset of the Space Object under observation.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-ELSET-ID"
          },
          "startTime": {
            "format": "date-time",
            "description": "Observation set detection start time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "Observation set detection end time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "numObs": {
            "format": "int32",
            "description": "The number of observation records in the set.",
            "type": "integer",
            "example": 1
          },
          "type": {
            "description": "Observation type (OPTICAL, RADAR).",
            "maxLength": 24,
            "minLength": 1,
            "enum": [
              "OPTICAL",
              "RADAR"
            ],
            "type": "string",
            "example": "OPTICAL"
          },
          "polarAngleStart": {
            "format": "double",
            "description": "Polar angle of the gimbal/mount at observation set detection start time in degrees.",
            "type": "number",
            "example": 1.1
          },
          "polarAngleEnd": {
            "format": "double",
            "description": "Polar angle of the gimbal/mount at observation set detection end time in degrees.",
            "type": "number",
            "example": 1.1
          },
          "referenceFrame": {
            "description": "The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "losDeclinationStart": {
            "format": "double",
            "description": "Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).",
            "type": "number",
            "example": 1.1
          },
          "losDeclinationEnd": {
            "format": "double",
            "description": "Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).",
            "type": "number",
            "example": 1.1
          },
          "pointingAngleAzStart": {
            "format": "double",
            "description": "Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.",
            "type": "number",
            "example": 1.1
          },
          "pointingAngleAzEnd": {
            "format": "double",
            "description": "Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.",
            "type": "number",
            "example": 1.1
          },
          "pointingAngleElStart": {
            "format": "double",
            "description": "Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.",
            "type": "number",
            "example": 1.1
          },
          "pointingAngleElEnd": {
            "format": "double",
            "description": "Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.",
            "type": "number",
            "example": 1.1
          },
          "pixelArrayWidth": {
            "format": "int32",
            "description": "Pixel array size (width) in pixels.",
            "type": "integer",
            "example": 32
          },
          "pixelArrayHeight": {
            "format": "int32",
            "description": "Pixel array size (height) in pixels.",
            "type": "integer",
            "example": 32
          },
          "numSpectralFilters": {
            "format": "int32",
            "description": "The value is the number of spectral filters used.",
            "type": "integer",
            "example": 10
          },
          "spectralFilters": {
            "description": "Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Keyword1",
              "Keyword2"
            ]
          },
          "collectionMode": {
            "description": "Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).",
            "maxLength": 32,
            "type": "string",
            "example": "RATE TRACK"
          },
          "gain": {
            "format": "double",
            "description": "The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.",
            "type": "number",
            "example": 234.2
          },
          "binningHoriz": {
            "format": "int32",
            "description": "The number of pixels binned horizontally.",
            "type": "integer",
            "example": 2
          },
          "binningVert": {
            "format": "int32",
            "description": "The number of pixels binned vertically.",
            "type": "integer",
            "example": 2
          },
          "solarMag": {
            "format": "double",
            "description": "The in-band solar magnitude at 1 A.U.",
            "type": "number",
            "example": -26.91
          },
          "pixelMin": {
            "format": "int32",
            "description": "The minimum valid pixel value.",
            "type": "integer",
            "example": 0
          },
          "pixelMax": {
            "format": "int32",
            "description": "The maximum valid pixel value.",
            "type": "integer",
            "example": 16383
          },
          "softwareVersion": {
            "description": "Software Version used to Capture, Process, and Deliver the data.",
            "maxLength": 70,
            "type": "string",
            "example": "GSV99/17-1"
          },
          "satelliteName": {
            "description": "Name of the target satellite.",
            "maxLength": 70,
            "type": "string",
            "example": "TITAN 3C TRANSTAGE R/B"
          },
          "starCatName": {
            "description": "Name of the Star Catalog used for photometry and astrometry.",
            "maxLength": 70,
            "type": "string",
            "example": "SSTRC5"
          },
          "corrQuality": {
            "format": "double",
            "description": "Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).",
            "type": "number",
            "example": 0.327
          },
          "uct": {
            "description": "Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": true
          },
          "validCalibrations": {
            "description": "Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).",
            "maxLength": 16,
            "type": "string",
            "example": "BOTH"
          },
          "calibrationType": {
            "description": "Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).",
            "maxLength": 32,
            "type": "string",
            "example": "ALL SKY"
          },
          "percentSatThreshold": {
            "format": "double",
            "description": "A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.",
            "type": "number",
            "example": 0.1
          },
          "changeDetected": {
            "description": "Boolean indicating if any change event was detected, based on historical collection data for the object.",
            "type": "boolean",
            "example": true
          },
          "periodicityChangeDetected": {
            "description": "Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.",
            "type": "boolean",
            "example": true
          },
          "brightnessVarianceChangeDetected": {
            "description": "Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.",
            "type": "boolean",
            "example": true
          },
          "solarPhaseAngleBrightnessChangeDetected": {
            "description": "Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.",
            "type": "boolean",
            "example": true
          },
          "changeConf": {
            "description": "Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).",
            "maxLength": 16,
            "type": "string",
            "example": "MEDIUM"
          },
          "collectionDensityConf": {
            "description": "Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).",
            "maxLength": 16,
            "type": "string",
            "example": "MEDIUM"
          },
          "periodicitySamplingConf": {
            "description": "Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).",
            "maxLength": 16,
            "type": "string",
            "example": "MEDIUM"
          },
          "periodicityDetectionConf": {
            "description": "Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).",
            "maxLength": 16,
            "type": "string",
            "example": "MEDIUM"
          },
          "collectionId": {
            "description": "Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.",
            "maxLength": 36,
            "type": "string",
            "example": "b5133288-ab63-4b15-81f6-c7eec0cdb0c0"
          },
          "calibrations": {
            "description": "Array of SOI Calibrations associated with this SOIObservationSet.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SOICalibration_Abridged"
            }
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "SOIObservationSet_Full": {
        "description": "These services provide operations for posting space object idenfification observation sets.",
        "required": [
          "classificationMarking",
          "startTime",
          "numObs",
          "type",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "msgCreateDate": {
            "format": "date-time",
            "description": "SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.",
            "type": "string",
            "example": "2022-07-07T16:00:00.123Z"
          },
          "idSensor": {
            "description": "ID of the observing sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "sensorAsId": {
            "description": "ID of the AttitudeSet record for the observing sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 101
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).",
            "type": "number",
            "example": 179.1
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at startTime (if mobile/onorbit) in kilometers.",
            "type": "number",
            "example": 1.1
          },
          "senx": {
            "format": "double",
            "description": "Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "seny": {
            "format": "double",
            "description": "Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senz": {
            "format": "double",
            "description": "Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelx": {
            "format": "double",
            "description": "Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvely": {
            "format": "double",
            "description": "Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelz": {
            "format": "double",
            "description": "Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "idElset": {
            "description": "ID of the UDL Elset of the Space Object under observation.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-ELSET-ID"
          },
          "startTime": {
            "format": "date-time",
            "description": "Observation set detection start time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "Observation set detection end time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "numObs": {
            "format": "int32",
            "description": "The number of observation records in the set.",
            "type": "integer",
            "example": 1
          },
          "type": {
            "description": "Observation type (OPTICAL, RADAR).",
            "maxLength": 24,
            "minLength": 1,
            "enum": [
              "OPTICAL",
              "RADAR"
            ],
            "type": "string",
            "example": "OPTICAL"
          },
          "polarAngleStart": {
            "format": "double",
            "description": "Polar angle of the gimbal/mount at observation set detection start time in degrees.",
            "type": "number",
            "example": 1.1
          },
          "polarAngleEnd": {
            "format": "double",
            "description": "Polar angle of the gimbal/mount at observation set detection end time in degrees.",
            "type": "number",
            "example": 1.1
          },
          "referenceFrame": {
            "description": "The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "losDeclinationStart": {
            "format": "double",
            "description": "Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).",
            "type": "number",
            "example": 1.1
          },
          "losDeclinationEnd": {
            "format": "double",
            "description": "Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).",
            "type": "number",
            "example": 1.1
          },
          "pointingAngleAzStart": {
            "format": "double",
            "description": "Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.",
            "type": "number",
            "example": 1.1
          },
          "pointingAngleAzEnd": {
            "format": "double",
            "description": "Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.",
            "type": "number",
            "example": 1.1
          },
          "pointingAngleElStart": {
            "format": "double",
            "description": "Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.",
            "type": "number",
            "example": 1.1
          },
          "pointingAngleElEnd": {
            "format": "double",
            "description": "Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.",
            "type": "number",
            "example": 1.1
          },
          "pixelArrayWidth": {
            "format": "int32",
            "description": "Pixel array size (width) in pixels.",
            "type": "integer",
            "example": 32
          },
          "pixelArrayHeight": {
            "format": "int32",
            "description": "Pixel array size (height) in pixels.",
            "type": "integer",
            "example": 32
          },
          "numSpectralFilters": {
            "format": "int32",
            "description": "The value is the number of spectral filters used.",
            "type": "integer",
            "example": 10
          },
          "spectralFilters": {
            "description": "Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Keyword1",
              "Keyword2"
            ]
          },
          "collectionMode": {
            "description": "Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).",
            "maxLength": 32,
            "type": "string",
            "example": "RATE TRACK"
          },
          "gain": {
            "format": "double",
            "description": "The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.",
            "type": "number",
            "example": 234.2
          },
          "binningHoriz": {
            "format": "int32",
            "description": "The number of pixels binned horizontally.",
            "type": "integer",
            "example": 2
          },
          "binningVert": {
            "format": "int32",
            "description": "The number of pixels binned vertically.",
            "type": "integer",
            "example": 2
          },
          "solarMag": {
            "format": "double",
            "description": "The in-band solar magnitude at 1 A.U.",
            "type": "number",
            "example": -26.91
          },
          "pixelMin": {
            "format": "int32",
            "description": "The minimum valid pixel value.",
            "type": "integer",
            "example": 0
          },
          "pixelMax": {
            "format": "int32",
            "description": "The maximum valid pixel value.",
            "type": "integer",
            "example": 16383
          },
          "softwareVersion": {
            "description": "Software Version used to Capture, Process, and Deliver the data.",
            "maxLength": 70,
            "type": "string",
            "example": "GSV99/17-1"
          },
          "satelliteName": {
            "description": "Name of the target satellite.",
            "maxLength": 70,
            "type": "string",
            "example": "TITAN 3C TRANSTAGE R/B"
          },
          "starCatName": {
            "description": "Name of the Star Catalog used for photometry and astrometry.",
            "maxLength": 70,
            "type": "string",
            "example": "SSTRC5"
          },
          "corrQuality": {
            "format": "double",
            "description": "Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).",
            "type": "number",
            "example": 0.327
          },
          "uct": {
            "description": "Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": true
          },
          "validCalibrations": {
            "description": "Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).",
            "maxLength": 16,
            "type": "string",
            "example": "BOTH"
          },
          "calibrationType": {
            "description": "Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).",
            "maxLength": 32,
            "type": "string",
            "example": "ALL SKY"
          },
          "percentSatThreshold": {
            "format": "double",
            "description": "A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.",
            "type": "number",
            "example": 0.1
          },
          "changeDetected": {
            "description": "Boolean indicating if any change event was detected, based on historical collection data for the object.",
            "type": "boolean",
            "example": true
          },
          "periodicityChangeDetected": {
            "description": "Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.",
            "type": "boolean",
            "example": true
          },
          "brightnessVarianceChangeDetected": {
            "description": "Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.",
            "type": "boolean",
            "example": true
          },
          "solarPhaseAngleBrightnessChangeDetected": {
            "description": "Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.",
            "type": "boolean",
            "example": true
          },
          "changeConf": {
            "description": "Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).",
            "maxLength": 16,
            "type": "string",
            "example": "MEDIUM"
          },
          "collectionDensityConf": {
            "description": "Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).",
            "maxLength": 16,
            "type": "string",
            "example": "MEDIUM"
          },
          "periodicitySamplingConf": {
            "description": "Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).",
            "maxLength": 16,
            "type": "string",
            "example": "MEDIUM"
          },
          "periodicityDetectionConf": {
            "description": "Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).",
            "maxLength": 16,
            "type": "string",
            "example": "MEDIUM"
          },
          "collectionId": {
            "description": "Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.",
            "maxLength": 36,
            "type": "string",
            "example": "b5133288-ab63-4b15-81f6-c7eec0cdb0c0"
          },
          "calibrations": {
            "description": "Array of SOI Calibrations associated with this SOIObservationSet.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SOICalibration_Full"
            }
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "opticalSOIObservationList": {
            "description": "OpticalSOIObservations associated with this SOIObservationSet.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpticalSOIObservation_Full"
            }
          },
          "radarSOIObservationList": {
            "description": "RadarSOIObservations associated with this RadarSOIObservationSet.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RadarSOIObservation_Full"
            }
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "SOIObservationSet_Ingest": {
        "description": "These services provide operations for posting space object idenfification observation sets.",
        "required": [
          "classificationMarking",
          "startTime",
          "numObs",
          "type",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "msgCreateDate": {
            "format": "date-time",
            "description": "SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.",
            "type": "string",
            "example": "2022-07-07T16:00:00.123Z"
          },
          "idSensor": {
            "description": "ID of the observing sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "sensorAsId": {
            "description": "ID of the AttitudeSet record for the observing sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "026dd511-8ba5-47d3-9909-836149f87686"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 101
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).",
            "type": "number",
            "example": 179.1
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at startTime (if mobile/onorbit) in kilometers.",
            "type": "number",
            "example": 1.1
          },
          "senx": {
            "format": "double",
            "description": "Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "seny": {
            "format": "double",
            "description": "Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senz": {
            "format": "double",
            "description": "Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelx": {
            "format": "double",
            "description": "Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvely": {
            "format": "double",
            "description": "Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelz": {
            "format": "double",
            "description": "Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "idElset": {
            "description": "ID of the UDL Elset of the Space Object under observation.",
            "maxLength": 36,
            "type": "string",
            "example": "REF-ELSET-ID"
          },
          "startTime": {
            "format": "date-time",
            "description": "Observation set detection start time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "endTime": {
            "format": "date-time",
            "description": "Observation set detection end time in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "numObs": {
            "format": "int32",
            "description": "The number of observation records in the set.",
            "type": "integer",
            "example": 1
          },
          "type": {
            "description": "Observation type (OPTICAL, RADAR).",
            "maxLength": 24,
            "minLength": 1,
            "enum": [
              "OPTICAL",
              "RADAR"
            ],
            "type": "string",
            "example": "OPTICAL"
          },
          "polarAngleStart": {
            "format": "double",
            "description": "Polar angle of the gimbal/mount at observation set detection start time in degrees.",
            "type": "number",
            "example": 1.1
          },
          "polarAngleEnd": {
            "format": "double",
            "description": "Polar angle of the gimbal/mount at observation set detection end time in degrees.",
            "type": "number",
            "example": 1.1
          },
          "referenceFrame": {
            "description": "The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "losDeclinationStart": {
            "format": "double",
            "description": "Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).",
            "type": "number",
            "example": 1.1
          },
          "losDeclinationEnd": {
            "format": "double",
            "description": "Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).",
            "type": "number",
            "example": 1.1
          },
          "pointingAngleAzStart": {
            "format": "double",
            "description": "Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.",
            "type": "number",
            "example": 1.1
          },
          "pointingAngleAzEnd": {
            "format": "double",
            "description": "Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.",
            "type": "number",
            "example": 1.1
          },
          "pointingAngleElStart": {
            "format": "double",
            "description": "Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.",
            "type": "number",
            "example": 1.1
          },
          "pointingAngleElEnd": {
            "format": "double",
            "description": "Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.",
            "type": "number",
            "example": 1.1
          },
          "pixelArrayWidth": {
            "format": "int32",
            "description": "Pixel array size (width) in pixels.",
            "type": "integer",
            "example": 32
          },
          "pixelArrayHeight": {
            "format": "int32",
            "description": "Pixel array size (height) in pixels.",
            "type": "integer",
            "example": 32
          },
          "numSpectralFilters": {
            "format": "int32",
            "description": "The value is the number of spectral filters used.",
            "type": "integer",
            "example": 10
          },
          "spectralFilters": {
            "description": "Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Keyword1",
              "Keyword2"
            ]
          },
          "collectionMode": {
            "description": "Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).",
            "maxLength": 32,
            "type": "string",
            "example": "RATE TRACK"
          },
          "gain": {
            "format": "double",
            "description": "The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.",
            "type": "number",
            "example": 234.2
          },
          "binningHoriz": {
            "format": "int32",
            "description": "The number of pixels binned horizontally.",
            "type": "integer",
            "example": 2
          },
          "binningVert": {
            "format": "int32",
            "description": "The number of pixels binned vertically.",
            "type": "integer",
            "example": 2
          },
          "solarMag": {
            "format": "double",
            "description": "The in-band solar magnitude at 1 A.U.",
            "type": "number",
            "example": -26.91
          },
          "pixelMin": {
            "format": "int32",
            "description": "The minimum valid pixel value.",
            "type": "integer",
            "example": 0
          },
          "pixelMax": {
            "format": "int32",
            "description": "The maximum valid pixel value.",
            "type": "integer",
            "example": 16383
          },
          "softwareVersion": {
            "description": "Software Version used to Capture, Process, and Deliver the data.",
            "maxLength": 70,
            "type": "string",
            "example": "GSV99/17-1"
          },
          "satelliteName": {
            "description": "Name of the target satellite.",
            "maxLength": 70,
            "type": "string",
            "example": "TITAN 3C TRANSTAGE R/B"
          },
          "starCatName": {
            "description": "Name of the Star Catalog used for photometry and astrometry.",
            "maxLength": 70,
            "type": "string",
            "example": "SSTRC5"
          },
          "corrQuality": {
            "format": "double",
            "description": "Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).",
            "type": "number",
            "example": 0.327
          },
          "uct": {
            "description": "Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": true
          },
          "validCalibrations": {
            "description": "Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).",
            "maxLength": 16,
            "type": "string",
            "example": "BOTH"
          },
          "calibrationType": {
            "description": "Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).",
            "maxLength": 32,
            "type": "string",
            "example": "ALL SKY"
          },
          "percentSatThreshold": {
            "format": "double",
            "description": "A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.",
            "type": "number",
            "example": 0.1
          },
          "changeDetected": {
            "description": "Boolean indicating if any change event was detected, based on historical collection data for the object.",
            "type": "boolean",
            "example": true
          },
          "periodicityChangeDetected": {
            "description": "Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.",
            "type": "boolean",
            "example": true
          },
          "brightnessVarianceChangeDetected": {
            "description": "Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.",
            "type": "boolean",
            "example": true
          },
          "solarPhaseAngleBrightnessChangeDetected": {
            "description": "Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.",
            "type": "boolean",
            "example": true
          },
          "changeConf": {
            "description": "Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).",
            "maxLength": 16,
            "type": "string",
            "example": "MEDIUM"
          },
          "collectionDensityConf": {
            "description": "Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).",
            "maxLength": 16,
            "type": "string",
            "example": "MEDIUM"
          },
          "periodicitySamplingConf": {
            "description": "Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).",
            "maxLength": 16,
            "type": "string",
            "example": "MEDIUM"
          },
          "periodicityDetectionConf": {
            "description": "Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).",
            "maxLength": 16,
            "type": "string",
            "example": "MEDIUM"
          },
          "collectionId": {
            "description": "Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.",
            "maxLength": 36,
            "type": "string",
            "example": "b5133288-ab63-4b15-81f6-c7eec0cdb0c0"
          },
          "calibrations": {
            "description": "Array of SOI Calibrations associated with this SOIObservationSet.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SOICalibration_Ingest"
            }
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "opticalSOIObservationList": {
            "description": "OpticalSOIObservations associated with this SOIObservationSet.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpticalSOIObservation_Ingest"
            }
          },
          "radarSOIObservationList": {
            "description": "RadarSOIObservations associated with this RadarSOIObservationSet.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RadarSOIObservation_Ingest"
            }
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "SolarArray_Full": {
        "description": "Model representation of information on on-orbit/spacecraft solar arrays. A spacecraft may have multiple solar arrays and each solar array can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "name": {
            "description": "Solar Array name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Solar1"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "solarArrayDetails": {
            "description": "Read-only collection of additional SolarArrayDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/solararraydetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolarArrayDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "SolarArrayDetails_Full": {
        "description": "Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.",
        "required": [
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAYDETAILS-ID"
          },
          "idSolarArray": {
            "description": "Unique identifier of the parent SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of solar array (e.g. U Shaped).",
            "maxLength": 64,
            "type": "string",
            "example": "U Shaped"
          },
          "technology": {
            "description": "Solar array technology (e.g. Ga-As).",
            "maxLength": 64,
            "type": "string",
            "example": "Ga-As"
          },
          "junctionTechnology": {
            "description": "Solar array junction technology (e.g. Triple).",
            "maxLength": 64,
            "type": "string",
            "example": "Triple"
          },
          "manufacturerOrgId": {
            "description": "Unique identifier of the organization that manufactures the solar array.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "span": {
            "format": "double",
            "description": "Solar Array span in meters.",
            "type": "number",
            "example": 123.4
          },
          "area": {
            "format": "double",
            "description": "Solar Array area in square meters.",
            "type": "number",
            "example": 123.4
          },
          "description": {
            "description": "Solar array description/notes.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "SpaceEnvObservation_Abridged": {
        "description": "SpaceEnvObservation data.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "f13f82b8-5d2a-407a-b3f3-1fe30ca79eae"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "msgType": {
            "description": "The type of message associated with this record.",
            "maxLength": 16,
            "type": "string",
            "example": "SODM"
          },
          "genSystem": {
            "description": "The external system which generated the message, if applicable.",
            "maxLength": 64,
            "type": "string",
            "example": "System Name"
          },
          "externalId": {
            "description": "Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "fe4ad5dc-0128-4ce8-b09c-0b404322025e"
          },
          "dataType": {
            "description": "The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.",
            "maxLength": 64,
            "type": "string",
            "example": "ECP"
          },
          "genTime": {
            "format": "date-time",
            "description": "The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2023-02-10T19:48:09.934Z"
          },
          "forecast": {
            "description": "Flag indicating that this record contains forecast data.",
            "type": "boolean",
            "example": true
          },
          "derived": {
            "description": "Flag indicating that this record contains derived data.",
            "type": "boolean",
            "example": false
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite hosting the sensor which produced this data.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "41866"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.",
            "type": "integer",
            "example": 41866
          },
          "origObjectId": {
            "description": "Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "41866"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "ECP-1"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 36,
            "type": "string",
            "example": "ECP-1"
          },
          "observatoryType": {
            "description": "The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "ONORBIT"
          },
          "observatoryName": {
            "description": "The name of the observatory from which this data was collected.",
            "maxLength": 128,
            "type": "string",
            "example": "GOES-16"
          },
          "observatoryNotes": {
            "description": "Additional notes concerning the observatory.",
            "maxLength": 256,
            "type": "string",
            "example": "Notes"
          },
          "instrumentType": {
            "description": "The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "MAGNETOMETER"
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 38.8339
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": -104.8214
          },
          "alt": {
            "format": "double",
            "description": "Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.",
            "type": "number",
            "example": 35785.3732
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "senPos": {
            "description": "Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              4174.78541785946,
              -9969.69867853067,
              40733.9284531208
            ]
          },
          "senVel": {
            "description": "Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.727059797295872,
              0.298037087322647,
              0.00157064850994095
            ]
          },
          "measType": {
            "description": "The sensor measurement type of the observation data contained in this record.",
            "maxLength": 64,
            "type": "string",
            "example": "ENERGETIC PARTICLES"
          },
          "senEnergyLevel": {
            "description": "The energy level bin of the sensor associated with this measurement.",
            "maxLength": 64,
            "type": "string",
            "example": "0500-700 keV"
          },
          "obSetId": {
            "description": "A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.",
            "maxLength": 36,
            "type": "string",
            "example": "ECPOBSET-478125"
          },
          "particleType": {
            "description": "The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.",
            "maxLength": 24,
            "type": "string",
            "example": "PROTON"
          },
          "obTime": {
            "format": "date-time",
            "description": "Time of the observation, in ISO 8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2023-06-07T14:17:39.653Z"
          },
          "seoList": {
            "description": "A collection of individual space environment observations.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SEObservation_Abridged"
            }
          },
          "quality": {
            "description": "The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.",
            "maxLength": 16,
            "type": "string",
            "example": "GOOD"
          },
          "description": {
            "description": "Descriptive or additional information associated with this observation record.",
            "maxLength": 512,
            "type": "string",
            "example": "Observation Data Description Text"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "energetic charged particle"
          },
          "srcTyps": {
            "description": "Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SPACEENVOB",
              "SGI"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "615236d7-d464-4b8c-9b0b-45994e017d80",
              "8a38e3d6-35fd-4bda-b883-e3724e6bc6b9"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2023-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "OPS1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "SpaceEnvObservation_Full": {
        "description": "SpaceEnvObservation data.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "f13f82b8-5d2a-407a-b3f3-1fe30ca79eae"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "msgType": {
            "description": "The type of message associated with this record.",
            "maxLength": 16,
            "type": "string",
            "example": "SODM"
          },
          "genSystem": {
            "description": "The external system which generated the message, if applicable.",
            "maxLength": 64,
            "type": "string",
            "example": "System Name"
          },
          "externalId": {
            "description": "Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "fe4ad5dc-0128-4ce8-b09c-0b404322025e"
          },
          "dataType": {
            "description": "The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.",
            "maxLength": 64,
            "type": "string",
            "example": "ECP"
          },
          "genTime": {
            "format": "date-time",
            "description": "The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2023-02-10T19:48:09.934Z"
          },
          "forecast": {
            "description": "Flag indicating that this record contains forecast data.",
            "type": "boolean",
            "example": true
          },
          "derived": {
            "description": "Flag indicating that this record contains derived data.",
            "type": "boolean",
            "example": false
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite hosting the sensor which produced this data.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "41866"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.",
            "type": "integer",
            "example": 41866
          },
          "origObjectId": {
            "description": "Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "41866"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "ECP-1"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 36,
            "type": "string",
            "example": "ECP-1"
          },
          "observatoryType": {
            "description": "The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "ONORBIT"
          },
          "observatoryName": {
            "description": "The name of the observatory from which this data was collected.",
            "maxLength": 128,
            "type": "string",
            "example": "GOES-16"
          },
          "observatoryNotes": {
            "description": "Additional notes concerning the observatory.",
            "maxLength": 256,
            "type": "string",
            "example": "Notes"
          },
          "instrumentType": {
            "description": "The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "MAGNETOMETER"
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 38.8339
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": -104.8214
          },
          "alt": {
            "format": "double",
            "description": "Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.",
            "type": "number",
            "example": 35785.3732
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "senPos": {
            "description": "Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              4174.78541785946,
              -9969.69867853067,
              40733.9284531208
            ]
          },
          "senVel": {
            "description": "Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.727059797295872,
              0.298037087322647,
              0.00157064850994095
            ]
          },
          "measType": {
            "description": "The sensor measurement type of the observation data contained in this record.",
            "maxLength": 64,
            "type": "string",
            "example": "ENERGETIC PARTICLES"
          },
          "senEnergyLevel": {
            "description": "The energy level bin of the sensor associated with this measurement.",
            "maxLength": 64,
            "type": "string",
            "example": "0500-700 keV"
          },
          "obSetId": {
            "description": "A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.",
            "maxLength": 36,
            "type": "string",
            "example": "ECPOBSET-478125"
          },
          "particleType": {
            "description": "The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.",
            "maxLength": 24,
            "type": "string",
            "example": "PROTON"
          },
          "obTime": {
            "format": "date-time",
            "description": "Time of the observation, in ISO 8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2023-06-07T14:17:39.653Z"
          },
          "seoList": {
            "description": "A collection of individual space environment observations.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SEObservation_Full"
            }
          },
          "quality": {
            "description": "The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.",
            "maxLength": 16,
            "type": "string",
            "example": "GOOD"
          },
          "description": {
            "description": "Descriptive or additional information associated with this observation record.",
            "maxLength": 512,
            "type": "string",
            "example": "Observation Data Description Text"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "energetic charged particle"
          },
          "srcTyps": {
            "description": "Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SPACEENVOB",
              "SGI"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "615236d7-d464-4b8c-9b0b-45994e017d80",
              "8a38e3d6-35fd-4bda-b883-e3724e6bc6b9"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2023-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "OPS1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "SpaceEnvObservation_Ingest": {
        "description": "SpaceEnvObservation data.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "f13f82b8-5d2a-407a-b3f3-1fe30ca79eae"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "msgType": {
            "description": "The type of message associated with this record.",
            "maxLength": 16,
            "type": "string",
            "example": "SODM"
          },
          "genSystem": {
            "description": "The external system which generated the message, if applicable.",
            "maxLength": 64,
            "type": "string",
            "example": "System Name"
          },
          "externalId": {
            "description": "Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
            "maxLength": 36,
            "type": "string",
            "example": "fe4ad5dc-0128-4ce8-b09c-0b404322025e"
          },
          "dataType": {
            "description": "The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.",
            "maxLength": 64,
            "type": "string",
            "example": "ECP"
          },
          "genTime": {
            "format": "date-time",
            "description": "The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2023-02-10T19:48:09.934Z"
          },
          "forecast": {
            "description": "Flag indicating that this record contains forecast data.",
            "type": "boolean",
            "example": true
          },
          "derived": {
            "description": "Flag indicating that this record contains derived data.",
            "type": "boolean",
            "example": false
          },
          "idOnOrbit": {
            "description": "Unique identifier of the on-orbit satellite hosting the sensor which produced this data.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "41866"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.",
            "type": "integer",
            "example": 41866
          },
          "origObjectId": {
            "description": "Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.",
            "maxLength": 36,
            "type": "string",
            "example": "41866"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "ECP-1"
          },
          "origSensorId": {
            "description": "Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 36,
            "type": "string",
            "example": "ECP-1"
          },
          "observatoryType": {
            "description": "The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "ONORBIT"
          },
          "observatoryName": {
            "description": "The name of the observatory from which this data was collected.",
            "maxLength": 128,
            "type": "string",
            "example": "GOES-16"
          },
          "observatoryNotes": {
            "description": "Additional notes concerning the observatory.",
            "maxLength": 256,
            "type": "string",
            "example": "Notes"
          },
          "instrumentType": {
            "description": "The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "MAGNETOMETER"
          },
          "lat": {
            "format": "double",
            "description": "WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 38.8339
          },
          "lon": {
            "format": "double",
            "description": "WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": -104.8214
          },
          "alt": {
            "format": "double",
            "description": "Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.",
            "type": "number",
            "example": 35785.3732
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "senPos": {
            "description": "Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              4174.78541785946,
              -9969.69867853067,
              40733.9284531208
            ]
          },
          "senVel": {
            "description": "Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].",
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.727059797295872,
              0.298037087322647,
              0.00157064850994095
            ]
          },
          "measType": {
            "description": "The sensor measurement type of the observation data contained in this record.",
            "maxLength": 64,
            "type": "string",
            "example": "ENERGETIC PARTICLES"
          },
          "senEnergyLevel": {
            "description": "The energy level bin of the sensor associated with this measurement.",
            "maxLength": 64,
            "type": "string",
            "example": "0500-700 keV"
          },
          "obSetId": {
            "description": "A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.",
            "maxLength": 36,
            "type": "string",
            "example": "ECPOBSET-478125"
          },
          "particleType": {
            "description": "The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.",
            "maxLength": 24,
            "type": "string",
            "example": "PROTON"
          },
          "obTime": {
            "format": "date-time",
            "description": "Time of the observation, in ISO 8601 UTC format with millisecond precision.",
            "type": "string",
            "example": "2023-06-07T14:17:39.653Z"
          },
          "seoList": {
            "description": "A collection of individual space environment observations.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SEObservation_Ingest"
            }
          },
          "quality": {
            "description": "The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.",
            "maxLength": 16,
            "type": "string",
            "example": "GOOD"
          },
          "description": {
            "description": "Descriptive or additional information associated with this observation record.",
            "maxLength": 512,
            "type": "string",
            "example": "Observation Data Description Text"
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "energetic charged particle"
          },
          "srcTyps": {
            "description": "Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SPACEENVOB",
              "SGI"
            ]
          },
          "srcIds": {
            "description": "Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "615236d7-d464-4b8c-9b0b-45994e017d80",
              "8a38e3d6-35fd-4bda-b883-e3724e6bc6b9"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2023-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "OPS1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "Status_Full": {
        "description": "Status for a particular Entity. An entity may have multiple status records collected by various sources.",
        "required": [
          "classificationMarking",
          "idEntity",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "STATUS-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "derivedFrom": {
            "description": "The sources or SCG references from which the classification of this data is derived.",
            "maxLength": 128,
            "type": "string",
            "example": "SOME_SOURCE"
          },
          "declassificationDate": {
            "format": "date-time",
            "description": "The declassification date of this data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:02.123Z"
          },
          "declassificationString": {
            "description": "Declassification string of this data.",
            "maxLength": 256,
            "type": "string",
            "example": "U"
          },
          "idEntity": {
            "description": "Unique identifier of the parent entity.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENTITY-ID"
          },
          "state": {
            "description": "Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).",
            "maxLength": 16,
            "enum": [
              "UNKNOWN",
              "DEAD",
              "ACTIVE",
              "RF ACTIVE",
              "STANDBY"
            ],
            "type": "string",
            "example": "ACTIVE"
          },
          "sysCap": {
            "description": "System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).",
            "maxLength": 3,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "opsCap": {
            "description": "Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).",
            "maxLength": 3,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "subStatusCollection": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubStatus_Full"
            }
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "notes": {
            "description": "Comments describing the status creation and or updates to an entity.",
            "type": "string",
            "example": "Example Notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          }
        }
      },
      "SubStatus_Full": {
        "description": "Additional sub-system or capability status for the parent entity.",
        "required": [
          "type",
          "classificationMarking",
          "statusId",
          "status",
          "notes",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SUBSTATUS-ID"
          },
          "type": {
            "description": "Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "mwCap",
              "ssCap",
              "mdCap"
            ],
            "type": "string",
            "example": "mdCap"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "statusId": {
            "description": "Id of the parent status.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-STATUS-ID"
          },
          "status": {
            "description": "Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "notes": {
            "description": "Descriptions and/or comments associated with the sub-status.",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "example": "Sample Notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "SWIR_Abridged": {
        "description": "Data representing observed short wave infrared (SWIR) measurements.",
        "required": [
          "classificationMarking",
          "ts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SWIR-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "45234"
          },
          "ts": {
            "format": "date-time",
            "description": "Data timestamp in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "solarPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.",
            "type": "number",
            "example": 1.23
          },
          "lat": {
            "format": "double",
            "description": "Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 70.55208
          },
          "lon": {
            "format": "double",
            "description": "Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 81.18191
          },
          "locationName": {
            "description": "Location/name of the observing sensor.",
            "maxLength": 64,
            "type": "string",
            "example": "AeroTel"
          },
          "badWave": {
            "description": "User comments concerning sensor or data limitations.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Comments"
          },
          "origObjectId": {
            "description": "Original object ID or Catalog Number provided by source.",
            "maxLength": 36,
            "type": "string",
            "example": "WildBlue-1"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 25544
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "SWIR_Full": {
        "description": "Data representing observed short wave infrared (SWIR) measurements.",
        "required": [
          "classificationMarking",
          "ts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SWIR-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "45234"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "ts": {
            "format": "date-time",
            "description": "Data timestamp in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "solarPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.",
            "type": "number",
            "example": 1.23
          },
          "lat": {
            "format": "double",
            "description": "Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 70.55208
          },
          "lon": {
            "format": "double",
            "description": "Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 81.18191
          },
          "locationName": {
            "description": "Location/name of the observing sensor.",
            "maxLength": 64,
            "type": "string",
            "example": "AeroTel"
          },
          "badWave": {
            "description": "User comments concerning sensor or data limitations.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Comments"
          },
          "wavelengths": {
            "description": "Array of wavelengths, in microns. This array should correspond with the same-sized array of absFluxes.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              4.56
            ]
          },
          "absFluxes": {
            "description": "Array of absolute flux measurement data, in Watts per square centimeter per micron. This array should correspond with the same-sized array of wavelengths.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              4.56
            ]
          },
          "ratioWavelengths": {
            "description": "Array of ratio wavelength data. This array should correspond with the same-sized array of fluxRatios.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              4.56
            ]
          },
          "fluxRatios": {
            "description": "Array of flux ratio data. This array should correspond with the same-sized array of ratioWavelengths.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              4.56
            ]
          },
          "origObjectId": {
            "description": "Original object ID or Catalog Number provided by source.",
            "maxLength": 36,
            "type": "string",
            "example": "WildBlue-1"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 25544
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      },
      "SWIR_Ingest": {
        "description": "Data representing observed short wave infrared (SWIR) measurements.",
        "required": [
          "classificationMarking",
          "ts",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SWIR-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "45234"
          },
          "ts": {
            "format": "date-time",
            "description": "Data timestamp in ISO8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "solarPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.",
            "type": "number",
            "example": 1.23
          },
          "lat": {
            "format": "double",
            "description": "Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 70.55208
          },
          "lon": {
            "format": "double",
            "description": "Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 81.18191
          },
          "locationName": {
            "description": "Location/name of the observing sensor.",
            "maxLength": 64,
            "type": "string",
            "example": "AeroTel"
          },
          "badWave": {
            "description": "User comments concerning sensor or data limitations.",
            "maxLength": 64,
            "type": "string",
            "example": "Example Comments"
          },
          "wavelengths": {
            "description": "Array of wavelengths, in microns. This array should correspond with the same-sized array of absFluxes.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              4.56
            ]
          },
          "absFluxes": {
            "description": "Array of absolute flux measurement data, in Watts per square centimeter per micron. This array should correspond with the same-sized array of wavelengths.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              4.56
            ]
          },
          "ratioWavelengths": {
            "description": "Array of ratio wavelength data. This array should correspond with the same-sized array of fluxRatios.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              4.56
            ]
          },
          "fluxRatios": {
            "description": "Array of flux ratio data. This array should correspond with the same-sized array of ratioWavelengths.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.23,
              4.56
            ]
          },
          "origObjectId": {
            "description": "Original object ID or Catalog Number provided by source.",
            "maxLength": 36,
            "type": "string",
            "example": "WildBlue-1"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 25544
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          }
        }
      }
    }
  }
}