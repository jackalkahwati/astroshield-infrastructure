{
  "openapi": "3.0.3",
  "info": {
    "title": "Unified Data Library Services API",
    "version": "1.30.0 Daiquiri",
    "description": "Unified Data Library Services OpenAPI v3 documentation.",
    "termsOfService": "storefront/storefront/appConfig/useragreement.html",
    "contact": {
      "name": "Sage Andorka, Deputy, Cross-Mission Ground",
      "email": "unifieddatalibrary@bluestaq.com"
    }
  },
  "tags": [
    {
      "name": "Sky Imagery",
      "description": "This collection of services provides operations for querying and manipulation of sky imagery data. Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP, MP4). Binary content must be downloaded individually by ID using the 'getFile' operation."
    }
  ],
  "externalDocs": {
    "url": "udl/openapi.json"
  },
  "servers": [
    {
      "url": "https://unifieddatalibrary.com"
    }
  ],
  "paths": {
    "/filedrop/udl-skyimagery": {
      "post": {
        "servers": [
          {
            "url": "https://imagery.unifieddatalibrary.com",
            "description": "Imagery upload server"
          }
        ],
        "tags": [
          "Sky Imagery"
        ],
        "description": "This service operation requires a zip file in the body of the POST request.  The zip file must contains exactly two files. 1) A json file with any file name that ends in .json  e.g. MyFitsFile.json  The contents of the json file must be valid according to the schema for SkyImagery. 2) A binary image file.  This can be png, jpeg, mp4, or fits/eossa file.  e.g.  MyFitsFile.fits. The metadata and image files will be stored and associated with each other allowing queries of the data retrieval of the binary images. This operation is intended to be used for automated feeds into UDL. A specific role is required to perform this service operation. Please contact the UDL team for assistance.\n",
        "operationId": "filedrop_udl_skyimagery_post_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/zip": {
              "schema": {
                "$ref": "#/components/schemas/SkyImagery_Ingest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "415": {
            "description": "Unsupported Media Type"
          },
          "429": {
            "description": "Rate Limit Exceeded"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/skyimagery": {
      "get": {
        "description": "Service operation to dynamically query data by a variety of query parameters not specified in this API documentation. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sky Imagery"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SkyImagery_Abridged"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "expStartTime",
            "description": "Start time of the exposure, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/skyimagery/{id}": {
      "get": {
        "description": "Service operation to get a single SkyImagery record by its unique ID passed as a path parameter. SkyImagery represents metadata about a sky image, as well as the actual binary image data.",
        "tags": [
          "Sky Imagery"
        ],
        "parameters": [
          {
            "description": "The ID of the SkyImagery to find.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkyImagery_Full"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/skyimagery/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sky Imagery"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "expStartTime",
            "description": "Start time of the exposure, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/skyimagery/getFile/{id}": {
      "get": {
        "description": "Service operation to get a single SkyImagery binary image by its unique ID passed as a path parameter. The image is returned as an attachment Content-Disposition.",
        "tags": [
          "Sky Imagery"
        ],
        "parameters": [
          {
            "description": "The ID of the binary SkyImagery to return.",
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {}
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "404": {
            "description": "Item Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/skyimagery/history": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sky Imagery"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expStartTime",
            "description": "Start time of the exposure, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SkyImagery_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/skyimagery/history/aodr": {
      "get": {
        "description": "Service operation to dynamically query historical data by a variety of query parameters not specified in this API documentation, then write that data to the Secure Content Store.  See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sky Imagery"
        ],
        "parameters": [
          {
            "description": "optional, fields for retrieval. When omitted, ALL fields are assumed. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid query fields that can be selected.",
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, notification method for the created file link. When omitted, EMAIL is assumed. Current valid values are: EMAIL, SMS.",
            "name": "notification",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, field delimiter when the created file is not JSON. Must be a single character chosen from this set: (',', ';', ':', '|'). When omitted, \",\" is used. It is strongly encouraged that your field delimiter be a character unlikely to occur within the data.",
            "name": "outputDelimiter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "optional, output format for the file. When omitted, JSON is assumed. Current valid values are: JSON and CSV.",
            "name": "outputFormat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expStartTime",
            "description": "Start time of the exposure, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/skyimagery/history/count": {
      "get": {
        "description": "Service operation to return the count of records satisfying the specified query parameters. This operation is useful to determine how many records pass a particular query criteria without retrieving large amounts of data. See the queryhelp operation (/udl/&lt;datatype&gt;/queryhelp) for more details on valid/required query parameter information.",
        "tags": [
          "Sky Imagery"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "name": "expStartTime",
            "description": "Start time of the exposure, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ]
      }
    },
    "/udl/skyimagery/queryhelp": {
      "get": {
        "description": "Service operation to provide detailed information on available dynamic query parameters for a particular data type.",
        "tags": [
          "Sky Imagery"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "User Unauthorized"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/udl/skyimagery/tuple": {
      "get": {
        "description": "Service operation to dynamically query data and only return specified columns/fields. Requested columns are specified by the 'columns' query parameter and should be a comma separated list of valid fields for the specified data type. classificationMarking is always returned. See the queryhelp operation (/udl/<datatype>/queryhelp) for more details on valid/required query parameter information. An example URI: /udl/elset/tuple?columns=satNo,period&epoch=>now-5 hours would return the satNo and period of elsets with an epoch greater than 5 hours ago.",
        "tags": [
          "Sky Imagery"
        ],
        "parameters": [
          {
            "description": "Comma-separated list of valid field names for this data type to be returned in the response. Only the fields specified will be returned as well as the classification marking of the data, if applicable. See the ‘queryhelp’ operation for a complete list of possible fields.",
            "required": true,
            "name": "columns",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expStartTime",
            "description": "Start time of the exposure, in ISO 8601 UTC format with microsecond precision. (YYYY-MM-DDTHH:MM:SS.ssssssZ)",
            "required": true,
            "schema": {
              "format": "date-time",
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SkyImagery_Full"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Invalid/Missing User Credentials"
          },
          "403": {
            "description": "User Is Not Authorized"
          },
          "405": {
            "description": "Method Not Allowed"
          },
          "406": {
            "description": "MediaType Not Accepted by Request Headers"
          },
          "429": {
            "description": "Rate of Requests Exceeds Allowed Limit"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Antenna_Full": {
        "description": "Model representation of information on on-orbit/spacecraft communication antennas. A spacecraft may have multiple antennas and each antenna can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "name": {
            "description": "Antenna name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "IRIDIUM NEXT 121-ANTENNA-10075"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "antennaDetails": {
            "description": "Read-only collection of additional AntennaDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/antennadetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AntennaDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "AntennaDetails_Full": {
        "description": "Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.",
        "required": [
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNADETAILS-ID"
          },
          "idAntenna": {
            "description": "Unique identifier of the parent Antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Reflector"
          },
          "position": {
            "description": "Antenna position (e.g. Top, Nadir, Side).",
            "maxLength": 128,
            "type": "string",
            "example": "Top"
          },
          "mode": {
            "description": "Antenna mode (e.g. TX,RX).",
            "maxLength": 4,
            "enum": [
              "TX",
              "RX"
            ],
            "type": "string",
            "example": "TX"
          },
          "steerable": {
            "description": "Boolean indicating if this antenna is steerable.",
            "type": "boolean",
            "example": false
          },
          "beamForming": {
            "description": "Boolean indicating if this is a beam forming antenna.",
            "type": "boolean",
            "example": false
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the antenna.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTUREORG-ID"
          },
          "diameter": {
            "format": "double",
            "description": "Antenna diameter in meters.",
            "type": "number",
            "example": 0.01
          },
          "size": {
            "description": "Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.05
            ]
          },
          "startFrequency": {
            "format": "double",
            "description": "Antenna start of frequency range in Mhz.",
            "type": "number",
            "example": 2.1
          },
          "endFrequency": {
            "format": "double",
            "description": "Antenna end of frequency range in Mhz.",
            "type": "number",
            "example": 3.3
          },
          "beamwidth": {
            "format": "double",
            "description": "Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.",
            "type": "number",
            "example": 14.1
          },
          "gain": {
            "format": "double",
            "description": "Antenna maximum gain in dBi.",
            "type": "number",
            "example": 20.1
          },
          "gainTolerance": {
            "format": "double",
            "description": "Antenna gain tolerance in dB.",
            "type": "number",
            "example": 5.1
          },
          "polarization": {
            "format": "double",
            "description": "Antenna polarization in degrees.",
            "type": "number",
            "example": 45.1
          },
          "description": {
            "description": "Antenna description.",
            "maxLength": 512,
            "type": "string",
            "example": "Description of antenna A"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "Battery_Full": {
        "description": "Model representation of specific spacecraft battery types.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "name": {
            "description": "Battery name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "JAK-BATTERY-1479"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "batteryDetails": {
            "description": "Read-only collection of additional BatteryDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/batterydetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatteryDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "BatteryDetails_Full": {
        "description": "Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.",
        "required": [
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERYDETAILS-ID"
          },
          "idBattery": {
            "description": "Identifier of the parent battery type record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "technology": {
            "description": "Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Ni-Cd"
          },
          "capacity": {
            "format": "double",
            "description": "Battery capacity in Ah.",
            "type": "number",
            "example": 10.1
          },
          "dischargeDepth": {
            "format": "double",
            "description": "Depth of discharge as a percentage/fraction.",
            "type": "number",
            "example": 0.2
          },
          "model": {
            "description": "Battery model number or name.",
            "maxLength": 128,
            "type": "string",
            "example": "11212"
          },
          "description": {
            "description": "Battery description/notes.",
            "maxLength": 1024,
            "type": "string",
            "example": "example notes"
          },
          "manufacturerOrgId": {
            "description": "ID of the organization that manufactures the battery.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "Engine_Full": {
        "description": "Known launch vehicle engines and their performance characteristics and limits.  A launch vehicle has 1 to many engines per stage.",
        "required": [
          "name",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "name": {
            "description": "Engine name/variant.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE_VARIANT1"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engineDetails": {
            "description": "Read-only collection of additional EngineDetails by various sources for this engine, ignored on create/update. These details must be created separately via the /udl/enginedetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EngineDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "EngineDetails_Full": {
        "description": "Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.",
        "required": [
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINEDETAILS-ID"
          },
          "idEngine": {
            "description": "Identifier of the parent engine record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "family": {
            "description": "Engine type or family.",
            "maxLength": 64,
            "type": "string",
            "example": "ENGINE_TYPE1"
          },
          "cycleType": {
            "description": "Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Pressure Fed"
          },
          "characteristicType": {
            "description": "Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Electric"
          },
          "manufacturerOrgId": {
            "description": "Organization ID of the engine manufacturer.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "specificImpulse": {
            "format": "double",
            "description": "Launch engine specific impulse in seconds.",
            "type": "number",
            "example": 1.1
          },
          "burnTime": {
            "format": "double",
            "description": "Launch engine maximum burn time in seconds.",
            "type": "number",
            "example": 1.1
          },
          "seaLevelThrust": {
            "format": "double",
            "description": "Engine maximum thrust at sea level in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "vacuumThrust": {
            "format": "double",
            "description": "Engine maximum thrust in a vacuum in Kilo-Newtons.",
            "type": "number",
            "example": 1.1
          },
          "chamberPressure": {
            "format": "double",
            "description": "Engine chamber pressure in bars.",
            "type": "number",
            "example": 1.1
          },
          "nozzleExpansionRatio": {
            "format": "double",
            "description": "Engine nozzle expansion ratio.",
            "type": "number",
            "example": 1.1
          },
          "maxFirings": {
            "format": "int32",
            "description": "Engine maximum number of firings.",
            "type": "integer",
            "example": 5
          },
          "propellant": {
            "description": "Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid"
          },
          "oxidizer": {
            "description": "Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).",
            "maxLength": 64,
            "type": "string",
            "example": "Liquid Oxygen"
          },
          "notes": {
            "description": "Notes/Description of the engine.",
            "maxLength": 1024,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          }
        }
      },
      "EOObservation_Full": {
        "description": "Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EOOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should contact the provider for details on their obTime specifications.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "corrQuality": {
            "format": "double",
            "description": "Object Correlation Quality score of the observation when compared to a known orbit state, (non-standardized). Users should consult data providers regarding the expected range of values.",
            "type": "number",
            "example": 1.1
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "idSkyImagery": {
            "description": "Unique identifier of the Sky Imagery.",
            "maxLength": 36,
            "type": "string",
            "example": "SKYIMAGERY-ID"
          },
          "collectMethod": {
            "description": "Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).",
            "maxLength": 24,
            "type": "string",
            "example": "AUTOTRACK"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 5
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "obPosition": {
            "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
            "maxLength": 8,
            "type": "string",
            "example": "FIRST"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": false
          },
          "azimuth": {
            "format": "double",
            "description": "Line of sight azimuth angle in degrees and topocentric frame.  Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight azimuth angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "azimuthBias": {
            "format": "double",
            "description": "Sensor line of sight azimuth angle bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the line of sight azimuth in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "elevation": {
            "format": "double",
            "description": "Line of sight elevation in degrees and topocentric frame. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight elevation angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "elevationBias": {
            "format": "double",
            "description": "Sensor line of sight elevation bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the line of sight elevation in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "range": {
            "format": "double",
            "description": "Line of sight range in km. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight range, in kilometers.",
            "type": "number",
            "example": 1.1
          },
          "rangeBias": {
            "format": "double",
            "description": "Sensor line of sight range bias in km.",
            "type": "number",
            "example": 1.1
          },
          "rangeRate": {
            "format": "double",
            "description": "Range rate in km/s. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight range rate, in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "ra": {
            "format": "double",
            "description": "Line of sight right ascension, in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "raMeasured": {
            "description": "Optional flag indicating whether the ra value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "raRate": {
            "format": "double",
            "description": "Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "raUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight right ascension angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "raBias": {
            "format": "double",
            "description": "Sensor line of sight right ascension bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "declination": {
            "format": "double",
            "description": "Line of sight declination, in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "declinationMeasured": {
            "description": "Optional flag indicating whether the declination value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "declinationRate": {
            "format": "double",
            "description": "Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "declinationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight declination angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "declinationBias": {
            "format": "double",
            "description": "Sensor line of sight declination angle bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "losx": {
            "format": "double",
            "description": "Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losy": {
            "format": "double",
            "description": "Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losz": {
            "format": "double",
            "description": "Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight pointing in micro-radians.",
            "type": "number",
            "example": 1.1
          },
          "losxvel": {
            "format": "double",
            "description": "Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losyvel": {
            "format": "double",
            "description": "Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "loszvel": {
            "format": "double",
            "description": "Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 179.1
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at obTime (if mobile/onorbit) in km.",
            "type": "number",
            "example": 1.1
          },
          "senx": {
            "format": "double",
            "description": "Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "seny": {
            "format": "double",
            "description": "Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senz": {
            "format": "double",
            "description": "Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelx": {
            "format": "double",
            "description": "Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvely": {
            "format": "double",
            "description": "Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelz": {
            "format": "double",
            "description": "Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senQuat": {
            "description": "The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.4492,
              0.02,
              0.8765,
              0.2213
            ]
          },
          "fovCount": {
            "format": "int32",
            "description": "The number of RSOs detected in the sensor field of view.",
            "type": "integer",
            "example": 1
          },
          "fovCountUCT": {
            "format": "int32",
            "description": "The number of uncorrelated tracks in the field of view.",
            "type": "integer",
            "example": 2
          },
          "expDuration": {
            "format": "double",
            "description": "Image exposure duration in seconds. For observations performed using frame stacking or synthetic tracking methods, the exposure duration should be the total integration time. This field is highly recommended / required if the observations are going to be used for photometric processing.",
            "type": "number",
            "example": 1.1
          },
          "zeroptd": {
            "format": "double",
            "description": "Formula: 2.5 * log_10 (zero_mag_counts / expDuration).",
            "type": "number",
            "example": 1.1
          },
          "netObjSig": {
            "format": "double",
            "description": "Net object signature = counts / expDuration.",
            "type": "number",
            "example": 1.1
          },
          "netObjSigUnc": {
            "format": "double",
            "description": "Net object signature uncertainty = counts uncertainty / expDuration.",
            "type": "number",
            "example": 1.1
          },
          "mag": {
            "format": "double",
            "description": "Measure of observed brightness calibrated against the Gaia G-band in units of magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "magUnc": {
            "format": "double",
            "description": "Uncertainty of the observed brightness in units of magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "magNormRange": {
            "format": "double",
            "description": "Formula: mag - 5.0 * log_10(geo_range / 1000000.0).",
            "type": "number",
            "example": 1.1
          },
          "geolat": {
            "format": "double",
            "description": "For GEO detections, the latitude in degrees north.",
            "type": "number",
            "example": 1.1
          },
          "geolon": {
            "format": "double",
            "description": "For GEO detections, the longitude in degrees east.",
            "type": "number",
            "example": 1.1
          },
          "geoalt": {
            "format": "double",
            "description": "For GEO detections, the altitude in km.",
            "type": "number",
            "example": 1.1
          },
          "georange": {
            "format": "double",
            "description": "For GEO detections, the range in km.",
            "type": "number",
            "example": 1.1
          },
          "skyBkgrnd": {
            "format": "double",
            "description": "Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.",
            "type": "number",
            "example": 1.1
          },
          "primaryExtinction": {
            "format": "double",
            "description": "Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.",
            "type": "number",
            "example": 1.1
          },
          "primaryExtinctionUnc": {
            "format": "double",
            "description": "Primary Extinction Coefficient Uncertainty, in Magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "solarPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.",
            "type": "number",
            "example": 1.1
          },
          "solarEqPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing (i.e. before the opposition) and positive when opening (after the opposition).",
            "type": "number",
            "example": 1.1
          },
          "solarDecAngle": {
            "format": "double",
            "description": "Angle from the sun to the equatorial plane.",
            "type": "number",
            "example": 1.1
          },
          "shutterDelay": {
            "format": "double",
            "description": "Shutter delay in seconds.",
            "type": "number",
            "example": 1.1
          },
          "timingBias": {
            "format": "double",
            "description": "Sensor timing bias in seconds.",
            "type": "number",
            "example": 1.1
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URI"
          },
          "intensity": {
            "format": "double",
            "description": "Intensity of the target for IR observations, in kw/sr/um.",
            "type": "number",
            "example": 1.1
          },
          "bgIntensity": {
            "format": "double",
            "description": "Background intensity for IR observations, in kw/sr/um.",
            "type": "number",
            "example": 1.1
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "PROVIDED_DATA1"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "zeroPtdUnc": {
            "format": "double",
            "description": "This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.",
            "type": "number",
            "example": 1.1
          },
          "eoobservationDetails": {
            "$ref": "#/components/schemas/EOObservationDetails_Full"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "referenceFrame": {
            "description": "The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "GCRF",
              "ITRF",
              "TEME"
            ],
            "type": "string",
            "example": "J2000"
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "umbra": {
            "description": "Boolean indicating that the target object was in umbral eclipse at the time of this observation.",
            "type": "boolean",
            "example": false
          },
          "penumbra": {
            "description": "Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.",
            "type": "boolean",
            "example": false
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "type": {
            "description": "Read only field specifying the type of observation (e.g. OPTICAL, OPTICAL_IR, LASER_RANGING, etc).",
            "type": "string",
            "readOnly": true,
            "example": "OPTICAL"
          }
        }
      },
      "EOObservation_Ingest": {
        "description": "Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.",
        "required": [
          "classificationMarking",
          "obTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EOOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should contact the provider for details on their obTime specifications.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "corrQuality": {
            "format": "double",
            "description": "Object Correlation Quality score of the observation when compared to a known orbit state, (non-standardized). Users should consult data providers regarding the expected range of values.",
            "type": "number",
            "example": 1.1
          },
          "idOnOrbit": {
            "description": "Unique identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "ONORBIT-ID"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "SENSOR-ID"
          },
          "idSkyImagery": {
            "description": "Unique identifier of the Sky Imagery.",
            "maxLength": 36,
            "type": "string",
            "example": "SKYIMAGERY-ID"
          },
          "collectMethod": {
            "description": "Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).",
            "maxLength": 24,
            "type": "string",
            "example": "AUTOTRACK"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 5
          },
          "taskId": {
            "description": "Optional identifier to indicate the specific tasking which produced this observation.",
            "maxLength": 36,
            "type": "string",
            "example": "TASK-ID"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "TRANSACTION-ID"
          },
          "trackId": {
            "description": "Optional identifier of the track to which this observation belongs.",
            "maxLength": 36,
            "type": "string",
            "example": "TRACK-ID"
          },
          "obPosition": {
            "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
            "maxLength": 8,
            "type": "string",
            "example": "FIRST"
          },
          "origObjectId": {
            "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGOBJECT-ID"
          },
          "origSensorId": {
            "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "ORIGSENSOR-ID"
          },
          "uct": {
            "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
            "type": "boolean",
            "example": false
          },
          "azimuth": {
            "format": "double",
            "description": "Line of sight azimuth angle in degrees and topocentric frame.  Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "azimuthMeasured": {
            "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "azimuthUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight azimuth angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "azimuthBias": {
            "format": "double",
            "description": "Sensor line of sight azimuth angle bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "azimuthRate": {
            "format": "double",
            "description": "Rate of change of the line of sight azimuth in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "elevation": {
            "format": "double",
            "description": "Line of sight elevation in degrees and topocentric frame. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "elevationMeasured": {
            "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "elevationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight elevation angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "elevationBias": {
            "format": "double",
            "description": "Sensor line of sight elevation bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "elevationRate": {
            "format": "double",
            "description": "Rate of change of the line of sight elevation in degrees per second.",
            "type": "number",
            "example": 1.1
          },
          "range": {
            "format": "double",
            "description": "Line of sight range in km. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "rangeMeasured": {
            "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight range, in kilometers.",
            "type": "number",
            "example": 1.1
          },
          "rangeBias": {
            "format": "double",
            "description": "Sensor line of sight range bias in km.",
            "type": "number",
            "example": 1.1
          },
          "rangeRate": {
            "format": "double",
            "description": "Range rate in km/s. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "rangeRateMeasured": {
            "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "rangeRateUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight range rate, in kilometers/second.",
            "type": "number",
            "example": 1.1
          },
          "ra": {
            "format": "double",
            "description": "Line of sight right ascension, in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "raMeasured": {
            "description": "Optional flag indicating whether the ra value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "raRate": {
            "format": "double",
            "description": "Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "raUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight right ascension angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "raBias": {
            "format": "double",
            "description": "Sensor line of sight right ascension bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "declination": {
            "format": "double",
            "description": "Line of sight declination, in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
            "type": "number",
            "example": 1.1
          },
          "declinationMeasured": {
            "description": "Optional flag indicating whether the declination value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
            "type": "boolean",
            "example": true
          },
          "declinationRate": {
            "format": "double",
            "description": "Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "declinationUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight declination angle, in degrees.",
            "type": "number",
            "example": 1.1
          },
          "declinationBias": {
            "format": "double",
            "description": "Sensor line of sight declination angle bias in degrees.",
            "type": "number",
            "example": 1.1
          },
          "losx": {
            "format": "double",
            "description": "Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losy": {
            "format": "double",
            "description": "Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losz": {
            "format": "double",
            "description": "Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losUnc": {
            "format": "double",
            "description": "One sigma uncertainty in the line of sight pointing in micro-radians.",
            "type": "number",
            "example": 1.1
          },
          "losxvel": {
            "format": "double",
            "description": "Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "losyvel": {
            "format": "double",
            "description": "Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "loszvel": {
            "format": "double",
            "description": "Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senlat": {
            "format": "double",
            "description": "Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.1
          },
          "senlon": {
            "format": "double",
            "description": "Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 179.1
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at obTime (if mobile/onorbit) in km.",
            "type": "number",
            "example": 1.1
          },
          "senx": {
            "format": "double",
            "description": "Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "seny": {
            "format": "double",
            "description": "Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senz": {
            "format": "double",
            "description": "Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelx": {
            "format": "double",
            "description": "Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvely": {
            "format": "double",
            "description": "Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senvelz": {
            "format": "double",
            "description": "Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
            "type": "number",
            "example": 1.1
          },
          "senQuat": {
            "description": "The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.4492,
              0.02,
              0.8765,
              0.2213
            ]
          },
          "fovCount": {
            "format": "int32",
            "description": "The number of RSOs detected in the sensor field of view.",
            "type": "integer",
            "example": 1
          },
          "fovCountUCT": {
            "format": "int32",
            "description": "The number of uncorrelated tracks in the field of view.",
            "type": "integer",
            "example": 2
          },
          "expDuration": {
            "format": "double",
            "description": "Image exposure duration in seconds. For observations performed using frame stacking or synthetic tracking methods, the exposure duration should be the total integration time. This field is highly recommended / required if the observations are going to be used for photometric processing.",
            "type": "number",
            "example": 1.1
          },
          "zeroptd": {
            "format": "double",
            "description": "Formula: 2.5 * log_10 (zero_mag_counts / expDuration).",
            "type": "number",
            "example": 1.1
          },
          "netObjSig": {
            "format": "double",
            "description": "Net object signature = counts / expDuration.",
            "type": "number",
            "example": 1.1
          },
          "netObjSigUnc": {
            "format": "double",
            "description": "Net object signature uncertainty = counts uncertainty / expDuration.",
            "type": "number",
            "example": 1.1
          },
          "mag": {
            "format": "double",
            "description": "Measure of observed brightness calibrated against the Gaia G-band in units of magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "magUnc": {
            "format": "double",
            "description": "Uncertainty of the observed brightness in units of magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "magNormRange": {
            "format": "double",
            "description": "Formula: mag - 5.0 * log_10(geo_range / 1000000.0).",
            "type": "number",
            "example": 1.1
          },
          "geolat": {
            "format": "double",
            "description": "For GEO detections, the latitude in degrees north.",
            "type": "number",
            "example": 1.1
          },
          "geolon": {
            "format": "double",
            "description": "For GEO detections, the longitude in degrees east.",
            "type": "number",
            "example": 1.1
          },
          "geoalt": {
            "format": "double",
            "description": "For GEO detections, the altitude in km.",
            "type": "number",
            "example": 1.1
          },
          "georange": {
            "format": "double",
            "description": "For GEO detections, the range in km.",
            "type": "number",
            "example": 1.1
          },
          "skyBkgrnd": {
            "format": "double",
            "description": "Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.",
            "type": "number",
            "example": 1.1
          },
          "primaryExtinction": {
            "format": "double",
            "description": "Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.",
            "type": "number",
            "example": 1.1
          },
          "primaryExtinctionUnc": {
            "format": "double",
            "description": "Primary Extinction Coefficient Uncertainty, in Magnitudes.",
            "type": "number",
            "example": 1.1
          },
          "solarPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.",
            "type": "number",
            "example": 1.1
          },
          "solarEqPhaseAngle": {
            "format": "double",
            "description": "The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing (i.e. before the opposition) and positive when opening (after the opposition).",
            "type": "number",
            "example": 1.1
          },
          "solarDecAngle": {
            "format": "double",
            "description": "Angle from the sun to the equatorial plane.",
            "type": "number",
            "example": 1.1
          },
          "shutterDelay": {
            "format": "double",
            "description": "Shutter delay in seconds.",
            "type": "number",
            "example": 1.1
          },
          "timingBias": {
            "format": "double",
            "description": "Sensor timing bias in seconds.",
            "type": "number",
            "example": 1.1
          },
          "rawFileURI": {
            "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
            "maxLength": 256,
            "type": "string",
            "example": "Example URI"
          },
          "intensity": {
            "format": "double",
            "description": "Intensity of the target for IR observations, in kw/sr/um.",
            "type": "number",
            "example": 1.1
          },
          "bgIntensity": {
            "format": "double",
            "description": "Background intensity for IR observations, in kw/sr/um.",
            "type": "number",
            "example": 1.1
          },
          "descriptor": {
            "description": "Optional source-provided and searchable metadata or descriptor of the data.",
            "maxLength": 64,
            "type": "string",
            "example": "PROVIDED_DATA1"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "zeroPtdUnc": {
            "format": "double",
            "description": "This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.",
            "type": "number",
            "example": 1.1
          },
          "eoobservationDetails": {
            "$ref": "#/components/schemas/EOObservationDetails_Ingest"
          },
          "referenceFrame": {
            "description": "The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "GCRF",
              "ITRF",
              "TEME"
            ],
            "type": "string",
            "example": "J2000"
          },
          "senReferenceFrame": {
            "description": "The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.",
            "maxLength": 24,
            "enum": [
              "J2000",
              "EFG/TDR",
              "ECR/ECEF",
              "TEME",
              "ITRF",
              "GCRF"
            ],
            "type": "string",
            "example": "J2000"
          },
          "umbra": {
            "description": "Boolean indicating that the target object was in umbral eclipse at the time of this observation.",
            "type": "boolean",
            "example": false
          },
          "penumbra": {
            "description": "Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.",
            "type": "boolean",
            "example": false
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "type": {
            "description": "Read only field specifying the type of observation (e.g. OPTICAL, OPTICAL_IR, LASER_RANGING, etc).",
            "type": "string",
            "readOnly": true,
            "example": "OPTICAL"
          }
        }
      },
      "EOObservationDetails_Full": {
        "description": "Model representation of additional detailed observation data for electro-optical based sensor phenomenologies.",
        "type": "object",
        "properties": {
          "idEOObservation": {
            "description": "Unique identifier of the parent EOObservation.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EOOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "predictedRa": {
            "format": "double",
            "description": "Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 10.1
          },
          "predictedDeclination": {
            "format": "double",
            "description": "Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 10.1
          },
          "predictedAzimuth": {
            "format": "double",
            "description": "Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.",
            "type": "number",
            "example": 10.1
          },
          "predictedElevation": {
            "format": "double",
            "description": "Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.",
            "type": "number",
            "example": 10.1
          },
          "sunAzimuth": {
            "format": "double",
            "description": "Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied.",
            "type": "number",
            "example": 10.1
          },
          "sunElevation": {
            "format": "double",
            "description": "Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required).",
            "type": "number",
            "example": 10.1
          },
          "numSpectralFilters": {
            "format": "int16",
            "description": "The value is the number of spectral filters used.",
            "type": "integer",
            "example": 10
          },
          "spectralFilters": {
            "description": "Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Keyword1",
              "Keyword2"
            ]
          },
          "spectralZMFL": {
            "description": "This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "spectralFilterSolarMag": {
            "description": "This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "zeroPoints": {
            "description": "This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "zeroPointsUnc": {
            "description": "This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "extinctionCoeffs": {
            "description": "The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "extinctionCoeffsUnc": {
            "description": "This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "colorCoeffs": {
            "description": "Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "numNeutralDensityFilters": {
            "format": "int16",
            "description": "The value is the number of neutral density filters used.",
            "type": "integer",
            "example": 12
          },
          "neutralDensityFilterNames": {
            "description": "Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "numNeutralDensityFilters1",
              "numNeutralDensityFilters2"
            ]
          },
          "neutralDensityFilterTransmissions": {
            "description": "The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "neutralDensityFilterTransmissionsUnc": {
            "description": "This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "gain": {
            "format": "double",
            "description": "Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.",
            "type": "number",
            "example": 234.2
          },
          "ifov": {
            "format": "double",
            "description": "Sensor instantaneous field of view (ratio of pixel pitch to focal length).",
            "type": "number",
            "example": 0.2
          },
          "pixelArrayWidth": {
            "format": "int16",
            "description": "Pixel array size (width) in pixels.",
            "type": "integer",
            "example": 12
          },
          "pixelArrayHeight": {
            "format": "int16",
            "description": "Pixel array size (height) in pixels.",
            "type": "integer",
            "example": 23
          },
          "pixelMin": {
            "format": "int16",
            "description": "Minimum valid pixel value, this is typically 0.",
            "type": "integer",
            "example": 12
          },
          "pixelMax": {
            "format": "int32",
            "description": "Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.",
            "type": "integer",
            "example": 256
          },
          "centroidRow": {
            "format": "double",
            "description": "Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).",
            "type": "number",
            "example": 0.1
          },
          "centroidColumn": {
            "format": "double",
            "description": "Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).",
            "type": "number",
            "example": 0.5
          },
          "rowVariance": {
            "format": "double",
            "description": "Spatial variance of image distribution in vertical direction measured in pixels squared.",
            "type": "number",
            "example": 0.1
          },
          "columnVariance": {
            "format": "double",
            "description": "Spatial variance of image distribution in horizontal direction measured in pixels squared.",
            "type": "number",
            "example": 0.1
          },
          "rowColCov": {
            "format": "double",
            "description": "Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.",
            "type": "number",
            "example": 0.01
          },
          "distFromStreakCenter": {
            "description": "An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -127.153,
              -126.153,
              -125.153
            ]
          },
          "surfBrightness": {
            "description": "An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              21.01,
              21.382,
              21.725
            ]
          },
          "surfBrightnessUnc": {
            "description": "An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.165,
              0.165,
              0.165
            ]
          },
          "timesUnc": {
            "format": "double",
            "description": "Uncertainty in the times reported in UTC in seconds.",
            "type": "number",
            "example": 13.1
          },
          "ccdTemp": {
            "format": "double",
            "description": "Operating temperature of CCD recorded during exposure or measured during calibrations in K.",
            "type": "number",
            "example": 123.4
          },
          "currentSpectralFilterNum": {
            "format": "int16",
            "description": "The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.",
            "type": "integer",
            "example": 23
          },
          "currentNeutralDensityFilterNum": {
            "format": "int16",
            "description": "The reference number n, in neutralDensityFilters for the currently used neutral density filter.",
            "type": "integer",
            "example": 3
          },
          "binningHoriz": {
            "format": "int16",
            "description": "The number of pixels binned horizontally.",
            "type": "integer",
            "example": 12
          },
          "binningVert": {
            "format": "int16",
            "description": "The number of pixels binned vertically.",
            "type": "integer",
            "example": 14
          },
          "pcalNumStars": {
            "format": "int32",
            "description": "Number of stars used in photometric fit count.",
            "type": "integer",
            "example": 23
          },
          "ccdObjPosX": {
            "format": "double",
            "description": "The x centroid position on the CCD of the target object in pixels.",
            "type": "number",
            "example": 123.3
          },
          "ccdObjPosY": {
            "format": "double",
            "description": "The y centroid position on the CCD of the target object in pixels.",
            "type": "number",
            "example": 321.4
          },
          "ccdObjWidth": {
            "format": "double",
            "description": "This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.",
            "type": "number",
            "example": 133.2
          },
          "backgroundSignal": {
            "format": "double",
            "description": "This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.",
            "type": "number",
            "example": 4134.1
          },
          "backgroundSignalUnc": {
            "format": "double",
            "description": "Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.",
            "type": "number",
            "example": 123.2
          },
          "peakApertureCount": {
            "format": "double",
            "description": "Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.",
            "type": "number",
            "example": 123.2
          },
          "peakBackgroundCount": {
            "format": "int32",
            "description": "Peak Background Raw Counts is the largest pixel value used in background signal.",
            "type": "integer",
            "example": 321
          },
          "snrEst": {
            "format": "double",
            "description": "Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).",
            "type": "number",
            "example": 13.4
          },
          "magInstrumental": {
            "format": "double",
            "description": "Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.",
            "type": "number",
            "example": 123.3
          },
          "magInstrumentalUnc": {
            "format": "double",
            "description": "Uncertainty in the instrumental magnitude.",
            "type": "number",
            "example": 123.3
          },
          "opticalCrossSection": {
            "format": "double",
            "description": "Optical Cross Section computed in units m(2)/ster.",
            "type": "number",
            "example": 123.3
          },
          "opticalCrossSectionUnc": {
            "format": "double",
            "description": "Uncertainty in Optical Cross Section computed in units m(2)/ster.",
            "type": "number",
            "example": 123.3
          },
          "sunStatePosX": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km.",
            "type": "number",
            "example": 123.3
          },
          "sunStatePosY": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km.",
            "type": "number",
            "example": 123.3
          },
          "sunStatePosZ": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km.",
            "type": "number",
            "example": 123.3
          },
          "sunStateVelX": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
            "type": "number",
            "example": 123.3
          },
          "sunStateVelY": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
            "type": "number",
            "example": 123.3
          },
          "sunStateVelZ": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
            "type": "number",
            "example": 123.3
          },
          "numCatalogStars": {
            "format": "int16",
            "description": "Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.",
            "type": "integer",
            "example": 123
          },
          "numDetectedStars": {
            "format": "int16",
            "description": "Number of detected stars in the FOV with the target object. Helps identify frames with clouds.",
            "type": "integer",
            "example": 123
          },
          "numCorrelatedStars": {
            "format": "int16",
            "description": "Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.",
            "type": "integer",
            "example": 123
          },
          "predictedRaUnc": {
            "format": "double",
            "description": "Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 123.2
          },
          "predictedDeclinationUnc": {
            "format": "double",
            "description": "Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 123.2
          },
          "raCov": {
            "format": "double",
            "description": "Covariance (x^2) in measured Right Ascension (X) in deg^2.",
            "type": "number",
            "example": 123.2
          },
          "declinationCov": {
            "format": "double",
            "description": "Covariance (Y^2) in measured declination (Y) in deg^2.",
            "type": "number",
            "example": 123.2
          },
          "raDeclinationCov": {
            "format": "double",
            "description": "Covariance (XY) in measured ra/declination (XY) in deg^2.",
            "type": "number",
            "example": 123.2
          },
          "acalCrPixX": {
            "format": "double",
            "description": "World Coordinate System (WCS) X pixel origin in astrometric fit.",
            "type": "number",
            "example": 123.2
          },
          "acalCrPixY": {
            "format": "double",
            "description": "World Coordinate System (WCS) Y pixel origin in astrometric fit.",
            "type": "number",
            "example": 123.2
          },
          "acalCrValX": {
            "format": "double",
            "description": "World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.",
            "type": "number",
            "example": 123.2
          },
          "acalCrValY": {
            "format": "double",
            "description": "World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.",
            "type": "number",
            "example": 123.2
          },
          "acalNumStars": {
            "format": "int16",
            "description": "Number of stars used in astrometric fit.",
            "type": "integer",
            "example": 123
          },
          "objSunRange": {
            "format": "double",
            "description": "Distance from the target object to the sun during the observation in meters.",
            "type": "number",
            "example": 123.2
          },
          "phaseAngBisect": {
            "format": "double",
            "description": "Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.",
            "type": "number",
            "example": 123.2
          },
          "solarDiskFrac": {
            "format": "double",
            "description": "Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).",
            "type": "number",
            "example": 123.2
          },
          "toes": {
            "format": "double",
            "description": "Time off element set reported in seconds.",
            "type": "number",
            "example": 123.2
          },
          "does": {
            "format": "double",
            "description": "Angle off element set reported in degrees.",
            "type": "number",
            "example": 123.2
          },
          "source": {
            "description": "Source of the data, will be set to EOObservation source if blank.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n, will be set to EOObservation dataMode if blank.",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "EOObservationDetails_Ingest": {
        "description": "Model representation of additional detailed observation data for electro-optical based sensor phenomenologies.",
        "type": "object",
        "properties": {
          "idEOObservation": {
            "description": "Unique identifier of the parent EOObservation.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "EOOBSERVATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "obTime": {
            "format": "date-time",
            "description": "Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123456Z"
          },
          "predictedRa": {
            "format": "double",
            "description": "Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 10.1
          },
          "predictedDeclination": {
            "format": "double",
            "description": "Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 10.1
          },
          "predictedAzimuth": {
            "format": "double",
            "description": "Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.",
            "type": "number",
            "example": 10.1
          },
          "predictedElevation": {
            "format": "double",
            "description": "Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.",
            "type": "number",
            "example": 10.1
          },
          "sunAzimuth": {
            "format": "double",
            "description": "Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied.",
            "type": "number",
            "example": 10.1
          },
          "sunElevation": {
            "format": "double",
            "description": "Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required).",
            "type": "number",
            "example": 10.1
          },
          "numSpectralFilters": {
            "format": "int16",
            "description": "The value is the number of spectral filters used.",
            "type": "integer",
            "example": 10
          },
          "spectralFilters": {
            "description": "Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Keyword1",
              "Keyword2"
            ]
          },
          "spectralZMFL": {
            "description": "This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "spectralFilterSolarMag": {
            "description": "This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "zeroPoints": {
            "description": "This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "zeroPointsUnc": {
            "description": "This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "extinctionCoeffs": {
            "description": "The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "extinctionCoeffsUnc": {
            "description": "This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "colorCoeffs": {
            "description": "Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "numNeutralDensityFilters": {
            "format": "int16",
            "description": "The value is the number of neutral density filters used.",
            "type": "integer",
            "example": 12
          },
          "neutralDensityFilterNames": {
            "description": "Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "numNeutralDensityFilters1",
              "numNeutralDensityFilters2"
            ]
          },
          "neutralDensityFilterTransmissions": {
            "description": "The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "neutralDensityFilterTransmissionsUnc": {
            "description": "This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              1.1,
              2.1,
              3.1
            ]
          },
          "gain": {
            "format": "double",
            "description": "Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.",
            "type": "number",
            "example": 234.2
          },
          "ifov": {
            "format": "double",
            "description": "Sensor instantaneous field of view (ratio of pixel pitch to focal length).",
            "type": "number",
            "example": 0.2
          },
          "pixelArrayWidth": {
            "format": "int16",
            "description": "Pixel array size (width) in pixels.",
            "type": "integer",
            "example": 12
          },
          "pixelArrayHeight": {
            "format": "int16",
            "description": "Pixel array size (height) in pixels.",
            "type": "integer",
            "example": 23
          },
          "pixelMin": {
            "format": "int16",
            "description": "Minimum valid pixel value, this is typically 0.",
            "type": "integer",
            "example": 12
          },
          "pixelMax": {
            "format": "int32",
            "description": "Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.",
            "type": "integer",
            "example": 256
          },
          "centroidRow": {
            "format": "double",
            "description": "Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).",
            "type": "number",
            "example": 0.1
          },
          "centroidColumn": {
            "format": "double",
            "description": "Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).",
            "type": "number",
            "example": 0.5
          },
          "rowVariance": {
            "format": "double",
            "description": "Spatial variance of image distribution in vertical direction measured in pixels squared.",
            "type": "number",
            "example": 0.1
          },
          "columnVariance": {
            "format": "double",
            "description": "Spatial variance of image distribution in horizontal direction measured in pixels squared.",
            "type": "number",
            "example": 0.1
          },
          "rowColCov": {
            "format": "double",
            "description": "Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.",
            "type": "number",
            "example": 0.01
          },
          "distFromStreakCenter": {
            "description": "An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              -127.153,
              -126.153,
              -125.153
            ]
          },
          "surfBrightness": {
            "description": "An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              21.01,
              21.382,
              21.725
            ]
          },
          "surfBrightnessUnc": {
            "description": "An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.165,
              0.165,
              0.165
            ]
          },
          "timesUnc": {
            "format": "double",
            "description": "Uncertainty in the times reported in UTC in seconds.",
            "type": "number",
            "example": 13.1
          },
          "ccdTemp": {
            "format": "double",
            "description": "Operating temperature of CCD recorded during exposure or measured during calibrations in K.",
            "type": "number",
            "example": 123.4
          },
          "currentSpectralFilterNum": {
            "format": "int16",
            "description": "The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.",
            "type": "integer",
            "example": 23
          },
          "currentNeutralDensityFilterNum": {
            "format": "int16",
            "description": "The reference number n, in neutralDensityFilters for the currently used neutral density filter.",
            "type": "integer",
            "example": 3
          },
          "binningHoriz": {
            "format": "int16",
            "description": "The number of pixels binned horizontally.",
            "type": "integer",
            "example": 12
          },
          "binningVert": {
            "format": "int16",
            "description": "The number of pixels binned vertically.",
            "type": "integer",
            "example": 14
          },
          "pcalNumStars": {
            "format": "int32",
            "description": "Number of stars used in photometric fit count.",
            "type": "integer",
            "example": 23
          },
          "ccdObjPosX": {
            "format": "double",
            "description": "The x centroid position on the CCD of the target object in pixels.",
            "type": "number",
            "example": 123.3
          },
          "ccdObjPosY": {
            "format": "double",
            "description": "The y centroid position on the CCD of the target object in pixels.",
            "type": "number",
            "example": 321.4
          },
          "ccdObjWidth": {
            "format": "double",
            "description": "This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.",
            "type": "number",
            "example": 133.2
          },
          "backgroundSignal": {
            "format": "double",
            "description": "This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.",
            "type": "number",
            "example": 4134.1
          },
          "backgroundSignalUnc": {
            "format": "double",
            "description": "Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.",
            "type": "number",
            "example": 123.2
          },
          "peakApertureCount": {
            "format": "double",
            "description": "Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.",
            "type": "number",
            "example": 123.2
          },
          "peakBackgroundCount": {
            "format": "int32",
            "description": "Peak Background Raw Counts is the largest pixel value used in background signal.",
            "type": "integer",
            "example": 321
          },
          "snrEst": {
            "format": "double",
            "description": "Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).",
            "type": "number",
            "example": 13.4
          },
          "magInstrumental": {
            "format": "double",
            "description": "Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.",
            "type": "number",
            "example": 123.3
          },
          "magInstrumentalUnc": {
            "format": "double",
            "description": "Uncertainty in the instrumental magnitude.",
            "type": "number",
            "example": 123.3
          },
          "opticalCrossSection": {
            "format": "double",
            "description": "Optical Cross Section computed in units m(2)/ster.",
            "type": "number",
            "example": 123.3
          },
          "opticalCrossSectionUnc": {
            "format": "double",
            "description": "Uncertainty in Optical Cross Section computed in units m(2)/ster.",
            "type": "number",
            "example": 123.3
          },
          "sunStatePosX": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km.",
            "type": "number",
            "example": 123.3
          },
          "sunStatePosY": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km.",
            "type": "number",
            "example": 123.3
          },
          "sunStatePosZ": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km.",
            "type": "number",
            "example": 123.3
          },
          "sunStateVelX": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
            "type": "number",
            "example": 123.3
          },
          "sunStateVelY": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
            "type": "number",
            "example": 123.3
          },
          "sunStateVelZ": {
            "format": "double",
            "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
            "type": "number",
            "example": 123.3
          },
          "numCatalogStars": {
            "format": "int16",
            "description": "Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.",
            "type": "integer",
            "example": 123
          },
          "numDetectedStars": {
            "format": "int16",
            "description": "Number of detected stars in the FOV with the target object. Helps identify frames with clouds.",
            "type": "integer",
            "example": 123
          },
          "numCorrelatedStars": {
            "format": "int16",
            "description": "Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.",
            "type": "integer",
            "example": 123
          },
          "predictedRaUnc": {
            "format": "double",
            "description": "Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 123.2
          },
          "predictedDeclinationUnc": {
            "format": "double",
            "description": "Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
            "type": "number",
            "example": 123.2
          },
          "raCov": {
            "format": "double",
            "description": "Covariance (x^2) in measured Right Ascension (X) in deg^2.",
            "type": "number",
            "example": 123.2
          },
          "declinationCov": {
            "format": "double",
            "description": "Covariance (Y^2) in measured declination (Y) in deg^2.",
            "type": "number",
            "example": 123.2
          },
          "raDeclinationCov": {
            "format": "double",
            "description": "Covariance (XY) in measured ra/declination (XY) in deg^2.",
            "type": "number",
            "example": 123.2
          },
          "acalCrPixX": {
            "format": "double",
            "description": "World Coordinate System (WCS) X pixel origin in astrometric fit.",
            "type": "number",
            "example": 123.2
          },
          "acalCrPixY": {
            "format": "double",
            "description": "World Coordinate System (WCS) Y pixel origin in astrometric fit.",
            "type": "number",
            "example": 123.2
          },
          "acalCrValX": {
            "format": "double",
            "description": "World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.",
            "type": "number",
            "example": 123.2
          },
          "acalCrValY": {
            "format": "double",
            "description": "World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.",
            "type": "number",
            "example": 123.2
          },
          "acalNumStars": {
            "format": "int16",
            "description": "Number of stars used in astrometric fit.",
            "type": "integer",
            "example": 123
          },
          "objSunRange": {
            "format": "double",
            "description": "Distance from the target object to the sun during the observation in meters.",
            "type": "number",
            "example": 123.2
          },
          "phaseAngBisect": {
            "format": "double",
            "description": "Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.",
            "type": "number",
            "example": 123.2
          },
          "solarDiskFrac": {
            "format": "double",
            "description": "Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).",
            "type": "number",
            "example": 123.2
          },
          "toes": {
            "format": "double",
            "description": "Time off element set reported in seconds.",
            "type": "number",
            "example": 123.2
          },
          "does": {
            "format": "double",
            "description": "Angle off element set reported in degrees.",
            "type": "number",
            "example": 123.2
          },
          "source": {
            "description": "Source of the data, will be set to EOObservation source if blank.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n, will be set to EOObservation dataMode if blank.",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "Location_Full": {
        "description": "Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idLocation": {
            "description": "Unique identifier of the location, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Location name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Example location"
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 16,
            "type": "string",
            "example": "US"
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 179.1
          },
          "altitude": {
            "format": "double",
            "description": "Altitude of the location, in kilometers.",
            "type": "number",
            "example": 10.23
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Onorbit_Full": {
        "description": "Model object representing on-orbit objects or satellites in the system.",
        "required": [
          "classificationMarking",
          "satNo",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idOnOrbit": {
            "description": "For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "satNo": {
            "format": "int32",
            "description": "Satellite/Catalog number of the target on-orbit object.",
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "commonName": {
            "description": "Common name of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Example common name"
          },
          "constellation": {
            "description": "Constellation to which this satellite belongs.",
            "maxLength": 128,
            "type": "string",
            "example": "Big Dipper"
          },
          "intlDes": {
            "description": "International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.",
            "maxLength": 45,
            "type": "string",
            "example": "2021123ABC"
          },
          "launchDate": {
            "format": "date",
            "description": "Date of launch.",
            "type": "string",
            "example": "2018-01-01"
          },
          "decayDate": {
            "format": "date-time",
            "description": "Date of decay.",
            "type": "string",
            "example": "2018-01-01T16:00:00.123Z"
          },
          "objectType": {
            "description": "Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.",
            "maxLength": 32,
            "enum": [
              "ROCKET BODY",
              "DEBRIS",
              "PAYLOAD",
              "PLATFORM",
              "MANNED",
              "UNKNOWN"
            ],
            "type": "string",
            "example": "PAYLOAD"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "missionNumber": {
            "description": "Mission number of the on-orbit object.",
            "maxLength": 128,
            "type": "string",
            "example": "Expedition 1"
          },
          "category": {
            "description": "Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).",
            "maxLength": 45,
            "enum": [
              "Unknown",
              "On-Orbit",
              "Decayed",
              "Cataloged Without State",
              "Launch Nominal",
              "Analyst Satellite",
              "Cislunar",
              "Lunar",
              "Hyperbolic",
              "Heliocentric",
              "Interplanetary",
              "Lagrangian",
              "Docked"
            ],
            "type": "string",
            "example": "Lunar"
          },
          "lifetimeYears": {
            "format": "int32",
            "description": "Estimated lifetime of the on-orbit payload, if known.",
            "type": "integer",
            "example": 10
          },
          "altName": {
            "description": "Alternate name of the on-orbit object.",
            "maxLength": 64,
            "type": "string",
            "example": "Alternate Name"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "launchSiteId": {
            "description": "Id of the associated launchSite entity.",
            "maxLength": 36,
            "type": "string",
            "example": "LAUNCHSITE-ID"
          },
          "entityCollection": {
            "description": "Read-only entity details (only returned/used on detail queries).",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "description": "An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.",
              "required": [
                "name",
                "classificationMarking",
                "type",
                "source",
                "dataMode"
              ],
              "type": "object",
              "properties": {
                "idEntity": {
                  "description": "Unique identifier of the record.",
                  "maxLength": 36,
                  "minLength": 1,
                  "type": "string",
                  "example": "ENTITY-ID"
                },
                "name": {
                  "description": "Unique entity name.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "example": "Example name"
                },
                "classificationMarking": {
                  "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
                  "maxLength": 128,
                  "minLength": 1,
                  "type": "string",
                  "example": "U"
                },
                "terrestrialId": {
                  "description": "Terrestrial identifier of this entity, if applicable.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "TERRESTRIAL-ID"
                },
                "type": {
                  "description": "The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).",
                  "maxLength": 45,
                  "minLength": 1,
                  "enum": [
                    "AIRCRAFT",
                    "BUS",
                    "COMM",
                    "IR",
                    "NAVIGATION",
                    "ONORBIT",
                    "RFEMITTER",
                    "SCIENTIFIC",
                    "SENSOR",
                    "SITE",
                    "VESSEL"
                  ],
                  "type": "string",
                  "example": "ONORBIT"
                },
                "idLocation": {
                  "description": "Unique identifier of the entity location, if terrestrial/fixed.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "LOCATION-ID"
                },
                "countryCode": {
                  "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
                  "maxLength": 4,
                  "type": "string",
                  "example": "US"
                },
                "ownerType": {
                  "description": "Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).",
                  "maxLength": 32,
                  "enum": [
                    "Commercial",
                    "Government",
                    "Academic",
                    "Consortium",
                    "Other"
                  ],
                  "type": "string",
                  "example": "Commercial"
                },
                "taskable": {
                  "description": "Boolean indicating if this entity is taskable.",
                  "type": "boolean",
                  "example": false
                },
                "urls": {
                  "description": "List of URLs to additional details/documents for this entity.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "URL1",
                    "URL2"
                  ]
                },
                "createdAt": {
                  "format": "date-time",
                  "description": "Time the row was created in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "createdBy": {
                  "description": "Application user who created the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "updatedAt": {
                  "format": "date-time",
                  "description": "Time the row was last updated in the database, auto-populated by the system.",
                  "type": "string",
                  "readOnly": true,
                  "example": "2018-01-01T16:00:00.123Z"
                },
                "updatedBy": {
                  "description": "Application user who updated the row in the database, auto-populated by the system.",
                  "maxLength": 64,
                  "type": "string",
                  "readOnly": true,
                  "example": "some.user"
                },
                "source": {
                  "description": "Source of the data.",
                  "maxLength": 64,
                  "minLength": 1,
                  "type": "string",
                  "example": "Bluestaq"
                },
                "origin": {
                  "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
                  "maxLength": 64,
                  "type": "string",
                  "example": "THIRD_PARTY_DATASOURCE"
                },
                "dataMode": {
                  "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
                  "maxLength": 32,
                  "minLength": 1,
                  "enum": [
                    "REAL",
                    "TEST",
                    "SIMULATED",
                    "EXERCISE"
                  ],
                  "type": "string",
                  "example": "TEST"
                },
                "location": {
                  "$ref": "#/components/schemas/Location_Full"
                },
                "idOnOrbit": {
                  "description": "Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "ONORBIT-ID"
                },
                "operatingUnit": {
                  "$ref": "#/components/schemas/Operatingunit_Full"
                },
                "idOperatingUnit": {
                  "description": "Unique identifier of the associated operating unit object.",
                  "maxLength": 36,
                  "type": "string",
                  "example": "OPERATINGUNIT-ID"
                },
                "origNetwork": {
                  "description": "The originating source network on which this record was created, auto-populated by the system.",
                  "maxLength": 32,
                  "minLength": 1,
                  "type": "string",
                  "readOnly": true,
                  "example": "OPS1"
                },
                "statusCollection": {
                  "description": "Read-only collection of statuses which can be collected by multiple sources.",
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Status_Full"
                  },
                  "readOnly": true
                },
                "rfBands": {
                  "description": "Read-only collection of RF bands utilized by this entity for communication and/or operation.",
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFBand_Full"
                  },
                  "readOnly": true
                }
              }
            },
            "readOnly": true
          },
          "antennas": {
            "description": "Read-only collection of antennas on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitAntenna_Full"
            },
            "readOnly": true
          },
          "batteries": {
            "description": "Read-only collection of batteries on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitBattery_Full"
            },
            "readOnly": true
          },
          "solarArrays": {
            "description": "Read-only collection of solar arrays on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitSolarArray_Full"
            },
            "readOnly": true
          },
          "thrusters": {
            "description": "Read-only collection of thrusters (engines) on this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitThruster_Full"
            },
            "readOnly": true
          },
          "onorbitDetails": {
            "description": "Read-only collection of details for this on-orbit object.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnorbitDetails_Full"
            },
            "readOnly": true
          },
          "countryCode": {
            "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitAntenna_Full": {
        "required": [
          "idOnOrbit",
          "idAntenna",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITANTENNA-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idAntenna": {
            "description": "ID of the antenna.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ANTENNA-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "antenna": {
            "$ref": "#/components/schemas/Antenna_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitBattery_Full": {
        "required": [
          "idOnOrbit",
          "idBattery",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITBATTERY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idBattery": {
            "description": "ID of the battery.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "BATTERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of batteries on the spacecraft of the type identified by idBattery.",
            "type": "integer",
            "example": 5
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          },
          "battery": {
            "$ref": "#/components/schemas/Battery_Full"
          }
        }
      },
      "OnorbitDetails_Full": {
        "description": "Contains details of the OnOrbit object.",
        "required": [
          "idOnOrbit",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITDETAILS-ID"
          },
          "idOnOrbit": {
            "description": "UUID of the parent Onorbit record.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-ONORBIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "lastObTime": {
            "format": "date-time",
            "description": "Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "vismag": {
            "format": "double",
            "description": "Current/latest visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "vismagMin": {
            "format": "double",
            "description": "Minimum visual magnitude in M.",
            "type": "number",
            "example": 5.23
          },
          "vismagMax": {
            "format": "double",
            "description": "Maximum visual magnitude in M.",
            "type": "number",
            "example": 15.23
          },
          "vismagMean": {
            "format": "double",
            "description": "Mean visual magnitude in M.",
            "type": "number",
            "example": 10.23
          },
          "rcs": {
            "format": "double",
            "description": "Current/latest radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "rcsMin": {
            "format": "double",
            "description": "Minimum radar cross section in meters squared.",
            "type": "number",
            "example": 5.23
          },
          "rcsMax": {
            "format": "double",
            "description": "Maximum radar cross section in meters squared.",
            "type": "number",
            "example": 15.23
          },
          "rcsMean": {
            "format": "double",
            "description": "Mean radar cross section in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "bolDeltaV": {
            "format": "double",
            "description": "The total beginning of life delta V of the spacecraft, in meters per second.",
            "type": "number",
            "example": 1000.1
          },
          "maxDeltaV": {
            "format": "double",
            "description": "Maximum delta V available for this on-orbit spacecraft, in meters per second.",
            "type": "number",
            "example": 10.23
          },
          "deltaVUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.",
            "type": "number",
            "example": 50.1
          },
          "estDeltaVDuration": {
            "format": "double",
            "description": "Estimated maximum burn duration for the object, in seconds.",
            "type": "number",
            "example": 10.23
          },
          "numMission": {
            "format": "int32",
            "description": "The number of distinct missions the spacecraft performs.",
            "type": "integer",
            "example": 2
          },
          "missionTypes": {
            "description": "Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Weather",
              "Space Weather"
            ]
          },
          "busType": {
            "description": "Type of the bus on the spacecraft.",
            "maxLength": 32,
            "type": "string",
            "example": "A2100"
          },
          "geoSlot": {
            "format": "double",
            "description": "GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 90.23
          },
          "driftRate": {
            "format": "double",
            "description": "GEO drift rate, if applicable in degrees per day.",
            "type": "number",
            "example": 1.23
          },
          "dryMass": {
            "format": "double",
            "description": "Spacecraft dry mass (without fuel or disposables) in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "additionalMass": {
            "format": "double",
            "description": "Mass of fuel and disposables at launch time in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMin": {
            "format": "double",
            "description": "Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 5.23
          },
          "launchMass": {
            "format": "double",
            "description": "Nominal mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "launchMassMax": {
            "format": "double",
            "description": "Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
            "type": "number",
            "example": 15.23
          },
          "bolFuelMass": {
            "format": "double",
            "description": "Spacecraft beginning of life fuel mass, in orbit, in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "currentMass": {
            "format": "double",
            "description": "The estimated total current mass of the spacecraft, in kilograms.",
            "type": "number",
            "example": 500
          },
          "totalMassUnc": {
            "format": "double",
            "description": "The 1-sigma uncertainty of the total spacecraft mass, in kilograms.",
            "type": "number",
            "example": 50.1
          },
          "solarArrayArea": {
            "format": "double",
            "description": "Spacecraft deployed area of solar array in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maneuverable": {
            "description": "Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.",
            "type": "boolean",
            "example": false
          },
          "fuelRemaining": {
            "format": "double",
            "description": "Estimated remaining fuel for the object in kilograms.",
            "type": "number",
            "example": 10.23
          },
          "crossSection": {
            "format": "double",
            "description": "Average cross sectional area in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "busCrossSection": {
            "format": "double",
            "description": "Average cross sectional area of the bus in meters squared.",
            "type": "number",
            "example": 10.23
          },
          "maxRadius": {
            "format": "double",
            "description": "Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.",
            "type": "number",
            "example": 10.23
          },
          "colaRadius": {
            "format": "double",
            "description": "Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.",
            "type": "number",
            "example": 10.23
          },
          "adeptRadius": {
            "format": "double",
            "description": "The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.",
            "type": "number",
            "example": 10.23
          },
          "numDeployable": {
            "format": "int32",
            "description": "The number of sub-satellites or deployable objects on the spacecraft.",
            "type": "integer",
            "example": 2
          },
          "depNames": {
            "description": "Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "GOES-18A",
              "GOES-18B"
            ]
          },
          "depEstMasses": {
            "description": "Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              20,
              21
            ]
          },
          "depMassUncs": {
            "description": "Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              10,
              5
            ]
          },
          "refSource": {
            "description": "The reference source, sources, or URL from which the data in this record was obtained.",
            "maxLength": 256,
            "type": "string",
            "example": "Wikipedia"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "lastObSource": {
            "description": "The name of the source who last provided an observation for this idOnOrbit.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitSolarArray_Full": {
        "required": [
          "idOnOrbit",
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITSOLARARRAY-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idSolarArray": {
            "description": "ID of the SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of solar arrays on the spacecraft of the type identified by idSolarArray.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "solarArray": {
            "$ref": "#/components/schemas/SolarArray_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OnorbitThruster_Full": {
        "required": [
          "idOnOrbit",
          "idEngine",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBITTHRUSTER-ID"
          },
          "idOnOrbit": {
            "description": "ID of the on-orbit object.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ONORBIT-ID"
          },
          "idEngine": {
            "description": "ID of the Engine.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENGINE-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "The type of thruster associated with this record (e.g. LAE, Hydrazine REA, etc.).",
            "maxLength": 32,
            "type": "string",
            "example": "Hydrazine REA"
          },
          "quantity": {
            "format": "int32",
            "description": "The number of engines/thrusters on the spacecraft of the type identified by idEngine.",
            "type": "integer",
            "example": 10
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "engine": {
            "$ref": "#/components/schemas/Engine_Full"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "Operatingunit_Full": {
        "description": "Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.",
        "required": [
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "idOperatingUnit": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OPERATINGUNIT-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "altOperatingUnitId": {
            "description": "Unique identifier of the operating unit record from the originating system.",
            "maxLength": 36,
            "type": "string",
            "example": "32100000000021"
          },
          "name": {
            "description": "Name of the operating unit.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "SOME_NAME"
          },
          "description": {
            "description": "Description of the operating unit.",
            "maxLength": 256,
            "type": "string",
            "example": "Description of unit"
          },
          "idLocation": {
            "description": "Unique identifier of the location record for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "LOCATION-ID"
          },
          "idContact": {
            "description": "Unique identifier of the contact for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "CONTACT-ID"
          },
          "idOrganization": {
            "description": "Unique identifier of the organization record for this operating unit.",
            "maxLength": 36,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "unitIdentifier": {
            "description": "An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.",
            "maxLength": 10,
            "type": "string",
            "example": "AZXAZ12345"
          },
          "countryCode": {
            "description": "The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to \"OTHR\" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).",
            "maxLength": 4,
            "type": "string",
            "example": "IQ"
          },
          "altCountryCode": {
            "description": "Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.",
            "maxLength": 4,
            "type": "string",
            "example": "IZ"
          },
          "wac": {
            "description": "World Aeronautical Chart identifier for the area in which a designated operating unit is located.",
            "maxLength": 4,
            "type": "string",
            "example": "0427"
          },
          "operStatus": {
            "description": "The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 3,
            "type": "string",
            "example": "OPR"
          },
          "condition": {
            "description": "The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "RDY"
          },
          "conditionAvail": {
            "description": "Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "A"
          },
          "eval": {
            "format": "int32",
            "description": "The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.",
            "type": "integer",
            "example": 7
          },
          "fpa": {
            "description": "Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 5,
            "type": "string",
            "example": "EOB"
          },
          "ident": {
            "description": "Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): \n\nASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.\n\nFRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.\n\nHOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.\n\nFAKER: Friendly track, object, or entity acting as an exercise hostile.\n\nJOKER: Friendly track, object, or entity acting as an exercise suspect.\n\nNEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.\n\nPENDING: Track object which has not been evaluated.\n\nSUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.\n\nUNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.",
            "maxLength": 32,
            "type": "string",
            "example": "FRIEND"
          },
          "allegiance": {
            "description": "The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to \"OTHR\" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).",
            "maxLength": 4,
            "type": "string",
            "example": "OTHR"
          },
          "altAllegiance": {
            "description": "Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.",
            "maxLength": 4,
            "type": "string",
            "example": "HL"
          },
          "locName": {
            "description": "Location name for the coordinates.",
            "maxLength": 54,
            "type": "string",
            "example": "LOCATION_NAME"
          },
          "locReason": {
            "description": "Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 9,
            "type": "string",
            "example": "GR"
          },
          "force": {
            "description": "An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "NV"
          },
          "forceName": {
            "description": "The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.",
            "maxLength": 54,
            "type": "string",
            "example": "FORCE-NAME"
          },
          "functRole": {
            "description": "Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 3,
            "type": "string",
            "example": "MIL"
          },
          "msnPrimary": {
            "description": "Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "W6"
          },
          "msnPrimarySpecialty": {
            "description": "Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "QK"
          },
          "masterUnit": {
            "description": "This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.",
            "type": "boolean",
            "example": true
          },
          "stylizedUnit": {
            "description": "This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.",
            "type": "boolean",
            "example": true
          },
          "divCat": {
            "description": "Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 1,
            "type": "string",
            "example": "5"
          },
          "echelon": {
            "description": "Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 4,
            "type": "string",
            "example": "SHIP"
          },
          "echelonTier": {
            "description": "Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 2,
            "type": "string",
            "example": "68"
          },
          "fleetId": {
            "description": "Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 1,
            "type": "string",
            "example": "A"
          },
          "deployStatus": {
            "description": "A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 2,
            "type": "string",
            "example": "ND"
          },
          "flagFlown": {
            "description": "The country code of the observed flag flown.",
            "maxLength": 4,
            "type": "string",
            "example": "IZ"
          },
          "coordDatum": {
            "description": "A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 16,
            "type": "string",
            "example": "WGS"
          },
          "coord": {
            "description": "\"Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.\nPos. 1-2.  Latitude Degrees     [00-90]\nPos. 3-4.  Latitude Minutes     [00-59]\nPos. 5-6.  Latitude Seconds     [00-59]\nPos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  \nPos. 10. Latitude Hemisphere       [NS] \nPos. 11-13. Longitude Degrees     [00-180] \nPos. 14-15. Longitude Minutes     [00-59] \nPos. 16-17. Longitude Seconds     [00-59] \nPos. 18-20. Longitude Thousandths Of Seconds      [000-999]\nPos. 21. Longitude Hemisphere     [EW]\nPos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]\".\n",
            "maxLength": 21,
            "type": "string",
            "example": "340000000N0430000000E"
          },
          "coordDerivAcc": {
            "format": "double",
            "description": "Indicates the plus or minus error assessed against the method used to derive the coordinate.",
            "type": "number",
            "example": 12.345
          },
          "lat": {
            "format": "double",
            "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
            "type": "number",
            "example": 45.23
          },
          "lon": {
            "format": "double",
            "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
            "type": "number",
            "example": 179.1
          },
          "elevMsl": {
            "format": "double",
            "description": "Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.",
            "type": "number",
            "example": 123.45
          },
          "elevMslConfLvl": {
            "format": "int32",
            "description": "Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.",
            "type": "integer",
            "example": 50
          },
          "elevMslDerivAcc": {
            "format": "double",
            "description": "Indicates the plus or minus error assessed against the method used to derive the elevation.",
            "type": "number",
            "example": 12.34
          },
          "geoidalMslSep": {
            "format": "double",
            "description": "The distance between Mean Sea Level and a referenced ellipsoid.",
            "type": "number",
            "example": 12.34
          },
          "milGridSys": {
            "description": "\"Indicates the grid system used in the development of the milGrid coordinates. Values are:\nUPS - Universal Polar System\nUTM - Universal Transverse Mercator\".",
            "maxLength": 3,
            "type": "string",
            "example": "UTM"
          },
          "milGrid": {
            "description": "The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:\n4Q (grid zone designator, GZD)\nFJ (the 100,000-meter square identifier)\n12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).",
            "maxLength": 15,
            "type": "string",
            "example": "4QFJ12345678"
          },
          "utm": {
            "description": "Universal Transverse Mercator (UTM) grid coordinates.\nPos. 1-2, UTM Zone Column   [01-60\nPos. 3, UTM Zone Row   [C-HJ-NP-X]\nPos. 4, UTM False Easting   [0-9]\nPos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]\nPos. 10-11, UTM False Northing    [0-9][0-9]\nPos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].",
            "maxLength": 16,
            "type": "string",
            "example": "19P4390691376966"
          },
          "airDefArea": {
            "description": "Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.",
            "maxLength": 5,
            "type": "string",
            "example": "AL006"
          },
          "polSubdiv": {
            "description": "Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 7,
            "type": "string",
            "example": "IZ07"
          },
          "symCode": {
            "description": "A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.",
            "maxLength": 15,
            "type": "string",
            "example": "SOGPU----------"
          },
          "classRating": {
            "description": "Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:\n0 - Does not meet criteria above\n1 - Primary importance to system\n2 - Secondary importance to system\n3 - Tertiary importance to system\nO - Other. Explain in Remarks.",
            "maxLength": 1,
            "type": "string",
            "example": "1"
          },
          "recStatus": {
            "description": "Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:\nA - Active\nI - Inactive\nK - Acknowledged\nL - Local\nQ - A nominated (NOM) or Data Change Request (DCR) record\nR - Production reduced by CMD decision\nW - Working Record.",
            "maxLength": 1,
            "type": "string",
            "example": "A"
          },
          "reviewDate": {
            "format": "date",
            "description": "Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.",
            "type": "string",
            "example": "2008-06-10"
          },
          "resProd": {
            "description": "Responsible Producer - Organization that is responsible for the maintenance of the record.",
            "maxLength": 4,
            "type": "string",
            "example": "RT"
          },
          "referenceDoc": {
            "description": "The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.",
            "maxLength": 128,
            "type": "string",
            "example": "Provider Reference Documentation"
          },
          "operatingUnitRemarks": {
            "description": "Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperatingUnitRemark_Full"
            },
            "readOnly": true
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization_Full"
          },
          "location": {
            "$ref": "#/components/schemas/Location_Full"
          }
        }
      },
      "OperatingUnitRemark_Full": {
        "description": "Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.",
        "required": [
          "classificationMarking",
          "idOperatingUnit",
          "text",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "0167f577-e06c-358e-85aa-0a07a730bdd0"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOperatingUnit": {
            "description": "The ID of the operating unit to which this remark applies.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "OperatingUnit-ID"
          },
          "altRmkId": {
            "description": "Unique identifier of the unit remark record from the originating system.",
            "maxLength": 36,
            "type": "string",
            "example": "123456ABC"
          },
          "name": {
            "description": "The name of the remark.",
            "maxLength": 64,
            "type": "string",
            "example": "Remark name"
          },
          "type": {
            "description": "The remark type (e.g. Caution, Information, Misc, Restriction, etc.).",
            "maxLength": 64,
            "type": "string",
            "example": "Restriction"
          },
          "text": {
            "description": "The text of the remark.",
            "maxLength": 16384,
            "minLength": 1,
            "type": "string",
            "example": "This is a remark"
          },
          "code": {
            "description": "The remark type identifier. For example, the Mobility Air Forces (MAF) remark code, defined in the Airfield Suitability and Restriction Report (ASRR).",
            "maxLength": 16,
            "type": "string",
            "example": "M"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          }
        }
      },
      "Organization_Full": {
        "description": "An organization such as a corporation, manufacturer, consortium, government, etc. An organization may have parent and child organizations as well as link to a former organization if this org previously existed as another organization.",
        "required": [
          "classificationMarking",
          "name",
          "type",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Organization name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "type": {
            "description": "Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "GOVERNMENT"
          },
          "category": {
            "description": "Subtype or category of the organization (e.g. Private company, stock market quoted company, subsidiary, goverment department/agency, etc).",
            "maxLength": 128,
            "type": "string",
            "example": "Private company"
          },
          "externalId": {
            "description": "Optional externally provided identifier for this row.",
            "maxLength": 36,
            "type": "string",
            "example": "EXTERNAL-ID"
          },
          "description": {
            "description": "Organization description.",
            "maxLength": 256,
            "type": "string",
            "example": "Example description"
          },
          "countryCode": {
            "description": "Country of the physical location of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code. However, it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "nationality": {
            "description": "Country of registration or ownership of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
            "maxLength": 4,
            "type": "string",
            "example": "US"
          },
          "active": {
            "description": "Boolean indicating if this organization is currently active.",
            "type": "boolean",
            "example": false
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "some.user"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "organizationDetails": {
            "description": "Read-only collection of additional OrganizationDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/organizationdetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationDetails_Full"
            },
            "readOnly": true
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "OrganizationDetails_Full": {
        "description": "Model representation of additional detailed organization data as collected by a particular source.",
        "required": [
          "idOrganization",
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATIONDETAILS-ID"
          },
          "idOrganization": {
            "description": "Unique identifier of the parent organization.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ORGANIZATION-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "Organization details name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "email": {
            "description": "Listed contact email address for the organization.",
            "maxLength": 320,
            "type": "string",
            "example": "some_organization@organization.com"
          },
          "address1": {
            "description": "Street number of the organization.",
            "maxLength": 120,
            "type": "string",
            "example": "123 Main Street"
          },
          "address2": {
            "description": "Field for additional organization address information such as PO Box and unit number.",
            "maxLength": 120,
            "type": "string",
            "example": "Apt 4B"
          },
          "address3": {
            "description": "Contains the third line of address information for an organization.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado Springs CO, 80903"
          },
          "geoAdminLevel1": {
            "description": "Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado"
          },
          "geoAdminLevel2": {
            "description": "Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.",
            "maxLength": 120,
            "type": "string",
            "example": "El Paso County"
          },
          "geoAdminLevel3": {
            "description": "Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.",
            "maxLength": 120,
            "type": "string",
            "example": "Colorado Springs"
          },
          "postalCode": {
            "description": "A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.",
            "maxLength": 32,
            "type": "string",
            "example": "80903"
          },
          "description": {
            "description": "Organization description.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example description"
          },
          "formerOrgId": {
            "description": "Former organization ID (if this organization previously existed as another organization).",
            "maxLength": 36,
            "type": "string",
            "example": "FORMERORG-ID"
          },
          "parentOrgId": {
            "description": "Parent organization ID of this organization if it is a child organization.",
            "maxLength": 36,
            "type": "string",
            "example": "PARENTORG-ID"
          },
          "financialYearEndDate": {
            "format": "date-time",
            "description": "For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123Z"
          },
          "revenue": {
            "format": "double",
            "description": "For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "profit": {
            "format": "double",
            "description": "For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "ebitda": {
            "format": "double",
            "description": "For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.",
            "type": "number",
            "example": 123.4
          },
          "ftes": {
            "format": "int32",
            "description": "Total number of FTEs in this organization.",
            "type": "integer",
            "example": 123
          },
          "broker": {
            "description": "Designated broker for this organization.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "ceo": {
            "description": "For organizations of type CORPORATION, the name of the Chief Executive Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "cfo": {
            "description": "For organizations of type CORPORATION, the name of the Chief Financial Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "cto": {
            "description": "For organizations of type CORPORATION, the name of the Chief Technology Officer.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "riskManager": {
            "description": "The name of the risk manager for the organization.",
            "maxLength": 128,
            "type": "string",
            "example": "some.user"
          },
          "massRanking": {
            "format": "int32",
            "description": "Mass ranking for this organization.",
            "type": "integer",
            "example": 123
          },
          "revenueRanking": {
            "format": "int32",
            "description": "Revenue ranking for this organization.",
            "type": "integer",
            "example": 123
          },
          "financialNotes": {
            "description": "For organizations of type CORPORATION, notes on company financials.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "servicesNotes": {
            "description": "Notes on the services provided by the organization.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "fleetPlanNotes": {
            "description": "Satellite fleet planning notes for this organization.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "some.user"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "RFBand_Full": {
        "description": "Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.",
        "required": [
          "idEntity",
          "classificationMarking",
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "RFBAND-ID"
          },
          "idEntity": {
            "description": "Unique identifier of the parent Entity which uses this band.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENTITY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "name": {
            "description": "RF Band name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "BAND_NAME"
          },
          "band": {
            "description": "Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.",
            "maxLength": 5,
            "type": "string",
            "example": "Ku"
          },
          "mode": {
            "description": "RF Band mode (e.g. TX, RX).",
            "maxLength": 4,
            "enum": [
              "TX",
              "RX"
            ],
            "type": "string",
            "example": "TX"
          },
          "purpose": {
            "description": "Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).",
            "maxLength": 16,
            "enum": [
              "COMM",
              "TTC",
              "OPS",
              "OTHER"
            ],
            "type": "string",
            "example": "TTC"
          },
          "freqMin": {
            "format": "double",
            "description": "Start/minimum of transmit RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 50.23
          },
          "freqMax": {
            "format": "double",
            "description": "End/maximum of transmit RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 2000.23
          },
          "centerFreq": {
            "format": "double",
            "description": "Center frequency of RF frequency range, if applicable, in Mhz.",
            "type": "number",
            "example": 1000.23
          },
          "peakGain": {
            "format": "double",
            "description": "RF Range maximum gain, in dBi.",
            "type": "number",
            "example": 120.23
          },
          "edgeGain": {
            "format": "double",
            "description": "RF Range edge gain, in dBi.",
            "type": "number",
            "example": 100.23
          },
          "bandwidth": {
            "format": "double",
            "description": "RF Band frequency range bandwidth in Mhz.",
            "type": "number",
            "example": 100.23
          },
          "beamwidth": {
            "format": "double",
            "description": "Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.",
            "type": "number",
            "example": 45.23
          },
          "polarization": {
            "description": "Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.",
            "maxLength": 4,
            "enum": [
              "H",
              "V",
              "R",
              "L"
            ],
            "type": "string",
            "example": "H"
          },
          "erp": {
            "format": "double",
            "description": "Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the \"main lobe\") of its radiation pattern.",
            "type": "number",
            "example": 2.23
          },
          "eirp": {
            "format": "double",
            "description": "EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the \"main lobe\") of its radiation pattern.",
            "type": "number",
            "example": 2.23
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "OPS1"
          }
        }
      },
      "SkyImagery_Abridged": {
        "description": "Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP, MP4). Binary content must be downloaded individually by ID using the 'getFile' operation.",
        "required": [
          "classificationMarking",
          "imageType",
          "expStartTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SKYIMAGERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Optional identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "44920"
          },
          "origObjectId": {
            "description": "Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "X15-23452"
          },
          "idSOISet": {
            "description": "Optional unique identifier of the SOI Observation Set associated with this image.",
            "maxLength": 36,
            "type": "string",
            "example": "531093d0-e9b0-475b-687aeeefefd9"
          },
          "idAttitudeSet": {
            "description": "Optional identifier of the AttitudeSet data record describing the orientation of an object body.",
            "maxLength": 36,
            "type": "string",
            "example": "d039ba29-52f4-4839-8a8f-e85fa416aec5"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "420"
          },
          "satNo": {
            "format": "int32",
            "description": "Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 25544
          },
          "origSensorId": {
            "description": "Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "origSensorId"
          },
          "senlat": {
            "format": "double",
            "description": "Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": -33.283048
          },
          "senlon": {
            "format": "double",
            "description": "Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 149.372549
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.",
            "type": "number",
            "example": 14.483619321
          },
          "senx": {
            "format": "double",
            "description": "Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.",
            "type": "number",
            "example": 14.52
          },
          "seny": {
            "format": "double",
            "description": "Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.",
            "type": "number",
            "example": 32.41
          },
          "senz": {
            "format": "double",
            "description": "Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.",
            "type": "number",
            "example": 376.12
          },
          "senQuat": {
            "description": "The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.",
            "maxItems": 4,
            "minItems": 4,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.02,
              0.01,
              0.012
            ]
          },
          "senQuatDot": {
            "description": "The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.",
            "maxItems": 4,
            "minItems": 4,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.02,
              0.01,
              0.012
            ]
          },
          "imageType": {
            "description": "The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP, MP4).",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "imageType"
          },
          "expStartTime": {
            "format": "date-time",
            "description": "Start time of the exposure, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "expEndTime": {
            "format": "date-time",
            "description": "End time of the exposure, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "imageSourceInfo": {
            "description": "String that uniquely identifies the data source.",
            "maxLength": 100,
            "type": "string",
            "example": "imageSourceInfo"
          },
          "topLeftStartAz": {
            "format": "double",
            "description": "The telescope pointing azimuth, in degrees, at the exposure start epoch.",
            "type": "number",
            "example": 146.321
          },
          "topLeftStartEl": {
            "format": "double",
            "description": "The telescope pointing elevation, in degrees, at the exposure start epoch.",
            "type": "number",
            "example": 146.321
          },
          "topLeftStopAz": {
            "format": "double",
            "description": "The telescope pointing azimuth, in degrees, at the exposure stop epoch.",
            "type": "number",
            "example": 3.7
          },
          "topLeftStopEl": {
            "format": "double",
            "description": "The telescope pointing elevation, in degrees, at the exposure stop epoch.",
            "type": "number",
            "example": 34.233
          },
          "imageSetId": {
            "description": "The user-defined set ID of a sequence of images.",
            "maxLength": 36,
            "type": "string",
            "example": "imageSetId"
          },
          "imageSetLength": {
            "format": "int32",
            "description": "The number of images in an image set.",
            "type": "integer",
            "example": 9
          },
          "sequenceId": {
            "format": "int32",
            "description": "The sequence ID of an image within an image set.",
            "type": "integer",
            "example": 1
          },
          "frameFOVWidth": {
            "format": "double",
            "description": "Field Of View frame width, in degrees.",
            "type": "number",
            "example": 21.23
          },
          "frameFOVHeight": {
            "format": "double",
            "description": "Field Of View frame height, in degrees.",
            "type": "number",
            "example": 21.23
          },
          "pixelFOVWidth": {
            "format": "double",
            "description": "Field Of View pixel width, in degrees.",
            "type": "number",
            "example": 321.123
          },
          "pixelFOVHeight": {
            "format": "double",
            "description": "Field Of View pixel height, in degrees.",
            "type": "number",
            "example": 321.123
          },
          "frameWidthPixels": {
            "format": "int32",
            "description": "Frame width of the image, in number of pixels.",
            "type": "integer",
            "example": 1
          },
          "frameHeightPixels": {
            "format": "int32",
            "description": "Frame height of the image, in number of pixels.",
            "type": "integer",
            "example": 1
          },
          "pixelBitDepth": {
            "format": "int32",
            "description": "Bit depth of the image, in number of pixels.",
            "type": "integer",
            "example": 1
          },
          "annotationKey": {
            "description": "Reference to an annotation document associated with this image.",
            "maxLength": 128,
            "type": "string",
            "example": "annotationKey"
          },
          "calibrationKey": {
            "description": "Reference to a calibration document associated with this image.",
            "maxLength": 128,
            "type": "string",
            "example": "calibrationKey"
          },
          "filename": {
            "description": "Name of the uploaded image file.",
            "maxLength": 128,
            "type": "string",
            "example": "filename.jpg"
          },
          "filesize": {
            "format": "int64",
            "description": "Size of the image file, in bytes.",
            "type": "integer",
            "example": 371945
          },
          "checksumValue": {
            "description": "MD5 value of the file. The ingest/create operation will automatically generate the value.",
            "maxLength": 256,
            "type": "string",
            "readOnly": true,
            "example": "checksumValue"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "description": {
            "description": "Optional name/description associated with this image.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "description"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      },
      "SkyImagery_Full": {
        "description": "Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP, MP4). Binary content must be downloaded individually by ID using the 'getFile' operation.",
        "required": [
          "classificationMarking",
          "imageType",
          "expStartTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SKYIMAGERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Optional identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "44920"
          },
          "onOrbit": {
            "$ref": "#/components/schemas/Onorbit_Full"
          },
          "origObjectId": {
            "description": "Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "X15-23452"
          },
          "idSOISet": {
            "description": "Optional unique identifier of the SOI Observation Set associated with this image.",
            "maxLength": 36,
            "type": "string",
            "example": "531093d0-e9b0-475b-687aeeefefd9"
          },
          "idAttitudeSet": {
            "description": "Optional identifier of the AttitudeSet data record describing the orientation of an object body.",
            "maxLength": 36,
            "type": "string",
            "example": "d039ba29-52f4-4839-8a8f-e85fa416aec5"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "420"
          },
          "satNo": {
            "format": "int32",
            "description": "Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 25544
          },
          "origSensorId": {
            "description": "Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "origSensorId"
          },
          "senlat": {
            "format": "double",
            "description": "Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": -33.283048
          },
          "senlon": {
            "format": "double",
            "description": "Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 149.372549
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.",
            "type": "number",
            "example": 14.483619321
          },
          "senx": {
            "format": "double",
            "description": "Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.",
            "type": "number",
            "example": 14.52
          },
          "seny": {
            "format": "double",
            "description": "Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.",
            "type": "number",
            "example": 32.41
          },
          "senz": {
            "format": "double",
            "description": "Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.",
            "type": "number",
            "example": 376.12
          },
          "senQuat": {
            "description": "The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.",
            "maxItems": 4,
            "minItems": 4,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.02,
              0.01,
              0.012
            ]
          },
          "senQuatDot": {
            "description": "The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.",
            "maxItems": 4,
            "minItems": 4,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.02,
              0.01,
              0.012
            ]
          },
          "imageType": {
            "description": "The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP, MP4).",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "imageType"
          },
          "expStartTime": {
            "format": "date-time",
            "description": "Start time of the exposure, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "expEndTime": {
            "format": "date-time",
            "description": "End time of the exposure, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "imageSourceInfo": {
            "description": "String that uniquely identifies the data source.",
            "maxLength": 100,
            "type": "string",
            "example": "imageSourceInfo"
          },
          "topLeftStartAz": {
            "format": "double",
            "description": "The telescope pointing azimuth, in degrees, at the exposure start epoch.",
            "type": "number",
            "example": 146.321
          },
          "topLeftStartEl": {
            "format": "double",
            "description": "The telescope pointing elevation, in degrees, at the exposure start epoch.",
            "type": "number",
            "example": 146.321
          },
          "topLeftStopAz": {
            "format": "double",
            "description": "The telescope pointing azimuth, in degrees, at the exposure stop epoch.",
            "type": "number",
            "example": 3.7
          },
          "topLeftStopEl": {
            "format": "double",
            "description": "The telescope pointing elevation, in degrees, at the exposure stop epoch.",
            "type": "number",
            "example": 34.233
          },
          "imageSetId": {
            "description": "The user-defined set ID of a sequence of images.",
            "maxLength": 36,
            "type": "string",
            "example": "imageSetId"
          },
          "imageSetLength": {
            "format": "int32",
            "description": "The number of images in an image set.",
            "type": "integer",
            "example": 9
          },
          "sequenceId": {
            "format": "int32",
            "description": "The sequence ID of an image within an image set.",
            "type": "integer",
            "example": 1
          },
          "frameFOVWidth": {
            "format": "double",
            "description": "Field Of View frame width, in degrees.",
            "type": "number",
            "example": 21.23
          },
          "frameFOVHeight": {
            "format": "double",
            "description": "Field Of View frame height, in degrees.",
            "type": "number",
            "example": 21.23
          },
          "pixelFOVWidth": {
            "format": "double",
            "description": "Field Of View pixel width, in degrees.",
            "type": "number",
            "example": 321.123
          },
          "pixelFOVHeight": {
            "format": "double",
            "description": "Field Of View pixel height, in degrees.",
            "type": "number",
            "example": 321.123
          },
          "frameWidthPixels": {
            "format": "int32",
            "description": "Frame width of the image, in number of pixels.",
            "type": "integer",
            "example": 1
          },
          "frameHeightPixels": {
            "format": "int32",
            "description": "Frame height of the image, in number of pixels.",
            "type": "integer",
            "example": 1
          },
          "pixelBitDepth": {
            "format": "int32",
            "description": "Bit depth of the image, in number of pixels.",
            "type": "integer",
            "example": 1
          },
          "annotationKey": {
            "description": "Reference to an annotation document associated with this image.",
            "maxLength": 128,
            "type": "string",
            "example": "annotationKey"
          },
          "calibrationKey": {
            "description": "Reference to a calibration document associated with this image.",
            "maxLength": 128,
            "type": "string",
            "example": "calibrationKey"
          },
          "filename": {
            "description": "Name of the uploaded image file.",
            "maxLength": 128,
            "type": "string",
            "example": "filename.jpg"
          },
          "filesize": {
            "format": "int64",
            "description": "Size of the image file, in bytes.",
            "type": "integer",
            "example": 371945
          },
          "checksumValue": {
            "description": "MD5 value of the file. The ingest/create operation will automatically generate the value.",
            "maxLength": 256,
            "type": "string",
            "readOnly": true,
            "example": "checksumValue"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "description": {
            "description": "Optional name/description associated with this image.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "description"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "eoObservations": {
            "description": "Collection of linked EOObservations.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EOObservation_Full"
            }
          }
        }
      },
      "SkyImagery_Ingest": {
        "description": "Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP, MP4). Binary content must be downloaded individually by ID using the 'getFile' operation.",
        "required": [
          "classificationMarking",
          "imageType",
          "expStartTime",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SKYIMAGERY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "idOnOrbit": {
            "description": "Optional identifier of the target on-orbit object, if correlated.",
            "maxLength": 36,
            "type": "string",
            "readOnly": true,
            "example": "44920"
          },
          "origObjectId": {
            "description": "Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.",
            "maxLength": 64,
            "type": "string",
            "example": "X15-23452"
          },
          "idSOISet": {
            "description": "Optional unique identifier of the SOI Observation Set associated with this image.",
            "maxLength": 36,
            "type": "string",
            "example": "531093d0-e9b0-475b-687aeeefefd9"
          },
          "idAttitudeSet": {
            "description": "Optional identifier of the AttitudeSet data record describing the orientation of an object body.",
            "maxLength": 36,
            "type": "string",
            "example": "d039ba29-52f4-4839-8a8f-e85fa416aec5"
          },
          "idSensor": {
            "description": "Unique identifier of the reporting sensor.",
            "maxLength": 36,
            "type": "string",
            "example": "420"
          },
          "satNo": {
            "format": "int32",
            "description": "Catalog number of the target on-orbit object.",
            "type": "integer",
            "example": 25544
          },
          "origSensorId": {
            "description": "Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.",
            "maxLength": 64,
            "type": "string",
            "example": "origSensorId"
          },
          "senlat": {
            "format": "double",
            "description": "Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
            "maximum": 90,
            "minimum": -90,
            "type": "number",
            "example": -33.283048
          },
          "senlon": {
            "format": "double",
            "description": "Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
            "maximum": 180,
            "minimum": -180,
            "type": "number",
            "example": 149.372549
          },
          "senalt": {
            "format": "double",
            "description": "Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.",
            "type": "number",
            "example": 14.483619321
          },
          "senx": {
            "format": "double",
            "description": "Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.",
            "type": "number",
            "example": 14.52
          },
          "seny": {
            "format": "double",
            "description": "Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.",
            "type": "number",
            "example": 32.41
          },
          "senz": {
            "format": "double",
            "description": "Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.",
            "type": "number",
            "example": 376.12
          },
          "senQuat": {
            "description": "The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.",
            "maxItems": 4,
            "minItems": 4,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.02,
              0.01,
              0.012
            ]
          },
          "senQuatDot": {
            "description": "The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.",
            "maxItems": 4,
            "minItems": 4,
            "type": "array",
            "items": {
              "format": "double",
              "type": "number"
            },
            "example": [
              0.03,
              0.02,
              0.01,
              0.012
            ]
          },
          "imageType": {
            "description": "The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP, MP4).",
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "example": "imageType"
          },
          "expStartTime": {
            "format": "date-time",
            "description": "Start time of the exposure, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "expEndTime": {
            "format": "date-time",
            "description": "End time of the exposure, in ISO 8601 UTC format with microsecond precision.",
            "type": "string",
            "example": "2021-01-01T01:01:01.123456Z"
          },
          "imageSourceInfo": {
            "description": "String that uniquely identifies the data source.",
            "maxLength": 100,
            "type": "string",
            "example": "imageSourceInfo"
          },
          "topLeftStartAz": {
            "format": "double",
            "description": "The telescope pointing azimuth, in degrees, at the exposure start epoch.",
            "type": "number",
            "example": 146.321
          },
          "topLeftStartEl": {
            "format": "double",
            "description": "The telescope pointing elevation, in degrees, at the exposure start epoch.",
            "type": "number",
            "example": 146.321
          },
          "topLeftStopAz": {
            "format": "double",
            "description": "The telescope pointing azimuth, in degrees, at the exposure stop epoch.",
            "type": "number",
            "example": 3.7
          },
          "topLeftStopEl": {
            "format": "double",
            "description": "The telescope pointing elevation, in degrees, at the exposure stop epoch.",
            "type": "number",
            "example": 34.233
          },
          "imageSetId": {
            "description": "The user-defined set ID of a sequence of images.",
            "maxLength": 36,
            "type": "string",
            "example": "imageSetId"
          },
          "imageSetLength": {
            "format": "int32",
            "description": "The number of images in an image set.",
            "type": "integer",
            "example": 9
          },
          "sequenceId": {
            "format": "int32",
            "description": "The sequence ID of an image within an image set.",
            "type": "integer",
            "example": 1
          },
          "frameFOVWidth": {
            "format": "double",
            "description": "Field Of View frame width, in degrees.",
            "type": "number",
            "example": 21.23
          },
          "frameFOVHeight": {
            "format": "double",
            "description": "Field Of View frame height, in degrees.",
            "type": "number",
            "example": 21.23
          },
          "pixelFOVWidth": {
            "format": "double",
            "description": "Field Of View pixel width, in degrees.",
            "type": "number",
            "example": 321.123
          },
          "pixelFOVHeight": {
            "format": "double",
            "description": "Field Of View pixel height, in degrees.",
            "type": "number",
            "example": 321.123
          },
          "frameWidthPixels": {
            "format": "int32",
            "description": "Frame width of the image, in number of pixels.",
            "type": "integer",
            "example": 1
          },
          "frameHeightPixels": {
            "format": "int32",
            "description": "Frame height of the image, in number of pixels.",
            "type": "integer",
            "example": 1
          },
          "pixelBitDepth": {
            "format": "int32",
            "description": "Bit depth of the image, in number of pixels.",
            "type": "integer",
            "example": 1
          },
          "annotationKey": {
            "description": "Reference to an annotation document associated with this image.",
            "maxLength": 128,
            "type": "string",
            "example": "annotationKey"
          },
          "calibrationKey": {
            "description": "Reference to a calibration document associated with this image.",
            "maxLength": 128,
            "type": "string",
            "example": "calibrationKey"
          },
          "filename": {
            "description": "Name of the uploaded image file.",
            "maxLength": 128,
            "type": "string",
            "example": "filename.jpg"
          },
          "filesize": {
            "format": "int64",
            "description": "Size of the image file, in bytes.",
            "type": "integer",
            "example": 371945
          },
          "checksumValue": {
            "description": "MD5 value of the file. The ingest/create operation will automatically generate the value.",
            "maxLength": 256,
            "type": "string",
            "readOnly": true,
            "example": "checksumValue"
          },
          "transactionId": {
            "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
            "maxLength": 64,
            "type": "string",
            "example": "a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "PROVIDER_TAG1",
              "PROVIDER_TAG2"
            ]
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "sourceDL": {
            "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "AXE"
          },
          "description": {
            "description": "Optional name/description associated with this image.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "description"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "eoObservations": {
            "description": "Collection of linked EOObservations.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EOObservation_Ingest"
            }
          }
        }
      },
      "SolarArray_Full": {
        "description": "Model representation of information on on-orbit/spacecraft solar arrays. A spacecraft may have multiple solar arrays and each solar array can have multiple 'details' records compiled by different sources.",
        "required": [
          "name",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "name": {
            "description": "Solar Array name.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "Solar1"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "solarArrayDetails": {
            "description": "Read-only collection of additional SolarArrayDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/solararraydetails operations.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolarArrayDetails_Full"
            },
            "readOnly": true
          }
        }
      },
      "SolarArrayDetails_Full": {
        "description": "Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.",
        "required": [
          "idSolarArray",
          "classificationMarking",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAYDETAILS-ID"
          },
          "idSolarArray": {
            "description": "Unique identifier of the parent SolarArray.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SOLARARRAY-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "type": {
            "description": "Type of solar array (e.g. U Shaped).",
            "maxLength": 64,
            "type": "string",
            "example": "U Shaped"
          },
          "technology": {
            "description": "Solar array technology (e.g. Ga-As).",
            "maxLength": 64,
            "type": "string",
            "example": "Ga-As"
          },
          "junctionTechnology": {
            "description": "Solar array junction technology (e.g. Triple).",
            "maxLength": 64,
            "type": "string",
            "example": "Triple"
          },
          "manufacturerOrgId": {
            "description": "Unique identifier of the organization that manufactures the solar array.",
            "maxLength": 36,
            "type": "string",
            "example": "MANUFACTURERORG-ID"
          },
          "span": {
            "format": "double",
            "description": "Solar Array span in meters.",
            "type": "number",
            "example": 123.4
          },
          "area": {
            "format": "double",
            "description": "Solar Array area in square meters.",
            "type": "number",
            "example": 123.4
          },
          "description": {
            "description": "Solar array description/notes.",
            "maxLength": 2147483647,
            "type": "string",
            "example": "Example notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "ORIG"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "tags": {
            "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "TAG1",
              "TAG2"
            ]
          },
          "manufacturerOrg": {
            "$ref": "#/components/schemas/Organization_Full"
          }
        }
      },
      "Status_Full": {
        "description": "Status for a particular Entity. An entity may have multiple status records collected by various sources.",
        "required": [
          "classificationMarking",
          "idEntity",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "STATUS-ID"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "derivedFrom": {
            "description": "The sources or SCG references from which the classification of this data is derived.",
            "maxLength": 128,
            "type": "string",
            "example": "SOME_SOURCE"
          },
          "declassificationDate": {
            "format": "date-time",
            "description": "The declassification date of this data, in ISO 8601 UTC format.",
            "type": "string",
            "example": "2021-01-01T01:02:02.123Z"
          },
          "declassificationString": {
            "description": "Declassification string of this data.",
            "maxLength": 256,
            "type": "string",
            "example": "U"
          },
          "idEntity": {
            "description": "Unique identifier of the parent entity.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "ENTITY-ID"
          },
          "state": {
            "description": "Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).",
            "maxLength": 16,
            "enum": [
              "UNKNOWN",
              "DEAD",
              "ACTIVE",
              "RF ACTIVE",
              "STANDBY"
            ],
            "type": "string",
            "example": "ACTIVE"
          },
          "sysCap": {
            "description": "System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).",
            "maxLength": 3,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "opsCap": {
            "description": "Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).",
            "maxLength": 3,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "subStatusCollection": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubStatus_Full"
            }
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "notes": {
            "description": "Comments describing the status creation and or updates to an entity.",
            "type": "string",
            "example": "Example Notes"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was last updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          }
        }
      },
      "SubStatus_Full": {
        "description": "Additional sub-system or capability status for the parent entity.",
        "required": [
          "type",
          "classificationMarking",
          "statusId",
          "status",
          "notes",
          "source",
          "dataMode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the record, auto-generated by the system.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "SUBSTATUS-ID"
          },
          "type": {
            "description": "Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "mwCap",
              "ssCap",
              "mdCap"
            ],
            "type": "string",
            "example": "mdCap"
          },
          "classificationMarking": {
            "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "example": "U"
          },
          "statusId": {
            "description": "Id of the parent status.",
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "example": "REF-STATUS-ID"
          },
          "status": {
            "description": "Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.",
            "maxLength": 16,
            "minLength": 1,
            "enum": [
              "FMC",
              "NMC",
              "PMC",
              "UNK"
            ],
            "type": "string",
            "example": "FMC"
          },
          "notes": {
            "description": "Descriptions and/or comments associated with the sub-status.",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "example": "Sample Notes"
          },
          "source": {
            "description": "Source of the data.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "example": "Bluestaq"
          },
          "origin": {
            "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
            "maxLength": 64,
            "type": "string",
            "example": "THIRD_PARTY_DATASOURCE"
          },
          "origNetwork": {
            "description": "The originating source network on which this record was created, auto-populated by the system.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "TST1"
          },
          "dataMode": {
            "description": "Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:\n\nEXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.\n\nREAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.\n\nSIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.\n\nTEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.\n\n",
            "maxLength": 32,
            "minLength": 1,
            "enum": [
              "REAL",
              "TEST",
              "SIMULATED",
              "EXERCISE"
            ],
            "type": "string",
            "example": "TEST"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Time the row was created in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "createdBy": {
            "description": "Application user who created the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          },
          "updatedAt": {
            "format": "date-time",
            "description": "Time the row was updated in the database, auto-populated by the system.",
            "type": "string",
            "readOnly": true,
            "example": "2018-01-01T16:00:00.123Z"
          },
          "updatedBy": {
            "description": "Application user who updated the row in the database, auto-populated by the system.",
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "readOnly": true,
            "example": "some.user"
          }
        }
      }
    }
  }
}