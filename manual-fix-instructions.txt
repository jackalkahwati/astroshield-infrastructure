# Manual Fix Instructions for 502 Bad Gateway Error

To fix the 502 Bad Gateway error on astroshield.sdataplab.com, follow these steps on your server:

## Step 1: Create or Update Nginx Config File

Create a new file with the updated configuration:

```bash
sudo nano /etc/nginx/conf.d/astroshield.conf
```

Copy and paste the following configuration:

```
server {
    listen 80;
    server_name astroshield.sdataplab.com;
    
    # Redirect all HTTP requests to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name astroshield.sdataplab.com;
    
    # SSL configuration
    ssl_certificate /etc/nginx/ssl/astroshield.crt;
    ssl_certificate_key /etc/nginx/ssl/astroshield.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Trust headers from upstream proxy
    set_real_ip_from 0.0.0.0/0;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    
    # Serve static HTML for root path
    location = / {
        root /var/www/html;
        try_files /index-static.html =404;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # Frontend static files - fallback to static files if Docker container is unavailable
    location / {
        # First try Docker frontend container
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300;
        proxy_connect_timeout 30;
        proxy_send_timeout 300;
        
        # If proxy fails, serve static files as fallback
        proxy_intercept_errors on;
        error_page 502 503 504 = @fallback;
    }
    
    # Fallback to static files if Docker container is down
    location @fallback {
        root /var/www/html;
        index index.html index-static.html;
        try_files $uri $uri/ /index-static.html =404;
        
        # Add headers to avoid caching issues
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # API endpoints proxy to Docker container
    location /api/ {
        proxy_pass http://localhost:3001/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300;
        proxy_connect_timeout 30;
        proxy_send_timeout 300;
        
        proxy_intercept_errors on;
        error_page 502 503 504 = @api_fallback;
    }
    
    # API fallback for error handling
    location @api_fallback {
        return 503 '{"error": "API service temporarily unavailable", "status": "error"}';
        add_header Content-Type application/json;
    }

    # Health endpoint
    location /health {
        proxy_pass http://localhost:3001/health;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300;
        proxy_connect_timeout 30;
        proxy_send_timeout 300;
        
        proxy_intercept_errors on;
        error_page 502 503 504 = @health_fallback;
    }
    
    # Health fallback
    location @health_fallback {
        return 503 '{"status": "service unavailable"}';
        add_header Content-Type application/json;
    }

    # Status endpoint
    location /status {
        proxy_pass http://localhost:3001/status;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300;
        proxy_connect_timeout 30;
        proxy_send_timeout 300;
        
        proxy_intercept_errors on;
        error_page 502 503 504 = @status_fallback;
    }
    
    # Status fallback
    location @status_fallback {
        return 503 '{"status": "service unavailable", "message": "Status service is temporarily unavailable"}';
        add_header Content-Type application/json;
    }
}
```

## Step 2: Verify the Nginx Configuration

```bash
sudo nginx -t
```

If the configuration test passes, proceed to the next step. If there are errors, check the messages and fix the issues.

## Step 3: Restart Nginx to Apply Changes

```bash
sudo systemctl restart nginx
```

## Step 4: Verify Backend Service is Running

Check the status of your AstroShield service:

```bash
sudo systemctl status astroshield
```

If it's not running, start it:

```bash
sudo systemctl start astroshield
```

## Step 5: Verify the Services are Listening on the Correct Ports

```bash
sudo ss -tulpn | grep -E '3000|3001'
```

You should see processes listening on ports 3000 (frontend) and 3001 (backend).

## Step 6: Check Nginx Error Logs if Issues Persist

```bash
sudo tail -f /var/log/nginx/error.log
```

## Explanation of Changes

The key change in this configuration is updating all backend endpoints to point to port 3001 instead of port 8080:

1. Changed `/api/` proxy from port 8080 to port 3001
2. Changed `/health` proxy from port 8080 to port 3001
3. Changed `/status` proxy from port 8080 to port 3001

This ensures Nginx is sending requests to the correct backend port where your minimal_server.py is actually running.