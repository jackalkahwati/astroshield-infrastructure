server {
    listen 80;
    server_name astroshield.sdataplab.com localhost;
    
    # Trust headers from upstream proxy
    set_real_ip_from 0.0.0.0/0;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    
    # Serve static HTML for root path
    location = / {
        root /var/www/html;
        try_files /index-static.html =404;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # Frontend static files - fallback to static files if Docker container is unavailable
    location / {
        # First try Docker frontend container
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300;
        proxy_connect_timeout 30;
        proxy_send_timeout 300;
        
        # If proxy fails, serve static files as fallback
        proxy_intercept_errors on;
        error_page 502 503 504 = @fallback;
    }
    
    # Fallback to static files if Docker container is down
    location @fallback {
        root /var/www/html;
        index index.html index-static.html;
        try_files $uri $uri/ /index-static.html =404;
        
        # Add headers to avoid caching issues
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # API endpoints proxy to Docker container
    location /api/ {
        proxy_pass http://localhost:8080/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300;
        proxy_connect_timeout 30;
        proxy_send_timeout 300;
        
        proxy_intercept_errors on;
        error_page 502 503 504 = @api_fallback;
    }
    
    # API fallback for error handling
    location @api_fallback {
        return 503 '{"error": "API service temporarily unavailable", "status": "error"}';
        add_header Content-Type application/json;
    }

    # Health endpoint
    location /health {
        proxy_pass http://localhost:8080/health;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300;
        proxy_connect_timeout 30;
        proxy_send_timeout 300;
        
        proxy_intercept_errors on;
        error_page 502 503 504 = @health_fallback;
    }
    
    # Health fallback
    location @health_fallback {
        return 503 '{"status": "service unavailable"}';
        add_header Content-Type application/json;
    }

    # Status endpoint
    location /status {
        proxy_pass http://localhost:8080/api/status;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300;
        proxy_connect_timeout 30;
        proxy_send_timeout 300;
        
        proxy_intercept_errors on;
        error_page 502 503 504 = @status_fallback;
    }
    
    # Status fallback
    location @status_fallback {
        return 503 '{"status": "service unavailable", "message": "Status service is temporarily unavailable"}';
        add_header Content-Type application/json;
    }
} 